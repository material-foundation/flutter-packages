// GENERATED CODE - DO NOT EDIT

// Copyright 2019 The Flutter team. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// WARNING: This package is experimental and should not be used in production.

import 'dart:ui' as ui;
import 'package:flutter/material.dart';
import 'src/google_fonts_base.dart';
import 'src/google_fonts_descriptor.dart';
import 'src/google_fonts_variant.dart';

/// A collection of properties used to specify custom behavior of the GoogleFonts library.
class _Config {
  /// Whether or not the GoogleFonts library can make requests to fonts.google.com to retrieve font
  /// files.
  var allowHttp = true;
}

class GoogleFonts {
  /// Configuration for the [GoogleFonts] library.
  ///
  /// Use this to define custom behavior of the GoogleFonts library in your app. For example, if you
  /// do not want the GoogleFonts library to make any http requests for fonts, add the following
  /// snippet to your app's `main` method.
  ///
  /// ```dart
  /// GoogleFonts.config.allowHttp = false;
  /// ```
  static final config = _Config();

  /// Applies the ABeeZee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ABeeZee
  static TextStyle aBeeZee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2ff99dd1bd594806e1b9f7423a75f1c1dfbbbcddb2698b3ab91f5709b1b90caf',
        29632,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8654a417521bf7fa4ffd1a7f7b62648648c5415ff0f7e0d53474e4436d049b7a',
        30984,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ABeeZee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the ABeeZee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ABeeZee
  static TextTheme aBeeZeeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aBeeZee(textStyle: textTheme?.display4),
      display3: GoogleFonts.aBeeZee(textStyle: textTheme?.display3),
      display2: GoogleFonts.aBeeZee(textStyle: textTheme?.display2),
      display1: GoogleFonts.aBeeZee(textStyle: textTheme?.display1),
      headline: GoogleFonts.aBeeZee(textStyle: textTheme?.headline),
      title: GoogleFonts.aBeeZee(textStyle: textTheme?.title),
      subhead: GoogleFonts.aBeeZee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aBeeZee(textStyle: textTheme?.body2),
      body1: GoogleFonts.aBeeZee(textStyle: textTheme?.body1),
      caption: GoogleFonts.aBeeZee(textStyle: textTheme?.caption),
      button: GoogleFonts.aBeeZee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aBeeZee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aBeeZee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Abel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abel
  static TextStyle abel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '37a44f872ce09b8a93244abfaf3741aa8e4da7cbf64de118635a7cf1c7bc1d5e',
        34924,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Abel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Abel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abel
  static TextTheme abelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.abel(textStyle: textTheme?.display4),
      display3: GoogleFonts.abel(textStyle: textTheme?.display3),
      display2: GoogleFonts.abel(textStyle: textTheme?.display2),
      display1: GoogleFonts.abel(textStyle: textTheme?.display1),
      headline: GoogleFonts.abel(textStyle: textTheme?.headline),
      title: GoogleFonts.abel(textStyle: textTheme?.title),
      subhead: GoogleFonts.abel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.abel(textStyle: textTheme?.body2),
      body1: GoogleFonts.abel(textStyle: textTheme?.body1),
      caption: GoogleFonts.abel(textStyle: textTheme?.caption),
      button: GoogleFonts.abel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.abel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.abel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Abhaya Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abhaya+Libre
  static TextStyle abhayaLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f8e1a260e8a56f8cdb2e2401be9e3a6903026becbf134336b9c8f6b2e2490cd5',
        282252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ff52a780878fd838b81f8c96e548f49d7bbd4f92cb0a3dc68eb3f852ca3f3fd4',
        282512,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e3be63e1c52229673f453da3c6abd79dc0011d02fd57da38489880434556aa77',
        281648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1c7bdb109ab0e98ef91a41ec55825dcb97c2ea2e9274c67dde899104f5b59878',
        281252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9457be94f81fc73b59af3e850d0dcb91790d60078cbdc252da50881c615173aa',
        280484,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AbhayaLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Abhaya Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abhaya+Libre
  static TextTheme abhayaLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.abhayaLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.abhayaLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.abhayaLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.abhayaLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.abhayaLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.abhayaLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.abhayaLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.abhayaLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.abhayaLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.abhayaLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.abhayaLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.abhayaLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.abhayaLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Abril Fatface font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abril+Fatface
  static TextStyle abrilFatface({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2baf7b134013a2183457312f0d26115640d0171829d024dfb1466616a3ac789a',
        67316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AbrilFatface',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Abril Fatface font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abril+Fatface
  static TextTheme abrilFatfaceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.abrilFatface(textStyle: textTheme?.display4),
      display3: GoogleFonts.abrilFatface(textStyle: textTheme?.display3),
      display2: GoogleFonts.abrilFatface(textStyle: textTheme?.display2),
      display1: GoogleFonts.abrilFatface(textStyle: textTheme?.display1),
      headline: GoogleFonts.abrilFatface(textStyle: textTheme?.headline),
      title: GoogleFonts.abrilFatface(textStyle: textTheme?.title),
      subhead: GoogleFonts.abrilFatface(textStyle: textTheme?.subhead),
      body2: GoogleFonts.abrilFatface(textStyle: textTheme?.body2),
      body1: GoogleFonts.abrilFatface(textStyle: textTheme?.body1),
      caption: GoogleFonts.abrilFatface(textStyle: textTheme?.caption),
      button: GoogleFonts.abrilFatface(textStyle: textTheme?.button),
      subtitle: GoogleFonts.abrilFatface(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.abrilFatface(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aclonica font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aclonica
  static TextStyle aclonica({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e26afc4582406a86fc1e1b81aad6e16a03f9276419fa76e91b98f9e42d868cc8',
        68136,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aclonica',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aclonica font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aclonica
  static TextTheme aclonicaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aclonica(textStyle: textTheme?.display4),
      display3: GoogleFonts.aclonica(textStyle: textTheme?.display3),
      display2: GoogleFonts.aclonica(textStyle: textTheme?.display2),
      display1: GoogleFonts.aclonica(textStyle: textTheme?.display1),
      headline: GoogleFonts.aclonica(textStyle: textTheme?.headline),
      title: GoogleFonts.aclonica(textStyle: textTheme?.title),
      subhead: GoogleFonts.aclonica(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aclonica(textStyle: textTheme?.body2),
      body1: GoogleFonts.aclonica(textStyle: textTheme?.body1),
      caption: GoogleFonts.aclonica(textStyle: textTheme?.caption),
      button: GoogleFonts.aclonica(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aclonica(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aclonica(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Acme font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Acme
  static TextStyle acme({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f7d0b4054bd37012deca722e47899589c1d35302b51b2fd21ea83e7f3410bccd',
        23028,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Acme',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Acme font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Acme
  static TextTheme acmeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.acme(textStyle: textTheme?.display4),
      display3: GoogleFonts.acme(textStyle: textTheme?.display3),
      display2: GoogleFonts.acme(textStyle: textTheme?.display2),
      display1: GoogleFonts.acme(textStyle: textTheme?.display1),
      headline: GoogleFonts.acme(textStyle: textTheme?.headline),
      title: GoogleFonts.acme(textStyle: textTheme?.title),
      subhead: GoogleFonts.acme(textStyle: textTheme?.subhead),
      body2: GoogleFonts.acme(textStyle: textTheme?.body2),
      body1: GoogleFonts.acme(textStyle: textTheme?.body1),
      caption: GoogleFonts.acme(textStyle: textTheme?.caption),
      button: GoogleFonts.acme(textStyle: textTheme?.button),
      subtitle: GoogleFonts.acme(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.acme(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Actor font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Actor
  static TextStyle actor({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '417b785d001974cb097e1f84b068ed6f47fa9c5317bf90801a55709954b59350',
        42356,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Actor',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Actor font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Actor
  static TextTheme actorTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.actor(textStyle: textTheme?.display4),
      display3: GoogleFonts.actor(textStyle: textTheme?.display3),
      display2: GoogleFonts.actor(textStyle: textTheme?.display2),
      display1: GoogleFonts.actor(textStyle: textTheme?.display1),
      headline: GoogleFonts.actor(textStyle: textTheme?.headline),
      title: GoogleFonts.actor(textStyle: textTheme?.title),
      subhead: GoogleFonts.actor(textStyle: textTheme?.subhead),
      body2: GoogleFonts.actor(textStyle: textTheme?.body2),
      body1: GoogleFonts.actor(textStyle: textTheme?.body1),
      caption: GoogleFonts.actor(textStyle: textTheme?.caption),
      button: GoogleFonts.actor(textStyle: textTheme?.button),
      subtitle: GoogleFonts.actor(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.actor(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Adamina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Adamina
  static TextStyle adamina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c241502ff8869d44e310b4e1782d5ca6f53b2d1844593bb0a360e12af0ddfcb1',
        76672,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Adamina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Adamina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Adamina
  static TextTheme adaminaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.adamina(textStyle: textTheme?.display4),
      display3: GoogleFonts.adamina(textStyle: textTheme?.display3),
      display2: GoogleFonts.adamina(textStyle: textTheme?.display2),
      display1: GoogleFonts.adamina(textStyle: textTheme?.display1),
      headline: GoogleFonts.adamina(textStyle: textTheme?.headline),
      title: GoogleFonts.adamina(textStyle: textTheme?.title),
      subhead: GoogleFonts.adamina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.adamina(textStyle: textTheme?.body2),
      body1: GoogleFonts.adamina(textStyle: textTheme?.body1),
      caption: GoogleFonts.adamina(textStyle: textTheme?.caption),
      button: GoogleFonts.adamina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.adamina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.adamina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Advent Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Advent+Pro
  static TextStyle adventPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4041ce69b488624d0653057137ff69ead9c9496be2059ede6a5056fd48780850',
        46400,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '20f54f798dd883fc2fab8294006f8201f1deed59b0abd0ad6c6864bb0062eb47',
        46424,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '23462d311ba53dbeac614ad5c99742d75264652538c2aaaea50fa3f9a37c1111',
        46356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c7084224aa15f7d31683e67bc3107aa12f725f4d20a10e9b65bbcec912162191',
        46836,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '21feddd6602a8e2daf17501cb32c4b27a26b6a357f3652ad357008c8a90f1646',
        51004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '908b9b388605933b6e469878f17c52da7e2cd9cd6c4ec72a3e12aa5a9c3b9b79',
        50772,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '962b3ce8591b2ca225b23e65b3914233c576d21700e3f24c6b820230fe8424e0',
        55976,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AdventPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Advent Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Advent+Pro
  static TextTheme adventProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.adventPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.adventPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.adventPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.adventPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.adventPro(textStyle: textTheme?.headline),
      title: GoogleFonts.adventPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.adventPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.adventPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.adventPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.adventPro(textStyle: textTheme?.caption),
      button: GoogleFonts.adventPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.adventPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.adventPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aguafina Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aguafina+Script
  static TextStyle aguafinaScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '282b677fa945b70a3a5a57b8ffb8064638a07feb77edc68cf29591225bc7b5ce',
        47180,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AguafinaScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aguafina Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aguafina+Script
  static TextTheme aguafinaScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aguafinaScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.aguafinaScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.aguafinaScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.aguafinaScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.aguafinaScript(textStyle: textTheme?.headline),
      title: GoogleFonts.aguafinaScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.aguafinaScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aguafinaScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.aguafinaScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.aguafinaScript(textStyle: textTheme?.caption),
      button: GoogleFonts.aguafinaScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aguafinaScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aguafinaScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Akronim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Akronim
  static TextStyle akronim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bb077a1601fc7353abf83d6f7e667b5c1ff47a853f2a90f466be1dd738f4e6a1',
        107340,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Akronim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Akronim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Akronim
  static TextTheme akronimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.akronim(textStyle: textTheme?.display4),
      display3: GoogleFonts.akronim(textStyle: textTheme?.display3),
      display2: GoogleFonts.akronim(textStyle: textTheme?.display2),
      display1: GoogleFonts.akronim(textStyle: textTheme?.display1),
      headline: GoogleFonts.akronim(textStyle: textTheme?.headline),
      title: GoogleFonts.akronim(textStyle: textTheme?.title),
      subhead: GoogleFonts.akronim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.akronim(textStyle: textTheme?.body2),
      body1: GoogleFonts.akronim(textStyle: textTheme?.body1),
      caption: GoogleFonts.akronim(textStyle: textTheme?.caption),
      button: GoogleFonts.akronim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.akronim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.akronim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aladin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aladin
  static TextStyle aladin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '47e6aa68e0a6686d85005a8cd4e3c3055dc4828dc3b49d69fdf88f38491c8ae2',
        42112,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aladin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aladin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aladin
  static TextTheme aladinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aladin(textStyle: textTheme?.display4),
      display3: GoogleFonts.aladin(textStyle: textTheme?.display3),
      display2: GoogleFonts.aladin(textStyle: textTheme?.display2),
      display1: GoogleFonts.aladin(textStyle: textTheme?.display1),
      headline: GoogleFonts.aladin(textStyle: textTheme?.headline),
      title: GoogleFonts.aladin(textStyle: textTheme?.title),
      subhead: GoogleFonts.aladin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aladin(textStyle: textTheme?.body2),
      body1: GoogleFonts.aladin(textStyle: textTheme?.body1),
      caption: GoogleFonts.aladin(textStyle: textTheme?.caption),
      button: GoogleFonts.aladin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aladin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aladin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aldrich font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aldrich
  static TextStyle aldrich({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e288c81eacbaee70be6e11a25f4fb3bdaffcc0ea0449f285c94fc558e64335f4',
        27932,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aldrich',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aldrich font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aldrich
  static TextTheme aldrichTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aldrich(textStyle: textTheme?.display4),
      display3: GoogleFonts.aldrich(textStyle: textTheme?.display3),
      display2: GoogleFonts.aldrich(textStyle: textTheme?.display2),
      display1: GoogleFonts.aldrich(textStyle: textTheme?.display1),
      headline: GoogleFonts.aldrich(textStyle: textTheme?.headline),
      title: GoogleFonts.aldrich(textStyle: textTheme?.title),
      subhead: GoogleFonts.aldrich(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aldrich(textStyle: textTheme?.body2),
      body1: GoogleFonts.aldrich(textStyle: textTheme?.body1),
      caption: GoogleFonts.aldrich(textStyle: textTheme?.caption),
      button: GoogleFonts.aldrich(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aldrich(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aldrich(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alef font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alef
  static TextStyle alef({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a50dedb5215d98f65036893675ded42762d4c7bdae624c71adb1ea584f5a1467',
        58300,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'acbe7d381fcdbd3bca38351290cba306a1dde6549d74fbdef431ee9fcb60030d',
        59936,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alef',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alef font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alef
  static TextTheme alefTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alef(textStyle: textTheme?.display4),
      display3: GoogleFonts.alef(textStyle: textTheme?.display3),
      display2: GoogleFonts.alef(textStyle: textTheme?.display2),
      display1: GoogleFonts.alef(textStyle: textTheme?.display1),
      headline: GoogleFonts.alef(textStyle: textTheme?.headline),
      title: GoogleFonts.alef(textStyle: textTheme?.title),
      subhead: GoogleFonts.alef(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alef(textStyle: textTheme?.body2),
      body1: GoogleFonts.alef(textStyle: textTheme?.body1),
      caption: GoogleFonts.alef(textStyle: textTheme?.caption),
      button: GoogleFonts.alef(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alef(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alef(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alegreya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya
  static TextStyle alegreya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '530d78cba23c5d8e261ae9447b431e1fa550f9dc6563540a0c400be3f7ee88ab',
        63708,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'efba5f9b4495a2e911ec871cc4dfebb5dba60bc72d643c0dd346e8f90513f81a',
        61596,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c00ad52d215d793be827a98a0661e13bbd3276c96c6aa5e6c8d71c9487a3da03',
        67268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'bd912b8f7b092f81fc94ee9f3b769e57ecbb1a2443bfce7d405d2ad0c48c04b4',
        65700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f2d4a4c114f8e7ad762e764046f117bf954b1ba7797bbe6b6d754decc9bdbf99',
        62328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '01804c5bcb6aedbda393491d82c14328987c7fb66a6ef8c8313aed5d683d3dad',
        60620,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alegreya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alegreya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya
  static TextTheme alegreyaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alegreya(textStyle: textTheme?.display4),
      display3: GoogleFonts.alegreya(textStyle: textTheme?.display3),
      display2: GoogleFonts.alegreya(textStyle: textTheme?.display2),
      display1: GoogleFonts.alegreya(textStyle: textTheme?.display1),
      headline: GoogleFonts.alegreya(textStyle: textTheme?.headline),
      title: GoogleFonts.alegreya(textStyle: textTheme?.title),
      subhead: GoogleFonts.alegreya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alegreya(textStyle: textTheme?.body2),
      body1: GoogleFonts.alegreya(textStyle: textTheme?.body1),
      caption: GoogleFonts.alegreya(textStyle: textTheme?.caption),
      button: GoogleFonts.alegreya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alegreya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alegreya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alegreya SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+SC
  static TextStyle alegreyaSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7449fd0507a0808ae452506eb8fb2fb46b4abe72f8f5d982b25c963ba93bc094',
        72748,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6b36a9c6614f3cea8c2846f74b6823f8d3c5edd8a8b2319eccae142e3bb42738',
        73048,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '16e159f79c1929fa884f232e47d45cb0cc16a55a22b127359024868245f4a2d4',
        71836,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6920f9042274d5d0b37753d233b86c7066a47d1cb94015d70ecbb9a76359faa7',
        72428,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd591a36a0d78f0315b16c23983d84d6d8b4bbf8ea5b5879019cad423941d5990',
        70500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd312d023b86792b3a0f7cd9594498720cdb9feb7bec946d75a3f25f6580c19c7',
        71700,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlegreyaSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alegreya SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+SC
  static TextTheme alegreyaSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alegreyaSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.alegreyaSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.alegreyaSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.alegreyaSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.alegreyaSC(textStyle: textTheme?.headline),
      title: GoogleFonts.alegreyaSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.alegreyaSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alegreyaSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.alegreyaSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.alegreyaSC(textStyle: textTheme?.caption),
      button: GoogleFonts.alegreyaSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alegreyaSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alegreyaSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alegreya Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+Sans
  static TextStyle alegreyaSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4e4fc2370a575c44ada0a88565af306c9e5f6f863cd3e594f68fbecb64d6eb45',
        86800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'dfad029fd95bc8e1e6f4aff5ca9a40f7ee01b7c42436068b1a609af1036de968',
        75952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f413bb7452d6c3127865026e765917685dde894f8130417ee32c5c22d3332a5a',
        88928,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '53c675ca8ca26437bfdef9475e6be6a31d8f390904f2a25dc7f71ecacf749525',
        76244,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5186af372dbc9306a0390c6a53c2b3ed7e398bf7e19390e4115779d9d4dcb9e0',
        90044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a1cf80b2ffea7f7a74c290c886e0853612aa20f2f2942a11b6221973a8b1125a',
        75740,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b54080b02a55195adec0aed32ecb384095ddfef221504059e15682a59709d9a5',
        90304,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '16b83ef0510db5d9b7adeb15a6bf505975df75012e3f04118c8384165bae4c4f',
        75644,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'baf6cfdcdaeaff8ae1997ba5a87f7c43b4823b8e094097eb354fdaeb531c610e',
        90308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c3ea4ab25245b87d94c68e797ee68e472bf893023027f57d0dfb6aef204e650d',
        75464,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2313ece3a1be01342c2f2b902904ce864b05c9ecf3a72e96580c84ed124b370c',
        90492,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '296f24dc4713815e4ea5f25a60e938c00c6d94678ba90f140c4c4dcd5d3dae42',
        75552,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c1ae94a74aa4998c1ed777107095512b795dd19783a838e9eaffca2382405bf3',
        90324,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '63fa7d406f209d33ac9020dc3209f61bda016b2e851b369e2475f6c77bd65111',
        75748,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlegreyaSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alegreya Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+Sans
  static TextTheme alegreyaSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alegreyaSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.alegreyaSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.alegreyaSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.alegreyaSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.alegreyaSans(textStyle: textTheme?.headline),
      title: GoogleFonts.alegreyaSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.alegreyaSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alegreyaSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.alegreyaSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.alegreyaSans(textStyle: textTheme?.caption),
      button: GoogleFonts.alegreyaSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alegreyaSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alegreyaSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alegreya Sans SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+Sans+SC
  static TextStyle alegreyaSansSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7f5b4f9e7531121c2163e92598f24222cdef538a04352553731f0c81f69c4227',
        77260,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1a8c6b334dbb0663e1b509d268363d557f9d231f702c2fb6ffe0727c0bb374b5',
        67308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0d94b7e8e30244280988269fbefbf776d08ff9ad0be6df4f620a6a5b7e0362f0',
        79488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ccd17db40859ba985ad048cea705168d600d36d89c00086787c0e0c4b3d82350',
        67492,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2487f405a054a83c784021b2c8e860860b9243fb34fc64b7a5fd2250d68bf4f9',
        80884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b427017865c854fea91f74c2c65b73010299f090c4ce77e0854fac9a1de8bc0a',
        67168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'edb603dab26042252c435e746201e0f2f353dd09865130082f25072fb0969e0b',
        81296,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'de77ecc3bedb1b421aebae8d44d23fc290cb7f252c8cd7eea6cc478ee69e13ec',
        67248,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c46b10c450739d774b11b6e3d2f51e421d416b9a8174d249ad85973c5018894c',
        81476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '16e2233f43d03898a785024de868496150dfcba5754cec33d4e349b92c857453',
        67060,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '356b90a20e5818313f51f03a05985f5c63745944a01aa92b78804caa0b7a4268',
        81900,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '85eb333661be027f374e08a28cc4b0c394fa0052fc64197c5a96409168532e87',
        67216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '41a1bac96732155ce8415a0155d80de58383ab4223de540ad68c383f51b3cb5e',
        81560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7100fdd6d991e596021a3bc2578fd4eb74fb5bd5d7dfc6c30dcde981e6a27281',
        67304,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlegreyaSansSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alegreya Sans SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+Sans+SC
  static TextTheme alegreyaSansSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.headline),
      title: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.caption),
      button: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aleo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aleo
  static TextStyle aleo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8844034f7614859b836238cb530853c190b011335edbfc9fd9dbb15669134bcb',
        35800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9d41d1b8e554c18ef31b39cd96576f58048ab1dacd1e03dd349c3f471917ab43',
        45124,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4124c4a19546d618079ccad928418735907b0eff5c68a0faf16b8fd3ec1d5bc2',
        65892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7662bf685a6bddd2908c8392229aac54817f3666c9915cec596880a13eef66c9',
        68788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd20df7d3bc69a847115b4c7f6de4db4d8aa878a8ad3ccc70a83b9beb9d29826c',
        60744,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0277e97f9c04c3812b3987b151b56953251d09574f7f649b461074b2439a4026',
        64516,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aleo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aleo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aleo
  static TextTheme aleoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aleo(textStyle: textTheme?.display4),
      display3: GoogleFonts.aleo(textStyle: textTheme?.display3),
      display2: GoogleFonts.aleo(textStyle: textTheme?.display2),
      display1: GoogleFonts.aleo(textStyle: textTheme?.display1),
      headline: GoogleFonts.aleo(textStyle: textTheme?.headline),
      title: GoogleFonts.aleo(textStyle: textTheme?.title),
      subhead: GoogleFonts.aleo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aleo(textStyle: textTheme?.body2),
      body1: GoogleFonts.aleo(textStyle: textTheme?.body1),
      caption: GoogleFonts.aleo(textStyle: textTheme?.caption),
      button: GoogleFonts.aleo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aleo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aleo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alex Brush font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alex+Brush
  static TextStyle alexBrush({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eb8044f112b9878ec59f0825d91a9f011fc4925ce2272737c02ce2be161c3efd',
        48660,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlexBrush',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alex Brush font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alex+Brush
  static TextTheme alexBrushTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alexBrush(textStyle: textTheme?.display4),
      display3: GoogleFonts.alexBrush(textStyle: textTheme?.display3),
      display2: GoogleFonts.alexBrush(textStyle: textTheme?.display2),
      display1: GoogleFonts.alexBrush(textStyle: textTheme?.display1),
      headline: GoogleFonts.alexBrush(textStyle: textTheme?.headline),
      title: GoogleFonts.alexBrush(textStyle: textTheme?.title),
      subhead: GoogleFonts.alexBrush(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alexBrush(textStyle: textTheme?.body2),
      body1: GoogleFonts.alexBrush(textStyle: textTheme?.body1),
      caption: GoogleFonts.alexBrush(textStyle: textTheme?.caption),
      button: GoogleFonts.alexBrush(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alexBrush(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alexBrush(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alfa Slab One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alfa+Slab+One
  static TextStyle alfaSlabOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7da478a94cb0f5cdf81dc70a08204fc3d9b097463f65a9108151851580dd9151',
        64824,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlfaSlabOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alfa Slab One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alfa+Slab+One
  static TextTheme alfaSlabOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alfaSlabOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.alfaSlabOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.alfaSlabOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.alfaSlabOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.alfaSlabOne(textStyle: textTheme?.headline),
      title: GoogleFonts.alfaSlabOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.alfaSlabOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alfaSlabOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.alfaSlabOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.alfaSlabOne(textStyle: textTheme?.caption),
      button: GoogleFonts.alfaSlabOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alfaSlabOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alfaSlabOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alice font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alice
  static TextStyle alice({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b09d7119f6ceba6b3b798683927d8bd51757498f4af762dc4509d1c76aafc6a3',
        95148,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alice',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alice font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alice
  static TextTheme aliceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alice(textStyle: textTheme?.display4),
      display3: GoogleFonts.alice(textStyle: textTheme?.display3),
      display2: GoogleFonts.alice(textStyle: textTheme?.display2),
      display1: GoogleFonts.alice(textStyle: textTheme?.display1),
      headline: GoogleFonts.alice(textStyle: textTheme?.headline),
      title: GoogleFonts.alice(textStyle: textTheme?.title),
      subhead: GoogleFonts.alice(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alice(textStyle: textTheme?.body2),
      body1: GoogleFonts.alice(textStyle: textTheme?.body1),
      caption: GoogleFonts.alice(textStyle: textTheme?.caption),
      button: GoogleFonts.alice(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alice(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alice(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alike font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alike
  static TextStyle alike({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b9683edf916072397bd15b9b312ff78533f85b4ac5598b5867733fb5670ed534',
        64584,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alike',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alike font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alike
  static TextTheme alikeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alike(textStyle: textTheme?.display4),
      display3: GoogleFonts.alike(textStyle: textTheme?.display3),
      display2: GoogleFonts.alike(textStyle: textTheme?.display2),
      display1: GoogleFonts.alike(textStyle: textTheme?.display1),
      headline: GoogleFonts.alike(textStyle: textTheme?.headline),
      title: GoogleFonts.alike(textStyle: textTheme?.title),
      subhead: GoogleFonts.alike(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alike(textStyle: textTheme?.body2),
      body1: GoogleFonts.alike(textStyle: textTheme?.body1),
      caption: GoogleFonts.alike(textStyle: textTheme?.caption),
      button: GoogleFonts.alike(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alike(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alike(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alike Angular font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alike+Angular
  static TextStyle alikeAngular({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0ae146a31a48840c579bbeefc31597a7c9b385c626ef8387ad461aeea8432452',
        97120,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlikeAngular',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alike Angular font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alike+Angular
  static TextTheme alikeAngularTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alikeAngular(textStyle: textTheme?.display4),
      display3: GoogleFonts.alikeAngular(textStyle: textTheme?.display3),
      display2: GoogleFonts.alikeAngular(textStyle: textTheme?.display2),
      display1: GoogleFonts.alikeAngular(textStyle: textTheme?.display1),
      headline: GoogleFonts.alikeAngular(textStyle: textTheme?.headline),
      title: GoogleFonts.alikeAngular(textStyle: textTheme?.title),
      subhead: GoogleFonts.alikeAngular(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alikeAngular(textStyle: textTheme?.body2),
      body1: GoogleFonts.alikeAngular(textStyle: textTheme?.body1),
      caption: GoogleFonts.alikeAngular(textStyle: textTheme?.caption),
      button: GoogleFonts.alikeAngular(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alikeAngular(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alikeAngular(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Allan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allan
  static TextStyle allan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '83a268d06857cada4246725e7cc04eb4d7b87d19e6d4f44e745d33be739852fb',
        40992,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b309341937b6f2a1893638c71f9877c70c658e6461e5b18011f9ab7f2782adc9',
        95644,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Allan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Allan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allan
  static TextTheme allanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.allan(textStyle: textTheme?.display4),
      display3: GoogleFonts.allan(textStyle: textTheme?.display3),
      display2: GoogleFonts.allan(textStyle: textTheme?.display2),
      display1: GoogleFonts.allan(textStyle: textTheme?.display1),
      headline: GoogleFonts.allan(textStyle: textTheme?.headline),
      title: GoogleFonts.allan(textStyle: textTheme?.title),
      subhead: GoogleFonts.allan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.allan(textStyle: textTheme?.body2),
      body1: GoogleFonts.allan(textStyle: textTheme?.body1),
      caption: GoogleFonts.allan(textStyle: textTheme?.caption),
      button: GoogleFonts.allan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.allan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.allan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Allerta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allerta
  static TextStyle allerta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'df4ce73d43a2a1eb976d66944a0555b8ab45b8848b9e9be9355d0f68a9373270',
        18844,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Allerta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Allerta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allerta
  static TextTheme allertaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.allerta(textStyle: textTheme?.display4),
      display3: GoogleFonts.allerta(textStyle: textTheme?.display3),
      display2: GoogleFonts.allerta(textStyle: textTheme?.display2),
      display1: GoogleFonts.allerta(textStyle: textTheme?.display1),
      headline: GoogleFonts.allerta(textStyle: textTheme?.headline),
      title: GoogleFonts.allerta(textStyle: textTheme?.title),
      subhead: GoogleFonts.allerta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.allerta(textStyle: textTheme?.body2),
      body1: GoogleFonts.allerta(textStyle: textTheme?.body1),
      caption: GoogleFonts.allerta(textStyle: textTheme?.caption),
      button: GoogleFonts.allerta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.allerta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.allerta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Allerta Stencil font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allerta+Stencil
  static TextStyle allertaStencil({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd43b315a156fb147d0bcd2dad6a682e5a23d388f0d12365c29c2d46fbf1e2c96',
        19512,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AllertaStencil',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Allerta Stencil font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allerta+Stencil
  static TextTheme allertaStencilTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.allertaStencil(textStyle: textTheme?.display4),
      display3: GoogleFonts.allertaStencil(textStyle: textTheme?.display3),
      display2: GoogleFonts.allertaStencil(textStyle: textTheme?.display2),
      display1: GoogleFonts.allertaStencil(textStyle: textTheme?.display1),
      headline: GoogleFonts.allertaStencil(textStyle: textTheme?.headline),
      title: GoogleFonts.allertaStencil(textStyle: textTheme?.title),
      subhead: GoogleFonts.allertaStencil(textStyle: textTheme?.subhead),
      body2: GoogleFonts.allertaStencil(textStyle: textTheme?.body2),
      body1: GoogleFonts.allertaStencil(textStyle: textTheme?.body1),
      caption: GoogleFonts.allertaStencil(textStyle: textTheme?.caption),
      button: GoogleFonts.allertaStencil(textStyle: textTheme?.button),
      subtitle: GoogleFonts.allertaStencil(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.allertaStencil(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Allura font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allura
  static TextStyle allura({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '32adf6de6bc3ee14bedf4674a1020492d2c2e4a939883aa672ff9a31777f63ed',
        88036,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Allura',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Allura font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allura
  static TextTheme alluraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.allura(textStyle: textTheme?.display4),
      display3: GoogleFonts.allura(textStyle: textTheme?.display3),
      display2: GoogleFonts.allura(textStyle: textTheme?.display2),
      display1: GoogleFonts.allura(textStyle: textTheme?.display1),
      headline: GoogleFonts.allura(textStyle: textTheme?.headline),
      title: GoogleFonts.allura(textStyle: textTheme?.title),
      subhead: GoogleFonts.allura(textStyle: textTheme?.subhead),
      body2: GoogleFonts.allura(textStyle: textTheme?.body2),
      body1: GoogleFonts.allura(textStyle: textTheme?.body1),
      caption: GoogleFonts.allura(textStyle: textTheme?.caption),
      button: GoogleFonts.allura(textStyle: textTheme?.button),
      subtitle: GoogleFonts.allura(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.allura(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Almendra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra
  static TextStyle almendra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '08fa6c15ee1bba267ec0f0f30bd11a5be545d922ebd057f450a702f87aa9aaa8',
        68696,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd40d53b865a76778b1362d4e74f6c6294fbde5ae31f24f0173d9401c3fabcddc',
        35276,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b0792b18907bbbe9c24855a75a53fc8ac926ae12e181ec5bbc70fae19df05bfa',
        36684,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'eb34d628f80f6ab95c12f0ef6dd4138d2182b94042d615028af5353e58b9f1ee',
        35448,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Almendra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Almendra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra
  static TextTheme almendraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.almendra(textStyle: textTheme?.display4),
      display3: GoogleFonts.almendra(textStyle: textTheme?.display3),
      display2: GoogleFonts.almendra(textStyle: textTheme?.display2),
      display1: GoogleFonts.almendra(textStyle: textTheme?.display1),
      headline: GoogleFonts.almendra(textStyle: textTheme?.headline),
      title: GoogleFonts.almendra(textStyle: textTheme?.title),
      subhead: GoogleFonts.almendra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.almendra(textStyle: textTheme?.body2),
      body1: GoogleFonts.almendra(textStyle: textTheme?.body1),
      caption: GoogleFonts.almendra(textStyle: textTheme?.caption),
      button: GoogleFonts.almendra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.almendra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.almendra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Almendra Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra+Display
  static TextStyle almendraDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a8aa056bca4ab7efab868e9b7a435eea1109abde7b232725b1e1b41cf482191a',
        39284,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlmendraDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Almendra Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra+Display
  static TextTheme almendraDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.almendraDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.almendraDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.almendraDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.almendraDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.almendraDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.almendraDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.almendraDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.almendraDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.almendraDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.almendraDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.almendraDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.almendraDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.almendraDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Almendra SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra+SC
  static TextStyle almendraSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '12f0d325f41e23a75aa0ddb706236e13487d31b43a77435817a684f239f324bd',
        36008,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlmendraSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Almendra SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra+SC
  static TextTheme almendraSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.almendraSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.almendraSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.almendraSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.almendraSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.almendraSC(textStyle: textTheme?.headline),
      title: GoogleFonts.almendraSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.almendraSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.almendraSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.almendraSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.almendraSC(textStyle: textTheme?.caption),
      button: GoogleFonts.almendraSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.almendraSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.almendraSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amarante font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amarante
  static TextStyle amarante({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f11a52c1a0f3e94f81dde8d9c60832c688c1d9b01c5bb1098c3ea30daac8ad29',
        74348,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amarante',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amarante font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amarante
  static TextTheme amaranteTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amarante(textStyle: textTheme?.display4),
      display3: GoogleFonts.amarante(textStyle: textTheme?.display3),
      display2: GoogleFonts.amarante(textStyle: textTheme?.display2),
      display1: GoogleFonts.amarante(textStyle: textTheme?.display1),
      headline: GoogleFonts.amarante(textStyle: textTheme?.headline),
      title: GoogleFonts.amarante(textStyle: textTheme?.title),
      subhead: GoogleFonts.amarante(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amarante(textStyle: textTheme?.body2),
      body1: GoogleFonts.amarante(textStyle: textTheme?.body1),
      caption: GoogleFonts.amarante(textStyle: textTheme?.caption),
      button: GoogleFonts.amarante(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amarante(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amarante(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amaranth font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amaranth
  static TextStyle amaranth({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4b8c69a7d5f0b230b1b010da8da3ad4ccb84f4dff4a1247a14af83392c9ecf64',
        66272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '359639014bf096771cbebb373f2d347f8e1b44a2ef2b48556e1a21289dbc7eb5',
        74196,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9b35625ebc301f471cd70df7575f4fc81597a8ab27dc321418707c40d8a99616',
        65892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '48c74968a6ddedd92d0c4d4e05959d24a1ae124fce3ab60c793c5a331dddee10',
        74616,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amaranth',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amaranth font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amaranth
  static TextTheme amaranthTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amaranth(textStyle: textTheme?.display4),
      display3: GoogleFonts.amaranth(textStyle: textTheme?.display3),
      display2: GoogleFonts.amaranth(textStyle: textTheme?.display2),
      display1: GoogleFonts.amaranth(textStyle: textTheme?.display1),
      headline: GoogleFonts.amaranth(textStyle: textTheme?.headline),
      title: GoogleFonts.amaranth(textStyle: textTheme?.title),
      subhead: GoogleFonts.amaranth(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amaranth(textStyle: textTheme?.body2),
      body1: GoogleFonts.amaranth(textStyle: textTheme?.body1),
      caption: GoogleFonts.amaranth(textStyle: textTheme?.caption),
      button: GoogleFonts.amaranth(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amaranth(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amaranth(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amatic SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amatic+SC
  static TextStyle amaticSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9da6405b57357f309f00592371cf54bb3c1d57b8e7d9fc40fff6f364d6ca80fe',
        104904,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '81f4df2ecbc8d2fcae65290f5075ff98149f4f95ea00bb6bf3a0711e4e1afd75',
        99680,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AmaticSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amatic SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amatic+SC
  static TextTheme amaticSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amaticSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.amaticSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.amaticSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.amaticSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.amaticSC(textStyle: textTheme?.headline),
      title: GoogleFonts.amaticSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.amaticSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amaticSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.amaticSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.amaticSC(textStyle: textTheme?.caption),
      button: GoogleFonts.amaticSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amaticSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amaticSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amatica SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amatica+SC
  static TextStyle amaticaSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '39a7e41edc371bdb0e8356c4e9f69ea62594cfd412fbb1f5c45a32c0a5e75516',
        140932,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ead630d51d6f70a5e14a17fec1bffc04c9a13118b217101fd42eac20be2ae66',
        105524,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AmaticaSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amatica SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amatica+SC
  static TextTheme amaticaSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amaticaSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.amaticaSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.amaticaSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.amaticaSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.amaticaSC(textStyle: textTheme?.headline),
      title: GoogleFonts.amaticaSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.amaticaSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amaticaSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.amaticaSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.amaticaSC(textStyle: textTheme?.caption),
      button: GoogleFonts.amaticaSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amaticaSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amaticaSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amethysta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amethysta
  static TextStyle amethysta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e4d26711903ae08c3bd10750f3b713928bdd3ee56d00372e37bd8606a3fe2d7a',
        36864,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amethysta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amethysta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amethysta
  static TextTheme amethystaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amethysta(textStyle: textTheme?.display4),
      display3: GoogleFonts.amethysta(textStyle: textTheme?.display3),
      display2: GoogleFonts.amethysta(textStyle: textTheme?.display2),
      display1: GoogleFonts.amethysta(textStyle: textTheme?.display1),
      headline: GoogleFonts.amethysta(textStyle: textTheme?.headline),
      title: GoogleFonts.amethysta(textStyle: textTheme?.title),
      subhead: GoogleFonts.amethysta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amethysta(textStyle: textTheme?.body2),
      body1: GoogleFonts.amethysta(textStyle: textTheme?.body1),
      caption: GoogleFonts.amethysta(textStyle: textTheme?.caption),
      button: GoogleFonts.amethysta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amethysta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amethysta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amiko font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amiko
  static TextStyle amiko({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c2e782cc6b503328a87e3b81b3ee6afa1acb6cd66bd04d9da2ba5d3ff4c43e3f',
        143076,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd56799efb6c3d56b106cae38c558a3f2f9da3d0a90d0d1ea64449c693d3cadfc',
        142664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '037bbdff86b70266d62abc94be043671d3c04188f477dbb0ead70ee89df98ecb',
        142052,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amiko',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amiko font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amiko
  static TextTheme amikoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amiko(textStyle: textTheme?.display4),
      display3: GoogleFonts.amiko(textStyle: textTheme?.display3),
      display2: GoogleFonts.amiko(textStyle: textTheme?.display2),
      display1: GoogleFonts.amiko(textStyle: textTheme?.display1),
      headline: GoogleFonts.amiko(textStyle: textTheme?.headline),
      title: GoogleFonts.amiko(textStyle: textTheme?.title),
      subhead: GoogleFonts.amiko(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amiko(textStyle: textTheme?.body2),
      body1: GoogleFonts.amiko(textStyle: textTheme?.body1),
      caption: GoogleFonts.amiko(textStyle: textTheme?.caption),
      button: GoogleFonts.amiko(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amiko(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amiko(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amiri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amiri
  static TextStyle amiri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '15af380107efd8a082b372d1ba8027d5fd6d4720ccf7f7ce48345b845cfb83b6',
        370496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '03496500b8efdd151ca91912b003f23e04fcb45a8d39cee588e4ea47b61fc052',
        357340,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a1f6fcfa01fc6084132c66ff5b8da7b655fbf82dae7a9200c4471400281678bb',
        351752,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9d9add54ab339fd5ca1f0b2fbda1117e04758800cefa39fa72d5f1e38b7a2e27',
        355324,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amiri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amiri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amiri
  static TextTheme amiriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amiri(textStyle: textTheme?.display4),
      display3: GoogleFonts.amiri(textStyle: textTheme?.display3),
      display2: GoogleFonts.amiri(textStyle: textTheme?.display2),
      display1: GoogleFonts.amiri(textStyle: textTheme?.display1),
      headline: GoogleFonts.amiri(textStyle: textTheme?.headline),
      title: GoogleFonts.amiri(textStyle: textTheme?.title),
      subhead: GoogleFonts.amiri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amiri(textStyle: textTheme?.body2),
      body1: GoogleFonts.amiri(textStyle: textTheme?.body1),
      caption: GoogleFonts.amiri(textStyle: textTheme?.caption),
      button: GoogleFonts.amiri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amiri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amiri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amita font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amita
  static TextStyle amita({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f8ab328073e1c729f0b4f38521b47bb39c63db396da1602f6b08a2a8775249f4',
        141504,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e421cec126c6014995b96189e28c3c8b119e3e21dbe1c3dea8585ec31afa0679',
        141464,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amita',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amita font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amita
  static TextTheme amitaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amita(textStyle: textTheme?.display4),
      display3: GoogleFonts.amita(textStyle: textTheme?.display3),
      display2: GoogleFonts.amita(textStyle: textTheme?.display2),
      display1: GoogleFonts.amita(textStyle: textTheme?.display1),
      headline: GoogleFonts.amita(textStyle: textTheme?.headline),
      title: GoogleFonts.amita(textStyle: textTheme?.title),
      subhead: GoogleFonts.amita(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amita(textStyle: textTheme?.body2),
      body1: GoogleFonts.amita(textStyle: textTheme?.body1),
      caption: GoogleFonts.amita(textStyle: textTheme?.caption),
      button: GoogleFonts.amita(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amita(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amita(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Anaheim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anaheim
  static TextStyle anaheim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '738fa7ae0283744abbfcfd999eb71d255210a7ee0fa7e195a47482269b9e381e',
        27848,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Anaheim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Anaheim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anaheim
  static TextTheme anaheimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anaheim(textStyle: textTheme?.display4),
      display3: GoogleFonts.anaheim(textStyle: textTheme?.display3),
      display2: GoogleFonts.anaheim(textStyle: textTheme?.display2),
      display1: GoogleFonts.anaheim(textStyle: textTheme?.display1),
      headline: GoogleFonts.anaheim(textStyle: textTheme?.headline),
      title: GoogleFonts.anaheim(textStyle: textTheme?.title),
      subhead: GoogleFonts.anaheim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anaheim(textStyle: textTheme?.body2),
      body1: GoogleFonts.anaheim(textStyle: textTheme?.body1),
      caption: GoogleFonts.anaheim(textStyle: textTheme?.caption),
      button: GoogleFonts.anaheim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anaheim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anaheim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Andada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Andada
  static TextStyle andada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7c3fda3cdd2dcc60f34129cdd9c0a2f139b2a4bec16bcff6b27521d87d222f1e',
        108572,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Andada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Andada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Andada
  static TextTheme andadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.andada(textStyle: textTheme?.display4),
      display3: GoogleFonts.andada(textStyle: textTheme?.display3),
      display2: GoogleFonts.andada(textStyle: textTheme?.display2),
      display1: GoogleFonts.andada(textStyle: textTheme?.display1),
      headline: GoogleFonts.andada(textStyle: textTheme?.headline),
      title: GoogleFonts.andada(textStyle: textTheme?.title),
      subhead: GoogleFonts.andada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.andada(textStyle: textTheme?.body2),
      body1: GoogleFonts.andada(textStyle: textTheme?.body1),
      caption: GoogleFonts.andada(textStyle: textTheme?.caption),
      button: GoogleFonts.andada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.andada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.andada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Andika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Andika
  static TextStyle andika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1c10763224ab91314d3fae862634f6bddf0aae60bd71668d68950102ca77b5d4',
        964524,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Andika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Andika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Andika
  static TextTheme andikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.andika(textStyle: textTheme?.display4),
      display3: GoogleFonts.andika(textStyle: textTheme?.display3),
      display2: GoogleFonts.andika(textStyle: textTheme?.display2),
      display1: GoogleFonts.andika(textStyle: textTheme?.display1),
      headline: GoogleFonts.andika(textStyle: textTheme?.headline),
      title: GoogleFonts.andika(textStyle: textTheme?.title),
      subhead: GoogleFonts.andika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.andika(textStyle: textTheme?.body2),
      body1: GoogleFonts.andika(textStyle: textTheme?.body1),
      caption: GoogleFonts.andika(textStyle: textTheme?.caption),
      button: GoogleFonts.andika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.andika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.andika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Annie Use Your Telescope font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Annie+Use+Your+Telescope
  static TextStyle annieUseYourTelescope({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '65c0cd06d1ec2528de45688966f2971cf95fed9f810f246e08b4efd9e717d850',
        50692,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AnnieUseYourTelescope',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Annie Use Your Telescope font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Annie+Use+Your+Telescope
  static TextTheme annieUseYourTelescopeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.headline),
      title: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.title),
      subhead: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.subhead),
      body2: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.body2),
      body1: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.body1),
      caption: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.caption),
      button: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Anonymous Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anonymous+Pro
  static TextStyle anonymousPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ca7beef0b5eb5c9e72533cd45bc1e4f41c8272dc2335f22d3649e32a795995f',
        106796,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '71ce3ee6476a91f9e89e9f8010d9ea13314306b645af3e8d7b7add697e6f0d3e',
        108996,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd00937283f3b530bee6700e02cfabfbb96b833d42559d48fc5fdfcfde2ff5b39',
        106604,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '60f1f3cae99bbc1323cdcdf9af6a0127d5b4684ef675e6836fa3034a297dc16a',
        108760,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AnonymousPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Anonymous Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anonymous+Pro
  static TextTheme anonymousProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anonymousPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.anonymousPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.anonymousPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.anonymousPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.anonymousPro(textStyle: textTheme?.headline),
      title: GoogleFonts.anonymousPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.anonymousPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anonymousPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.anonymousPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.anonymousPro(textStyle: textTheme?.caption),
      button: GoogleFonts.anonymousPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anonymousPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anonymousPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Antic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic
  static TextStyle antic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6526fff8a94a5503810bc8805b716126e91295380d0e970f089e3e663a4440d5',
        39272,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Antic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Antic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic
  static TextTheme anticTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.antic(textStyle: textTheme?.display4),
      display3: GoogleFonts.antic(textStyle: textTheme?.display3),
      display2: GoogleFonts.antic(textStyle: textTheme?.display2),
      display1: GoogleFonts.antic(textStyle: textTheme?.display1),
      headline: GoogleFonts.antic(textStyle: textTheme?.headline),
      title: GoogleFonts.antic(textStyle: textTheme?.title),
      subhead: GoogleFonts.antic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.antic(textStyle: textTheme?.body2),
      body1: GoogleFonts.antic(textStyle: textTheme?.body1),
      caption: GoogleFonts.antic(textStyle: textTheme?.caption),
      button: GoogleFonts.antic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.antic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.antic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Antic Didone font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic+Didone
  static TextStyle anticDidone({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ed8ca32ea2c34cc27f4a10cdf51c0ddb35d0cd580df90b19e68d8096a145ec35',
        39640,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AnticDidone',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Antic Didone font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic+Didone
  static TextTheme anticDidoneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anticDidone(textStyle: textTheme?.display4),
      display3: GoogleFonts.anticDidone(textStyle: textTheme?.display3),
      display2: GoogleFonts.anticDidone(textStyle: textTheme?.display2),
      display1: GoogleFonts.anticDidone(textStyle: textTheme?.display1),
      headline: GoogleFonts.anticDidone(textStyle: textTheme?.headline),
      title: GoogleFonts.anticDidone(textStyle: textTheme?.title),
      subhead: GoogleFonts.anticDidone(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anticDidone(textStyle: textTheme?.body2),
      body1: GoogleFonts.anticDidone(textStyle: textTheme?.body1),
      caption: GoogleFonts.anticDidone(textStyle: textTheme?.caption),
      button: GoogleFonts.anticDidone(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anticDidone(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anticDidone(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Antic Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic+Slab
  static TextStyle anticSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1348202760ad87d67e74d3a921ad2be20b563b2cd2a8d6e99d54da029c7f2aad',
        36924,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AnticSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Antic Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic+Slab
  static TextTheme anticSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anticSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.anticSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.anticSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.anticSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.anticSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.anticSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.anticSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anticSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.anticSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.anticSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.anticSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anticSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anticSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Anton font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anton
  static TextStyle anton({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e0d29150a430129b0bfdaabaa46ba1e7967ccabc46440a5789bffe18b7dfcc2d',
        54896,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Anton',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Anton font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anton
  static TextTheme antonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anton(textStyle: textTheme?.display4),
      display3: GoogleFonts.anton(textStyle: textTheme?.display3),
      display2: GoogleFonts.anton(textStyle: textTheme?.display2),
      display1: GoogleFonts.anton(textStyle: textTheme?.display1),
      headline: GoogleFonts.anton(textStyle: textTheme?.headline),
      title: GoogleFonts.anton(textStyle: textTheme?.title),
      subhead: GoogleFonts.anton(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anton(textStyle: textTheme?.body2),
      body1: GoogleFonts.anton(textStyle: textTheme?.body1),
      caption: GoogleFonts.anton(textStyle: textTheme?.caption),
      button: GoogleFonts.anton(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anton(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anton(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arapey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arapey
  static TextStyle arapey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8d4786e233fac8fe0069ba6efaa828eb2fffef7b1d21a92a6d4f250ae9710415',
        26716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '10f469eeecd1cca95a1881d5fbd920abff25911a343caf957f7b2a0e3d4de390',
        29520,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arapey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arapey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arapey
  static TextTheme arapeyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arapey(textStyle: textTheme?.display4),
      display3: GoogleFonts.arapey(textStyle: textTheme?.display3),
      display2: GoogleFonts.arapey(textStyle: textTheme?.display2),
      display1: GoogleFonts.arapey(textStyle: textTheme?.display1),
      headline: GoogleFonts.arapey(textStyle: textTheme?.headline),
      title: GoogleFonts.arapey(textStyle: textTheme?.title),
      subhead: GoogleFonts.arapey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arapey(textStyle: textTheme?.body2),
      body1: GoogleFonts.arapey(textStyle: textTheme?.body1),
      caption: GoogleFonts.arapey(textStyle: textTheme?.caption),
      button: GoogleFonts.arapey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arapey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arapey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arbutus font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arbutus
  static TextStyle arbutus({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd1484fe1dd2948c05f4d1ab7f6acbbc88d4acea2e32880263ec8f991cba4905f',
        81792,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arbutus',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arbutus font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arbutus
  static TextTheme arbutusTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arbutus(textStyle: textTheme?.display4),
      display3: GoogleFonts.arbutus(textStyle: textTheme?.display3),
      display2: GoogleFonts.arbutus(textStyle: textTheme?.display2),
      display1: GoogleFonts.arbutus(textStyle: textTheme?.display1),
      headline: GoogleFonts.arbutus(textStyle: textTheme?.headline),
      title: GoogleFonts.arbutus(textStyle: textTheme?.title),
      subhead: GoogleFonts.arbutus(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arbutus(textStyle: textTheme?.body2),
      body1: GoogleFonts.arbutus(textStyle: textTheme?.body1),
      caption: GoogleFonts.arbutus(textStyle: textTheme?.caption),
      button: GoogleFonts.arbutus(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arbutus(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arbutus(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arbutus Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arbutus+Slab
  static TextStyle arbutusSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7c7bbc09f84fc70a8541195a960de7d282eeaee64c5b146253bd79fd209893d',
        39812,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArbutusSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arbutus Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arbutus+Slab
  static TextTheme arbutusSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arbutusSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.arbutusSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.arbutusSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.arbutusSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.arbutusSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.arbutusSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.arbutusSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arbutusSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.arbutusSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.arbutusSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.arbutusSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arbutusSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arbutusSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Architects Daughter font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Architects+Daughter
  static TextStyle architectsDaughter({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a4f5860f4b7aca9b95305b6c5a3b14e2f1c951eaddd28b5d1fffd374171ccdba',
        43356,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArchitectsDaughter',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Architects Daughter font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Architects+Daughter
  static TextTheme architectsDaughterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.architectsDaughter(textStyle: textTheme?.display4),
      display3: GoogleFonts.architectsDaughter(textStyle: textTheme?.display3),
      display2: GoogleFonts.architectsDaughter(textStyle: textTheme?.display2),
      display1: GoogleFonts.architectsDaughter(textStyle: textTheme?.display1),
      headline: GoogleFonts.architectsDaughter(textStyle: textTheme?.headline),
      title: GoogleFonts.architectsDaughter(textStyle: textTheme?.title),
      subhead: GoogleFonts.architectsDaughter(textStyle: textTheme?.subhead),
      body2: GoogleFonts.architectsDaughter(textStyle: textTheme?.body2),
      body1: GoogleFonts.architectsDaughter(textStyle: textTheme?.body1),
      caption: GoogleFonts.architectsDaughter(textStyle: textTheme?.caption),
      button: GoogleFonts.architectsDaughter(textStyle: textTheme?.button),
      subtitle: GoogleFonts.architectsDaughter(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.architectsDaughter(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Archivo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo
  static TextStyle archivo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e3992a886b3891c9b073cf3e46b1c578cb31ab065cf9b5e07f6fc2a0200a495f',
        58160,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8af059c64838f116e4c8afda7a5c344815c3fe3c2111749d7281a046087dfb8a',
        60944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '455a61b80b447af7647cb7bbbef6de06c3c3031d0ecbb2619fa9cffa73871e76',
        59648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c266aeada4adba34caec3d404c7953743cf0327123506b66cde56cf556ad2ddf',
        62104,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7ad030ef4465b1be7229c5326d24955683bea533c9646e4ed2773cd30697d031',
        59960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '453878357ed380bea09e3661badd4636234be8794956428236bc3a166d84fc92',
        62300,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5c37a5634c5b7802983e322dcc187d5b4bc26e238dd61828a71f184592b9032f',
        59436,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '12b65a3c8f63eb390f4acb0a6ade0ac245782113ddc2e397c216c3605fc245f8',
        62036,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Archivo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Archivo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo
  static TextTheme archivoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.archivo(textStyle: textTheme?.display4),
      display3: GoogleFonts.archivo(textStyle: textTheme?.display3),
      display2: GoogleFonts.archivo(textStyle: textTheme?.display2),
      display1: GoogleFonts.archivo(textStyle: textTheme?.display1),
      headline: GoogleFonts.archivo(textStyle: textTheme?.headline),
      title: GoogleFonts.archivo(textStyle: textTheme?.title),
      subhead: GoogleFonts.archivo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.archivo(textStyle: textTheme?.body2),
      body1: GoogleFonts.archivo(textStyle: textTheme?.body1),
      caption: GoogleFonts.archivo(textStyle: textTheme?.caption),
      button: GoogleFonts.archivo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.archivo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.archivo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Archivo Black font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo+Black
  static TextStyle archivoBlack({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fdd008fdde6eaf026762810841b23a803c1fd8f7691df010d250df61e584703b',
        59204,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArchivoBlack',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Archivo Black font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo+Black
  static TextTheme archivoBlackTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.archivoBlack(textStyle: textTheme?.display4),
      display3: GoogleFonts.archivoBlack(textStyle: textTheme?.display3),
      display2: GoogleFonts.archivoBlack(textStyle: textTheme?.display2),
      display1: GoogleFonts.archivoBlack(textStyle: textTheme?.display1),
      headline: GoogleFonts.archivoBlack(textStyle: textTheme?.headline),
      title: GoogleFonts.archivoBlack(textStyle: textTheme?.title),
      subhead: GoogleFonts.archivoBlack(textStyle: textTheme?.subhead),
      body2: GoogleFonts.archivoBlack(textStyle: textTheme?.body2),
      body1: GoogleFonts.archivoBlack(textStyle: textTheme?.body1),
      caption: GoogleFonts.archivoBlack(textStyle: textTheme?.caption),
      button: GoogleFonts.archivoBlack(textStyle: textTheme?.button),
      subtitle: GoogleFonts.archivoBlack(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.archivoBlack(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Archivo Narrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo+Narrow
  static TextStyle archivoNarrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '95b4094186b9443c74e987b6a5ad660b55c7dc1e548d66cc53ead05a10bf096f',
        57132,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c5be034d89310f5e551f67507ef7bd0d5093e193d5e556598e1137cff7598ada',
        58796,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '898e57eec4db5685859996bc7c9a87707d53ceca97c917edb0497302b7145fd5',
        55924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ff034a0073d594043d35a5058bf44df331be4b22576c8a753b210bcc55789e50',
        59204,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArchivoNarrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Archivo Narrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo+Narrow
  static TextTheme archivoNarrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.archivoNarrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.archivoNarrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.archivoNarrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.archivoNarrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.archivoNarrow(textStyle: textTheme?.headline),
      title: GoogleFonts.archivoNarrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.archivoNarrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.archivoNarrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.archivoNarrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.archivoNarrow(textStyle: textTheme?.caption),
      button: GoogleFonts.archivoNarrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.archivoNarrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.archivoNarrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aref Ruqaa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aref+Ruqaa
  static TextStyle arefRuqaa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '483d6ce42473c62a61b38dc4e30c6b1a5d9b02921ab5034c8eec4b8f0496127d',
        112872,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ea198095e22fea5b0b08338b3b524a2ac489bd669154eab1927955f20124358',
        139992,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArefRuqaa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aref Ruqaa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aref+Ruqaa
  static TextTheme arefRuqaaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arefRuqaa(textStyle: textTheme?.display4),
      display3: GoogleFonts.arefRuqaa(textStyle: textTheme?.display3),
      display2: GoogleFonts.arefRuqaa(textStyle: textTheme?.display2),
      display1: GoogleFonts.arefRuqaa(textStyle: textTheme?.display1),
      headline: GoogleFonts.arefRuqaa(textStyle: textTheme?.headline),
      title: GoogleFonts.arefRuqaa(textStyle: textTheme?.title),
      subhead: GoogleFonts.arefRuqaa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arefRuqaa(textStyle: textTheme?.body2),
      body1: GoogleFonts.arefRuqaa(textStyle: textTheme?.body1),
      caption: GoogleFonts.arefRuqaa(textStyle: textTheme?.caption),
      button: GoogleFonts.arefRuqaa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arefRuqaa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arefRuqaa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arima Madurai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arima+Madurai
  static TextStyle arimaMadurai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '20fe984789a290b9c540b82d788511cf37e7dcb0c94a3f808ed8a9980ce92262',
        92064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ea122a5616110be9d6b0719ff9a8e5d87a5bb067671e53f60e9e2f34151a054',
        92944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e9bb6dffdcb0e85ac571c284727a1ff484951f065ccff0e42668f232709bcfd0',
        93064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '72a8a5252b9293d6af843e90bdda0f995b86531cb25d7a2489b5b58e7c495575',
        93452,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b608979162b4bce202e22f3cba5768ef3c5f96294c41e1d36229b02393a70cf7',
        93560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f9809fc1ba075315f2526aba738bb8c4bfb8af33451d402a57eae3edbdbe45b6',
        93480,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '030889c403dcab9b3a79394ed59d1d1da7d0dbafae26fc8c6d1b870d7732c997',
        93616,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '25561cbe875f9bad0c96c060f2a1f8108ba709366496e68ff510efdf5930429f',
        93604,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArimaMadurai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arima Madurai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arima+Madurai
  static TextTheme arimaMaduraiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arimaMadurai(textStyle: textTheme?.display4),
      display3: GoogleFonts.arimaMadurai(textStyle: textTheme?.display3),
      display2: GoogleFonts.arimaMadurai(textStyle: textTheme?.display2),
      display1: GoogleFonts.arimaMadurai(textStyle: textTheme?.display1),
      headline: GoogleFonts.arimaMadurai(textStyle: textTheme?.headline),
      title: GoogleFonts.arimaMadurai(textStyle: textTheme?.title),
      subhead: GoogleFonts.arimaMadurai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arimaMadurai(textStyle: textTheme?.body2),
      body1: GoogleFonts.arimaMadurai(textStyle: textTheme?.body1),
      caption: GoogleFonts.arimaMadurai(textStyle: textTheme?.caption),
      button: GoogleFonts.arimaMadurai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arimaMadurai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arimaMadurai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arimo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arimo
  static TextStyle arimo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'df255da5c656bbf01f4aa3012b4d4ba16f7bd17664a4e1fc011146a4eb95d436',
        242708,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'eafe825bf96517b1ff3b8d8710254e225584de1489e4c3deaa6b1cb8549a027d',
        249396,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5a4f400fb6090e3938136ea6fd3ec2c02777fb674d13b9582f96d4515044df23',
        240652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e6b358f015564a1505c76b32db9b3f5c538a8f7d220dd04446697d286c820bf0',
        248528,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arimo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arimo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arimo
  static TextTheme arimoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arimo(textStyle: textTheme?.display4),
      display3: GoogleFonts.arimo(textStyle: textTheme?.display3),
      display2: GoogleFonts.arimo(textStyle: textTheme?.display2),
      display1: GoogleFonts.arimo(textStyle: textTheme?.display1),
      headline: GoogleFonts.arimo(textStyle: textTheme?.headline),
      title: GoogleFonts.arimo(textStyle: textTheme?.title),
      subhead: GoogleFonts.arimo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arimo(textStyle: textTheme?.body2),
      body1: GoogleFonts.arimo(textStyle: textTheme?.body1),
      caption: GoogleFonts.arimo(textStyle: textTheme?.caption),
      button: GoogleFonts.arimo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arimo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arimo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arizonia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arizonia
  static TextStyle arizonia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '603a1ae367969056ace1484bd5db4d882fabfa78008e6843d3ba07c08082c2c7',
        50688,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arizonia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arizonia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arizonia
  static TextTheme arizoniaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arizonia(textStyle: textTheme?.display4),
      display3: GoogleFonts.arizonia(textStyle: textTheme?.display3),
      display2: GoogleFonts.arizonia(textStyle: textTheme?.display2),
      display1: GoogleFonts.arizonia(textStyle: textTheme?.display1),
      headline: GoogleFonts.arizonia(textStyle: textTheme?.headline),
      title: GoogleFonts.arizonia(textStyle: textTheme?.title),
      subhead: GoogleFonts.arizonia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arizonia(textStyle: textTheme?.body2),
      body1: GoogleFonts.arizonia(textStyle: textTheme?.body1),
      caption: GoogleFonts.arizonia(textStyle: textTheme?.caption),
      button: GoogleFonts.arizonia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arizonia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arizonia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Armata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Armata
  static TextStyle armata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7631b4ae2fae472da8b9d0b46acfec928c9c550e82dbee1685e72f389ab890d9',
        54772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Armata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Armata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Armata
  static TextTheme armataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.armata(textStyle: textTheme?.display4),
      display3: GoogleFonts.armata(textStyle: textTheme?.display3),
      display2: GoogleFonts.armata(textStyle: textTheme?.display2),
      display1: GoogleFonts.armata(textStyle: textTheme?.display1),
      headline: GoogleFonts.armata(textStyle: textTheme?.headline),
      title: GoogleFonts.armata(textStyle: textTheme?.title),
      subhead: GoogleFonts.armata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.armata(textStyle: textTheme?.body2),
      body1: GoogleFonts.armata(textStyle: textTheme?.body1),
      caption: GoogleFonts.armata(textStyle: textTheme?.caption),
      button: GoogleFonts.armata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.armata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.armata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arsenal font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arsenal
  static TextStyle arsenal({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7b13a735c3c27289a74f4e934b380f078f89568b2633c5d8386e97a97d46158c',
        140064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f687cc6b9b17ac45aaf3391fbe649c2e1607804ce3ab85daddf9669f796d0a79',
        138944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0ac62eb1c6ee28d30c2dacea06acdbec9c72bcbfdca1f76a873b8a2c18ac8ae6',
        141180,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '41b9ba2384a037e4ec361896e5868107cfa8535ab8befda2d9666584884aca80',
        139236,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arsenal',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arsenal font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arsenal
  static TextTheme arsenalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arsenal(textStyle: textTheme?.display4),
      display3: GoogleFonts.arsenal(textStyle: textTheme?.display3),
      display2: GoogleFonts.arsenal(textStyle: textTheme?.display2),
      display1: GoogleFonts.arsenal(textStyle: textTheme?.display1),
      headline: GoogleFonts.arsenal(textStyle: textTheme?.headline),
      title: GoogleFonts.arsenal(textStyle: textTheme?.title),
      subhead: GoogleFonts.arsenal(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arsenal(textStyle: textTheme?.body2),
      body1: GoogleFonts.arsenal(textStyle: textTheme?.body1),
      caption: GoogleFonts.arsenal(textStyle: textTheme?.caption),
      button: GoogleFonts.arsenal(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arsenal(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arsenal(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Artifika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Artifika
  static TextStyle artifika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a0d399a0a07f993bcb6bdd075a4e0f6ae155d222d230710b94d48933e8470dbf',
        100216,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Artifika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Artifika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Artifika
  static TextTheme artifikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.artifika(textStyle: textTheme?.display4),
      display3: GoogleFonts.artifika(textStyle: textTheme?.display3),
      display2: GoogleFonts.artifika(textStyle: textTheme?.display2),
      display1: GoogleFonts.artifika(textStyle: textTheme?.display1),
      headline: GoogleFonts.artifika(textStyle: textTheme?.headline),
      title: GoogleFonts.artifika(textStyle: textTheme?.title),
      subhead: GoogleFonts.artifika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.artifika(textStyle: textTheme?.body2),
      body1: GoogleFonts.artifika(textStyle: textTheme?.body1),
      caption: GoogleFonts.artifika(textStyle: textTheme?.caption),
      button: GoogleFonts.artifika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.artifika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.artifika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arvo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arvo
  static TextStyle arvo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b816c4a4a7813e7daaa88e2f869b5c8acefbf8d52e00205c41d15dda95f1766c',
        22724,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5250cf6a9f89eba5cb07686924135f2bce7a6f8775a569fac7276b5c83b03db7',
        22704,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1126bb2afe7e919632493ca620fc94e998910794a9fd47d82092f6edc26f4368',
        22608,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '43a330e1b8afd2c95f4f6b1c9c67ef7dfab28ed90bfb6a4551efe8480a060222',
        23288,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arvo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arvo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arvo
  static TextTheme arvoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arvo(textStyle: textTheme?.display4),
      display3: GoogleFonts.arvo(textStyle: textTheme?.display3),
      display2: GoogleFonts.arvo(textStyle: textTheme?.display2),
      display1: GoogleFonts.arvo(textStyle: textTheme?.display1),
      headline: GoogleFonts.arvo(textStyle: textTheme?.headline),
      title: GoogleFonts.arvo(textStyle: textTheme?.title),
      subhead: GoogleFonts.arvo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arvo(textStyle: textTheme?.body2),
      body1: GoogleFonts.arvo(textStyle: textTheme?.body1),
      caption: GoogleFonts.arvo(textStyle: textTheme?.caption),
      button: GoogleFonts.arvo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arvo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arvo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arya
  static TextStyle arya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '98cf640f609db3f8940fc4bc1566dda034961cb11d23f71a277f3ab268c8859a',
        120116,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6c168a53b559c7407d20692a42b94301046b15c4838d709b83992c32cab5732c',
        119776,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arya
  static TextTheme aryaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arya(textStyle: textTheme?.display4),
      display3: GoogleFonts.arya(textStyle: textTheme?.display3),
      display2: GoogleFonts.arya(textStyle: textTheme?.display2),
      display1: GoogleFonts.arya(textStyle: textTheme?.display1),
      headline: GoogleFonts.arya(textStyle: textTheme?.headline),
      title: GoogleFonts.arya(textStyle: textTheme?.title),
      subhead: GoogleFonts.arya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arya(textStyle: textTheme?.body2),
      body1: GoogleFonts.arya(textStyle: textTheme?.body1),
      caption: GoogleFonts.arya(textStyle: textTheme?.caption),
      button: GoogleFonts.arya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asap font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asap
  static TextStyle asap({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3424989c5e2512f04cbd78fd70665961847d7307eb5d795caadac8db451f74cc',
        67676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6286c24191501089796508556c20c3086610ae6aeb56d9aadceaaa0b7d825c51',
        69828,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c7034a58c9a896f74c127472a7085dbd1d6bfb6fd2cafb4140dfde291f0bc399',
        67936,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '13483b794adc9a08424049bbf8e6a03b399069e87c0c4d01777ae17c3328de81',
        69828,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '835a74fedec5a1877e092c739d9f213a3e41860462c70437da2465b5f99ea073',
        67904,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ce966470982f0031860428bc4a47e41d80471ac70ccc857fac1e948d6c964eb7',
        69648,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Asap',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asap font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asap
  static TextTheme asapTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asap(textStyle: textTheme?.display4),
      display3: GoogleFonts.asap(textStyle: textTheme?.display3),
      display2: GoogleFonts.asap(textStyle: textTheme?.display2),
      display1: GoogleFonts.asap(textStyle: textTheme?.display1),
      headline: GoogleFonts.asap(textStyle: textTheme?.headline),
      title: GoogleFonts.asap(textStyle: textTheme?.title),
      subhead: GoogleFonts.asap(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asap(textStyle: textTheme?.body2),
      body1: GoogleFonts.asap(textStyle: textTheme?.body1),
      caption: GoogleFonts.asap(textStyle: textTheme?.caption),
      button: GoogleFonts.asap(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asap(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asap(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asar
  static TextStyle asar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '52cdc31a962e99a625bf96be5b06ab8118290c27e17701c4938182d9e56109af',
        410900,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Asar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asar
  static TextTheme asarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asar(textStyle: textTheme?.display4),
      display3: GoogleFonts.asar(textStyle: textTheme?.display3),
      display2: GoogleFonts.asar(textStyle: textTheme?.display2),
      display1: GoogleFonts.asar(textStyle: textTheme?.display1),
      headline: GoogleFonts.asar(textStyle: textTheme?.headline),
      title: GoogleFonts.asar(textStyle: textTheme?.title),
      subhead: GoogleFonts.asar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asar(textStyle: textTheme?.body2),
      body1: GoogleFonts.asar(textStyle: textTheme?.body1),
      caption: GoogleFonts.asar(textStyle: textTheme?.caption),
      button: GoogleFonts.asar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asset font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asset
  static TextStyle asset({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6423261d7b23d05ef705ee59a0151076feed8408f637b04693272b767ac6cfd5',
        52004,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Asset',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asset font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asset
  static TextTheme assetTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asset(textStyle: textTheme?.display4),
      display3: GoogleFonts.asset(textStyle: textTheme?.display3),
      display2: GoogleFonts.asset(textStyle: textTheme?.display2),
      display1: GoogleFonts.asset(textStyle: textTheme?.display1),
      headline: GoogleFonts.asset(textStyle: textTheme?.headline),
      title: GoogleFonts.asset(textStyle: textTheme?.title),
      subhead: GoogleFonts.asset(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asset(textStyle: textTheme?.body2),
      body1: GoogleFonts.asset(textStyle: textTheme?.body1),
      caption: GoogleFonts.asset(textStyle: textTheme?.caption),
      button: GoogleFonts.asset(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asset(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asset(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Assistant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Assistant
  static TextStyle assistant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6f4c276bf1e4d52183015128074de4702a86fc31cce04f575a8ebef54a077c78',
        57240,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ad7ba792736448061fddf24806abe616e89d7a21a00d169ac4bf95db35ffe9cc',
        57400,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1ffb8d00a2bd6ab725bb34dc8eaf61737481f6b285988332e4f6a4b60279dbde',
        57088,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1dc8095e8dddae977007770ce433f8ed1e374d0a83d7330ecea3b335109a4985',
        56812,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '81008b85f8a91125a8efe85a353982fe1b825def9ef33eed881b709a6debf250',
        56752,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7370c1c3e5649abcfa6f44475eed601eb070ab934a708081b87627827d5463a',
        56872,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Assistant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Assistant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Assistant
  static TextTheme assistantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.assistant(textStyle: textTheme?.display4),
      display3: GoogleFonts.assistant(textStyle: textTheme?.display3),
      display2: GoogleFonts.assistant(textStyle: textTheme?.display2),
      display1: GoogleFonts.assistant(textStyle: textTheme?.display1),
      headline: GoogleFonts.assistant(textStyle: textTheme?.headline),
      title: GoogleFonts.assistant(textStyle: textTheme?.title),
      subhead: GoogleFonts.assistant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.assistant(textStyle: textTheme?.body2),
      body1: GoogleFonts.assistant(textStyle: textTheme?.body1),
      caption: GoogleFonts.assistant(textStyle: textTheme?.caption),
      button: GoogleFonts.assistant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.assistant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.assistant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Astloch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Astloch
  static TextStyle astloch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b51d807f9b0f818e44f8f40d4fbedacfff7df981efda85e7b722d62f6022a168',
        49860,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b86a5f0e90945d44c5b629fde8c5a667dd7882ab201ccb397f96f482fd7e98bc',
        51544,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Astloch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Astloch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Astloch
  static TextTheme astlochTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.astloch(textStyle: textTheme?.display4),
      display3: GoogleFonts.astloch(textStyle: textTheme?.display3),
      display2: GoogleFonts.astloch(textStyle: textTheme?.display2),
      display1: GoogleFonts.astloch(textStyle: textTheme?.display1),
      headline: GoogleFonts.astloch(textStyle: textTheme?.headline),
      title: GoogleFonts.astloch(textStyle: textTheme?.title),
      subhead: GoogleFonts.astloch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.astloch(textStyle: textTheme?.body2),
      body1: GoogleFonts.astloch(textStyle: textTheme?.body1),
      caption: GoogleFonts.astloch(textStyle: textTheme?.caption),
      button: GoogleFonts.astloch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.astloch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.astloch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asul font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asul
  static TextStyle asul({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd38e526c102508df44df01ded7aefa955a61c999e42e91cbcb82103aa1269875',
        33468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1810c0e0a5199932d466db95d83fab54bd1b5f6fd5b91664ca7240078d2dd1f0',
        33500,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Asul',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asul font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asul
  static TextTheme asulTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asul(textStyle: textTheme?.display4),
      display3: GoogleFonts.asul(textStyle: textTheme?.display3),
      display2: GoogleFonts.asul(textStyle: textTheme?.display2),
      display1: GoogleFonts.asul(textStyle: textTheme?.display1),
      headline: GoogleFonts.asul(textStyle: textTheme?.headline),
      title: GoogleFonts.asul(textStyle: textTheme?.title),
      subhead: GoogleFonts.asul(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asul(textStyle: textTheme?.body2),
      body1: GoogleFonts.asul(textStyle: textTheme?.body1),
      caption: GoogleFonts.asul(textStyle: textTheme?.caption),
      button: GoogleFonts.asul(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asul(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asul(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Athiti font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Athiti
  static TextStyle athiti({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4abe61baf7f8762b4dcb6b88b0610de73f42b112a793e28b92da163ee7e441d7',
        112524,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f9c6df08ed329fa184304cf4bc64319e7812c62c2ae136dc89cb10a5d5c35018',
        111332,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4559ae55fe1020c88dc144ae60afba5e282fcd3aa1c5107292df173d42135806',
        112320,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6e1f0a1706330d270d93ea13e88b35d9c6f4bf71d927e9468278c03b57986330',
        112508,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '398a37b4c34df12c6ede4a85f215d56eaa5a8b515ea5e0bdad2ef676c2ae858a',
        112080,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '63b6ab040d22bd64ce5d5400f352fac3ecefa83827b1862b8a216d5c729ea286',
        112932,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Athiti',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Athiti font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Athiti
  static TextTheme athitiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.athiti(textStyle: textTheme?.display4),
      display3: GoogleFonts.athiti(textStyle: textTheme?.display3),
      display2: GoogleFonts.athiti(textStyle: textTheme?.display2),
      display1: GoogleFonts.athiti(textStyle: textTheme?.display1),
      headline: GoogleFonts.athiti(textStyle: textTheme?.headline),
      title: GoogleFonts.athiti(textStyle: textTheme?.title),
      subhead: GoogleFonts.athiti(textStyle: textTheme?.subhead),
      body2: GoogleFonts.athiti(textStyle: textTheme?.body2),
      body1: GoogleFonts.athiti(textStyle: textTheme?.body1),
      caption: GoogleFonts.athiti(textStyle: textTheme?.caption),
      button: GoogleFonts.athiti(textStyle: textTheme?.button),
      subtitle: GoogleFonts.athiti(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.athiti(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Atma font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Atma
  static TextStyle atma({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd691cbd1df6f6a53328f8d9d9514102c915be55e93a8c1f0cb0826a27a60e4f2',
        196364,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '702ceed58c58203ab0c8ad4bbbbda56c77b89a29496d748322180acbed120201',
        198056,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cc558572cee6afca8a8d34b8cb8a2397d749e0c22f9d9977f39eb0e84d636967',
        197528,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b569b84d6ee492ead3f4c73af6244137b0e4c604c9e98cc57627162221d498bb',
        196596,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '127f716e96fc47aee7624acf9cebd859693a19f2fc1f7d832f33835e5bd3b834',
        193184,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Atma',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Atma font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Atma
  static TextTheme atmaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.atma(textStyle: textTheme?.display4),
      display3: GoogleFonts.atma(textStyle: textTheme?.display3),
      display2: GoogleFonts.atma(textStyle: textTheme?.display2),
      display1: GoogleFonts.atma(textStyle: textTheme?.display1),
      headline: GoogleFonts.atma(textStyle: textTheme?.headline),
      title: GoogleFonts.atma(textStyle: textTheme?.title),
      subhead: GoogleFonts.atma(textStyle: textTheme?.subhead),
      body2: GoogleFonts.atma(textStyle: textTheme?.body2),
      body1: GoogleFonts.atma(textStyle: textTheme?.body1),
      caption: GoogleFonts.atma(textStyle: textTheme?.caption),
      button: GoogleFonts.atma(textStyle: textTheme?.button),
      subtitle: GoogleFonts.atma(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.atma(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Atomic Age font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Atomic+Age
  static TextStyle atomicAge({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6fc59a494c6184d973d9d5db8ec698d8acb6283fc807bd1a13c30000b83b832c',
        44272,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AtomicAge',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Atomic Age font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Atomic+Age
  static TextTheme atomicAgeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.atomicAge(textStyle: textTheme?.display4),
      display3: GoogleFonts.atomicAge(textStyle: textTheme?.display3),
      display2: GoogleFonts.atomicAge(textStyle: textTheme?.display2),
      display1: GoogleFonts.atomicAge(textStyle: textTheme?.display1),
      headline: GoogleFonts.atomicAge(textStyle: textTheme?.headline),
      title: GoogleFonts.atomicAge(textStyle: textTheme?.title),
      subhead: GoogleFonts.atomicAge(textStyle: textTheme?.subhead),
      body2: GoogleFonts.atomicAge(textStyle: textTheme?.body2),
      body1: GoogleFonts.atomicAge(textStyle: textTheme?.body1),
      caption: GoogleFonts.atomicAge(textStyle: textTheme?.caption),
      button: GoogleFonts.atomicAge(textStyle: textTheme?.button),
      subtitle: GoogleFonts.atomicAge(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.atomicAge(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aubrey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aubrey
  static TextStyle aubrey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1464a409557010421785a4857a333c92eb6c4a28c0dbeeb0b1f8441f5e68ab96',
        96976,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aubrey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aubrey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aubrey
  static TextTheme aubreyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aubrey(textStyle: textTheme?.display4),
      display3: GoogleFonts.aubrey(textStyle: textTheme?.display3),
      display2: GoogleFonts.aubrey(textStyle: textTheme?.display2),
      display1: GoogleFonts.aubrey(textStyle: textTheme?.display1),
      headline: GoogleFonts.aubrey(textStyle: textTheme?.headline),
      title: GoogleFonts.aubrey(textStyle: textTheme?.title),
      subhead: GoogleFonts.aubrey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aubrey(textStyle: textTheme?.body2),
      body1: GoogleFonts.aubrey(textStyle: textTheme?.body1),
      caption: GoogleFonts.aubrey(textStyle: textTheme?.caption),
      button: GoogleFonts.aubrey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aubrey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aubrey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Audiowide font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Audiowide
  static TextStyle audiowide({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2054b5910bd5457176b1479122e09690d5afe73d3749e5ef89a3686e6f724c29',
        70472,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Audiowide',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Audiowide font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Audiowide
  static TextTheme audiowideTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.audiowide(textStyle: textTheme?.display4),
      display3: GoogleFonts.audiowide(textStyle: textTheme?.display3),
      display2: GoogleFonts.audiowide(textStyle: textTheme?.display2),
      display1: GoogleFonts.audiowide(textStyle: textTheme?.display1),
      headline: GoogleFonts.audiowide(textStyle: textTheme?.headline),
      title: GoogleFonts.audiowide(textStyle: textTheme?.title),
      subhead: GoogleFonts.audiowide(textStyle: textTheme?.subhead),
      body2: GoogleFonts.audiowide(textStyle: textTheme?.body2),
      body1: GoogleFonts.audiowide(textStyle: textTheme?.body1),
      caption: GoogleFonts.audiowide(textStyle: textTheme?.caption),
      button: GoogleFonts.audiowide(textStyle: textTheme?.button),
      subtitle: GoogleFonts.audiowide(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.audiowide(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Autour One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Autour+One
  static TextStyle autourOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ee63c9c20873c21ac935c1493e94bb24b9dc9782f63d01761b54dfedf4b3972c',
        59552,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AutourOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Autour One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Autour+One
  static TextTheme autourOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.autourOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.autourOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.autourOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.autourOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.autourOne(textStyle: textTheme?.headline),
      title: GoogleFonts.autourOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.autourOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.autourOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.autourOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.autourOne(textStyle: textTheme?.caption),
      button: GoogleFonts.autourOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.autourOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.autourOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Average font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Average
  static TextStyle average({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ce0697844aa3a978d483dfa380fbebd5bff8e7e6dc0897bf6c2c009fb9ae4ab2',
        37788,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Average',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Average font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Average
  static TextTheme averageTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.average(textStyle: textTheme?.display4),
      display3: GoogleFonts.average(textStyle: textTheme?.display3),
      display2: GoogleFonts.average(textStyle: textTheme?.display2),
      display1: GoogleFonts.average(textStyle: textTheme?.display1),
      headline: GoogleFonts.average(textStyle: textTheme?.headline),
      title: GoogleFonts.average(textStyle: textTheme?.title),
      subhead: GoogleFonts.average(textStyle: textTheme?.subhead),
      body2: GoogleFonts.average(textStyle: textTheme?.body2),
      body1: GoogleFonts.average(textStyle: textTheme?.body1),
      caption: GoogleFonts.average(textStyle: textTheme?.caption),
      button: GoogleFonts.average(textStyle: textTheme?.button),
      subtitle: GoogleFonts.average(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.average(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Average Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Average+Sans
  static TextStyle averageSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'defa6f6e46057de37a3b075c74765ba7cd6a46e0ac756e83f454dfb8b1afa95c',
        43964,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AverageSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Average Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Average+Sans
  static TextTheme averageSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averageSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.averageSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.averageSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.averageSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.averageSans(textStyle: textTheme?.headline),
      title: GoogleFonts.averageSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.averageSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averageSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.averageSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.averageSans(textStyle: textTheme?.caption),
      button: GoogleFonts.averageSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averageSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averageSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Averia Gruesa Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Gruesa+Libre
  static TextStyle averiaGruesaLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3c60fda1756722c9f8d80009e0627d49eb2106d9eada7962d132e3ebef09c96a',
        111344,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AveriaGruesaLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Averia Gruesa Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Gruesa+Libre
  static TextTheme averiaGruesaLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Averia Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Libre
  static TextStyle averiaLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '446105043cce1cc90406cda4c387ef2100b294d9d63b3946d4a395d3f2a9ce07',
        108192,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c8a24e13d7d611dd8a4e15743ac34b163b1e96d1c9a9e82746f0bd9d3a878613',
        133544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2b819eb7a1c11f4de65f3bfe1a8f658ea56fc62b2b7a24b2cf8688e9ced04c96',
        108468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '793d505e83fbdbef6ceeabd6897693fb515a4890b822623deb545b53e7ec68dd',
        128848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6b157a260e6fd6b7cdd2d54fc4f46e1a72fbb33034b74a6929cbc4d0a7d83e3d',
        112228,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '08c2c28ffffd04d884122fa538e0c615e52983959363269b543084794a60955f',
        135664,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AveriaLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Averia Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Libre
  static TextTheme averiaLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averiaLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.averiaLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.averiaLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.averiaLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.averiaLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.averiaLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.averiaLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averiaLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.averiaLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.averiaLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.averiaLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averiaLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averiaLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Averia Sans Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Sans+Libre
  static TextStyle averiaSansLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '452436a08a43ba5da912a2ed71aa4e0c67ae680532317c5affb99278cedc4eb8',
        107752,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '056589edb0d0f068b768b9b9f6361bb5c4a2d53a33006288c9d089b1e6421f66',
        134200,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c5f843350837023c845544f24fa59e8c71cbe7bc284c0ea4127aa872c4fcac41',
        108360,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a79e7e7aecba032e6272d99a93c69868328db8d34091d1c70ccfd4a839f70489',
        128896,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8af8ea3669721038ea729e975cadce19a0032e981378e23c8377e2faf979aca',
        113016,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0509fc7d0b873424deb4340ab1bafca704241ecfda08cdafeab623999d12bdfd',
        135852,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AveriaSansLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Averia Sans Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Sans+Libre
  static TextTheme averiaSansLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averiaSansLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.averiaSansLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.averiaSansLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.averiaSansLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.averiaSansLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.averiaSansLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.averiaSansLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averiaSansLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.averiaSansLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.averiaSansLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.averiaSansLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averiaSansLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averiaSansLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Averia Serif Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Serif+Libre
  static TextStyle averiaSerifLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '605722d0534e8b2a7a4ce36ebc7ecfa14868d5aeae52ba3419e14a19e67c92ba',
        109972,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4b675f9e2f2962fb69b7145f35ea9df241cdc9b91744abeac3cdfbf7aca1740b',
        135976,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1939fc59e6192c78872b151f71d328c64c84552c1f8f7548f3278d3db023959f',
        109988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '383c63d8878e96726e26c44d5a631030fcf28d4abdcb9bdadd86dbb01a623de9',
        130956,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '19af7d57b5ea32ff5df3f2405e0d51759fdbab503fa4cfd420a5eb4943805fcc',
        113956,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '164c3a01088756eebd948641705d6759b2fc7dabfd77d6e36490aa39befa0028',
        138208,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AveriaSerifLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Averia Serif Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Serif+Libre
  static TextTheme averiaSerifLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the B612 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/B612
  static TextStyle b612({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b11c6d50f8a4ef2abd6df134192e3770a9b392c814caf916bcf0efa87e6743d2',
        89048,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4250a2e42f4ceda476c771828532dfb8cb2e9170ceb541e8aecc34ecea7977b4',
        92732,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd3f9b01c62cb7bf3bc87cbc07452bc98a3058af8a40db93b64528fb711a429ea',
        88700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f930926cd0cbbde94c51659420d91fb464c93fa3109c6bdf553a706985e307e2',
        91740,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'B612',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the B612 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/B612
  static TextTheme b612TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.b612(textStyle: textTheme?.display4),
      display3: GoogleFonts.b612(textStyle: textTheme?.display3),
      display2: GoogleFonts.b612(textStyle: textTheme?.display2),
      display1: GoogleFonts.b612(textStyle: textTheme?.display1),
      headline: GoogleFonts.b612(textStyle: textTheme?.headline),
      title: GoogleFonts.b612(textStyle: textTheme?.title),
      subhead: GoogleFonts.b612(textStyle: textTheme?.subhead),
      body2: GoogleFonts.b612(textStyle: textTheme?.body2),
      body1: GoogleFonts.b612(textStyle: textTheme?.body1),
      caption: GoogleFonts.b612(textStyle: textTheme?.caption),
      button: GoogleFonts.b612(textStyle: textTheme?.button),
      subtitle: GoogleFonts.b612(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.b612(textStyle: textTheme?.overline),
    );
  }

  /// Applies the B612 Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/B612+Mono
  static TextStyle b612Mono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ffa9cacfa6fcd1a7a413d3b87f6f5ac6e2b201649b64695d976e0af5a46d512',
        86196,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '55c1dcdfe00e2848cd4e1946617c601f62a0828e6ba3c73924b8b4f4e705785c',
        88684,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '515c42e5f2790fd973f2ee9685301efa0110bc2dfb33df69b57875318ad1e100',
        85172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a4a6d28684fe7467e89b15c82070e98ed4c0623a5df5a9a05d347f757cda41e6',
        87488,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'B612Mono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the B612 Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/B612+Mono
  static TextTheme b612MonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.b612Mono(textStyle: textTheme?.display4),
      display3: GoogleFonts.b612Mono(textStyle: textTheme?.display3),
      display2: GoogleFonts.b612Mono(textStyle: textTheme?.display2),
      display1: GoogleFonts.b612Mono(textStyle: textTheme?.display1),
      headline: GoogleFonts.b612Mono(textStyle: textTheme?.headline),
      title: GoogleFonts.b612Mono(textStyle: textTheme?.title),
      subhead: GoogleFonts.b612Mono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.b612Mono(textStyle: textTheme?.body2),
      body1: GoogleFonts.b612Mono(textStyle: textTheme?.body1),
      caption: GoogleFonts.b612Mono(textStyle: textTheme?.caption),
      button: GoogleFonts.b612Mono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.b612Mono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.b612Mono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bad Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bad+Script
  static TextStyle badScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '85388546eb146e3e3bf5803d4a47f053ad2a9491ee3470c23912777bfbfbc111',
        54372,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BadScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bad Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bad+Script
  static TextTheme badScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.badScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.badScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.badScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.badScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.badScript(textStyle: textTheme?.headline),
      title: GoogleFonts.badScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.badScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.badScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.badScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.badScript(textStyle: textTheme?.caption),
      button: GoogleFonts.badScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.badScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.badScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bahiana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bahiana
  static TextStyle bahiana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1134edff7d2708933a16883c07c5223938a3500e9880b289c754c2602b9181f7',
        51296,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bahiana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bahiana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bahiana
  static TextTheme bahianaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bahiana(textStyle: textTheme?.display4),
      display3: GoogleFonts.bahiana(textStyle: textTheme?.display3),
      display2: GoogleFonts.bahiana(textStyle: textTheme?.display2),
      display1: GoogleFonts.bahiana(textStyle: textTheme?.display1),
      headline: GoogleFonts.bahiana(textStyle: textTheme?.headline),
      title: GoogleFonts.bahiana(textStyle: textTheme?.title),
      subhead: GoogleFonts.bahiana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bahiana(textStyle: textTheme?.body2),
      body1: GoogleFonts.bahiana(textStyle: textTheme?.body1),
      caption: GoogleFonts.bahiana(textStyle: textTheme?.caption),
      button: GoogleFonts.bahiana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bahiana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bahiana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bahianita font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bahianita
  static TextStyle bahianita({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8eae7d3828ad86d4af376a41fb9bd577433f7b9acf6f561f8c3383bf8f37224b',
        91540,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bahianita',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bahianita font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bahianita
  static TextTheme bahianitaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bahianita(textStyle: textTheme?.display4),
      display3: GoogleFonts.bahianita(textStyle: textTheme?.display3),
      display2: GoogleFonts.bahianita(textStyle: textTheme?.display2),
      display1: GoogleFonts.bahianita(textStyle: textTheme?.display1),
      headline: GoogleFonts.bahianita(textStyle: textTheme?.headline),
      title: GoogleFonts.bahianita(textStyle: textTheme?.title),
      subhead: GoogleFonts.bahianita(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bahianita(textStyle: textTheme?.body2),
      body1: GoogleFonts.bahianita(textStyle: textTheme?.body1),
      caption: GoogleFonts.bahianita(textStyle: textTheme?.caption),
      button: GoogleFonts.bahianita(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bahianita(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bahianita(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bai Jamjuree font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bai+Jamjuree
  static TextStyle baiJamjuree({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fdb9acd5c9a309240a161cc16a0a5e3a1f3bf9258d1f2cf14fdfdf6f79d83c8e',
        78044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fff587a7a746a3d84947c3982968551180877152f29ac4e6b58a5d060e741ee3',
        83600,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '253ea5a1c8d0d3dacbf5b9f0db496617c2af6b95a5e0680df9c9c62b989b1799',
        78384,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c31f0c72862a5db7605a1625ddf34cc3c20c1c8a756b7d8848bf7f57a2707e0c',
        83780,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c1dad5e37560fcacf02277fc359aecaab78b734f4a4839c6cf910296b20101fa',
        78416,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e8939d2176c550b12487aed8e2fbc3b25917494c1174787534ed05c61be397f2',
        83856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9f9c01d94ba412108985bed479c74ca19d6b1b8c6982ee1fc113a970d5d323ea',
        78428,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '01569d323f908485836ed8c94772695fc05a4b02812f4f29a62ec257f911b55b',
        83944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a2ef2b81cbfb6b9a14a4bb8931a87a0887e676e237a098c40aa9e61d601dcbd2',
        78412,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7db95e5673e505c331643e67b6172b4465e72300e3642242b55e75a28d7f5883',
        83776,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e456eaafee629c1aa6ffda2fbc121b9b76b54ab7f4b6dcaac6a4a523263b2237',
        78104,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3445df11af52dc901fce718f3b68b4df5dc14a6c7b2ae6399dcf47c7fa7dd34b',
        83360,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BaiJamjuree',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bai Jamjuree font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bai+Jamjuree
  static TextTheme baiJamjureeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.baiJamjuree(textStyle: textTheme?.display4),
      display3: GoogleFonts.baiJamjuree(textStyle: textTheme?.display3),
      display2: GoogleFonts.baiJamjuree(textStyle: textTheme?.display2),
      display1: GoogleFonts.baiJamjuree(textStyle: textTheme?.display1),
      headline: GoogleFonts.baiJamjuree(textStyle: textTheme?.headline),
      title: GoogleFonts.baiJamjuree(textStyle: textTheme?.title),
      subhead: GoogleFonts.baiJamjuree(textStyle: textTheme?.subhead),
      body2: GoogleFonts.baiJamjuree(textStyle: textTheme?.body2),
      body1: GoogleFonts.baiJamjuree(textStyle: textTheme?.body1),
      caption: GoogleFonts.baiJamjuree(textStyle: textTheme?.caption),
      button: GoogleFonts.baiJamjuree(textStyle: textTheme?.button),
      subtitle: GoogleFonts.baiJamjuree(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.baiJamjuree(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo
  static TextStyle baloo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2466b115f1d612b5be7c3c51aa118d952041ad4c9ebc6b790d3659c11ae3681d',
        386736,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Baloo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo
  static TextTheme balooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.baloo(textStyle: textTheme?.display4),
      display3: GoogleFonts.baloo(textStyle: textTheme?.display3),
      display2: GoogleFonts.baloo(textStyle: textTheme?.display2),
      display1: GoogleFonts.baloo(textStyle: textTheme?.display1),
      headline: GoogleFonts.baloo(textStyle: textTheme?.headline),
      title: GoogleFonts.baloo(textStyle: textTheme?.title),
      subhead: GoogleFonts.baloo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.baloo(textStyle: textTheme?.body2),
      body1: GoogleFonts.baloo(textStyle: textTheme?.body1),
      caption: GoogleFonts.baloo(textStyle: textTheme?.caption),
      button: GoogleFonts.baloo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.baloo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.baloo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Bhai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhai
  static TextStyle balooBhai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '678bfe33602fe168ee8732abcdc1ea3a454798cd99cb4f81f7e9d16581a7e2ed',
        277392,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooBhai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Bhai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhai
  static TextTheme balooBhaiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooBhai(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooBhai(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooBhai(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooBhai(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooBhai(textStyle: textTheme?.headline),
      title: GoogleFonts.balooBhai(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooBhai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooBhai(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooBhai(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooBhai(textStyle: textTheme?.caption),
      button: GoogleFonts.balooBhai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooBhai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooBhai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Bhaijaan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhaijaan
  static TextStyle balooBhaijaan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '52b00fb70a18a89da089a7492d3d97836ec7bd211288d3ec4ad6a60914db3dd3',
        171132,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooBhaijaan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Bhaijaan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhaijaan
  static TextTheme balooBhaijaanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooBhaijaan(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooBhaijaan(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooBhaijaan(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooBhaijaan(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooBhaijaan(textStyle: textTheme?.headline),
      title: GoogleFonts.balooBhaijaan(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooBhaijaan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooBhaijaan(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooBhaijaan(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooBhaijaan(textStyle: textTheme?.caption),
      button: GoogleFonts.balooBhaijaan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooBhaijaan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooBhaijaan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Bhaina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhaina
  static TextStyle balooBhaina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '86bbf2a9f2b3936c4b1907de7136a4ca0f71efacfe22b7a6fa1b8a8a81f86282',
        262212,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooBhaina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Bhaina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhaina
  static TextTheme balooBhainaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooBhaina(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooBhaina(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooBhaina(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooBhaina(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooBhaina(textStyle: textTheme?.headline),
      title: GoogleFonts.balooBhaina(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooBhaina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooBhaina(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooBhaina(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooBhaina(textStyle: textTheme?.caption),
      button: GoogleFonts.balooBhaina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooBhaina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooBhaina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Chettan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Chettan
  static TextStyle balooChettan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5e430d6e47dbe9220996407624585cda368b6ce19a23c3f46844a06db3c0a679',
        217796,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooChettan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Chettan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Chettan
  static TextTheme balooChettanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooChettan(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooChettan(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooChettan(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooChettan(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooChettan(textStyle: textTheme?.headline),
      title: GoogleFonts.balooChettan(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooChettan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooChettan(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooChettan(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooChettan(textStyle: textTheme?.caption),
      button: GoogleFonts.balooChettan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooChettan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooChettan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Da font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Da
  static TextStyle balooDa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '88a331b2ae3e4db09605af2b1076b22c3734e2ecfd1b4ef1f4ca57446672e6cf',
        288676,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooDa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Da font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Da
  static TextTheme balooDaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooDa(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooDa(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooDa(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooDa(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooDa(textStyle: textTheme?.headline),
      title: GoogleFonts.balooDa(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooDa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooDa(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooDa(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooDa(textStyle: textTheme?.caption),
      button: GoogleFonts.balooDa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooDa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooDa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Paaji font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Paaji
  static TextStyle balooPaaji({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '95ba9f62ad854dc07958f311af18c674ca943fa7450fa4f6640d18e8eccdfe3f',
        185064,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooPaaji',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Paaji font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Paaji
  static TextTheme balooPaajiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooPaaji(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooPaaji(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooPaaji(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooPaaji(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooPaaji(textStyle: textTheme?.headline),
      title: GoogleFonts.balooPaaji(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooPaaji(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooPaaji(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooPaaji(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooPaaji(textStyle: textTheme?.caption),
      button: GoogleFonts.balooPaaji(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooPaaji(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooPaaji(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Tamma font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Tamma
  static TextStyle balooTamma({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8005871563cf3cfadf580fba66361b46649b342e9e1765d65405765af6e92c4',
        389440,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooTamma',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Tamma font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Tamma
  static TextTheme balooTammaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooTamma(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooTamma(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooTamma(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooTamma(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooTamma(textStyle: textTheme?.headline),
      title: GoogleFonts.balooTamma(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooTamma(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooTamma(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooTamma(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooTamma(textStyle: textTheme?.caption),
      button: GoogleFonts.balooTamma(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooTamma(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooTamma(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Tammudu font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Tammudu
  static TextStyle balooTammudu({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7bc7db26ac47d3561769f8cb3dfb93afd2767965efbd2770a77f8ffb33c5a013',
        406812,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooTammudu',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Tammudu font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Tammudu
  static TextTheme balooTammuduTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooTammudu(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooTammudu(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooTammudu(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooTammudu(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooTammudu(textStyle: textTheme?.headline),
      title: GoogleFonts.balooTammudu(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooTammudu(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooTammudu(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooTammudu(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooTammudu(textStyle: textTheme?.caption),
      button: GoogleFonts.balooTammudu(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooTammudu(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooTammudu(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Thambi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Thambi
  static TextStyle balooThambi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5eb4d30c776f864b83a43cfbbcf1d05dda4a119a042f5a735adb014fdb4707e3',
        200468,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooThambi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Thambi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Thambi
  static TextTheme balooThambiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooThambi(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooThambi(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooThambi(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooThambi(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooThambi(textStyle: textTheme?.headline),
      title: GoogleFonts.balooThambi(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooThambi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooThambi(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooThambi(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooThambi(textStyle: textTheme?.caption),
      button: GoogleFonts.balooThambi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooThambi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooThambi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Balthazar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Balthazar
  static TextStyle balthazar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6f532266accd2179da995d74ed36fa8bf3095162e9404d68381594561a335b66',
        28176,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Balthazar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Balthazar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Balthazar
  static TextTheme balthazarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balthazar(textStyle: textTheme?.display4),
      display3: GoogleFonts.balthazar(textStyle: textTheme?.display3),
      display2: GoogleFonts.balthazar(textStyle: textTheme?.display2),
      display1: GoogleFonts.balthazar(textStyle: textTheme?.display1),
      headline: GoogleFonts.balthazar(textStyle: textTheme?.headline),
      title: GoogleFonts.balthazar(textStyle: textTheme?.title),
      subhead: GoogleFonts.balthazar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balthazar(textStyle: textTheme?.body2),
      body1: GoogleFonts.balthazar(textStyle: textTheme?.body1),
      caption: GoogleFonts.balthazar(textStyle: textTheme?.caption),
      button: GoogleFonts.balthazar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balthazar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balthazar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bangers font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bangers
  static TextStyle bangers({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '42a6646ed15dc91b9430f7e69e6259203235b48fa12c9cc10b6b72afab348de0',
        75700,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bangers',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bangers font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bangers
  static TextTheme bangersTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bangers(textStyle: textTheme?.display4),
      display3: GoogleFonts.bangers(textStyle: textTheme?.display3),
      display2: GoogleFonts.bangers(textStyle: textTheme?.display2),
      display1: GoogleFonts.bangers(textStyle: textTheme?.display1),
      headline: GoogleFonts.bangers(textStyle: textTheme?.headline),
      title: GoogleFonts.bangers(textStyle: textTheme?.title),
      subhead: GoogleFonts.bangers(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bangers(textStyle: textTheme?.body2),
      body1: GoogleFonts.bangers(textStyle: textTheme?.body1),
      caption: GoogleFonts.bangers(textStyle: textTheme?.caption),
      button: GoogleFonts.bangers(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bangers(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bangers(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Barlow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barlow
  static TextStyle barlow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cbc7c82fdee3fa8b92bb23c3b9a2e8030733dbbc7322cd0c547b7c1889e7ecc0',
        61884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f69e0bff8f7ab1739bd00636f1efa74a5937c7d34ae95b4ce353b4baad0eae33',
        65692,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6759b2d507f1549918b6b4a394efcca8982958de5ac4134d359b7162e12701ba',
        62392,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f750383a2bd7ca69e5e24c2f3fcf974a67a9e98818703c12d9fd2600d62b49cf',
        66844,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f582c8c58e673f459c2daf36fb9e1d3522dd5a7c50e0b8ee02d5a95089fff221',
        64984,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5ccb6cff74b4b842a4da09f1543e6f2ab54f86a0e75b997b7ef375159d0f9bca',
        68556,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c1e3cf893b74f13d898b529820f0e01dd59c5c3f6f69635604600893cc99c914',
        62316,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '512de0e21c7303a0b6718ff5cf57c376345786cc521ce3851053764f55398e53',
        66936,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6ed898f9a3aa42d3615c69b731f57305ce7006e87e29042e8467203889f0ff3a',
        64904,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b84f9e4475585d31451021e3e9d27e8336f00eac47c6753193de4033f15ea30d',
        68204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '88497110ef5b50e3903b3c97ee671e01497a9a6d49f64218c9a70fd5042c3b49',
        62368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '53cad3b96c2a07c4af9d7111e1b6eaf07718e6510b0ccf65140b1ee7040da9b3',
        67272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7513399e0a26a50c0f81fab7a114c8f40337b1d2edd0f28abed3f23ff5232c1',
        62356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '274e649f86e4323b0b8553520d855c49523b84eb9269b8e0cf9f41d201e76068',
        65900,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6063124468c1350716105b1b52edec1c02bbbea85a0d675477016f425f457c9a',
        64856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a4cbccba78e5ea3a5c9560b15ff91d04b88b7a8cadb3c81b64ceb9ebd5fc266f',
        68012,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fb60a33ebebe512faae572e414c6865041ea47c278458a28cdcadc762958bd4b',
        61268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'cabd84f11a9c742e6116cea169752a0f8c03073eeb60dc0ab4532987bd853878',
        66736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c6f3686935062113e7b09390ffc3c690c608aa440f3e30db068b64420664ec5d',
        60532,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ea5455d6f97ca5ea27d76f30e87b842dc23d6a9fdd9566ccffb6415a3a56bcb0',
        65992,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '410b2efcf0b449d214182287f404b669840f4cc0a3c2f04940cee2d94b6eed4e',
        60752,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'bba549e676526ff4957a986006a9290f70d407fc1fd00d34135a1291ce6138d4',
        65952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9bcf33e336ef2238ede09a908f8b86c6cca1586df6b1fbe0d59e462e3149b8ba',
        60544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '49c62182eb883aeeab13fa2dbfcde072f2aac31e8bf77a232696bebc3b14e856',
        65664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4e5dff25ad8b2553decdba77625dc57cdcba97555b53612a9c9bfa40f43f953c',
        60524,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '65d8e8aa8d380e24c33fe4d2da62c7f9ec3de8e3429671ef5ff32782d21d649a',
        65840,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8014ab571e1d04db59a24744420219343b4d1806c983ac73e808a9e96c638306',
        60404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'dc26bbeb004e7e2084d0662973c4742fa65fd15b7eda3cb74826a27d686f44b0',
        65284,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '36127289f54d9e42dd6bba46b0f52ce7e1839e79ce1b4d8fc5b22a54ee7c30f3',
        63120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '70e3edc6f039c1a69acb610d298d522d5b46330458810ec9647e08c87b476dbb',
        66768,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ec8d231a02a1e88872bef49e1099c712e93f3a723722a3d3ddc0fe2bfbe40962',
        63072,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'edbf575a42819a83bc5539e63b01efa4299d750d2f679579ef7673c972e3211e',
        66532,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e17df55a2cb70a97d869d33d55b38a29d60d31ae75c0bcaf61aca5f1215702cd',
        62876,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '34b5cbd8a9497c32949bcad7e8bd3f63019f7d28e693401b3ac39a69b5cd778d',
        66084,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5db2f838d3b4d86fe437bcaef0fb569cf99cfda6377a230687348897a816eeb5',
        61360,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'de353be0369b799b090de4e2e272ebe13c6fd496973ff92b9e391656334ad1f2',
        64724,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '429d1fa72c7702c9b3dcb38d750756505166e563306daaf1b66cb753a68f9e2d',
        62376,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '39a411a6e0b959d02638199381cb91af60eb4da3e34ac231c61bea08043966e1',
        67272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd4d4a161e4199c955202ca92d228838efee2dfa3cf68a0cf388085e19395aa5f',
        62680,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '79508f19bd17b1cdbf0b5b6f486c964d65c4a893a7f8f739a63cb71d206bb157',
        67540,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1b2c8175065ed2235c4db66650397fad918d8f97db3f1b3991125f2df604b76c',
        62680,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b1eca79a9e101dd60e1836afb98fee66886d6042c2870f88b7ec822a7b97877b',
        67388,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a9dca109aaa256a5afb98477989b87e0e102269f948949e5573b65b45779d4e',
        62588,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '97fff70c506e46d82a769311aa3efd01c86a10161c92dee921fb6c75da5ba39c',
        67012,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '73e602f9d74684f25a9d352cc61a0cfefc4ab505dfecb50b843492b1b5a87c3e',
        62528,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f1b5d4427848534739c734c5af7bdae1967a666e5c68e04156f0c5a60c1a1c78',
        66868,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b98dce5b8a6c1c5c2804cd26be37b203c56aee083840f4bad5d1907c4bf0b295',
        65064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '82e1d9e57f5b1c3fba390bb1e428d9b26538ead3342f04c40e60ded6325cc06e',
        68404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'acfd284673d183fe78a563ebf695ce70f7800151495260debfa9532d93289a55',
        65208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e07191b9549a6c8c553608c75269487bb83c555c9e2fd9c08cfe704a5416e750',
        68320,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b42194ff2e3637db2ee27a0720eed118d756d564014725a948bcdc8964d25901',
        65240,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '36f4cee581975816949c810a10be068d6131acdc211a99acb3a2ce6c9586174f',
        68236,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2305373351846fd5f75bfb35b24697021e9bd4ea4fac80bb25bfe62c9afcb604',
        63764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '29476cff7567544f2a04e61c90254033e0eb160089bfae4dea9871e8f6fbe2f9',
        67124,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Barlow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Barlow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barlow
  static TextTheme barlowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.barlow(textStyle: textTheme?.display4),
      display3: GoogleFonts.barlow(textStyle: textTheme?.display3),
      display2: GoogleFonts.barlow(textStyle: textTheme?.display2),
      display1: GoogleFonts.barlow(textStyle: textTheme?.display1),
      headline: GoogleFonts.barlow(textStyle: textTheme?.headline),
      title: GoogleFonts.barlow(textStyle: textTheme?.title),
      subhead: GoogleFonts.barlow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.barlow(textStyle: textTheme?.body2),
      body1: GoogleFonts.barlow(textStyle: textTheme?.body1),
      caption: GoogleFonts.barlow(textStyle: textTheme?.caption),
      button: GoogleFonts.barlow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.barlow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.barlow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Barriecito font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barriecito
  static TextStyle barriecito({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cbd439bbca5ece3347c1497394d9cdfd488742cc10ccd2413cdba4e819f236bb',
        167636,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Barriecito',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Barriecito font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barriecito
  static TextTheme barriecitoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.barriecito(textStyle: textTheme?.display4),
      display3: GoogleFonts.barriecito(textStyle: textTheme?.display3),
      display2: GoogleFonts.barriecito(textStyle: textTheme?.display2),
      display1: GoogleFonts.barriecito(textStyle: textTheme?.display1),
      headline: GoogleFonts.barriecito(textStyle: textTheme?.headline),
      title: GoogleFonts.barriecito(textStyle: textTheme?.title),
      subhead: GoogleFonts.barriecito(textStyle: textTheme?.subhead),
      body2: GoogleFonts.barriecito(textStyle: textTheme?.body2),
      body1: GoogleFonts.barriecito(textStyle: textTheme?.body1),
      caption: GoogleFonts.barriecito(textStyle: textTheme?.caption),
      button: GoogleFonts.barriecito(textStyle: textTheme?.button),
      subtitle: GoogleFonts.barriecito(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.barriecito(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Barrio font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barrio
  static TextStyle barrio({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e1745250902305ccc432fd4ac10b9b248159dddd57634c31c70b8b4f3e3983f1',
        146692,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Barrio',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Barrio font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barrio
  static TextTheme barrioTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.barrio(textStyle: textTheme?.display4),
      display3: GoogleFonts.barrio(textStyle: textTheme?.display3),
      display2: GoogleFonts.barrio(textStyle: textTheme?.display2),
      display1: GoogleFonts.barrio(textStyle: textTheme?.display1),
      headline: GoogleFonts.barrio(textStyle: textTheme?.headline),
      title: GoogleFonts.barrio(textStyle: textTheme?.title),
      subhead: GoogleFonts.barrio(textStyle: textTheme?.subhead),
      body2: GoogleFonts.barrio(textStyle: textTheme?.body2),
      body1: GoogleFonts.barrio(textStyle: textTheme?.body1),
      caption: GoogleFonts.barrio(textStyle: textTheme?.caption),
      button: GoogleFonts.barrio(textStyle: textTheme?.button),
      subtitle: GoogleFonts.barrio(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.barrio(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Basic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Basic
  static TextStyle basic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '29cf0f576451b712f706b5f33a2e8e1b6e2be41ed145ebce30bcf8828ec37960',
        45400,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Basic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Basic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Basic
  static TextTheme basicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.basic(textStyle: textTheme?.display4),
      display3: GoogleFonts.basic(textStyle: textTheme?.display3),
      display2: GoogleFonts.basic(textStyle: textTheme?.display2),
      display1: GoogleFonts.basic(textStyle: textTheme?.display1),
      headline: GoogleFonts.basic(textStyle: textTheme?.headline),
      title: GoogleFonts.basic(textStyle: textTheme?.title),
      subhead: GoogleFonts.basic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.basic(textStyle: textTheme?.body2),
      body1: GoogleFonts.basic(textStyle: textTheme?.body1),
      caption: GoogleFonts.basic(textStyle: textTheme?.caption),
      button: GoogleFonts.basic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.basic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.basic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baumans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baumans
  static TextStyle baumans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9f9e8b94de7e96a118ae0165a927ffde8127bb9105f38bc5c39359622c7c40f4',
        38752,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Baumans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baumans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baumans
  static TextTheme baumansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.baumans(textStyle: textTheme?.display4),
      display3: GoogleFonts.baumans(textStyle: textTheme?.display3),
      display2: GoogleFonts.baumans(textStyle: textTheme?.display2),
      display1: GoogleFonts.baumans(textStyle: textTheme?.display1),
      headline: GoogleFonts.baumans(textStyle: textTheme?.headline),
      title: GoogleFonts.baumans(textStyle: textTheme?.title),
      subhead: GoogleFonts.baumans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.baumans(textStyle: textTheme?.body2),
      body1: GoogleFonts.baumans(textStyle: textTheme?.body1),
      caption: GoogleFonts.baumans(textStyle: textTheme?.caption),
      button: GoogleFonts.baumans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.baumans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.baumans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Belgrano font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Belgrano
  static TextStyle belgrano({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4b66b889e699bfe12ea9cc04621e48eed308f79ef2955cd4f20d0e7ddbcbaeab',
        29028,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Belgrano',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Belgrano font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Belgrano
  static TextTheme belgranoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.belgrano(textStyle: textTheme?.display4),
      display3: GoogleFonts.belgrano(textStyle: textTheme?.display3),
      display2: GoogleFonts.belgrano(textStyle: textTheme?.display2),
      display1: GoogleFonts.belgrano(textStyle: textTheme?.display1),
      headline: GoogleFonts.belgrano(textStyle: textTheme?.headline),
      title: GoogleFonts.belgrano(textStyle: textTheme?.title),
      subhead: GoogleFonts.belgrano(textStyle: textTheme?.subhead),
      body2: GoogleFonts.belgrano(textStyle: textTheme?.body2),
      body1: GoogleFonts.belgrano(textStyle: textTheme?.body1),
      caption: GoogleFonts.belgrano(textStyle: textTheme?.caption),
      button: GoogleFonts.belgrano(textStyle: textTheme?.button),
      subtitle: GoogleFonts.belgrano(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.belgrano(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bellefair font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bellefair
  static TextStyle bellefair({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '581fd752c6fe9933425b7868917fe51b6d222b42336b931e58385cea219007a0',
        46492,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bellefair',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bellefair font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bellefair
  static TextTheme bellefairTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bellefair(textStyle: textTheme?.display4),
      display3: GoogleFonts.bellefair(textStyle: textTheme?.display3),
      display2: GoogleFonts.bellefair(textStyle: textTheme?.display2),
      display1: GoogleFonts.bellefair(textStyle: textTheme?.display1),
      headline: GoogleFonts.bellefair(textStyle: textTheme?.headline),
      title: GoogleFonts.bellefair(textStyle: textTheme?.title),
      subhead: GoogleFonts.bellefair(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bellefair(textStyle: textTheme?.body2),
      body1: GoogleFonts.bellefair(textStyle: textTheme?.body1),
      caption: GoogleFonts.bellefair(textStyle: textTheme?.caption),
      button: GoogleFonts.bellefair(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bellefair(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bellefair(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Belleza font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Belleza
  static TextStyle belleza({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '916c38d3ec21ba4e080cbb7c82b60f62b023224acf789357a9338460a610def2',
        27772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Belleza',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Belleza font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Belleza
  static TextTheme bellezaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.belleza(textStyle: textTheme?.display4),
      display3: GoogleFonts.belleza(textStyle: textTheme?.display3),
      display2: GoogleFonts.belleza(textStyle: textTheme?.display2),
      display1: GoogleFonts.belleza(textStyle: textTheme?.display1),
      headline: GoogleFonts.belleza(textStyle: textTheme?.headline),
      title: GoogleFonts.belleza(textStyle: textTheme?.title),
      subhead: GoogleFonts.belleza(textStyle: textTheme?.subhead),
      body2: GoogleFonts.belleza(textStyle: textTheme?.body2),
      body1: GoogleFonts.belleza(textStyle: textTheme?.body1),
      caption: GoogleFonts.belleza(textStyle: textTheme?.caption),
      button: GoogleFonts.belleza(textStyle: textTheme?.button),
      subtitle: GoogleFonts.belleza(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.belleza(textStyle: textTheme?.overline),
    );
  }

  /// Applies the BenchNine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BenchNine
  static TextStyle benchNine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '819e7479fd3310e52e9754666e7a85aae97b6ea92363f425c93d1763341c5720',
        38056,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6ff13f62cc4e1011ea688bc0bdad0ec34826a3c14cbc1b9ec0ed2b768a756be1',
        38812,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ad7761d772dd04c7cf6c3ea55ea6f5bc9ca1540a2961a12251b37aee5d067022',
        38748,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BenchNine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the BenchNine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BenchNine
  static TextTheme benchNineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.benchNine(textStyle: textTheme?.display4),
      display3: GoogleFonts.benchNine(textStyle: textTheme?.display3),
      display2: GoogleFonts.benchNine(textStyle: textTheme?.display2),
      display1: GoogleFonts.benchNine(textStyle: textTheme?.display1),
      headline: GoogleFonts.benchNine(textStyle: textTheme?.headline),
      title: GoogleFonts.benchNine(textStyle: textTheme?.title),
      subhead: GoogleFonts.benchNine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.benchNine(textStyle: textTheme?.body2),
      body1: GoogleFonts.benchNine(textStyle: textTheme?.body1),
      caption: GoogleFonts.benchNine(textStyle: textTheme?.caption),
      button: GoogleFonts.benchNine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.benchNine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.benchNine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bentham font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bentham
  static TextStyle bentham({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '36b9c399aae73bd09e01d76e51e8697f80e9e34f14e954b929a08d6cfbc5f697',
        40176,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bentham',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bentham font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bentham
  static TextTheme benthamTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bentham(textStyle: textTheme?.display4),
      display3: GoogleFonts.bentham(textStyle: textTheme?.display3),
      display2: GoogleFonts.bentham(textStyle: textTheme?.display2),
      display1: GoogleFonts.bentham(textStyle: textTheme?.display1),
      headline: GoogleFonts.bentham(textStyle: textTheme?.headline),
      title: GoogleFonts.bentham(textStyle: textTheme?.title),
      subhead: GoogleFonts.bentham(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bentham(textStyle: textTheme?.body2),
      body1: GoogleFonts.bentham(textStyle: textTheme?.body1),
      caption: GoogleFonts.bentham(textStyle: textTheme?.caption),
      button: GoogleFonts.bentham(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bentham(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bentham(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Berkshire Swash font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Berkshire+Swash
  static TextStyle berkshireSwash({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2e73eb938ce44215938a21b199bc0a7eba8e1805d0d2528c3300ad7a1813d5e0',
        57948,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BerkshireSwash',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Berkshire Swash font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Berkshire+Swash
  static TextTheme berkshireSwashTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.berkshireSwash(textStyle: textTheme?.display4),
      display3: GoogleFonts.berkshireSwash(textStyle: textTheme?.display3),
      display2: GoogleFonts.berkshireSwash(textStyle: textTheme?.display2),
      display1: GoogleFonts.berkshireSwash(textStyle: textTheme?.display1),
      headline: GoogleFonts.berkshireSwash(textStyle: textTheme?.headline),
      title: GoogleFonts.berkshireSwash(textStyle: textTheme?.title),
      subhead: GoogleFonts.berkshireSwash(textStyle: textTheme?.subhead),
      body2: GoogleFonts.berkshireSwash(textStyle: textTheme?.body2),
      body1: GoogleFonts.berkshireSwash(textStyle: textTheme?.body1),
      caption: GoogleFonts.berkshireSwash(textStyle: textTheme?.caption),
      button: GoogleFonts.berkshireSwash(textStyle: textTheme?.button),
      subtitle: GoogleFonts.berkshireSwash(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.berkshireSwash(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Beth Ellen font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Beth+Ellen
  static TextStyle bethEllen({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '33f7d9b097ad741e56ef314b447fa4e0d310aab981ba6aea5db368053b65bc56',
        115600,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BethEllen',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Beth Ellen font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Beth+Ellen
  static TextTheme bethEllenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bethEllen(textStyle: textTheme?.display4),
      display3: GoogleFonts.bethEllen(textStyle: textTheme?.display3),
      display2: GoogleFonts.bethEllen(textStyle: textTheme?.display2),
      display1: GoogleFonts.bethEllen(textStyle: textTheme?.display1),
      headline: GoogleFonts.bethEllen(textStyle: textTheme?.headline),
      title: GoogleFonts.bethEllen(textStyle: textTheme?.title),
      subhead: GoogleFonts.bethEllen(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bethEllen(textStyle: textTheme?.body2),
      body1: GoogleFonts.bethEllen(textStyle: textTheme?.body1),
      caption: GoogleFonts.bethEllen(textStyle: textTheme?.caption),
      button: GoogleFonts.bethEllen(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bethEllen(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bethEllen(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bevan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bevan
  static TextStyle bevan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '95fb9ca931c31e79c8312fb66d76a2239472f842f9aeed9c261367a55723370f',
        55536,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bevan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bevan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bevan
  static TextTheme bevanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bevan(textStyle: textTheme?.display4),
      display3: GoogleFonts.bevan(textStyle: textTheme?.display3),
      display2: GoogleFonts.bevan(textStyle: textTheme?.display2),
      display1: GoogleFonts.bevan(textStyle: textTheme?.display1),
      headline: GoogleFonts.bevan(textStyle: textTheme?.headline),
      title: GoogleFonts.bevan(textStyle: textTheme?.title),
      subhead: GoogleFonts.bevan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bevan(textStyle: textTheme?.body2),
      body1: GoogleFonts.bevan(textStyle: textTheme?.body1),
      caption: GoogleFonts.bevan(textStyle: textTheme?.caption),
      button: GoogleFonts.bevan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bevan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bevan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bigelow Rules font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bigelow+Rules
  static TextStyle bigelowRules({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b86229b1bc741bc11ef0517467d96769485504f74278c1011120697a17d74d26',
        59028,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BigelowRules',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bigelow Rules font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bigelow+Rules
  static TextTheme bigelowRulesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bigelowRules(textStyle: textTheme?.display4),
      display3: GoogleFonts.bigelowRules(textStyle: textTheme?.display3),
      display2: GoogleFonts.bigelowRules(textStyle: textTheme?.display2),
      display1: GoogleFonts.bigelowRules(textStyle: textTheme?.display1),
      headline: GoogleFonts.bigelowRules(textStyle: textTheme?.headline),
      title: GoogleFonts.bigelowRules(textStyle: textTheme?.title),
      subhead: GoogleFonts.bigelowRules(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bigelowRules(textStyle: textTheme?.body2),
      body1: GoogleFonts.bigelowRules(textStyle: textTheme?.body1),
      caption: GoogleFonts.bigelowRules(textStyle: textTheme?.caption),
      button: GoogleFonts.bigelowRules(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bigelowRules(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bigelowRules(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bigshot One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bigshot+One
  static TextStyle bigshotOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cd6b11ed5794f665b3e412e676ae624b63b086b93992d6c0b00c9afd26180c79',
        36972,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BigshotOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bigshot One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bigshot+One
  static TextTheme bigshotOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bigshotOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.bigshotOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.bigshotOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.bigshotOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.bigshotOne(textStyle: textTheme?.headline),
      title: GoogleFonts.bigshotOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.bigshotOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bigshotOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.bigshotOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.bigshotOne(textStyle: textTheme?.caption),
      button: GoogleFonts.bigshotOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bigshotOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bigshotOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bilbo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bilbo
  static TextStyle bilbo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '55d2e6fb7257d5ade5d2419927eebf1f0c78ba65154b64d0cb737b6c8fa6a7df',
        42864,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bilbo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bilbo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bilbo
  static TextTheme bilboTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bilbo(textStyle: textTheme?.display4),
      display3: GoogleFonts.bilbo(textStyle: textTheme?.display3),
      display2: GoogleFonts.bilbo(textStyle: textTheme?.display2),
      display1: GoogleFonts.bilbo(textStyle: textTheme?.display1),
      headline: GoogleFonts.bilbo(textStyle: textTheme?.headline),
      title: GoogleFonts.bilbo(textStyle: textTheme?.title),
      subhead: GoogleFonts.bilbo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bilbo(textStyle: textTheme?.body2),
      body1: GoogleFonts.bilbo(textStyle: textTheme?.body1),
      caption: GoogleFonts.bilbo(textStyle: textTheme?.caption),
      button: GoogleFonts.bilbo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bilbo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bilbo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bilbo Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bilbo+Swash+Caps
  static TextStyle bilboSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e55126acc93a6cae98b3736d06e24e1301a26f9aa4ac2173998ab1fa142b1736',
        58124,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BilboSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bilbo Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bilbo+Swash+Caps
  static TextTheme bilboSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the BioRhyme font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BioRhyme
  static TextStyle bioRhyme({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8c7047e02059b7ea10893cf7bcfe3dc06e450dd3fb6000e05171462fedc43f7e',
        69848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b9ee5307ca507a88bed949ef452d4b6c835e503ef09b30cbb1ace6d65030e873',
        72476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bfe90585ffc1c3fc0d661d75c86187e9b6176836b56026b7882465f43a328616',
        71764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cd56fec3e00f732e0ff393a16cd304a5b4818b7b5bc437e4f418142a976284e6',
        71756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '43c38cd7da3c0c61638db3dbfd450b28e4abcacc9a48011176274140cf681c2b',
        68792,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7770459b3448470de7eebc842dd6d1b27857480f955caa6fda9114f30f9c487a',
        69024,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '564af9bc89e9baac8c99c4a2b2bb1262ed16deaec1971840ab3e348ed0dc8e22',
        72648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1fa6003a77f1c41cfe89fc6db7c98358f0e6fa62b61c965e0e1a04ed960601b9',
        72028,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '89375361cdabf9dbf2e57378fa40cc8c19512e518617d5e8502c9db8aa4ee2a1',
        71960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '586a8d74b8042767a173971c026734fb6cb75934497b3c9d2ebd80ad9e60c31d',
        71188,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BioRhyme',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the BioRhyme font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BioRhyme
  static TextTheme bioRhymeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bioRhyme(textStyle: textTheme?.display4),
      display3: GoogleFonts.bioRhyme(textStyle: textTheme?.display3),
      display2: GoogleFonts.bioRhyme(textStyle: textTheme?.display2),
      display1: GoogleFonts.bioRhyme(textStyle: textTheme?.display1),
      headline: GoogleFonts.bioRhyme(textStyle: textTheme?.headline),
      title: GoogleFonts.bioRhyme(textStyle: textTheme?.title),
      subhead: GoogleFonts.bioRhyme(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bioRhyme(textStyle: textTheme?.body2),
      body1: GoogleFonts.bioRhyme(textStyle: textTheme?.body1),
      caption: GoogleFonts.bioRhyme(textStyle: textTheme?.caption),
      button: GoogleFonts.bioRhyme(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bioRhyme(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bioRhyme(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Biryani font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Biryani
  static TextStyle biryani({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f65303a20787e99a61c757c6e4cbc9ee68af544a375dac932049def734163642',
        123500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '842f2d86cd486de76ca080714383fb99a105dfb85b3bae4360d00e8ac8db8c9f',
        124924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '16e70205340aba8294e2da2cc8581ec3c5fb3f2af846d51a3de360f447d6f254',
        124200,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '80169a7f1fadd79859c89b0e9a066fd8dbbc460f13a4e5df8389cd853dc67be9',
        124224,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8834894534eb39412acdbc906f20b8d4addd5339d6777eaf647ee1ecbd44538c',
        123988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba9bcb5882f72d4ac114689fb32db356c2be660bc64a16c88ac2457bdbefd777',
        124032,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5bad25e5e05861d1da7ddd858aefac18d200688fc997bf2760059fcc2c2ad30d',
        123080,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Biryani',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Biryani font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Biryani
  static TextTheme biryaniTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.biryani(textStyle: textTheme?.display4),
      display3: GoogleFonts.biryani(textStyle: textTheme?.display3),
      display2: GoogleFonts.biryani(textStyle: textTheme?.display2),
      display1: GoogleFonts.biryani(textStyle: textTheme?.display1),
      headline: GoogleFonts.biryani(textStyle: textTheme?.headline),
      title: GoogleFonts.biryani(textStyle: textTheme?.title),
      subhead: GoogleFonts.biryani(textStyle: textTheme?.subhead),
      body2: GoogleFonts.biryani(textStyle: textTheme?.body2),
      body1: GoogleFonts.biryani(textStyle: textTheme?.body1),
      caption: GoogleFonts.biryani(textStyle: textTheme?.caption),
      button: GoogleFonts.biryani(textStyle: textTheme?.button),
      subtitle: GoogleFonts.biryani(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.biryani(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bitter font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bitter
  static TextStyle bitter({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '937e0cb8bbc92b1b89eafc86f73c06dec677f4e8d2c39de72208ae4fffedc7fa',
        24208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7a9ae7d2a6428de7df36662a7014e91b880c5d09663ae9c66abb8a928c0ad371',
        39064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c41cd10ef080e4d415bc6da6d86b29b73fe87ba84afe455423476109ed6addbd',
        25616,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bitter',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bitter font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bitter
  static TextTheme bitterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bitter(textStyle: textTheme?.display4),
      display3: GoogleFonts.bitter(textStyle: textTheme?.display3),
      display2: GoogleFonts.bitter(textStyle: textTheme?.display2),
      display1: GoogleFonts.bitter(textStyle: textTheme?.display1),
      headline: GoogleFonts.bitter(textStyle: textTheme?.headline),
      title: GoogleFonts.bitter(textStyle: textTheme?.title),
      subhead: GoogleFonts.bitter(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bitter(textStyle: textTheme?.body2),
      body1: GoogleFonts.bitter(textStyle: textTheme?.body1),
      caption: GoogleFonts.bitter(textStyle: textTheme?.caption),
      button: GoogleFonts.bitter(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bitter(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bitter(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Black And White Picture font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+And+White+Picture
  static TextStyle blackAndWhitePicture({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0c951e047e8f1e152232363c35791b975f78ae96c97bfa6f14634c7a2551970c',
        9586680,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BlackAndWhitePicture',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Black And White Picture font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+And+White+Picture
  static TextTheme blackAndWhitePictureTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.headline),
      title: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.title),
      subhead: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.subhead),
      body2: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.body2),
      body1: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.body1),
      caption: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.caption),
      button: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Black Han Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+Han+Sans
  static TextStyle blackHanSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ea3e07623642e89ce9ae84a698b9557dd6361db9bc40b993b7715531404db088',
        382952,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BlackHanSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Black Han Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+Han+Sans
  static TextTheme blackHanSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.blackHanSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.blackHanSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.blackHanSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.blackHanSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.blackHanSans(textStyle: textTheme?.headline),
      title: GoogleFonts.blackHanSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.blackHanSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.blackHanSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.blackHanSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.blackHanSans(textStyle: textTheme?.caption),
      button: GoogleFonts.blackHanSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.blackHanSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.blackHanSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Black Ops One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+Ops+One
  static TextStyle blackOpsOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9a9eebffdb4d3c168c63bfcd5d0ec80a1571160a66e46ef698786f9c56922256',
        41404,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BlackOpsOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Black Ops One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+Ops+One
  static TextTheme blackOpsOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.blackOpsOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.blackOpsOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.blackOpsOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.blackOpsOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.blackOpsOne(textStyle: textTheme?.headline),
      title: GoogleFonts.blackOpsOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.blackOpsOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.blackOpsOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.blackOpsOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.blackOpsOne(textStyle: textTheme?.caption),
      button: GoogleFonts.blackOpsOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.blackOpsOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.blackOpsOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Blinker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Blinker
  static TextStyle blinker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7c240948a3fc8d5d8689c3a63f7f8ebc6306f7c85e807823569843f0f54195f9',
        47168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2a79a8324609cc2b3bcdaec6541902337b886042ed55c471dbb6f257c65b280f',
        48596,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3dd96a764325a06a02dcd84be7a03f3a2f2b6808e40d63328015690bf81f6c96',
        48440,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '51b0da89566f911a7458b35be7b50dd97cb0ac23dff1eeb067b4d64a79911f3c',
        47676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a51856bff19a13b746d4d2d4b3ebb07157b40df14a94c526837c9e5586337f01',
        53416,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6eba9015f99f6f510f713d65f3f324ba543c2e9d3bc5eac9cbdd446b738eda1f',
        48892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd898f7f6b1fb3ed914d6dfaa20bc29b0f94d293822df46b2a78b5759f2637549',
        53068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1d02003dcc4ca64b3de96560fffcdd9e05125270589caabebc0da78d05d0f61e',
        52352,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Blinker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Blinker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Blinker
  static TextTheme blinkerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.blinker(textStyle: textTheme?.display4),
      display3: GoogleFonts.blinker(textStyle: textTheme?.display3),
      display2: GoogleFonts.blinker(textStyle: textTheme?.display2),
      display1: GoogleFonts.blinker(textStyle: textTheme?.display1),
      headline: GoogleFonts.blinker(textStyle: textTheme?.headline),
      title: GoogleFonts.blinker(textStyle: textTheme?.title),
      subhead: GoogleFonts.blinker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.blinker(textStyle: textTheme?.body2),
      body1: GoogleFonts.blinker(textStyle: textTheme?.body1),
      caption: GoogleFonts.blinker(textStyle: textTheme?.caption),
      button: GoogleFonts.blinker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.blinker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.blinker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bonbon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bonbon
  static TextStyle bonbon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7c2ebdfc96584f15448c9196a29a7983cad1097756e748e6d3d89db0cab6796',
        38740,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bonbon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bonbon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bonbon
  static TextTheme bonbonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bonbon(textStyle: textTheme?.display4),
      display3: GoogleFonts.bonbon(textStyle: textTheme?.display3),
      display2: GoogleFonts.bonbon(textStyle: textTheme?.display2),
      display1: GoogleFonts.bonbon(textStyle: textTheme?.display1),
      headline: GoogleFonts.bonbon(textStyle: textTheme?.headline),
      title: GoogleFonts.bonbon(textStyle: textTheme?.title),
      subhead: GoogleFonts.bonbon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bonbon(textStyle: textTheme?.body2),
      body1: GoogleFonts.bonbon(textStyle: textTheme?.body1),
      caption: GoogleFonts.bonbon(textStyle: textTheme?.caption),
      button: GoogleFonts.bonbon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bonbon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bonbon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Boogaloo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Boogaloo
  static TextStyle boogaloo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ecd8d89eafeb4669ce51f02cef4e529aa97180ed7c2a9cfcbad4714ed9ede46f',
        33880,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Boogaloo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Boogaloo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Boogaloo
  static TextTheme boogalooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.boogaloo(textStyle: textTheme?.display4),
      display3: GoogleFonts.boogaloo(textStyle: textTheme?.display3),
      display2: GoogleFonts.boogaloo(textStyle: textTheme?.display2),
      display1: GoogleFonts.boogaloo(textStyle: textTheme?.display1),
      headline: GoogleFonts.boogaloo(textStyle: textTheme?.headline),
      title: GoogleFonts.boogaloo(textStyle: textTheme?.title),
      subhead: GoogleFonts.boogaloo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.boogaloo(textStyle: textTheme?.body2),
      body1: GoogleFonts.boogaloo(textStyle: textTheme?.body1),
      caption: GoogleFonts.boogaloo(textStyle: textTheme?.caption),
      button: GoogleFonts.boogaloo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.boogaloo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.boogaloo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bowlby One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bowlby+One
  static TextStyle bowlbyOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4d04430262e4d8e8e549ffcc4c97a27cb31ad26f9d2d85b2ba224381697b1a8d',
        61596,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BowlbyOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bowlby One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bowlby+One
  static TextTheme bowlbyOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bowlbyOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.bowlbyOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.bowlbyOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.bowlbyOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.bowlbyOne(textStyle: textTheme?.headline),
      title: GoogleFonts.bowlbyOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.bowlbyOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bowlbyOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.bowlbyOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.bowlbyOne(textStyle: textTheme?.caption),
      button: GoogleFonts.bowlbyOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bowlbyOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bowlbyOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bowlby One SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bowlby+One+SC
  static TextStyle bowlbyOneSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e2826dfb2cc015f4d1a83c121524eff701bea716ad41719d21b0baaf0462abae',
        45072,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BowlbyOneSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bowlby One SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bowlby+One+SC
  static TextTheme bowlbyOneSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.headline),
      title: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.caption),
      button: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Brawler font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Brawler
  static TextStyle brawler({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '58683ec3f93abe0d96615faa1fc7fce9f3297205572a4c8c6265d0be27219279',
        64320,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Brawler',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Brawler font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Brawler
  static TextTheme brawlerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.brawler(textStyle: textTheme?.display4),
      display3: GoogleFonts.brawler(textStyle: textTheme?.display3),
      display2: GoogleFonts.brawler(textStyle: textTheme?.display2),
      display1: GoogleFonts.brawler(textStyle: textTheme?.display1),
      headline: GoogleFonts.brawler(textStyle: textTheme?.headline),
      title: GoogleFonts.brawler(textStyle: textTheme?.title),
      subhead: GoogleFonts.brawler(textStyle: textTheme?.subhead),
      body2: GoogleFonts.brawler(textStyle: textTheme?.body2),
      body1: GoogleFonts.brawler(textStyle: textTheme?.body1),
      caption: GoogleFonts.brawler(textStyle: textTheme?.caption),
      button: GoogleFonts.brawler(textStyle: textTheme?.button),
      subtitle: GoogleFonts.brawler(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.brawler(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bree Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bree+Serif
  static TextStyle breeSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9a7248ed16d47821a8836aa345a8297f6c44d86162fdbc6475497bc799db0e9f',
        46612,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BreeSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bree Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bree+Serif
  static TextTheme breeSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.breeSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.breeSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.breeSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.breeSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.breeSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.breeSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.breeSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.breeSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.breeSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.breeSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.breeSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.breeSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.breeSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bubblegum Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bubblegum+Sans
  static TextStyle bubblegumSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '53e2f591d5b22787b4fd506e06145d2652da6014e1707f782a92395533188726',
        38772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BubblegumSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bubblegum Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bubblegum+Sans
  static TextTheme bubblegumSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bubblegumSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.bubblegumSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.bubblegumSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.bubblegumSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.bubblegumSans(textStyle: textTheme?.headline),
      title: GoogleFonts.bubblegumSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.bubblegumSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bubblegumSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.bubblegumSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.bubblegumSans(textStyle: textTheme?.caption),
      button: GoogleFonts.bubblegumSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bubblegumSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bubblegumSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bubbler One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bubbler+One
  static TextStyle bubblerOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fd7ed8791a88cc19effc14df166be456cef77a85b707501822da21df19386254',
        30944,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BubblerOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bubbler One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bubbler+One
  static TextTheme bubblerOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bubblerOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.bubblerOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.bubblerOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.bubblerOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.bubblerOne(textStyle: textTheme?.headline),
      title: GoogleFonts.bubblerOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.bubblerOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bubblerOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.bubblerOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.bubblerOne(textStyle: textTheme?.caption),
      button: GoogleFonts.bubblerOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bubblerOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bubblerOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Buda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Buda
  static TextStyle buda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '385d4247a0218281950ea513488d597434ce1d22bafe1b9e0b0853fce9304338',
        90392,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Buda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Buda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Buda
  static TextTheme budaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.buda(textStyle: textTheme?.display4),
      display3: GoogleFonts.buda(textStyle: textTheme?.display3),
      display2: GoogleFonts.buda(textStyle: textTheme?.display2),
      display1: GoogleFonts.buda(textStyle: textTheme?.display1),
      headline: GoogleFonts.buda(textStyle: textTheme?.headline),
      title: GoogleFonts.buda(textStyle: textTheme?.title),
      subhead: GoogleFonts.buda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.buda(textStyle: textTheme?.body2),
      body1: GoogleFonts.buda(textStyle: textTheme?.body1),
      caption: GoogleFonts.buda(textStyle: textTheme?.caption),
      button: GoogleFonts.buda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.buda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.buda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Buenard font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Buenard
  static TextStyle buenard({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '98e52931f613305f11ff078f1cb569682195e516554178bf3c4127f644df907a',
        59764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8b680cec9af406d125f721b89472951a526fcf17393adea7449be902ffb7f5cd',
        58608,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Buenard',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Buenard font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Buenard
  static TextTheme buenardTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.buenard(textStyle: textTheme?.display4),
      display3: GoogleFonts.buenard(textStyle: textTheme?.display3),
      display2: GoogleFonts.buenard(textStyle: textTheme?.display2),
      display1: GoogleFonts.buenard(textStyle: textTheme?.display1),
      headline: GoogleFonts.buenard(textStyle: textTheme?.headline),
      title: GoogleFonts.buenard(textStyle: textTheme?.title),
      subhead: GoogleFonts.buenard(textStyle: textTheme?.subhead),
      body2: GoogleFonts.buenard(textStyle: textTheme?.body2),
      body1: GoogleFonts.buenard(textStyle: textTheme?.body1),
      caption: GoogleFonts.buenard(textStyle: textTheme?.caption),
      button: GoogleFonts.buenard(textStyle: textTheme?.button),
      subtitle: GoogleFonts.buenard(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.buenard(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee
  static TextStyle bungee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ee34fb3fe185999f9942b2b39a37688866c1a4e25eab17c7a67765e7f47f6dbe',
        110116,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bungee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee
  static TextTheme bungeeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungee(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungee(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungee(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungee(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungee(textStyle: textTheme?.headline),
      title: GoogleFonts.bungee(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungee(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungee(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungee(textStyle: textTheme?.caption),
      button: GoogleFonts.bungee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee Hairline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Hairline
  static TextStyle bungeeHairline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7082ad6f58a7ae0bdd49f1c56b50fdd5f19c8e5a7a760de15f353ff47bf2c391',
        97300,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BungeeHairline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee Hairline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Hairline
  static TextTheme bungeeHairlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungeeHairline(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungeeHairline(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungeeHairline(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungeeHairline(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungeeHairline(textStyle: textTheme?.headline),
      title: GoogleFonts.bungeeHairline(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungeeHairline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungeeHairline(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungeeHairline(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungeeHairline(textStyle: textTheme?.caption),
      button: GoogleFonts.bungeeHairline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungeeHairline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungeeHairline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee Inline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Inline
  static TextStyle bungeeInline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c34108c66136e4485dbe7f75f62e6d782066911952901a3b1657b8d37d5bf414',
        147660,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BungeeInline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee Inline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Inline
  static TextTheme bungeeInlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungeeInline(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungeeInline(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungeeInline(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungeeInline(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungeeInline(textStyle: textTheme?.headline),
      title: GoogleFonts.bungeeInline(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungeeInline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungeeInline(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungeeInline(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungeeInline(textStyle: textTheme?.caption),
      button: GoogleFonts.bungeeInline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungeeInline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungeeInline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee Outline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Outline
  static TextStyle bungeeOutline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '53bb5dbad57c06403c9f7c9503b0397f17f001d2a0881305c5bee9de3c610f78',
        200136,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BungeeOutline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee Outline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Outline
  static TextTheme bungeeOutlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungeeOutline(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungeeOutline(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungeeOutline(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungeeOutline(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungeeOutline(textStyle: textTheme?.headline),
      title: GoogleFonts.bungeeOutline(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungeeOutline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungeeOutline(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungeeOutline(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungeeOutline(textStyle: textTheme?.caption),
      button: GoogleFonts.bungeeOutline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungeeOutline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungeeOutline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee Shade font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Shade
  static TextStyle bungeeShade({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bd736a1fd1e9468b036a7df272341d90fa2864fa1a985cfef42c164898cadd99',
        330628,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BungeeShade',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee Shade font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Shade
  static TextTheme bungeeShadeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungeeShade(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungeeShade(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungeeShade(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungeeShade(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungeeShade(textStyle: textTheme?.headline),
      title: GoogleFonts.bungeeShade(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungeeShade(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungeeShade(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungeeShade(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungeeShade(textStyle: textTheme?.caption),
      button: GoogleFonts.bungeeShade(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungeeShade(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungeeShade(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Butcherman font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Butcherman
  static TextStyle butcherman({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5bcf1ab19e7b312ef6a3f23116fef277d7af2240e6ee5719e5a8688f36f00e23',
        66300,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Butcherman',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Butcherman font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Butcherman
  static TextTheme butchermanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.butcherman(textStyle: textTheme?.display4),
      display3: GoogleFonts.butcherman(textStyle: textTheme?.display3),
      display2: GoogleFonts.butcherman(textStyle: textTheme?.display2),
      display1: GoogleFonts.butcherman(textStyle: textTheme?.display1),
      headline: GoogleFonts.butcherman(textStyle: textTheme?.headline),
      title: GoogleFonts.butcherman(textStyle: textTheme?.title),
      subhead: GoogleFonts.butcherman(textStyle: textTheme?.subhead),
      body2: GoogleFonts.butcherman(textStyle: textTheme?.body2),
      body1: GoogleFonts.butcherman(textStyle: textTheme?.body1),
      caption: GoogleFonts.butcherman(textStyle: textTheme?.caption),
      button: GoogleFonts.butcherman(textStyle: textTheme?.button),
      subtitle: GoogleFonts.butcherman(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.butcherman(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Butterfly Kids font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Butterfly+Kids
  static TextStyle butterflyKids({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3e78c92335db0b2820b46df2d4a84c41e8690af1bac099b4a552e36736643b61',
        202408,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ButterflyKids',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Butterfly Kids font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Butterfly+Kids
  static TextTheme butterflyKidsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.butterflyKids(textStyle: textTheme?.display4),
      display3: GoogleFonts.butterflyKids(textStyle: textTheme?.display3),
      display2: GoogleFonts.butterflyKids(textStyle: textTheme?.display2),
      display1: GoogleFonts.butterflyKids(textStyle: textTheme?.display1),
      headline: GoogleFonts.butterflyKids(textStyle: textTheme?.headline),
      title: GoogleFonts.butterflyKids(textStyle: textTheme?.title),
      subhead: GoogleFonts.butterflyKids(textStyle: textTheme?.subhead),
      body2: GoogleFonts.butterflyKids(textStyle: textTheme?.body2),
      body1: GoogleFonts.butterflyKids(textStyle: textTheme?.body1),
      caption: GoogleFonts.butterflyKids(textStyle: textTheme?.caption),
      button: GoogleFonts.butterflyKids(textStyle: textTheme?.button),
      subtitle: GoogleFonts.butterflyKids(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.butterflyKids(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cabin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin
  static TextStyle cabin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ff30e9e9a66cf6a4e65d444d6bf8afdea7d574b27589397657972c2f9b2194f',
        81084,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'db35751de9b88dfbea004784c70c96bca9d813b5521cf320e5cb30adfd7384a2',
        80436,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4851465297f9c9aa19d41a969b28272f070f43271c7f279eb6daf3f291a47609',
        81516,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2f1dff32a90462507aca783f85d6b2ed780858dd81a2a13bf217afbbfe5cce77',
        81408,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b7e9674a2fca64e9eddd32df2987e72643c1fbadb5cc8158e4a429f8a99ea39a',
        81656,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'da97f68bcdcff651e97b599499a784fc828a6e26feb94f391324076d060e3f7f',
        81548,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9adb3df669ae368a467dbe74951a83ec476b74739063459b95b664e6ea2bf36a',
        78196,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e4a3605f6b618e79e1d2bc2e4890babb2828cca85fee80608cb7d4a810b06eab',
        80320,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8864cf658e1904654fb267649af1a35b07c0f9e7b2df523910efcfa047857270',
        75132,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '19d7c8b72085fd1898042b6adfa002bee67aa85565ea042e3383c6d9718262f3',
        74864,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '204e4e214a76e3cc970598f75636fbe098a6541146bb02dd3d1ec67c8e155e5b',
        74872,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8b3d243ed807d45b1666f9a3866bc69260a7d81fe656a1d0fc9335302b4d82fa',
        74732,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cabin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cabin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin
  static TextTheme cabinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cabin(textStyle: textTheme?.display4),
      display3: GoogleFonts.cabin(textStyle: textTheme?.display3),
      display2: GoogleFonts.cabin(textStyle: textTheme?.display2),
      display1: GoogleFonts.cabin(textStyle: textTheme?.display1),
      headline: GoogleFonts.cabin(textStyle: textTheme?.headline),
      title: GoogleFonts.cabin(textStyle: textTheme?.title),
      subhead: GoogleFonts.cabin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cabin(textStyle: textTheme?.body2),
      body1: GoogleFonts.cabin(textStyle: textTheme?.body1),
      caption: GoogleFonts.cabin(textStyle: textTheme?.caption),
      button: GoogleFonts.cabin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cabin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cabin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cabin Sketch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin+Sketch
  static TextStyle cabinSketch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c56ec3d2c6227ce0f5959e906b36dda6fbf2ea830ed4edeb9000ee53197c122e',
        155128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6dab969699fde26ddd2636960d9e77e5178036db4b98b1f3761df0e74e17ca88',
        269912,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CabinSketch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cabin Sketch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin+Sketch
  static TextTheme cabinSketchTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cabinSketch(textStyle: textTheme?.display4),
      display3: GoogleFonts.cabinSketch(textStyle: textTheme?.display3),
      display2: GoogleFonts.cabinSketch(textStyle: textTheme?.display2),
      display1: GoogleFonts.cabinSketch(textStyle: textTheme?.display1),
      headline: GoogleFonts.cabinSketch(textStyle: textTheme?.headline),
      title: GoogleFonts.cabinSketch(textStyle: textTheme?.title),
      subhead: GoogleFonts.cabinSketch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cabinSketch(textStyle: textTheme?.body2),
      body1: GoogleFonts.cabinSketch(textStyle: textTheme?.body1),
      caption: GoogleFonts.cabinSketch(textStyle: textTheme?.caption),
      button: GoogleFonts.cabinSketch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cabinSketch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cabinSketch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Caesar Dressing font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caesar+Dressing
  static TextStyle caesarDressing({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ee89ad88164ca8c3eeb747410087b9deecb5d306172af188f53bd267ec033f9c',
        89212,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CaesarDressing',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Caesar Dressing font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caesar+Dressing
  static TextTheme caesarDressingTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.caesarDressing(textStyle: textTheme?.display4),
      display3: GoogleFonts.caesarDressing(textStyle: textTheme?.display3),
      display2: GoogleFonts.caesarDressing(textStyle: textTheme?.display2),
      display1: GoogleFonts.caesarDressing(textStyle: textTheme?.display1),
      headline: GoogleFonts.caesarDressing(textStyle: textTheme?.headline),
      title: GoogleFonts.caesarDressing(textStyle: textTheme?.title),
      subhead: GoogleFonts.caesarDressing(textStyle: textTheme?.subhead),
      body2: GoogleFonts.caesarDressing(textStyle: textTheme?.body2),
      body1: GoogleFonts.caesarDressing(textStyle: textTheme?.body1),
      caption: GoogleFonts.caesarDressing(textStyle: textTheme?.caption),
      button: GoogleFonts.caesarDressing(textStyle: textTheme?.button),
      subtitle: GoogleFonts.caesarDressing(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.caesarDressing(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cagliostro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cagliostro
  static TextStyle cagliostro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3f57e12bc813bf3381233056c5544a970ea10f321f64dc63eef3ae1e650b2b93',
        37772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cagliostro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cagliostro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cagliostro
  static TextTheme cagliostroTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cagliostro(textStyle: textTheme?.display4),
      display3: GoogleFonts.cagliostro(textStyle: textTheme?.display3),
      display2: GoogleFonts.cagliostro(textStyle: textTheme?.display2),
      display1: GoogleFonts.cagliostro(textStyle: textTheme?.display1),
      headline: GoogleFonts.cagliostro(textStyle: textTheme?.headline),
      title: GoogleFonts.cagliostro(textStyle: textTheme?.title),
      subhead: GoogleFonts.cagliostro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cagliostro(textStyle: textTheme?.body2),
      body1: GoogleFonts.cagliostro(textStyle: textTheme?.body1),
      caption: GoogleFonts.cagliostro(textStyle: textTheme?.caption),
      button: GoogleFonts.cagliostro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cagliostro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cagliostro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cairo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cairo
  static TextStyle cairo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4f4138b4fc3c1369eee1151ad813f76e1b371364feb318c2dfed606c6c7a98dc',
        105268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '22d57a326952ad111119348fad278153f66b456e3f1e1b3eba074a4dc167f96e',
        104816,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1537c4e5a58de46dea37716791ce13157250bce598772e19adbf07abdaa2f5c0',
        103204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1f5b7f284695e2fd50ce750d2a479bcbdc7f701be3c33893f0773866193c8fba',
        104040,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '56f0547834a0a361e7216604988268770c085dcbd6f3241778f613b02d6db926',
        98368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4cf0e64d282c925bd689d2224fc9f34075e4586dbbebdbfa585ebab25a42059c',
        105544,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cairo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cairo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cairo
  static TextTheme cairoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cairo(textStyle: textTheme?.display4),
      display3: GoogleFonts.cairo(textStyle: textTheme?.display3),
      display2: GoogleFonts.cairo(textStyle: textTheme?.display2),
      display1: GoogleFonts.cairo(textStyle: textTheme?.display1),
      headline: GoogleFonts.cairo(textStyle: textTheme?.headline),
      title: GoogleFonts.cairo(textStyle: textTheme?.title),
      subhead: GoogleFonts.cairo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cairo(textStyle: textTheme?.body2),
      body1: GoogleFonts.cairo(textStyle: textTheme?.body1),
      caption: GoogleFonts.cairo(textStyle: textTheme?.caption),
      button: GoogleFonts.cairo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cairo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cairo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Calligraffitti font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Calligraffitti
  static TextStyle calligraffitti({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '580e522ce80a61e980096a261015c86696213b70822d677e4de3902787578e63',
        46940,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Calligraffitti',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Calligraffitti font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Calligraffitti
  static TextTheme calligraffittiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.calligraffitti(textStyle: textTheme?.display4),
      display3: GoogleFonts.calligraffitti(textStyle: textTheme?.display3),
      display2: GoogleFonts.calligraffitti(textStyle: textTheme?.display2),
      display1: GoogleFonts.calligraffitti(textStyle: textTheme?.display1),
      headline: GoogleFonts.calligraffitti(textStyle: textTheme?.headline),
      title: GoogleFonts.calligraffitti(textStyle: textTheme?.title),
      subhead: GoogleFonts.calligraffitti(textStyle: textTheme?.subhead),
      body2: GoogleFonts.calligraffitti(textStyle: textTheme?.body2),
      body1: GoogleFonts.calligraffitti(textStyle: textTheme?.body1),
      caption: GoogleFonts.calligraffitti(textStyle: textTheme?.caption),
      button: GoogleFonts.calligraffitti(textStyle: textTheme?.button),
      subtitle: GoogleFonts.calligraffitti(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.calligraffitti(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cambay font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cambay
  static TextStyle cambay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7bad4e2ac4cc5bdeef53e890b4b3d52b065fdae8ebe5f754f263384995f7c73',
        140024,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e821a1eb24db547646223e8b5065d6feeed373e25daf722bd4c3499785d3b6aa',
        155856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ece04d3d10726b39914e7a3c3ebbef7ccadcf7a26272fc090c83d3bf7690eea4',
        139576,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd17daa8d61f0a8bdd69696d0da7fc566e3a13141eb0ae45e512b48dcafb92565',
        151048,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cambay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cambay font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cambay
  static TextTheme cambayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cambay(textStyle: textTheme?.display4),
      display3: GoogleFonts.cambay(textStyle: textTheme?.display3),
      display2: GoogleFonts.cambay(textStyle: textTheme?.display2),
      display1: GoogleFonts.cambay(textStyle: textTheme?.display1),
      headline: GoogleFonts.cambay(textStyle: textTheme?.headline),
      title: GoogleFonts.cambay(textStyle: textTheme?.title),
      subhead: GoogleFonts.cambay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cambay(textStyle: textTheme?.body2),
      body1: GoogleFonts.cambay(textStyle: textTheme?.body1),
      caption: GoogleFonts.cambay(textStyle: textTheme?.caption),
      button: GoogleFonts.cambay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cambay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cambay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cambo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cambo
  static TextStyle cambo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4d8d683131ae5168d1210d9676808b76b985ad2a151d3a7514ec02f7b8a776b9',
        29056,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cambo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cambo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cambo
  static TextTheme camboTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cambo(textStyle: textTheme?.display4),
      display3: GoogleFonts.cambo(textStyle: textTheme?.display3),
      display2: GoogleFonts.cambo(textStyle: textTheme?.display2),
      display1: GoogleFonts.cambo(textStyle: textTheme?.display1),
      headline: GoogleFonts.cambo(textStyle: textTheme?.headline),
      title: GoogleFonts.cambo(textStyle: textTheme?.title),
      subhead: GoogleFonts.cambo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cambo(textStyle: textTheme?.body2),
      body1: GoogleFonts.cambo(textStyle: textTheme?.body1),
      caption: GoogleFonts.cambo(textStyle: textTheme?.caption),
      button: GoogleFonts.cambo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cambo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cambo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Candal font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Candal
  static TextStyle candal({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2e16795a5489340834dda623038868a2e7f48f4bc0f154f98c1a1962894a2598',
        32200,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Candal',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Candal font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Candal
  static TextTheme candalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.candal(textStyle: textTheme?.display4),
      display3: GoogleFonts.candal(textStyle: textTheme?.display3),
      display2: GoogleFonts.candal(textStyle: textTheme?.display2),
      display1: GoogleFonts.candal(textStyle: textTheme?.display1),
      headline: GoogleFonts.candal(textStyle: textTheme?.headline),
      title: GoogleFonts.candal(textStyle: textTheme?.title),
      subhead: GoogleFonts.candal(textStyle: textTheme?.subhead),
      body2: GoogleFonts.candal(textStyle: textTheme?.body2),
      body1: GoogleFonts.candal(textStyle: textTheme?.body1),
      caption: GoogleFonts.candal(textStyle: textTheme?.caption),
      button: GoogleFonts.candal(textStyle: textTheme?.button),
      subtitle: GoogleFonts.candal(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.candal(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cantarell font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantarell
  static TextStyle cantarell({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1e62d82800c92f72ed501733b5d52d7b8a5d88d1c6315bfdaf7f8ce781108c00',
        47436,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6d9559dd0df30daed7da97dc8ef05e7f39b72205fb9bd7a055ddaa5242afd36f',
        50000,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'db0c34021061680135f973a2cb5565811527ea91f2fa07d023f4e105eb6f45d3',
        49208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'bb2c0f469972ec2016c3b8b8254ea0077f46207efb249afb3c4d356cf2c5418e',
        52132,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cantarell',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cantarell font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantarell
  static TextTheme cantarellTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cantarell(textStyle: textTheme?.display4),
      display3: GoogleFonts.cantarell(textStyle: textTheme?.display3),
      display2: GoogleFonts.cantarell(textStyle: textTheme?.display2),
      display1: GoogleFonts.cantarell(textStyle: textTheme?.display1),
      headline: GoogleFonts.cantarell(textStyle: textTheme?.headline),
      title: GoogleFonts.cantarell(textStyle: textTheme?.title),
      subhead: GoogleFonts.cantarell(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cantarell(textStyle: textTheme?.body2),
      body1: GoogleFonts.cantarell(textStyle: textTheme?.body1),
      caption: GoogleFonts.cantarell(textStyle: textTheme?.caption),
      button: GoogleFonts.cantarell(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cantarell(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cantarell(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cantata One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantata+One
  static TextStyle cantataOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b58597daf95866fac678391238aefbae4bc3e31e826a3b85a2c749c3844a4dfe',
        57144,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CantataOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cantata One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantata+One
  static TextTheme cantataOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cantataOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.cantataOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.cantataOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.cantataOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.cantataOne(textStyle: textTheme?.headline),
      title: GoogleFonts.cantataOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.cantataOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cantataOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.cantataOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.cantataOne(textStyle: textTheme?.caption),
      button: GoogleFonts.cantataOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cantataOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cantataOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cantora One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantora+One
  static TextStyle cantoraOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '242d2167789079107cbe59c3e9ccd0339ca51419245296a4659c6b3ad73cc41c',
        109236,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CantoraOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cantora One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantora+One
  static TextTheme cantoraOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cantoraOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.cantoraOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.cantoraOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.cantoraOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.cantoraOne(textStyle: textTheme?.headline),
      title: GoogleFonts.cantoraOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.cantoraOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cantoraOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.cantoraOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.cantoraOne(textStyle: textTheme?.caption),
      button: GoogleFonts.cantoraOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cantoraOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cantoraOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Capriola font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Capriola
  static TextStyle capriola({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '938d0b1c7f521513ee9bb1114d92827718670e0e5a495ccd564d70b0ddc59594',
        78168,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Capriola',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Capriola font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Capriola
  static TextTheme capriolaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.capriola(textStyle: textTheme?.display4),
      display3: GoogleFonts.capriola(textStyle: textTheme?.display3),
      display2: GoogleFonts.capriola(textStyle: textTheme?.display2),
      display1: GoogleFonts.capriola(textStyle: textTheme?.display1),
      headline: GoogleFonts.capriola(textStyle: textTheme?.headline),
      title: GoogleFonts.capriola(textStyle: textTheme?.title),
      subhead: GoogleFonts.capriola(textStyle: textTheme?.subhead),
      body2: GoogleFonts.capriola(textStyle: textTheme?.body2),
      body1: GoogleFonts.capriola(textStyle: textTheme?.body1),
      caption: GoogleFonts.capriola(textStyle: textTheme?.caption),
      button: GoogleFonts.capriola(textStyle: textTheme?.button),
      subtitle: GoogleFonts.capriola(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.capriola(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cardo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cardo
  static TextStyle cardo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '286e6a4bde92ea6087b503978338898808df924a3cdd8144741fa780d11603a2',
        400420,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '43bee56e6bb3d2ad574558a859227592f0b0ac881a70fd8f2cf74b808bb9be00',
        262820,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '10c0bab22a674656a3d5e94e05e64f9c6c6ea25acce0d0fc846f964985b142ce',
        348296,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cardo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cardo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cardo
  static TextTheme cardoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cardo(textStyle: textTheme?.display4),
      display3: GoogleFonts.cardo(textStyle: textTheme?.display3),
      display2: GoogleFonts.cardo(textStyle: textTheme?.display2),
      display1: GoogleFonts.cardo(textStyle: textTheme?.display1),
      headline: GoogleFonts.cardo(textStyle: textTheme?.headline),
      title: GoogleFonts.cardo(textStyle: textTheme?.title),
      subhead: GoogleFonts.cardo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cardo(textStyle: textTheme?.body2),
      body1: GoogleFonts.cardo(textStyle: textTheme?.body1),
      caption: GoogleFonts.cardo(textStyle: textTheme?.caption),
      button: GoogleFonts.cardo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cardo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cardo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Carme font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carme
  static TextStyle carme({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '79973fb109b078d0e49d90287e9f6527dc8829c6076c878ed07743d78cfb988b',
        60852,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Carme',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Carme font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carme
  static TextTheme carmeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.carme(textStyle: textTheme?.display4),
      display3: GoogleFonts.carme(textStyle: textTheme?.display3),
      display2: GoogleFonts.carme(textStyle: textTheme?.display2),
      display1: GoogleFonts.carme(textStyle: textTheme?.display1),
      headline: GoogleFonts.carme(textStyle: textTheme?.headline),
      title: GoogleFonts.carme(textStyle: textTheme?.title),
      subhead: GoogleFonts.carme(textStyle: textTheme?.subhead),
      body2: GoogleFonts.carme(textStyle: textTheme?.body2),
      body1: GoogleFonts.carme(textStyle: textTheme?.body1),
      caption: GoogleFonts.carme(textStyle: textTheme?.caption),
      button: GoogleFonts.carme(textStyle: textTheme?.button),
      subtitle: GoogleFonts.carme(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.carme(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Carrois Gothic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carrois+Gothic
  static TextStyle carroisGothic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd013d780a3d17a244794f0d2649a6214a1946f102ddf0a02fe366fa7bb8bb6ec',
        26212,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CarroisGothic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Carrois Gothic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carrois+Gothic
  static TextTheme carroisGothicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.carroisGothic(textStyle: textTheme?.display4),
      display3: GoogleFonts.carroisGothic(textStyle: textTheme?.display3),
      display2: GoogleFonts.carroisGothic(textStyle: textTheme?.display2),
      display1: GoogleFonts.carroisGothic(textStyle: textTheme?.display1),
      headline: GoogleFonts.carroisGothic(textStyle: textTheme?.headline),
      title: GoogleFonts.carroisGothic(textStyle: textTheme?.title),
      subhead: GoogleFonts.carroisGothic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.carroisGothic(textStyle: textTheme?.body2),
      body1: GoogleFonts.carroisGothic(textStyle: textTheme?.body1),
      caption: GoogleFonts.carroisGothic(textStyle: textTheme?.caption),
      button: GoogleFonts.carroisGothic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.carroisGothic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.carroisGothic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Carrois Gothic SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carrois+Gothic+SC
  static TextStyle carroisGothicSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8b50b78ae9eb35706d3d9923b420465d6c6245e9469dcbe4a96c30d118338edf',
        26084,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CarroisGothicSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Carrois Gothic SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carrois+Gothic+SC
  static TextTheme carroisGothicSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.carroisGothicSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.carroisGothicSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.carroisGothicSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.carroisGothicSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.carroisGothicSC(textStyle: textTheme?.headline),
      title: GoogleFonts.carroisGothicSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.carroisGothicSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.carroisGothicSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.carroisGothicSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.carroisGothicSC(textStyle: textTheme?.caption),
      button: GoogleFonts.carroisGothicSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.carroisGothicSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.carroisGothicSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Carter One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carter+One
  static TextStyle carterOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '64cdbf0babf6eb9e23f0a780f283a930636589b4b8d9a5d0cdf24888a7719292',
        63872,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CarterOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Carter One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carter+One
  static TextTheme carterOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.carterOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.carterOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.carterOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.carterOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.carterOne(textStyle: textTheme?.headline),
      title: GoogleFonts.carterOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.carterOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.carterOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.carterOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.carterOne(textStyle: textTheme?.caption),
      button: GoogleFonts.carterOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.carterOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.carterOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Catamaran font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Catamaran
  static TextStyle catamaran({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8e9d704be93826d9781f133277934bb6184afd9522b149f005c78f5d89e62ac',
        51516,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3f24bc068d63c199fab01e5c0690d6e034f485057c3c19571b656e705a78756b',
        51520,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '853537ef3cef46cebdd3f2ee0f94b33861095d50b2584d6f96a47725f6f4b79d',
        51428,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6af095039ae2cc21b9f8e147b290dc6fae99dd4f45843dd262a9e30557dd4e65',
        51200,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2b80fad7d7ef99a42af9235090775e879520d07fb7b3deda4986a64c81be4a96',
        51172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd77e1072b0d92cfa66cc458ff7e053b1e33cfa9dd663fb52f75062ba9a134122',
        51028,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '47d32e32345049db4c0f41c0ffba707afcf0ac18cb7000817fd26ae811255728',
        50828,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '342bd0052b9b81ca6df68a9cdda635ad6f77c796e37045545bfa1d0a071c0bc8',
        50464,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fa466db090fa897764fa413a006d0c4f7a975a118db3de634988a14f674446cb',
        50220,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Catamaran',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Catamaran font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Catamaran
  static TextTheme catamaranTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.catamaran(textStyle: textTheme?.display4),
      display3: GoogleFonts.catamaran(textStyle: textTheme?.display3),
      display2: GoogleFonts.catamaran(textStyle: textTheme?.display2),
      display1: GoogleFonts.catamaran(textStyle: textTheme?.display1),
      headline: GoogleFonts.catamaran(textStyle: textTheme?.headline),
      title: GoogleFonts.catamaran(textStyle: textTheme?.title),
      subhead: GoogleFonts.catamaran(textStyle: textTheme?.subhead),
      body2: GoogleFonts.catamaran(textStyle: textTheme?.body2),
      body1: GoogleFonts.catamaran(textStyle: textTheme?.body1),
      caption: GoogleFonts.catamaran(textStyle: textTheme?.caption),
      button: GoogleFonts.catamaran(textStyle: textTheme?.button),
      subtitle: GoogleFonts.catamaran(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.catamaran(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Caudex font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caudex
  static TextStyle caudex({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e0c195632ea06158f87e86ee898119dd8a7f59788999552ed79be77c33c6a726',
        466276,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '53374860983e21bb358d83d1162c824903649ae49f873a963c665b066514bb9d',
        559392,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '09a6db433fd45eb3e1423e9947afe5b766008cc358cb482b42103970fc840676',
        471660,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '45c118976f77e53a2a5122e22cace7fb846373a14892fbb7e0ff61e1a46de1d4',
        555108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Caudex',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Caudex font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caudex
  static TextTheme caudexTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.caudex(textStyle: textTheme?.display4),
      display3: GoogleFonts.caudex(textStyle: textTheme?.display3),
      display2: GoogleFonts.caudex(textStyle: textTheme?.display2),
      display1: GoogleFonts.caudex(textStyle: textTheme?.display1),
      headline: GoogleFonts.caudex(textStyle: textTheme?.headline),
      title: GoogleFonts.caudex(textStyle: textTheme?.title),
      subhead: GoogleFonts.caudex(textStyle: textTheme?.subhead),
      body2: GoogleFonts.caudex(textStyle: textTheme?.body2),
      body1: GoogleFonts.caudex(textStyle: textTheme?.body1),
      caption: GoogleFonts.caudex(textStyle: textTheme?.caption),
      button: GoogleFonts.caudex(textStyle: textTheme?.button),
      subtitle: GoogleFonts.caudex(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.caudex(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Caveat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caveat
  static TextStyle caveat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0ffe3acdd9c8d91838d7ba021d1c4e9111151e34a104318a8aafe0efeda5755f',
        165376,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6993da01fa90c359d45a03be9927b46be80d261978de6f5805f43d75ed2d172f',
        166236,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Caveat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Caveat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caveat
  static TextTheme caveatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.caveat(textStyle: textTheme?.display4),
      display3: GoogleFonts.caveat(textStyle: textTheme?.display3),
      display2: GoogleFonts.caveat(textStyle: textTheme?.display2),
      display1: GoogleFonts.caveat(textStyle: textTheme?.display1),
      headline: GoogleFonts.caveat(textStyle: textTheme?.headline),
      title: GoogleFonts.caveat(textStyle: textTheme?.title),
      subhead: GoogleFonts.caveat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.caveat(textStyle: textTheme?.body2),
      body1: GoogleFonts.caveat(textStyle: textTheme?.body1),
      caption: GoogleFonts.caveat(textStyle: textTheme?.caption),
      button: GoogleFonts.caveat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.caveat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.caveat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Caveat Brush font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caveat+Brush
  static TextStyle caveatBrush({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '70de81a815f44819880ddba3c93eda87ab6bd1a4b21db15e5ba29c9271cba521',
        232640,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CaveatBrush',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Caveat Brush font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caveat+Brush
  static TextTheme caveatBrushTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.caveatBrush(textStyle: textTheme?.display4),
      display3: GoogleFonts.caveatBrush(textStyle: textTheme?.display3),
      display2: GoogleFonts.caveatBrush(textStyle: textTheme?.display2),
      display1: GoogleFonts.caveatBrush(textStyle: textTheme?.display1),
      headline: GoogleFonts.caveatBrush(textStyle: textTheme?.headline),
      title: GoogleFonts.caveatBrush(textStyle: textTheme?.title),
      subhead: GoogleFonts.caveatBrush(textStyle: textTheme?.subhead),
      body2: GoogleFonts.caveatBrush(textStyle: textTheme?.body2),
      body1: GoogleFonts.caveatBrush(textStyle: textTheme?.body1),
      caption: GoogleFonts.caveatBrush(textStyle: textTheme?.caption),
      button: GoogleFonts.caveatBrush(textStyle: textTheme?.button),
      subtitle: GoogleFonts.caveatBrush(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.caveatBrush(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cedarville Cursive font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cedarville+Cursive
  static TextStyle cedarvilleCursive({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b1296a081a20bf4a1936ace5eac4d05fa6702cdfaab5f94a5088af4c0aa46c3d',
        68704,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CedarvilleCursive',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cedarville Cursive font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cedarville+Cursive
  static TextTheme cedarvilleCursiveTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.display4),
      display3: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.display3),
      display2: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.display2),
      display1: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.display1),
      headline: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.headline),
      title: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.title),
      subhead: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.body2),
      body1: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.body1),
      caption: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.caption),
      button: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ceviche One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ceviche+One
  static TextStyle cevicheOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ed3cdc36bf356dbe366b2198c633acbf26815fc96c14ba05a7847b274043909',
        36688,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CevicheOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ceviche One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ceviche+One
  static TextTheme cevicheOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cevicheOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.cevicheOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.cevicheOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.cevicheOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.cevicheOne(textStyle: textTheme?.headline),
      title: GoogleFonts.cevicheOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.cevicheOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cevicheOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.cevicheOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.cevicheOne(textStyle: textTheme?.caption),
      button: GoogleFonts.cevicheOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cevicheOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cevicheOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chakra Petch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chakra+Petch
  static TextStyle chakraPetch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ecaf4ae2d67c61e2a3fa8df13a271ccea00d43000ba74107e7bfda439f60b1d2',
        70452,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '020376f9083d9c7e6f32ecb879dee72b6fadef64ea9a3df0bd01d4952a06f1aa',
        72720,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6854c9992a9a1345525235ab8e75582a0f6f3f828c37e4720a78aad1de6c0aa5',
        70160,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '114572d34834d0022111a2a7a0eaf1d6bb7e3b70537f2c52e283219fa86ccd02',
        72412,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '179d4e7774a67d1c01789bcf1bf48e72fbc37fa173f3373470769b54a505ad17',
        70152,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f7172b64774efd15a32d833b00836c9e30c0ee766c096a08de2a427c904f5c2d',
        72504,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a6b54f7d68496d966460fe300af5b72cc91ca631822110de9fbc976ceabb2591',
        70164,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a7a04e1ebef703c41253da2ca8a90c83a63649e471590d939c69828a0e0e591f',
        72524,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e409c139ac42c535be29bfb904109788499a4b3971f95c0853dce713da259ea9',
        70068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '86042cd1693573443cb56c465a3f44172486eb888d707fcc03eb3dc8600008cb',
        72408,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChakraPetch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chakra Petch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chakra+Petch
  static TextTheme chakraPetchTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chakraPetch(textStyle: textTheme?.display4),
      display3: GoogleFonts.chakraPetch(textStyle: textTheme?.display3),
      display2: GoogleFonts.chakraPetch(textStyle: textTheme?.display2),
      display1: GoogleFonts.chakraPetch(textStyle: textTheme?.display1),
      headline: GoogleFonts.chakraPetch(textStyle: textTheme?.headline),
      title: GoogleFonts.chakraPetch(textStyle: textTheme?.title),
      subhead: GoogleFonts.chakraPetch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chakraPetch(textStyle: textTheme?.body2),
      body1: GoogleFonts.chakraPetch(textStyle: textTheme?.body1),
      caption: GoogleFonts.chakraPetch(textStyle: textTheme?.caption),
      button: GoogleFonts.chakraPetch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chakraPetch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chakraPetch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Changa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Changa
  static TextStyle changa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e248c51b3bc1f8fd1d6b980400670c54bf2cdf89f4c5e075bca29f09ecdb936b',
        81252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f083dc8e9965f9e9b8c6c977bcfac5a504f4ef820e8c8237f1217d4edf3bdd9a',
        80888,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '01d71ec0cc7235bb908cc0c3ae45d1e10a2f87e4a61ad5ef855af157f39e8a80',
        80184,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fb1d544301460f01712f06d94a05af7420497d1b5791bdf43b542c0351227242',
        80588,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c22f4b8d7a97aaa32759b9336354bdcf999861dac5d589a4e02e7e5bb9504f98',
        80472,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0a274e0c0a7aa46f455bf65caff8b972998ce8fc975bf677ae154d5765ac4c0f',
        79956,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5d419cee41ca204d194f089cfd5d8d35ea6bc706a8f606ecaa69132df9854893',
        79556,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Changa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Changa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Changa
  static TextTheme changaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.changa(textStyle: textTheme?.display4),
      display3: GoogleFonts.changa(textStyle: textTheme?.display3),
      display2: GoogleFonts.changa(textStyle: textTheme?.display2),
      display1: GoogleFonts.changa(textStyle: textTheme?.display1),
      headline: GoogleFonts.changa(textStyle: textTheme?.headline),
      title: GoogleFonts.changa(textStyle: textTheme?.title),
      subhead: GoogleFonts.changa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.changa(textStyle: textTheme?.body2),
      body1: GoogleFonts.changa(textStyle: textTheme?.body1),
      caption: GoogleFonts.changa(textStyle: textTheme?.caption),
      button: GoogleFonts.changa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.changa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.changa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Changa One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Changa+One
  static TextStyle changaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '55a043f0a2eb34269cfb137a6203fdc338019e9bdaabee1e685c6b37495cb962',
        22668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '241077b802e7b6209a41ea93aae98aa81d9f09e6f78fce924c863af6ca96b529',
        26680,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChangaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Changa One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Changa+One
  static TextTheme changaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.changaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.changaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.changaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.changaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.changaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.changaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.changaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.changaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.changaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.changaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.changaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.changaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.changaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chango font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chango
  static TextStyle chango({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '66d5dcae03b7a0d59f38640d05bb920cc6d3b4e2a1cdb176628330e20ab9a6ca',
        40684,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chango',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chango font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chango
  static TextTheme changoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chango(textStyle: textTheme?.display4),
      display3: GoogleFonts.chango(textStyle: textTheme?.display3),
      display2: GoogleFonts.chango(textStyle: textTheme?.display2),
      display1: GoogleFonts.chango(textStyle: textTheme?.display1),
      headline: GoogleFonts.chango(textStyle: textTheme?.headline),
      title: GoogleFonts.chango(textStyle: textTheme?.title),
      subhead: GoogleFonts.chango(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chango(textStyle: textTheme?.body2),
      body1: GoogleFonts.chango(textStyle: textTheme?.body1),
      caption: GoogleFonts.chango(textStyle: textTheme?.caption),
      button: GoogleFonts.chango(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chango(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chango(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Charm font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Charm
  static TextStyle charm({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b2803aafd875584dcb262e1eddd8dc7542342f4d2d76ac5f9b06c6b5e2bae18f',
        121276,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '40f34767fa59a87e641da20236b9966135321cb03c1ed68d88a6234d432d2604',
        122112,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Charm',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Charm font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Charm
  static TextTheme charmTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.charm(textStyle: textTheme?.display4),
      display3: GoogleFonts.charm(textStyle: textTheme?.display3),
      display2: GoogleFonts.charm(textStyle: textTheme?.display2),
      display1: GoogleFonts.charm(textStyle: textTheme?.display1),
      headline: GoogleFonts.charm(textStyle: textTheme?.headline),
      title: GoogleFonts.charm(textStyle: textTheme?.title),
      subhead: GoogleFonts.charm(textStyle: textTheme?.subhead),
      body2: GoogleFonts.charm(textStyle: textTheme?.body2),
      body1: GoogleFonts.charm(textStyle: textTheme?.body1),
      caption: GoogleFonts.charm(textStyle: textTheme?.caption),
      button: GoogleFonts.charm(textStyle: textTheme?.button),
      subtitle: GoogleFonts.charm(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.charm(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Charmonman font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Charmonman
  static TextStyle charmonman({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8c4d7f973e9f5d882d38668d863ec90889ddc79cd302e832da538621ac970513',
        100884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd1492915dc59b590610a5b5bcf4d1b9aca380c377b870a0a9de187fc05146908',
        100612,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Charmonman',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Charmonman font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Charmonman
  static TextTheme charmonmanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.charmonman(textStyle: textTheme?.display4),
      display3: GoogleFonts.charmonman(textStyle: textTheme?.display3),
      display2: GoogleFonts.charmonman(textStyle: textTheme?.display2),
      display1: GoogleFonts.charmonman(textStyle: textTheme?.display1),
      headline: GoogleFonts.charmonman(textStyle: textTheme?.headline),
      title: GoogleFonts.charmonman(textStyle: textTheme?.title),
      subhead: GoogleFonts.charmonman(textStyle: textTheme?.subhead),
      body2: GoogleFonts.charmonman(textStyle: textTheme?.body2),
      body1: GoogleFonts.charmonman(textStyle: textTheme?.body1),
      caption: GoogleFonts.charmonman(textStyle: textTheme?.caption),
      button: GoogleFonts.charmonman(textStyle: textTheme?.button),
      subtitle: GoogleFonts.charmonman(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.charmonman(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chathura font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chathura
  static TextStyle chathura({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '78a5a2532fd10bcf3317ec8440d1e758a309bd152369607ccea764abddbcb168',
        345716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7b8357f2b60bfe270ca77801978a0bd5e729870ffad8b19d54ff69cded800a1f',
        340972,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f8abdba026fb7a58e3f5b2cbe302ab4d9e817e69dfd7c6fce0ffbf22fe9600f5',
        330780,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '129573e675c52db3364e6d6ac3d517a6cb8113531a3bc2b54276e1d28d28c11a',
        329608,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c6190f40f502b8b950146bbe4ba7b7b02eea38047766ba5b56895059e3b6c655',
        328760,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chathura',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chathura font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chathura
  static TextTheme chathuraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chathura(textStyle: textTheme?.display4),
      display3: GoogleFonts.chathura(textStyle: textTheme?.display3),
      display2: GoogleFonts.chathura(textStyle: textTheme?.display2),
      display1: GoogleFonts.chathura(textStyle: textTheme?.display1),
      headline: GoogleFonts.chathura(textStyle: textTheme?.headline),
      title: GoogleFonts.chathura(textStyle: textTheme?.title),
      subhead: GoogleFonts.chathura(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chathura(textStyle: textTheme?.body2),
      body1: GoogleFonts.chathura(textStyle: textTheme?.body1),
      caption: GoogleFonts.chathura(textStyle: textTheme?.caption),
      button: GoogleFonts.chathura(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chathura(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chathura(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chau Philomene One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chau+Philomene+One
  static TextStyle chauPhilomeneOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c44d00d1e4d0cfcf8ae3458b12571cdd000ce9df7849a29afa3dd3aadfdb6224',
        39692,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5be1fbfb8c59a78422d618850745eeabe8bebc7aef35518a599c765168ad124a',
        43992,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChauPhilomeneOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chau Philomene One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chau+Philomene+One
  static TextTheme chauPhilomeneOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.headline),
      title: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.caption),
      button: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chela One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chela+One
  static TextStyle chelaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3efd79a48f37981dfb1dd9c73243093c103f990459d6cc0e0918ed692c2beef0',
        35492,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChelaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chela One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chela+One
  static TextTheme chelaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chelaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.chelaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.chelaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.chelaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.chelaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.chelaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.chelaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chelaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.chelaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.chelaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.chelaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chelaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chelaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chelsea Market font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chelsea+Market
  static TextStyle chelseaMarket({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7841b0525f53772efeff1353b0297e9faa176874f84319d11057dfa3d129147b',
        172508,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChelseaMarket',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chelsea Market font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chelsea+Market
  static TextTheme chelseaMarketTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chelseaMarket(textStyle: textTheme?.display4),
      display3: GoogleFonts.chelseaMarket(textStyle: textTheme?.display3),
      display2: GoogleFonts.chelseaMarket(textStyle: textTheme?.display2),
      display1: GoogleFonts.chelseaMarket(textStyle: textTheme?.display1),
      headline: GoogleFonts.chelseaMarket(textStyle: textTheme?.headline),
      title: GoogleFonts.chelseaMarket(textStyle: textTheme?.title),
      subhead: GoogleFonts.chelseaMarket(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chelseaMarket(textStyle: textTheme?.body2),
      body1: GoogleFonts.chelseaMarket(textStyle: textTheme?.body1),
      caption: GoogleFonts.chelseaMarket(textStyle: textTheme?.caption),
      button: GoogleFonts.chelseaMarket(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chelseaMarket(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chelseaMarket(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cherry Cream Soda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cherry+Cream+Soda
  static TextStyle cherryCreamSoda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '47e79c87ca78a16fd9c841454bdf7ea5a7485a08a7f78baddcc83bbc2f510729',
        40208,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CherryCreamSoda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cherry Cream Soda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cherry+Cream+Soda
  static TextTheme cherryCreamSodaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.display4),
      display3: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.display3),
      display2: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.display2),
      display1: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.display1),
      headline: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.headline),
      title: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.title),
      subhead: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.body2),
      body1: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.body1),
      caption: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.caption),
      button: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cherry Swash font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cherry+Swash
  static TextStyle cherrySwash({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c16f18e4a0ef56672f00dcd810fae50a7468eccc6174968c6890ca1ed1eb4dc0',
        30548,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '46fc53776950e3047f5b647b1819e4ec28a5521b733a7e614aa9d97562cb5371',
        29984,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CherrySwash',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cherry Swash font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cherry+Swash
  static TextTheme cherrySwashTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cherrySwash(textStyle: textTheme?.display4),
      display3: GoogleFonts.cherrySwash(textStyle: textTheme?.display3),
      display2: GoogleFonts.cherrySwash(textStyle: textTheme?.display2),
      display1: GoogleFonts.cherrySwash(textStyle: textTheme?.display1),
      headline: GoogleFonts.cherrySwash(textStyle: textTheme?.headline),
      title: GoogleFonts.cherrySwash(textStyle: textTheme?.title),
      subhead: GoogleFonts.cherrySwash(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cherrySwash(textStyle: textTheme?.body2),
      body1: GoogleFonts.cherrySwash(textStyle: textTheme?.body1),
      caption: GoogleFonts.cherrySwash(textStyle: textTheme?.caption),
      button: GoogleFonts.cherrySwash(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cherrySwash(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cherrySwash(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chewy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chewy
  static TextStyle chewy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd88ead910c7aca7ef7e4aec8e38bc7bd8ea2f85b93181a960e2747192d839469',
        36096,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chewy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chewy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chewy
  static TextTheme chewyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chewy(textStyle: textTheme?.display4),
      display3: GoogleFonts.chewy(textStyle: textTheme?.display3),
      display2: GoogleFonts.chewy(textStyle: textTheme?.display2),
      display1: GoogleFonts.chewy(textStyle: textTheme?.display1),
      headline: GoogleFonts.chewy(textStyle: textTheme?.headline),
      title: GoogleFonts.chewy(textStyle: textTheme?.title),
      subhead: GoogleFonts.chewy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chewy(textStyle: textTheme?.body2),
      body1: GoogleFonts.chewy(textStyle: textTheme?.body1),
      caption: GoogleFonts.chewy(textStyle: textTheme?.caption),
      button: GoogleFonts.chewy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chewy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chewy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chicle font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chicle
  static TextStyle chicle({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '463fc42349dcac85fa8e161556aa92b7ae3f8d9cd174ef7b134ac072382d6069',
        40964,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chicle',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chicle font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chicle
  static TextTheme chicleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chicle(textStyle: textTheme?.display4),
      display3: GoogleFonts.chicle(textStyle: textTheme?.display3),
      display2: GoogleFonts.chicle(textStyle: textTheme?.display2),
      display1: GoogleFonts.chicle(textStyle: textTheme?.display1),
      headline: GoogleFonts.chicle(textStyle: textTheme?.headline),
      title: GoogleFonts.chicle(textStyle: textTheme?.title),
      subhead: GoogleFonts.chicle(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chicle(textStyle: textTheme?.body2),
      body1: GoogleFonts.chicle(textStyle: textTheme?.body1),
      caption: GoogleFonts.chicle(textStyle: textTheme?.caption),
      button: GoogleFonts.chicle(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chicle(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chicle(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chivo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chivo
  static TextStyle chivo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '994635489f0d118a198cb7efcdd1b61cbd4431c9e6426fffad5b731c4d2c1a5c',
        44544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f512baee58b1fc81a387836a8de41c055d2bebbfde221bd5f6829c1db58d9baa',
        38544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c45551e766074f40061345617f0e07c5a4a2ecbd70ce90f3c7456284827c3184',
        41264,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1940d6e1383f625468fbb0231dc6d8ea95eda2d8483e23e66e94d6bb05996ca2',
        35312,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '49e634b98df69d1812b9406be76ebe8c76888e0202ae16c267aff5f9897d279f',
        33884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'eea6f18e9fa02d840e18d03dfe74e65437743472807f1f0a93bb11254419cdb4',
        35400,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b16f1d6acd367f8f1dd75d71e56027975f5f4c661b7272c0ae41a0635d55908a',
        34680,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'da92d63af2ecddbae2e8cf92a528caebcba3ed94b7b00e2ab04d228c4622c806',
        36840,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chivo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chivo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chivo
  static TextTheme chivoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chivo(textStyle: textTheme?.display4),
      display3: GoogleFonts.chivo(textStyle: textTheme?.display3),
      display2: GoogleFonts.chivo(textStyle: textTheme?.display2),
      display1: GoogleFonts.chivo(textStyle: textTheme?.display1),
      headline: GoogleFonts.chivo(textStyle: textTheme?.headline),
      title: GoogleFonts.chivo(textStyle: textTheme?.title),
      subhead: GoogleFonts.chivo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chivo(textStyle: textTheme?.body2),
      body1: GoogleFonts.chivo(textStyle: textTheme?.body1),
      caption: GoogleFonts.chivo(textStyle: textTheme?.caption),
      button: GoogleFonts.chivo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chivo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chivo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chonburi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chonburi
  static TextStyle chonburi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b8e4b1d59bd57981915ee60262422c0d7b7bc237ec938d181c684425e608baca',
        112300,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chonburi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chonburi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chonburi
  static TextTheme chonburiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chonburi(textStyle: textTheme?.display4),
      display3: GoogleFonts.chonburi(textStyle: textTheme?.display3),
      display2: GoogleFonts.chonburi(textStyle: textTheme?.display2),
      display1: GoogleFonts.chonburi(textStyle: textTheme?.display1),
      headline: GoogleFonts.chonburi(textStyle: textTheme?.headline),
      title: GoogleFonts.chonburi(textStyle: textTheme?.title),
      subhead: GoogleFonts.chonburi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chonburi(textStyle: textTheme?.body2),
      body1: GoogleFonts.chonburi(textStyle: textTheme?.body1),
      caption: GoogleFonts.chonburi(textStyle: textTheme?.caption),
      button: GoogleFonts.chonburi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chonburi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chonburi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cinzel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cinzel
  static TextStyle cinzel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a1d67206903b7688f4187df3dd0563dce75a49b26d036c7e88798adcd6c8fab',
        55732,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd385de045feb981ef4256fb3f82d128c1835f686ed5611dd1c5b01e8b615e7bb',
        57244,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fbb068fbb60eb4c57957c490b9e8c4b00d9c8cc14bd064d85fca96516f5ae46f',
        58144,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cinzel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cinzel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cinzel
  static TextTheme cinzelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cinzel(textStyle: textTheme?.display4),
      display3: GoogleFonts.cinzel(textStyle: textTheme?.display3),
      display2: GoogleFonts.cinzel(textStyle: textTheme?.display2),
      display1: GoogleFonts.cinzel(textStyle: textTheme?.display1),
      headline: GoogleFonts.cinzel(textStyle: textTheme?.headline),
      title: GoogleFonts.cinzel(textStyle: textTheme?.title),
      subhead: GoogleFonts.cinzel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cinzel(textStyle: textTheme?.body2),
      body1: GoogleFonts.cinzel(textStyle: textTheme?.body1),
      caption: GoogleFonts.cinzel(textStyle: textTheme?.caption),
      button: GoogleFonts.cinzel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cinzel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cinzel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cinzel Decorative font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cinzel+Decorative
  static TextStyle cinzelDecorative({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e2559504f7da1fc2410b4eca9cb5ca6fee8c1ead7c3920a0b225ef4f1da9034f',
        60044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3a01d62b7c7d50b908e2fd62beb09363fb5e99ea2f21e0e79f71e5a6c356ceba',
        61900,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a9e463550cabc5d5d694e24c136e6d235212011e58c21d523229960a16bc5148',
        62320,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CinzelDecorative',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cinzel Decorative font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cinzel+Decorative
  static TextTheme cinzelDecorativeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cinzelDecorative(textStyle: textTheme?.display4),
      display3: GoogleFonts.cinzelDecorative(textStyle: textTheme?.display3),
      display2: GoogleFonts.cinzelDecorative(textStyle: textTheme?.display2),
      display1: GoogleFonts.cinzelDecorative(textStyle: textTheme?.display1),
      headline: GoogleFonts.cinzelDecorative(textStyle: textTheme?.headline),
      title: GoogleFonts.cinzelDecorative(textStyle: textTheme?.title),
      subhead: GoogleFonts.cinzelDecorative(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cinzelDecorative(textStyle: textTheme?.body2),
      body1: GoogleFonts.cinzelDecorative(textStyle: textTheme?.body1),
      caption: GoogleFonts.cinzelDecorative(textStyle: textTheme?.caption),
      button: GoogleFonts.cinzelDecorative(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cinzelDecorative(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cinzelDecorative(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Clicker Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Clicker+Script
  static TextStyle clickerScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a5d266712bdee3e9dc58039be9fe3d6492b6d9de30e12c387ff7726b7bc43566',
        63596,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ClickerScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Clicker Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Clicker+Script
  static TextTheme clickerScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.clickerScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.clickerScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.clickerScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.clickerScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.clickerScript(textStyle: textTheme?.headline),
      title: GoogleFonts.clickerScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.clickerScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.clickerScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.clickerScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.clickerScript(textStyle: textTheme?.caption),
      button: GoogleFonts.clickerScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.clickerScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.clickerScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coda
  static TextStyle coda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3286b71ee83e8775ab6ae6fef1580c62d0344ad5a8a10ba144104648a36f9749',
        37032,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0f385f570ff23725ac544ecfcf2ec8b8cbca733a730d2038266a6eb8b071e4c0',
        31676,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Coda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coda
  static TextTheme codaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.coda(textStyle: textTheme?.display4),
      display3: GoogleFonts.coda(textStyle: textTheme?.display3),
      display2: GoogleFonts.coda(textStyle: textTheme?.display2),
      display1: GoogleFonts.coda(textStyle: textTheme?.display1),
      headline: GoogleFonts.coda(textStyle: textTheme?.headline),
      title: GoogleFonts.coda(textStyle: textTheme?.title),
      subhead: GoogleFonts.coda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.coda(textStyle: textTheme?.body2),
      body1: GoogleFonts.coda(textStyle: textTheme?.body1),
      caption: GoogleFonts.coda(textStyle: textTheme?.caption),
      button: GoogleFonts.coda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.coda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.coda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coda Caption font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coda+Caption
  static TextStyle codaCaption({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '28b801f8b4a3bbeae1f47a3081d64a60cba59d844b8d9719165a993bbfd5424b',
        59700,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CodaCaption',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coda Caption font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coda+Caption
  static TextTheme codaCaptionTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.codaCaption(textStyle: textTheme?.display4),
      display3: GoogleFonts.codaCaption(textStyle: textTheme?.display3),
      display2: GoogleFonts.codaCaption(textStyle: textTheme?.display2),
      display1: GoogleFonts.codaCaption(textStyle: textTheme?.display1),
      headline: GoogleFonts.codaCaption(textStyle: textTheme?.headline),
      title: GoogleFonts.codaCaption(textStyle: textTheme?.title),
      subhead: GoogleFonts.codaCaption(textStyle: textTheme?.subhead),
      body2: GoogleFonts.codaCaption(textStyle: textTheme?.body2),
      body1: GoogleFonts.codaCaption(textStyle: textTheme?.body1),
      caption: GoogleFonts.codaCaption(textStyle: textTheme?.caption),
      button: GoogleFonts.codaCaption(textStyle: textTheme?.button),
      subtitle: GoogleFonts.codaCaption(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.codaCaption(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Codystar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Codystar
  static TextStyle codystar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd8599cf77d1a295657a62a9be2067a1d7c27dad40e7ae89910c6516e57f1fdb1',
        101120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5d2fb67af692de14dd1f3b942de494168b78c1cef3cc103867d36c4281ac0b00',
        106084,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Codystar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Codystar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Codystar
  static TextTheme codystarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.codystar(textStyle: textTheme?.display4),
      display3: GoogleFonts.codystar(textStyle: textTheme?.display3),
      display2: GoogleFonts.codystar(textStyle: textTheme?.display2),
      display1: GoogleFonts.codystar(textStyle: textTheme?.display1),
      headline: GoogleFonts.codystar(textStyle: textTheme?.headline),
      title: GoogleFonts.codystar(textStyle: textTheme?.title),
      subhead: GoogleFonts.codystar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.codystar(textStyle: textTheme?.body2),
      body1: GoogleFonts.codystar(textStyle: textTheme?.body1),
      caption: GoogleFonts.codystar(textStyle: textTheme?.caption),
      button: GoogleFonts.codystar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.codystar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.codystar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coiny font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coiny
  static TextStyle coiny({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd7c4ad8ba1a68159f3a01ce26a6ae52110298a54077d3aa35b12d216941a3f28',
        88036,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Coiny',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coiny font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coiny
  static TextTheme coinyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.coiny(textStyle: textTheme?.display4),
      display3: GoogleFonts.coiny(textStyle: textTheme?.display3),
      display2: GoogleFonts.coiny(textStyle: textTheme?.display2),
      display1: GoogleFonts.coiny(textStyle: textTheme?.display1),
      headline: GoogleFonts.coiny(textStyle: textTheme?.headline),
      title: GoogleFonts.coiny(textStyle: textTheme?.title),
      subhead: GoogleFonts.coiny(textStyle: textTheme?.subhead),
      body2: GoogleFonts.coiny(textStyle: textTheme?.body2),
      body1: GoogleFonts.coiny(textStyle: textTheme?.body1),
      caption: GoogleFonts.coiny(textStyle: textTheme?.caption),
      button: GoogleFonts.coiny(textStyle: textTheme?.button),
      subtitle: GoogleFonts.coiny(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.coiny(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Combo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Combo
  static TextStyle combo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bb7529647493cbe7db3d0199e9c64a31b084ffe6f9bc8408a5eef9a588daffdd',
        37416,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Combo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Combo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Combo
  static TextTheme comboTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.combo(textStyle: textTheme?.display4),
      display3: GoogleFonts.combo(textStyle: textTheme?.display3),
      display2: GoogleFonts.combo(textStyle: textTheme?.display2),
      display1: GoogleFonts.combo(textStyle: textTheme?.display1),
      headline: GoogleFonts.combo(textStyle: textTheme?.headline),
      title: GoogleFonts.combo(textStyle: textTheme?.title),
      subhead: GoogleFonts.combo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.combo(textStyle: textTheme?.body2),
      body1: GoogleFonts.combo(textStyle: textTheme?.body1),
      caption: GoogleFonts.combo(textStyle: textTheme?.caption),
      button: GoogleFonts.combo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.combo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.combo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Comfortaa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Comfortaa
  static TextStyle comfortaa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9c42dde162aca0ef35c66a372266676483320b31bd2d1069fd2ec3879d092000',
        106812,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b1a86afe9202b2f23f62ea6a901f0f299515c34673aea8cf0d8ab2270b4d7013',
        106948,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '30b5d292bb0fe9543a8ae812c3a2ce1ca57f9fd6701afafad31156536db5f08d',
        106956,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Comfortaa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Comfortaa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Comfortaa
  static TextTheme comfortaaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.comfortaa(textStyle: textTheme?.display4),
      display3: GoogleFonts.comfortaa(textStyle: textTheme?.display3),
      display2: GoogleFonts.comfortaa(textStyle: textTheme?.display2),
      display1: GoogleFonts.comfortaa(textStyle: textTheme?.display1),
      headline: GoogleFonts.comfortaa(textStyle: textTheme?.headline),
      title: GoogleFonts.comfortaa(textStyle: textTheme?.title),
      subhead: GoogleFonts.comfortaa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.comfortaa(textStyle: textTheme?.body2),
      body1: GoogleFonts.comfortaa(textStyle: textTheme?.body1),
      caption: GoogleFonts.comfortaa(textStyle: textTheme?.caption),
      button: GoogleFonts.comfortaa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.comfortaa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.comfortaa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coming Soon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coming+Soon
  static TextStyle comingSoon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '193064f6768240e8165c7b8f6dec7b2dd4cf009b638b76c7b879098469346c5e',
        49836,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ComingSoon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coming Soon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coming+Soon
  static TextTheme comingSoonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.comingSoon(textStyle: textTheme?.display4),
      display3: GoogleFonts.comingSoon(textStyle: textTheme?.display3),
      display2: GoogleFonts.comingSoon(textStyle: textTheme?.display2),
      display1: GoogleFonts.comingSoon(textStyle: textTheme?.display1),
      headline: GoogleFonts.comingSoon(textStyle: textTheme?.headline),
      title: GoogleFonts.comingSoon(textStyle: textTheme?.title),
      subhead: GoogleFonts.comingSoon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.comingSoon(textStyle: textTheme?.body2),
      body1: GoogleFonts.comingSoon(textStyle: textTheme?.body1),
      caption: GoogleFonts.comingSoon(textStyle: textTheme?.caption),
      button: GoogleFonts.comingSoon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.comingSoon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.comingSoon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Concert One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Concert+One
  static TextStyle concertOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2539111a44381dd36a5a1ab7f50323edd3755088027d0c83419b5ecb88ac14e2',
        44788,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ConcertOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Concert One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Concert+One
  static TextTheme concertOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.concertOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.concertOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.concertOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.concertOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.concertOne(textStyle: textTheme?.headline),
      title: GoogleFonts.concertOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.concertOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.concertOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.concertOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.concertOne(textStyle: textTheme?.caption),
      button: GoogleFonts.concertOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.concertOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.concertOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Condiment font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Condiment
  static TextStyle condiment({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '404ef1b407aafc9555242dbfc0416b9761054b9bc16abacf2ab328af7b034b66',
        43344,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Condiment',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Condiment font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Condiment
  static TextTheme condimentTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.condiment(textStyle: textTheme?.display4),
      display3: GoogleFonts.condiment(textStyle: textTheme?.display3),
      display2: GoogleFonts.condiment(textStyle: textTheme?.display2),
      display1: GoogleFonts.condiment(textStyle: textTheme?.display1),
      headline: GoogleFonts.condiment(textStyle: textTheme?.headline),
      title: GoogleFonts.condiment(textStyle: textTheme?.title),
      subhead: GoogleFonts.condiment(textStyle: textTheme?.subhead),
      body2: GoogleFonts.condiment(textStyle: textTheme?.body2),
      body1: GoogleFonts.condiment(textStyle: textTheme?.body1),
      caption: GoogleFonts.condiment(textStyle: textTheme?.caption),
      button: GoogleFonts.condiment(textStyle: textTheme?.button),
      subtitle: GoogleFonts.condiment(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.condiment(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Contrail One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Contrail+One
  static TextStyle contrailOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '51cdbe97cef3cc835b94974aeff5d8805b5d25b1904ad5355836afe27b0cc199',
        31136,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ContrailOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Contrail One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Contrail+One
  static TextTheme contrailOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.contrailOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.contrailOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.contrailOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.contrailOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.contrailOne(textStyle: textTheme?.headline),
      title: GoogleFonts.contrailOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.contrailOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.contrailOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.contrailOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.contrailOne(textStyle: textTheme?.caption),
      button: GoogleFonts.contrailOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.contrailOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.contrailOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Convergence font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Convergence
  static TextStyle convergence({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bee94289e5374af0501d83d8b767d631571ce0a2ab1c16a765bad418a9fbbf22',
        30172,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Convergence',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Convergence font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Convergence
  static TextTheme convergenceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.convergence(textStyle: textTheme?.display4),
      display3: GoogleFonts.convergence(textStyle: textTheme?.display3),
      display2: GoogleFonts.convergence(textStyle: textTheme?.display2),
      display1: GoogleFonts.convergence(textStyle: textTheme?.display1),
      headline: GoogleFonts.convergence(textStyle: textTheme?.headline),
      title: GoogleFonts.convergence(textStyle: textTheme?.title),
      subhead: GoogleFonts.convergence(textStyle: textTheme?.subhead),
      body2: GoogleFonts.convergence(textStyle: textTheme?.body2),
      body1: GoogleFonts.convergence(textStyle: textTheme?.body1),
      caption: GoogleFonts.convergence(textStyle: textTheme?.caption),
      button: GoogleFonts.convergence(textStyle: textTheme?.button),
      subtitle: GoogleFonts.convergence(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.convergence(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cookie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cookie
  static TextStyle cookie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8d01e7c434faf0f6a1c7c2f49021b8ac01590d10ba4cb8c15683299ed0997536',
        43752,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cookie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cookie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cookie
  static TextTheme cookieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cookie(textStyle: textTheme?.display4),
      display3: GoogleFonts.cookie(textStyle: textTheme?.display3),
      display2: GoogleFonts.cookie(textStyle: textTheme?.display2),
      display1: GoogleFonts.cookie(textStyle: textTheme?.display1),
      headline: GoogleFonts.cookie(textStyle: textTheme?.headline),
      title: GoogleFonts.cookie(textStyle: textTheme?.title),
      subhead: GoogleFonts.cookie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cookie(textStyle: textTheme?.body2),
      body1: GoogleFonts.cookie(textStyle: textTheme?.body1),
      caption: GoogleFonts.cookie(textStyle: textTheme?.caption),
      button: GoogleFonts.cookie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cookie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cookie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Copse font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Copse
  static TextStyle copse({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ace02d3cf195f5ddfbe562a9361241356d198ed56d25ec6d8dfb69e08a50133a',
        59116,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Copse',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Copse font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Copse
  static TextTheme copseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.copse(textStyle: textTheme?.display4),
      display3: GoogleFonts.copse(textStyle: textTheme?.display3),
      display2: GoogleFonts.copse(textStyle: textTheme?.display2),
      display1: GoogleFonts.copse(textStyle: textTheme?.display1),
      headline: GoogleFonts.copse(textStyle: textTheme?.headline),
      title: GoogleFonts.copse(textStyle: textTheme?.title),
      subhead: GoogleFonts.copse(textStyle: textTheme?.subhead),
      body2: GoogleFonts.copse(textStyle: textTheme?.body2),
      body1: GoogleFonts.copse(textStyle: textTheme?.body1),
      caption: GoogleFonts.copse(textStyle: textTheme?.caption),
      button: GoogleFonts.copse(textStyle: textTheme?.button),
      subtitle: GoogleFonts.copse(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.copse(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Corben font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Corben
  static TextStyle corben({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd7fa399441299ed2b575ab62e7d0338bebb9b110c569b1ab9661d8df90029b6e',
        35760,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '101e1a5b8d96f12fffab739f046c3a869a5edc6a0a4d2f980c26cef6648331c0',
        113588,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Corben',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Corben font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Corben
  static TextTheme corbenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.corben(textStyle: textTheme?.display4),
      display3: GoogleFonts.corben(textStyle: textTheme?.display3),
      display2: GoogleFonts.corben(textStyle: textTheme?.display2),
      display1: GoogleFonts.corben(textStyle: textTheme?.display1),
      headline: GoogleFonts.corben(textStyle: textTheme?.headline),
      title: GoogleFonts.corben(textStyle: textTheme?.title),
      subhead: GoogleFonts.corben(textStyle: textTheme?.subhead),
      body2: GoogleFonts.corben(textStyle: textTheme?.body2),
      body1: GoogleFonts.corben(textStyle: textTheme?.body1),
      caption: GoogleFonts.corben(textStyle: textTheme?.caption),
      button: GoogleFonts.corben(textStyle: textTheme?.button),
      subtitle: GoogleFonts.corben(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.corben(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant
  static TextStyle cormorant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '25d9142c8c73577fb3546a40795e753bab11f4e22663e2f1168cbc485cbaa542',
        369920,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd90d995e2a130e04d6e32ee3778e059092e41f5d9c1c812a659c7ffb52951a19',
        241020,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fd04cb22306c1c15bb1727fc4b3d2344de940e929b75dbe3faa9b7f43f9e0d6d',
        370052,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1f64218505ec6321eba3b8df95d0806808f61c872f9c081bce39c00a402a4429',
        240392,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '20c11bc6844b3f25ad300ce80d94c0c0fc2fb997b51e04cd1959156c6d78309d',
        369256,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '47bba53369e3f5bcda0e230d7e6fe60ae86b40b59b80d57c603c50e273d2f17c',
        240280,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c1821d5e327189284afba6a7a2a9831a3025677c5afb37910353410a72391791',
        369328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c02d2b3a07288427fe5cd64e378eebe86d6a308b6d7dfe0e8cc4d1975d32e0d5',
        240048,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a91dc6bed8f499ba7dfc43c8259fa142dc1d0097d84aba2a73c003c35b409845',
        368108,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '01317d3f16a7d1e98e9fcb9e49778326433ab76c291971e501f5e721ac437b0d',
        239228,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cormorant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant
  static TextTheme cormorantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorant(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorant(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorant(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorant(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorant(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorant(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorant(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorant(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorant(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant Garamond font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Garamond
  static TextStyle cormorantGaramond({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9e5ae2850e0033754375df527e1bb29ed63bd133553ce65b8d9313dd4cc944f8',
        674036,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '86bc19f83cdf358de6e84a3bdbdc0f24e24d47bbdbf7cc2eac80d7bfe24dfdd4',
        426064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5a2dd210ea12467e5697bb32480d20e0ebfbe2c2af1c64b1679567cf3486a8a5',
        673208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4766c3793328466bbd4f974a3843b2bffb312bd22c98098b0dec8990ba48f5e2',
        424232,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '31bc31d93d2a5c505ca03887ae0ad2ad816caf59499f35016d89fe4d5db18ced',
        672392,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e2b5d7b06e08f325bc0513179903b1423183f6533fec2645b64a6e1f24ad699c',
        424904,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '25068099ded344cf0919185bae33e11bca97b6c8b1a528dede8ac80325e27c6b',
        671588,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e316fc5e36acd433eb0c3ea1b28d8475a1ff9d0da27bf329fa1bd5d54eb870bf',
        424716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b273c7be0b4af1389631638e4f056f5d9066fc17d321e665b3a28d43001736af',
        670200,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e1c32c701a4b7594cd169653bc0feceed0160066ce7cedd06999fc884ddd6c02',
        423900,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantGaramond',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant Garamond font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Garamond
  static TextTheme cormorantGaramondTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantGaramond(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantGaramond(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantGaramond(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantGaramond(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantGaramond(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantGaramond(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantGaramond(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantGaramond(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantGaramond(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantGaramond(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantGaramond(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantGaramond(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantGaramond(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant Infant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Infant
  static TextStyle cormorantInfant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9168080bdab2d447729e3f3046722e4d88cfd4cb5a1862dc6d916cba737791c5',
        674136,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e6958c39fabaf907bdde7ba424eb0c17f3fef77c989edbaa01115b1fe5c6e067',
        425328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '47164cf35cfe61e120d0e8c3e775559372e1a738f9e2c57cf85aa05e8c4bc806',
        673248,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '84f78b4a61cce77b8c2c9663434b1c6cf0316b556002a2c9ea9df9265533cf6b',
        423500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1d23820c90080bfb4aa4f9cec1e1ef64424729ef0c9b0e977e27806b21d81304',
        671764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f8a57af623179b25d7e59c823c1acd0563f9cfb6f1f03da9532e49bf49739dab',
        424168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f6a06c7e0bd73d14e395e0d977119af3b5fae58a9ce153ab18a277182316b424',
        671652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e1ae8191f481ca057de000de05308f0098090fd60456b76f13b1ffdc82ac1b1d',
        423936,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a03a98979c43146bda66d723dfb38c68b77012ab2433f4eafcbda573433d75b5',
        670304,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ceb4474fec6832dee11e5cc5624186c760e7993898bc39599f3fe8248cbb1b70',
        423176,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantInfant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant Infant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Infant
  static TextTheme cormorantInfantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantInfant(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantInfant(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantInfant(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantInfant(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantInfant(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantInfant(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantInfant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantInfant(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantInfant(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantInfant(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantInfant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantInfant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantInfant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+SC
  static TextStyle cormorantSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '20075e607eb45ea2e8f60f9365f2bf608df1251f443ae12295d751b425dd9b62',
        652740,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8c091c9484c2f6ac490d1613295b59e76d359ad34e1c52fb2f853a8c2ea0aac',
        651888,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '85cf334d625e0deec8283f8aa03ec6295e20a52c371096595411dcee4bef2039',
        650624,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2a187b0fe3cebc137da0b069c1017ad0c1cfb10ef8992089d21b8261bbc9ad0c',
        650308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '29e53a056b50572310c96ff3a83932d488c6954871aced226c122e7f3ff8b00b',
        648928,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+SC
  static TextTheme cormorantSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantSC(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantSC(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant Unicase font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Unicase
  static TextStyle cormorantUnicase({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8b2f697aa9071850538a594d14122faff09a953f9e6b7897e5284ae9afe2c2b0',
        653392,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a075bd869512a69bf9bfcb4b1987513cf71f5b0f8931adc373783f751c44553a',
        652624,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fa07955427124a8c76b2621bceba09805d61cc57efe1c57120f9fd91a46e04ce',
        651372,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '34d64ee75c05feffc586b864ce55af03115c3fd6a3c3fabeeef53742fd991848',
        651056,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ad4713eaa8a5f3198c0bed735f60707e4cb0c77de5643d8b4df7f61e8a8979a6',
        649664,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantUnicase',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant Unicase font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Unicase
  static TextTheme cormorantUnicaseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantUnicase(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantUnicase(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantUnicase(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantUnicase(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantUnicase(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantUnicase(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantUnicase(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantUnicase(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantUnicase(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantUnicase(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantUnicase(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantUnicase(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantUnicase(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant Upright font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Upright
  static TextStyle cormorantUpright({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '29c9067ec4aab7f8532dfad801cd638d35f8738903ec7c40f80069030e231431',
        156128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd7c8d8d44c6591234b85e43c1b61a5f4adc82016e3c7f315b206cf31fda62572',
        155736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9e1c85ea60d180f0a621d975977e7e75c7d398a4d4fcb569d2ccadd85c42adce',
        156096,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0d60d4f81c0c154612e2e9b3b5dd56c2ab5e74e4d8e8507d9725ce908a54c914',
        156140,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '441604498e23b982bd6adbe6fe749140f9955eddd7a905329bb88bf4ca9a8f85',
        156320,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantUpright',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant Upright font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Upright
  static TextTheme cormorantUprightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantUpright(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantUpright(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantUpright(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantUpright(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantUpright(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantUpright(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantUpright(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantUpright(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantUpright(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantUpright(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantUpright(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantUpright(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantUpright(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Courgette font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Courgette
  static TextStyle courgette({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2754f22af579b8f14d78397e6cc4d3879519ad579085e8c047ba2f7719c592a4',
        93820,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Courgette',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Courgette font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Courgette
  static TextTheme courgetteTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.courgette(textStyle: textTheme?.display4),
      display3: GoogleFonts.courgette(textStyle: textTheme?.display3),
      display2: GoogleFonts.courgette(textStyle: textTheme?.display2),
      display1: GoogleFonts.courgette(textStyle: textTheme?.display1),
      headline: GoogleFonts.courgette(textStyle: textTheme?.headline),
      title: GoogleFonts.courgette(textStyle: textTheme?.title),
      subhead: GoogleFonts.courgette(textStyle: textTheme?.subhead),
      body2: GoogleFonts.courgette(textStyle: textTheme?.body2),
      body1: GoogleFonts.courgette(textStyle: textTheme?.body1),
      caption: GoogleFonts.courgette(textStyle: textTheme?.caption),
      button: GoogleFonts.courgette(textStyle: textTheme?.button),
      subtitle: GoogleFonts.courgette(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.courgette(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cousine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cousine
  static TextStyle cousine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '753f2dd34e36271520e1bf057a91850492b226f76d6da301cf6955b4b32177a1',
        191380,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '23ddf22bc3d06b028fce6e266632d38c97fa151a580be71b5ad43ee7d34d13a0',
        200304,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9e472053ed3d50c647f75d5654f0d2ff42cbf5221cb14e1b1af3dc25dbbd6ea4',
        191172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8b14c04baa12f36602157da1c6c26f539163a93e571133c17d0b5acc34345bfa',
        199244,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cousine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cousine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cousine
  static TextTheme cousineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cousine(textStyle: textTheme?.display4),
      display3: GoogleFonts.cousine(textStyle: textTheme?.display3),
      display2: GoogleFonts.cousine(textStyle: textTheme?.display2),
      display1: GoogleFonts.cousine(textStyle: textTheme?.display1),
      headline: GoogleFonts.cousine(textStyle: textTheme?.headline),
      title: GoogleFonts.cousine(textStyle: textTheme?.title),
      subhead: GoogleFonts.cousine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cousine(textStyle: textTheme?.body2),
      body1: GoogleFonts.cousine(textStyle: textTheme?.body1),
      caption: GoogleFonts.cousine(textStyle: textTheme?.caption),
      button: GoogleFonts.cousine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cousine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cousine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coustard font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coustard
  static TextStyle coustard({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '657fe3ebd0e1b0402731533db6ddbe6120271871430adfff3ea617c35120f166',
        39700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c9288e8be500e6cb9ea6f0ae05167d9ee149c0d91fc8a422055f396236b1e413',
        42376,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Coustard',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coustard font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coustard
  static TextTheme coustardTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.coustard(textStyle: textTheme?.display4),
      display3: GoogleFonts.coustard(textStyle: textTheme?.display3),
      display2: GoogleFonts.coustard(textStyle: textTheme?.display2),
      display1: GoogleFonts.coustard(textStyle: textTheme?.display1),
      headline: GoogleFonts.coustard(textStyle: textTheme?.headline),
      title: GoogleFonts.coustard(textStyle: textTheme?.title),
      subhead: GoogleFonts.coustard(textStyle: textTheme?.subhead),
      body2: GoogleFonts.coustard(textStyle: textTheme?.body2),
      body1: GoogleFonts.coustard(textStyle: textTheme?.body1),
      caption: GoogleFonts.coustard(textStyle: textTheme?.caption),
      button: GoogleFonts.coustard(textStyle: textTheme?.button),
      subtitle: GoogleFonts.coustard(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.coustard(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Covered By Your Grace font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Covered+By+Your+Grace
  static TextStyle coveredByYourGrace({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e2e2deb5e6914da1e25b2a2f5161ff4e08d65d6e00d26081708efc7ffacca93a',
        57040,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CoveredByYourGrace',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Covered By Your Grace font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Covered+By+Your+Grace
  static TextTheme coveredByYourGraceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.display4),
      display3: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.display3),
      display2: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.display2),
      display1: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.display1),
      headline: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.headline),
      title: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.title),
      subhead: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.subhead),
      body2: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.body2),
      body1: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.body1),
      caption: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.caption),
      button: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.button),
      subtitle: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crafty Girls font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crafty+Girls
  static TextStyle craftyGirls({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dc184885668047ca66db5a530c0462f1b1ef2f2d6867b7f938c59dbc9d282de2',
        61632,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CraftyGirls',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crafty Girls font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crafty+Girls
  static TextTheme craftyGirlsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.craftyGirls(textStyle: textTheme?.display4),
      display3: GoogleFonts.craftyGirls(textStyle: textTheme?.display3),
      display2: GoogleFonts.craftyGirls(textStyle: textTheme?.display2),
      display1: GoogleFonts.craftyGirls(textStyle: textTheme?.display1),
      headline: GoogleFonts.craftyGirls(textStyle: textTheme?.headline),
      title: GoogleFonts.craftyGirls(textStyle: textTheme?.title),
      subhead: GoogleFonts.craftyGirls(textStyle: textTheme?.subhead),
      body2: GoogleFonts.craftyGirls(textStyle: textTheme?.body2),
      body1: GoogleFonts.craftyGirls(textStyle: textTheme?.body1),
      caption: GoogleFonts.craftyGirls(textStyle: textTheme?.caption),
      button: GoogleFonts.craftyGirls(textStyle: textTheme?.button),
      subtitle: GoogleFonts.craftyGirls(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.craftyGirls(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Creepster font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Creepster
  static TextStyle creepster({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bb14e63f8fb5e6bd8706e47aea59d9e2b6b3da1b2f987d1468a6ba5cda2d1fc1',
        62700,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Creepster',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Creepster font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Creepster
  static TextTheme creepsterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.creepster(textStyle: textTheme?.display4),
      display3: GoogleFonts.creepster(textStyle: textTheme?.display3),
      display2: GoogleFonts.creepster(textStyle: textTheme?.display2),
      display1: GoogleFonts.creepster(textStyle: textTheme?.display1),
      headline: GoogleFonts.creepster(textStyle: textTheme?.headline),
      title: GoogleFonts.creepster(textStyle: textTheme?.title),
      subhead: GoogleFonts.creepster(textStyle: textTheme?.subhead),
      body2: GoogleFonts.creepster(textStyle: textTheme?.body2),
      body1: GoogleFonts.creepster(textStyle: textTheme?.body1),
      caption: GoogleFonts.creepster(textStyle: textTheme?.caption),
      button: GoogleFonts.creepster(textStyle: textTheme?.button),
      subtitle: GoogleFonts.creepster(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.creepster(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crete Round font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crete+Round
  static TextStyle creteRound({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '62fbd9c68fa6485a1a4fde14a03ed6a5268f26365fff7614e5704531390f0363',
        59264,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c8e915bc50126a1af673b8fbd3181aa9f8eac78545ec1b8d827ac5bac66b5cc5',
        67216,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CreteRound',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crete Round font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crete+Round
  static TextTheme creteRoundTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.creteRound(textStyle: textTheme?.display4),
      display3: GoogleFonts.creteRound(textStyle: textTheme?.display3),
      display2: GoogleFonts.creteRound(textStyle: textTheme?.display2),
      display1: GoogleFonts.creteRound(textStyle: textTheme?.display1),
      headline: GoogleFonts.creteRound(textStyle: textTheme?.headline),
      title: GoogleFonts.creteRound(textStyle: textTheme?.title),
      subhead: GoogleFonts.creteRound(textStyle: textTheme?.subhead),
      body2: GoogleFonts.creteRound(textStyle: textTheme?.body2),
      body1: GoogleFonts.creteRound(textStyle: textTheme?.body1),
      caption: GoogleFonts.creteRound(textStyle: textTheme?.caption),
      button: GoogleFonts.creteRound(textStyle: textTheme?.button),
      subtitle: GoogleFonts.creteRound(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.creteRound(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crimson Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crimson+Text
  static TextStyle crimsonText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '883d56072155a485051564cd3019bb34a608ddfa0553e2295413e7a59c67bd28',
        186656,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '33025a7588fc7f2ca1b8eb2b599e2420ad23278ee100a8f7e11c881d385af57a',
        98404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '37e75069b54a5c937eec2ba3fd3d193e3825fab2122bef2b86d86bc5ff1caab3',
        76316,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '15672e6c5d2b277c8dee2e6dcbffc17d3ba0c9a3018c446e199636f68dd227b1',
        74068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c6bfa338154c86d462eef6a8dc69f2443ecc35740bbdc2f2da06e7599c037cbc',
        92296,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c79dc3f51f37e16300b571c6835d06bff022a018b65d9ea69f1f897137acc238',
        74264,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CrimsonText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crimson Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crimson+Text
  static TextTheme crimsonTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.crimsonText(textStyle: textTheme?.display4),
      display3: GoogleFonts.crimsonText(textStyle: textTheme?.display3),
      display2: GoogleFonts.crimsonText(textStyle: textTheme?.display2),
      display1: GoogleFonts.crimsonText(textStyle: textTheme?.display1),
      headline: GoogleFonts.crimsonText(textStyle: textTheme?.headline),
      title: GoogleFonts.crimsonText(textStyle: textTheme?.title),
      subhead: GoogleFonts.crimsonText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.crimsonText(textStyle: textTheme?.body2),
      body1: GoogleFonts.crimsonText(textStyle: textTheme?.body1),
      caption: GoogleFonts.crimsonText(textStyle: textTheme?.caption),
      button: GoogleFonts.crimsonText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.crimsonText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.crimsonText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Croissant One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Croissant+One
  static TextStyle croissantOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a51f330afdb3504b94cb09686589076855186483e4e89665623ebe0f655ce6ec',
        54696,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CroissantOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Croissant One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Croissant+One
  static TextTheme croissantOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.croissantOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.croissantOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.croissantOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.croissantOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.croissantOne(textStyle: textTheme?.headline),
      title: GoogleFonts.croissantOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.croissantOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.croissantOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.croissantOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.croissantOne(textStyle: textTheme?.caption),
      button: GoogleFonts.croissantOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.croissantOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.croissantOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crushed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crushed
  static TextStyle crushed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f8487a87e68819238f02206a3eab5aedf7deae9e72b1010c364816df3934ab08',
        57404,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Crushed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crushed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crushed
  static TextTheme crushedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.crushed(textStyle: textTheme?.display4),
      display3: GoogleFonts.crushed(textStyle: textTheme?.display3),
      display2: GoogleFonts.crushed(textStyle: textTheme?.display2),
      display1: GoogleFonts.crushed(textStyle: textTheme?.display1),
      headline: GoogleFonts.crushed(textStyle: textTheme?.headline),
      title: GoogleFonts.crushed(textStyle: textTheme?.title),
      subhead: GoogleFonts.crushed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.crushed(textStyle: textTheme?.body2),
      body1: GoogleFonts.crushed(textStyle: textTheme?.body1),
      caption: GoogleFonts.crushed(textStyle: textTheme?.caption),
      button: GoogleFonts.crushed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.crushed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.crushed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cuprum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cuprum
  static TextStyle cuprum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bddf1f3b7162539ab2c939e699c275d83ee353437fc657257d945347dce5c66d',
        69128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '27d4e15720e86dcbe0f0f3e93656c40e57203137b143f5a396d8a56e654963c8',
        73796,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0a3719a13307973f16e4ebfb3980da3f7d190316e71ada51aa42650b95524c97',
        68608,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9bac99436b2027f87f8c0f692398a62b76be18874fbda4ea2b56aaa99553e6b2',
        73828,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cuprum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cuprum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cuprum
  static TextTheme cuprumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cuprum(textStyle: textTheme?.display4),
      display3: GoogleFonts.cuprum(textStyle: textTheme?.display3),
      display2: GoogleFonts.cuprum(textStyle: textTheme?.display2),
      display1: GoogleFonts.cuprum(textStyle: textTheme?.display1),
      headline: GoogleFonts.cuprum(textStyle: textTheme?.headline),
      title: GoogleFonts.cuprum(textStyle: textTheme?.title),
      subhead: GoogleFonts.cuprum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cuprum(textStyle: textTheme?.body2),
      body1: GoogleFonts.cuprum(textStyle: textTheme?.body1),
      caption: GoogleFonts.cuprum(textStyle: textTheme?.caption),
      button: GoogleFonts.cuprum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cuprum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cuprum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cute Font font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cute+Font
  static TextStyle cuteFont({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '264e6741d6541397294f9de009ed33b609adf005445eaf7a346c99b03ae75feb',
        598524,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CuteFont',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cute Font font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cute+Font
  static TextTheme cuteFontTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cuteFont(textStyle: textTheme?.display4),
      display3: GoogleFonts.cuteFont(textStyle: textTheme?.display3),
      display2: GoogleFonts.cuteFont(textStyle: textTheme?.display2),
      display1: GoogleFonts.cuteFont(textStyle: textTheme?.display1),
      headline: GoogleFonts.cuteFont(textStyle: textTheme?.headline),
      title: GoogleFonts.cuteFont(textStyle: textTheme?.title),
      subhead: GoogleFonts.cuteFont(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cuteFont(textStyle: textTheme?.body2),
      body1: GoogleFonts.cuteFont(textStyle: textTheme?.body1),
      caption: GoogleFonts.cuteFont(textStyle: textTheme?.caption),
      button: GoogleFonts.cuteFont(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cuteFont(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cuteFont(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cutive font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cutive
  static TextStyle cutive({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2e0849ce3a9bd06c1d093ce26a2727da8b032430d3d39d191cfd79df0983d490',
        41960,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cutive',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cutive font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cutive
  static TextTheme cutiveTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cutive(textStyle: textTheme?.display4),
      display3: GoogleFonts.cutive(textStyle: textTheme?.display3),
      display2: GoogleFonts.cutive(textStyle: textTheme?.display2),
      display1: GoogleFonts.cutive(textStyle: textTheme?.display1),
      headline: GoogleFonts.cutive(textStyle: textTheme?.headline),
      title: GoogleFonts.cutive(textStyle: textTheme?.title),
      subhead: GoogleFonts.cutive(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cutive(textStyle: textTheme?.body2),
      body1: GoogleFonts.cutive(textStyle: textTheme?.body1),
      caption: GoogleFonts.cutive(textStyle: textTheme?.caption),
      button: GoogleFonts.cutive(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cutive(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cutive(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cutive Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cutive+Mono
  static TextStyle cutiveMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0582d0fd288afe72a3eeebdace411705bd456580eb96ee5ef7214afd771ebfce',
        47056,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CutiveMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cutive Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cutive+Mono
  static TextTheme cutiveMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cutiveMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.cutiveMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.cutiveMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.cutiveMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.cutiveMono(textStyle: textTheme?.headline),
      title: GoogleFonts.cutiveMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.cutiveMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cutiveMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.cutiveMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.cutiveMono(textStyle: textTheme?.caption),
      button: GoogleFonts.cutiveMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cutiveMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cutiveMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the DM Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Sans
  static TextStyle dMSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e518fdb0a5c0ebe0d1d1b02a9025067837e79d235418ab9dc8366e7ce87fad55',
        43504,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'de4a1215c7928ebdd157181021531f87614894038bb9396b05826b7ae9595611',
        44712,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '683cd0ce949642886f9652656cfe66d569a79d1530fcde104214769c266ae121',
        43300,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c3126b61a6d535d42dd4e6e4eb66648863d4d4f9bf639d63da74d20cb3fa1fb4',
        44576,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '940d8601e85100233071b73474474f0ea11612beecddd6da32efb7cd8a3971bd',
        43236,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '579b8c8cd4a4fd71ee7ac563e399eacbcba63f3f8556516c95830d98bb9fbae9',
        44512,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DMSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the DM Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Sans
  static TextTheme dMSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dMSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.dMSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.dMSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.dMSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.dMSans(textStyle: textTheme?.headline),
      title: GoogleFonts.dMSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.dMSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dMSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.dMSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.dMSans(textStyle: textTheme?.caption),
      button: GoogleFonts.dMSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dMSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dMSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the DM Serif Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Serif+Display
  static TextStyle dMSerifDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e1157689ec181ea520aeee52f8f7f8c16e0ced52d30800c402aae31faf50985a',
        56068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '007cfd580d7b1323a1b43156d2591b8119745361daba6117832dcbfb0146a36a',
        50564,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DMSerifDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the DM Serif Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Serif+Display
  static TextTheme dMSerifDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the DM Serif Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Serif+Text
  static TextStyle dMSerifText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8fe3c6727cf74e86cfd545dfe7e6aa3a1dbdff9563e84e085acd65c07f633744',
        56120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '13b9bbb9c2b065c645eb14efbe2bc8dd2a4e41e635d12f8bc15b532e1d5fc628',
        50372,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DMSerifText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the DM Serif Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Serif+Text
  static TextTheme dMSerifTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dMSerifText(textStyle: textTheme?.display4),
      display3: GoogleFonts.dMSerifText(textStyle: textTheme?.display3),
      display2: GoogleFonts.dMSerifText(textStyle: textTheme?.display2),
      display1: GoogleFonts.dMSerifText(textStyle: textTheme?.display1),
      headline: GoogleFonts.dMSerifText(textStyle: textTheme?.headline),
      title: GoogleFonts.dMSerifText(textStyle: textTheme?.title),
      subhead: GoogleFonts.dMSerifText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dMSerifText(textStyle: textTheme?.body2),
      body1: GoogleFonts.dMSerifText(textStyle: textTheme?.body1),
      caption: GoogleFonts.dMSerifText(textStyle: textTheme?.caption),
      button: GoogleFonts.dMSerifText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dMSerifText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dMSerifText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Damion font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Damion
  static TextStyle damion({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2b178966c9329bdd54a10c83e076dc1647443dddd2471c9aa477780c6852294c',
        51972,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Damion',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Damion font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Damion
  static TextTheme damionTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.damion(textStyle: textTheme?.display4),
      display3: GoogleFonts.damion(textStyle: textTheme?.display3),
      display2: GoogleFonts.damion(textStyle: textTheme?.display2),
      display1: GoogleFonts.damion(textStyle: textTheme?.display1),
      headline: GoogleFonts.damion(textStyle: textTheme?.headline),
      title: GoogleFonts.damion(textStyle: textTheme?.title),
      subhead: GoogleFonts.damion(textStyle: textTheme?.subhead),
      body2: GoogleFonts.damion(textStyle: textTheme?.body2),
      body1: GoogleFonts.damion(textStyle: textTheme?.body1),
      caption: GoogleFonts.damion(textStyle: textTheme?.caption),
      button: GoogleFonts.damion(textStyle: textTheme?.button),
      subtitle: GoogleFonts.damion(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.damion(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dancing Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dancing+Script
  static TextStyle dancingScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '40f021e25f9f4e2b67f5072ac941218596581a1621931f44173cbf5245b91fd3',
        90100,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a2aa446dc86aad49ec46eb66fb313889bded9ef23f286664bba90a2eb156f87',
        89456,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DancingScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dancing Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dancing+Script
  static TextTheme dancingScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dancingScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.dancingScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.dancingScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.dancingScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.dancingScript(textStyle: textTheme?.headline),
      title: GoogleFonts.dancingScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.dancingScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dancingScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.dancingScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.dancingScript(textStyle: textTheme?.caption),
      button: GoogleFonts.dancingScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dancingScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dancingScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Darker Grotesque font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Darker+Grotesque
  static TextStyle darkerGrotesque({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f789e82ef267fb0b5f0798267ba5e3340b661840b52e1de87f7830b7d87a180e',
        40352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '60303e0b600c0176b00422a680228f744d38795fbd8d35344f494b02400628c1',
        42704,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a6e1eb6614b97b3298d1d253f5ed4399556da5b06bb191596cebfc813bdd3505',
        42568,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3e516ad3d1d4cec56249227f367cba1e2830faa7cedbcf49abca81e7c202b434',
        42552,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b56136288e57809ada8707a74f6756261c3763b3a2686398738c1fd25f157d9c',
        42600,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cf5f4f44b908aeed8723415a103b1ad9c5550388d2c8e139adab630a61a74712',
        42632,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eae6b24bfd325c090ef4a304519707f58942487ea7e118bfe036175f8c4690aa',
        42032,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DarkerGrotesque',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Darker Grotesque font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Darker+Grotesque
  static TextTheme darkerGrotesqueTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.darkerGrotesque(textStyle: textTheme?.display4),
      display3: GoogleFonts.darkerGrotesque(textStyle: textTheme?.display3),
      display2: GoogleFonts.darkerGrotesque(textStyle: textTheme?.display2),
      display1: GoogleFonts.darkerGrotesque(textStyle: textTheme?.display1),
      headline: GoogleFonts.darkerGrotesque(textStyle: textTheme?.headline),
      title: GoogleFonts.darkerGrotesque(textStyle: textTheme?.title),
      subhead: GoogleFonts.darkerGrotesque(textStyle: textTheme?.subhead),
      body2: GoogleFonts.darkerGrotesque(textStyle: textTheme?.body2),
      body1: GoogleFonts.darkerGrotesque(textStyle: textTheme?.body1),
      caption: GoogleFonts.darkerGrotesque(textStyle: textTheme?.caption),
      button: GoogleFonts.darkerGrotesque(textStyle: textTheme?.button),
      subtitle: GoogleFonts.darkerGrotesque(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.darkerGrotesque(textStyle: textTheme?.overline),
    );
  }

  /// Applies the David Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/David+Libre
  static TextStyle davidLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8319053cbaa4074884c0364b74327548dbe246119e76a214a864d9d55a12353d',
        91296,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '288d258f0790230352ec2d9b0eef7f533d14554250a99cd0b5cfc80c349d2b38',
        91348,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd02a7be354414e34512a70b5f00901c7c3c4e7df88c6bab47e8ed2e50c770c71',
        92540,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DavidLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the David Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/David+Libre
  static TextTheme davidLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.davidLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.davidLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.davidLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.davidLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.davidLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.davidLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.davidLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.davidLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.davidLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.davidLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.davidLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.davidLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.davidLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dawning of a New Day font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dawning+of+a+New+Day
  static TextStyle dawningofaNewDay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c8fb2c187b599f0368577f599628c83a2543f4c757231bb2c0843e98624eeb4a',
        65320,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DawningofaNewDay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dawning of a New Day font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dawning+of+a+New+Day
  static TextTheme dawningofaNewDayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.display4),
      display3: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.display3),
      display2: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.display2),
      display1: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.display1),
      headline: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.headline),
      title: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.title),
      subhead: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.body2),
      body1: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.body1),
      caption: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.caption),
      button: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Days One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Days+One
  static TextStyle daysOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd74812297ac57cf4ce637c47f01cbcab907136f76e2a4028e2ad1e80bd7b8ab0',
        65556,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DaysOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Days One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Days+One
  static TextTheme daysOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.daysOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.daysOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.daysOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.daysOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.daysOne(textStyle: textTheme?.headline),
      title: GoogleFonts.daysOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.daysOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.daysOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.daysOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.daysOne(textStyle: textTheme?.caption),
      button: GoogleFonts.daysOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.daysOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.daysOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dekko font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dekko
  static TextStyle dekko({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '71d66d24dfda326e074654507fa7b6be6a766f318cf01f17b000fdc6f870fb4d',
        214656,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dekko',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dekko font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dekko
  static TextTheme dekkoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dekko(textStyle: textTheme?.display4),
      display3: GoogleFonts.dekko(textStyle: textTheme?.display3),
      display2: GoogleFonts.dekko(textStyle: textTheme?.display2),
      display1: GoogleFonts.dekko(textStyle: textTheme?.display1),
      headline: GoogleFonts.dekko(textStyle: textTheme?.headline),
      title: GoogleFonts.dekko(textStyle: textTheme?.title),
      subhead: GoogleFonts.dekko(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dekko(textStyle: textTheme?.body2),
      body1: GoogleFonts.dekko(textStyle: textTheme?.body1),
      caption: GoogleFonts.dekko(textStyle: textTheme?.caption),
      button: GoogleFonts.dekko(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dekko(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dekko(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Delius font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius
  static TextStyle delius({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '882839f3551cbef380971b00494ffc16ba5b2f9841166599a0248fa4f6855cae',
        77440,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Delius',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Delius font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius
  static TextTheme deliusTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.delius(textStyle: textTheme?.display4),
      display3: GoogleFonts.delius(textStyle: textTheme?.display3),
      display2: GoogleFonts.delius(textStyle: textTheme?.display2),
      display1: GoogleFonts.delius(textStyle: textTheme?.display1),
      headline: GoogleFonts.delius(textStyle: textTheme?.headline),
      title: GoogleFonts.delius(textStyle: textTheme?.title),
      subhead: GoogleFonts.delius(textStyle: textTheme?.subhead),
      body2: GoogleFonts.delius(textStyle: textTheme?.body2),
      body1: GoogleFonts.delius(textStyle: textTheme?.body1),
      caption: GoogleFonts.delius(textStyle: textTheme?.caption),
      button: GoogleFonts.delius(textStyle: textTheme?.button),
      subtitle: GoogleFonts.delius(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.delius(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Delius Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius+Swash+Caps
  static TextStyle deliusSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8a724c6c792da2cb102b6583bf9f9ed02312ab78bbeeb3c6a6efb9ddb096ae29',
        63004,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DeliusSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Delius Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius+Swash+Caps
  static TextTheme deliusSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Delius Unicase font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius+Unicase
  static TextStyle deliusUnicase({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3bbebd3cb94431156468b1ce457ee032a1f68d964171655b60f5ae2ecf0243cb',
        32856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f761b09efebd15e0a91eabc186d565aec75f56f2b04f9cb1ed1f72d91be340ef',
        36072,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DeliusUnicase',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Delius Unicase font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius+Unicase
  static TextTheme deliusUnicaseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.deliusUnicase(textStyle: textTheme?.display4),
      display3: GoogleFonts.deliusUnicase(textStyle: textTheme?.display3),
      display2: GoogleFonts.deliusUnicase(textStyle: textTheme?.display2),
      display1: GoogleFonts.deliusUnicase(textStyle: textTheme?.display1),
      headline: GoogleFonts.deliusUnicase(textStyle: textTheme?.headline),
      title: GoogleFonts.deliusUnicase(textStyle: textTheme?.title),
      subhead: GoogleFonts.deliusUnicase(textStyle: textTheme?.subhead),
      body2: GoogleFonts.deliusUnicase(textStyle: textTheme?.body2),
      body1: GoogleFonts.deliusUnicase(textStyle: textTheme?.body1),
      caption: GoogleFonts.deliusUnicase(textStyle: textTheme?.caption),
      button: GoogleFonts.deliusUnicase(textStyle: textTheme?.button),
      subtitle: GoogleFonts.deliusUnicase(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.deliusUnicase(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Della Respira font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Della+Respira
  static TextStyle dellaRespira({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '62fa46916df65faadfa21dd5608cda99cea245fc2f736046a2118b3a95fa93ff',
        51140,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DellaRespira',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Della Respira font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Della+Respira
  static TextTheme dellaRespiraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dellaRespira(textStyle: textTheme?.display4),
      display3: GoogleFonts.dellaRespira(textStyle: textTheme?.display3),
      display2: GoogleFonts.dellaRespira(textStyle: textTheme?.display2),
      display1: GoogleFonts.dellaRespira(textStyle: textTheme?.display1),
      headline: GoogleFonts.dellaRespira(textStyle: textTheme?.headline),
      title: GoogleFonts.dellaRespira(textStyle: textTheme?.title),
      subhead: GoogleFonts.dellaRespira(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dellaRespira(textStyle: textTheme?.body2),
      body1: GoogleFonts.dellaRespira(textStyle: textTheme?.body1),
      caption: GoogleFonts.dellaRespira(textStyle: textTheme?.caption),
      button: GoogleFonts.dellaRespira(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dellaRespira(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dellaRespira(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Denk One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Denk+One
  static TextStyle denkOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '213821a54136d58fd7013e4aca0f3b0307e9ec564c83ce75d6a9e63bfb6b1714',
        36128,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DenkOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Denk One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Denk+One
  static TextTheme denkOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.denkOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.denkOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.denkOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.denkOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.denkOne(textStyle: textTheme?.headline),
      title: GoogleFonts.denkOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.denkOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.denkOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.denkOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.denkOne(textStyle: textTheme?.caption),
      button: GoogleFonts.denkOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.denkOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.denkOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Devonshire font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Devonshire
  static TextStyle devonshire({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c62bc196f0a12683281e3842a99600f4f4755582173bca74502c02f9cf997854',
        67192,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Devonshire',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Devonshire font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Devonshire
  static TextTheme devonshireTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.devonshire(textStyle: textTheme?.display4),
      display3: GoogleFonts.devonshire(textStyle: textTheme?.display3),
      display2: GoogleFonts.devonshire(textStyle: textTheme?.display2),
      display1: GoogleFonts.devonshire(textStyle: textTheme?.display1),
      headline: GoogleFonts.devonshire(textStyle: textTheme?.headline),
      title: GoogleFonts.devonshire(textStyle: textTheme?.title),
      subhead: GoogleFonts.devonshire(textStyle: textTheme?.subhead),
      body2: GoogleFonts.devonshire(textStyle: textTheme?.body2),
      body1: GoogleFonts.devonshire(textStyle: textTheme?.body1),
      caption: GoogleFonts.devonshire(textStyle: textTheme?.caption),
      button: GoogleFonts.devonshire(textStyle: textTheme?.button),
      subtitle: GoogleFonts.devonshire(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.devonshire(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dhurjati font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dhurjati
  static TextStyle dhurjati({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ee0b382be9acedd63b3e624d49e646e5951cb5e8d54c0724ad01128bd8690012',
        546952,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dhurjati',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dhurjati font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dhurjati
  static TextTheme dhurjatiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dhurjati(textStyle: textTheme?.display4),
      display3: GoogleFonts.dhurjati(textStyle: textTheme?.display3),
      display2: GoogleFonts.dhurjati(textStyle: textTheme?.display2),
      display1: GoogleFonts.dhurjati(textStyle: textTheme?.display1),
      headline: GoogleFonts.dhurjati(textStyle: textTheme?.headline),
      title: GoogleFonts.dhurjati(textStyle: textTheme?.title),
      subhead: GoogleFonts.dhurjati(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dhurjati(textStyle: textTheme?.body2),
      body1: GoogleFonts.dhurjati(textStyle: textTheme?.body1),
      caption: GoogleFonts.dhurjati(textStyle: textTheme?.caption),
      button: GoogleFonts.dhurjati(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dhurjati(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dhurjati(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Didact Gothic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Didact+Gothic
  static TextStyle didactGothic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c28f009d8ad88ab0414e29aabe1ad9f19a95836e772d9cb369f27a1ee0b23fa0',
        132548,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DidactGothic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Didact Gothic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Didact+Gothic
  static TextTheme didactGothicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.didactGothic(textStyle: textTheme?.display4),
      display3: GoogleFonts.didactGothic(textStyle: textTheme?.display3),
      display2: GoogleFonts.didactGothic(textStyle: textTheme?.display2),
      display1: GoogleFonts.didactGothic(textStyle: textTheme?.display1),
      headline: GoogleFonts.didactGothic(textStyle: textTheme?.headline),
      title: GoogleFonts.didactGothic(textStyle: textTheme?.title),
      subhead: GoogleFonts.didactGothic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.didactGothic(textStyle: textTheme?.body2),
      body1: GoogleFonts.didactGothic(textStyle: textTheme?.body1),
      caption: GoogleFonts.didactGothic(textStyle: textTheme?.caption),
      button: GoogleFonts.didactGothic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.didactGothic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.didactGothic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Diplomata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Diplomata
  static TextStyle diplomata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ff25ccc70ef0385bf72a71864293132375bd427ee6e3f974f22a732523948936',
        43060,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Diplomata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Diplomata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Diplomata
  static TextTheme diplomataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.diplomata(textStyle: textTheme?.display4),
      display3: GoogleFonts.diplomata(textStyle: textTheme?.display3),
      display2: GoogleFonts.diplomata(textStyle: textTheme?.display2),
      display1: GoogleFonts.diplomata(textStyle: textTheme?.display1),
      headline: GoogleFonts.diplomata(textStyle: textTheme?.headline),
      title: GoogleFonts.diplomata(textStyle: textTheme?.title),
      subhead: GoogleFonts.diplomata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.diplomata(textStyle: textTheme?.body2),
      body1: GoogleFonts.diplomata(textStyle: textTheme?.body1),
      caption: GoogleFonts.diplomata(textStyle: textTheme?.caption),
      button: GoogleFonts.diplomata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.diplomata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.diplomata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Diplomata SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Diplomata+SC
  static TextStyle diplomataSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '35ea29b9848142b1f5c17b6b53c1ee204e69fe31d85cd0d67ab75f358b968c33',
        42396,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DiplomataSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Diplomata SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Diplomata+SC
  static TextTheme diplomataSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.diplomataSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.diplomataSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.diplomataSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.diplomataSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.diplomataSC(textStyle: textTheme?.headline),
      title: GoogleFonts.diplomataSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.diplomataSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.diplomataSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.diplomataSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.diplomataSC(textStyle: textTheme?.caption),
      button: GoogleFonts.diplomataSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.diplomataSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.diplomataSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Do Hyeon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Do+Hyeon
  static TextStyle doHyeon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f24aa5cecd71141bf907f712b4e1a8d1ae20bfc48e6f4c397af431431965c7c3',
        408356,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DoHyeon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Do Hyeon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Do+Hyeon
  static TextTheme doHyeonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.doHyeon(textStyle: textTheme?.display4),
      display3: GoogleFonts.doHyeon(textStyle: textTheme?.display3),
      display2: GoogleFonts.doHyeon(textStyle: textTheme?.display2),
      display1: GoogleFonts.doHyeon(textStyle: textTheme?.display1),
      headline: GoogleFonts.doHyeon(textStyle: textTheme?.headline),
      title: GoogleFonts.doHyeon(textStyle: textTheme?.title),
      subhead: GoogleFonts.doHyeon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.doHyeon(textStyle: textTheme?.body2),
      body1: GoogleFonts.doHyeon(textStyle: textTheme?.body1),
      caption: GoogleFonts.doHyeon(textStyle: textTheme?.caption),
      button: GoogleFonts.doHyeon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.doHyeon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.doHyeon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dokdo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dokdo
  static TextStyle dokdo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b88083d5e2a376a3766403b0ff323016dd93814b3d540b48859e517dbcc28d08',
        1385696,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dokdo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dokdo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dokdo
  static TextTheme dokdoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dokdo(textStyle: textTheme?.display4),
      display3: GoogleFonts.dokdo(textStyle: textTheme?.display3),
      display2: GoogleFonts.dokdo(textStyle: textTheme?.display2),
      display1: GoogleFonts.dokdo(textStyle: textTheme?.display1),
      headline: GoogleFonts.dokdo(textStyle: textTheme?.headline),
      title: GoogleFonts.dokdo(textStyle: textTheme?.title),
      subhead: GoogleFonts.dokdo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dokdo(textStyle: textTheme?.body2),
      body1: GoogleFonts.dokdo(textStyle: textTheme?.body1),
      caption: GoogleFonts.dokdo(textStyle: textTheme?.caption),
      button: GoogleFonts.dokdo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dokdo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dokdo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Domine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Domine
  static TextStyle domine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7b5d61cb478ce2e3fd32416939a39f3b9aa118d0eb76c107195e0857c44ada1c',
        89788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5865b0de838f6cabefc862631b06e8c7e86a0b8865e9ee530819d8590dd23e6f',
        91860,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Domine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Domine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Domine
  static TextTheme domineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.domine(textStyle: textTheme?.display4),
      display3: GoogleFonts.domine(textStyle: textTheme?.display3),
      display2: GoogleFonts.domine(textStyle: textTheme?.display2),
      display1: GoogleFonts.domine(textStyle: textTheme?.display1),
      headline: GoogleFonts.domine(textStyle: textTheme?.headline),
      title: GoogleFonts.domine(textStyle: textTheme?.title),
      subhead: GoogleFonts.domine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.domine(textStyle: textTheme?.body2),
      body1: GoogleFonts.domine(textStyle: textTheme?.body1),
      caption: GoogleFonts.domine(textStyle: textTheme?.caption),
      button: GoogleFonts.domine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.domine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.domine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Donegal One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Donegal+One
  static TextStyle donegalOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '75cadf3ba9559e8ba497b68a3e7695d2c733b4ce2264119f7f181974902025ba',
        44828,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DonegalOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Donegal One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Donegal+One
  static TextTheme donegalOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.donegalOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.donegalOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.donegalOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.donegalOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.donegalOne(textStyle: textTheme?.headline),
      title: GoogleFonts.donegalOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.donegalOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.donegalOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.donegalOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.donegalOne(textStyle: textTheme?.caption),
      button: GoogleFonts.donegalOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.donegalOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.donegalOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Doppio One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Doppio+One
  static TextStyle doppioOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '72f56b16a716f87ccdb2d2fa52196eb1c365c8b142e58ef5bc106a01345cdc28',
        36952,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DoppioOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Doppio One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Doppio+One
  static TextTheme doppioOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.doppioOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.doppioOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.doppioOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.doppioOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.doppioOne(textStyle: textTheme?.headline),
      title: GoogleFonts.doppioOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.doppioOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.doppioOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.doppioOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.doppioOne(textStyle: textTheme?.caption),
      button: GoogleFonts.doppioOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.doppioOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.doppioOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dorsa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dorsa
  static TextStyle dorsa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0126c6beb66497797a2fe86e3ceecbd95fadcc67cd7ba35e2b604acdda520730',
        20796,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dorsa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dorsa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dorsa
  static TextTheme dorsaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dorsa(textStyle: textTheme?.display4),
      display3: GoogleFonts.dorsa(textStyle: textTheme?.display3),
      display2: GoogleFonts.dorsa(textStyle: textTheme?.display2),
      display1: GoogleFonts.dorsa(textStyle: textTheme?.display1),
      headline: GoogleFonts.dorsa(textStyle: textTheme?.headline),
      title: GoogleFonts.dorsa(textStyle: textTheme?.title),
      subhead: GoogleFonts.dorsa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dorsa(textStyle: textTheme?.body2),
      body1: GoogleFonts.dorsa(textStyle: textTheme?.body1),
      caption: GoogleFonts.dorsa(textStyle: textTheme?.caption),
      button: GoogleFonts.dorsa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dorsa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dorsa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dosis font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dosis
  static TextStyle dosis({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3ae9ee353b3e8df71d17a46208649ec71c145848f8db69eb86b9cc1c129304b7',
        82420,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'be02e69501081e964d549ca957d036bbb12e816c1d224d1ce145ca31499bdfa0',
        82544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '313cd3d73107761779313dba36f6ec6a100a5a4daf06f4b78f8f733538936cdf',
        83240,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b1bef4924c728f63829085fe2ca4995a6a41c495df45c5830d51bf649e273031',
        82808,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8b8741fdb78479290fcd114044c58c9263670dd32db70b744dd56764a8d0b734',
        82668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4124ad4492dbb70075dd1bce8976da33cbad57f2fc10eeedc7da35592285605d',
        82876,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a7b18554b3247dd3b1384afabd828043b9a9417221c7480c2bb78a99bc4190b',
        84236,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dosis',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dosis font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dosis
  static TextTheme dosisTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dosis(textStyle: textTheme?.display4),
      display3: GoogleFonts.dosis(textStyle: textTheme?.display3),
      display2: GoogleFonts.dosis(textStyle: textTheme?.display2),
      display1: GoogleFonts.dosis(textStyle: textTheme?.display1),
      headline: GoogleFonts.dosis(textStyle: textTheme?.headline),
      title: GoogleFonts.dosis(textStyle: textTheme?.title),
      subhead: GoogleFonts.dosis(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dosis(textStyle: textTheme?.body2),
      body1: GoogleFonts.dosis(textStyle: textTheme?.body1),
      caption: GoogleFonts.dosis(textStyle: textTheme?.caption),
      button: GoogleFonts.dosis(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dosis(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dosis(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dr Sugiyama font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dr+Sugiyama
  static TextStyle drSugiyama({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '222640befef81fb644265039a2b7df8ab86103b0d4427b5a88b9fb9ebbbcd273',
        39880,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DrSugiyama',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dr Sugiyama font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dr+Sugiyama
  static TextTheme drSugiyamaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.drSugiyama(textStyle: textTheme?.display4),
      display3: GoogleFonts.drSugiyama(textStyle: textTheme?.display3),
      display2: GoogleFonts.drSugiyama(textStyle: textTheme?.display2),
      display1: GoogleFonts.drSugiyama(textStyle: textTheme?.display1),
      headline: GoogleFonts.drSugiyama(textStyle: textTheme?.headline),
      title: GoogleFonts.drSugiyama(textStyle: textTheme?.title),
      subhead: GoogleFonts.drSugiyama(textStyle: textTheme?.subhead),
      body2: GoogleFonts.drSugiyama(textStyle: textTheme?.body2),
      body1: GoogleFonts.drSugiyama(textStyle: textTheme?.body1),
      caption: GoogleFonts.drSugiyama(textStyle: textTheme?.caption),
      button: GoogleFonts.drSugiyama(textStyle: textTheme?.button),
      subtitle: GoogleFonts.drSugiyama(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.drSugiyama(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Droid Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Droid+Sans
  static TextStyle droidSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b1efe4b6a8b73a7069e3a5ede472fb84130f7ffaaded682d112e93f0d0fa5a9f',
        25204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '32b87a290fa91f892687dcef391f2b06945d1be8f3dc243b55ffb118388368de',
        25328,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DroidSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Droid Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Droid+Sans
  static TextTheme droidSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.droidSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.droidSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.droidSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.droidSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.droidSans(textStyle: textTheme?.headline),
      title: GoogleFonts.droidSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.droidSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.droidSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.droidSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.droidSans(textStyle: textTheme?.caption),
      button: GoogleFonts.droidSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.droidSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.droidSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Droid Sans Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Droid+Sans+Mono
  static TextStyle droidSansMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9dedfe943434b0c1c69af3c64930ea43797584f7c25bfe1bafe167c5b9ed0909',
        65556,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DroidSansMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Droid Sans Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Droid+Sans+Mono
  static TextTheme droidSansMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.droidSansMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.droidSansMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.droidSansMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.droidSansMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.droidSansMono(textStyle: textTheme?.headline),
      title: GoogleFonts.droidSansMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.droidSansMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.droidSansMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.droidSansMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.droidSansMono(textStyle: textTheme?.caption),
      button: GoogleFonts.droidSansMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.droidSansMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.droidSansMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Droid Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Droid+Serif
  static TextStyle droidSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dcdbbe04f7d65d6dd062e948aad5cedf59b28322fcd555a4dbff9564ba77f032',
        28380,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f2412575e58a24ba7f60d09803924763e7420e8a18ef8535551454a69b0e2765',
        23792,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '11fcb243238a8c4df11d23a99078e060b56b2f23e44efcdf3323fde6290297fb',
        28408,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5072734295fa76a5684706f1c6fab998057ea2dbd03ed74b92b6b105d694e505',
        29980,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DroidSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Droid Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Droid+Serif
  static TextTheme droidSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.droidSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.droidSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.droidSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.droidSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.droidSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.droidSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.droidSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.droidSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.droidSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.droidSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.droidSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.droidSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.droidSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Duru Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Duru+Sans
  static TextStyle duruSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '97e1b1a772ca2113d6a27390b0c7b2ce1a3b72cebf29a876a253b200136fd5b1',
        50832,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DuruSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Duru Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Duru+Sans
  static TextTheme duruSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.duruSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.duruSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.duruSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.duruSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.duruSans(textStyle: textTheme?.headline),
      title: GoogleFonts.duruSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.duruSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.duruSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.duruSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.duruSans(textStyle: textTheme?.caption),
      button: GoogleFonts.duruSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.duruSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.duruSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dynalight font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dynalight
  static TextStyle dynalight({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3380e0bde50ff63e8151f548155d2d265154e826a3fcd8e17eda92dd29d14064',
        52732,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dynalight',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dynalight font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dynalight
  static TextTheme dynalightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dynalight(textStyle: textTheme?.display4),
      display3: GoogleFonts.dynalight(textStyle: textTheme?.display3),
      display2: GoogleFonts.dynalight(textStyle: textTheme?.display2),
      display1: GoogleFonts.dynalight(textStyle: textTheme?.display1),
      headline: GoogleFonts.dynalight(textStyle: textTheme?.headline),
      title: GoogleFonts.dynalight(textStyle: textTheme?.title),
      subhead: GoogleFonts.dynalight(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dynalight(textStyle: textTheme?.body2),
      body1: GoogleFonts.dynalight(textStyle: textTheme?.body1),
      caption: GoogleFonts.dynalight(textStyle: textTheme?.caption),
      button: GoogleFonts.dynalight(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dynalight(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dynalight(textStyle: textTheme?.overline),
    );
  }

  /// Applies the EB Garamond font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/EB+Garamond
  static TextStyle eBGaramond({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '45b9fd8b021be544bd8edb0bce9007faafdc3029fdb0f19e4deb80b50e9c4adb',
        231176,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EBGaramond',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the EB Garamond font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/EB+Garamond
  static TextTheme eBGaramondTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eBGaramond(textStyle: textTheme?.display4),
      display3: GoogleFonts.eBGaramond(textStyle: textTheme?.display3),
      display2: GoogleFonts.eBGaramond(textStyle: textTheme?.display2),
      display1: GoogleFonts.eBGaramond(textStyle: textTheme?.display1),
      headline: GoogleFonts.eBGaramond(textStyle: textTheme?.headline),
      title: GoogleFonts.eBGaramond(textStyle: textTheme?.title),
      subhead: GoogleFonts.eBGaramond(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eBGaramond(textStyle: textTheme?.body2),
      body1: GoogleFonts.eBGaramond(textStyle: textTheme?.body1),
      caption: GoogleFonts.eBGaramond(textStyle: textTheme?.caption),
      button: GoogleFonts.eBGaramond(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eBGaramond(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eBGaramond(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Eagle Lake font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eagle+Lake
  static TextStyle eagleLake({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6a898ae440d1344e4a9d2174f6ee6479f00108b9baa6830fa6535a8cae6185fe',
        77584,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EagleLake',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Eagle Lake font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eagle+Lake
  static TextTheme eagleLakeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eagleLake(textStyle: textTheme?.display4),
      display3: GoogleFonts.eagleLake(textStyle: textTheme?.display3),
      display2: GoogleFonts.eagleLake(textStyle: textTheme?.display2),
      display1: GoogleFonts.eagleLake(textStyle: textTheme?.display1),
      headline: GoogleFonts.eagleLake(textStyle: textTheme?.headline),
      title: GoogleFonts.eagleLake(textStyle: textTheme?.title),
      subhead: GoogleFonts.eagleLake(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eagleLake(textStyle: textTheme?.body2),
      body1: GoogleFonts.eagleLake(textStyle: textTheme?.body1),
      caption: GoogleFonts.eagleLake(textStyle: textTheme?.caption),
      button: GoogleFonts.eagleLake(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eagleLake(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eagleLake(textStyle: textTheme?.overline),
    );
  }

  /// Applies the East Sea Dokdo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/East+Sea+Dokdo
  static TextStyle eastSeaDokdo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '28e44e5875cc0c761d9fa6492d1a738977cb5a555b57aa3016e44e2a138df2f7',
        3175644,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EastSeaDokdo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the East Sea Dokdo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/East+Sea+Dokdo
  static TextTheme eastSeaDokdoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.display4),
      display3: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.display3),
      display2: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.display2),
      display1: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.display1),
      headline: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.headline),
      title: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.title),
      subhead: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.body2),
      body1: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.body1),
      caption: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.caption),
      button: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Eater font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eater
  static TextStyle eater({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c8bc103f8051b7be6a60a18aaf892d18014b8c4d925fdcea5d77a5830c3cbb47',
        83904,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Eater',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Eater font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eater
  static TextTheme eaterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eater(textStyle: textTheme?.display4),
      display3: GoogleFonts.eater(textStyle: textTheme?.display3),
      display2: GoogleFonts.eater(textStyle: textTheme?.display2),
      display1: GoogleFonts.eater(textStyle: textTheme?.display1),
      headline: GoogleFonts.eater(textStyle: textTheme?.headline),
      title: GoogleFonts.eater(textStyle: textTheme?.title),
      subhead: GoogleFonts.eater(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eater(textStyle: textTheme?.body2),
      body1: GoogleFonts.eater(textStyle: textTheme?.body1),
      caption: GoogleFonts.eater(textStyle: textTheme?.caption),
      button: GoogleFonts.eater(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eater(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eater(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Economica font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Economica
  static TextStyle economica({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '73b7c6770eb6ca35b71cc345a389203c788cc27aac43302793865dc33771dcd9',
        26708,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ce63d04fe7b161c08efa83fba9b4d096be6f6390a294e904e16f2d7eecc90820',
        27644,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2886009c049eeeb1a75ea749115fbfece59efeb95fcaf29b5f8a82a8c680ab99',
        27148,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd8f54eb9ef53335c26d3f638df8a0bcbdd291dff65990970ea5cd5a2529dfd91',
        26976,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Economica',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Economica font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Economica
  static TextTheme economicaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.economica(textStyle: textTheme?.display4),
      display3: GoogleFonts.economica(textStyle: textTheme?.display3),
      display2: GoogleFonts.economica(textStyle: textTheme?.display2),
      display1: GoogleFonts.economica(textStyle: textTheme?.display1),
      headline: GoogleFonts.economica(textStyle: textTheme?.headline),
      title: GoogleFonts.economica(textStyle: textTheme?.title),
      subhead: GoogleFonts.economica(textStyle: textTheme?.subhead),
      body2: GoogleFonts.economica(textStyle: textTheme?.body2),
      body1: GoogleFonts.economica(textStyle: textTheme?.body1),
      caption: GoogleFonts.economica(textStyle: textTheme?.caption),
      button: GoogleFonts.economica(textStyle: textTheme?.button),
      subtitle: GoogleFonts.economica(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.economica(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Eczar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eczar
  static TextStyle eczar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c6e04a6ef288e1fca3e9420bfd9752bfdc230a20ce55a05855a8896bdb763a8e',
        196536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd91586e1decf2874b409ef01f87cf50e9725e5f419ea08e5158a6c0a06595fbe',
        196484,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba1eb42528b2001e261653b3e56b8566ae08e9a3a6709b57e20f58b84b82a76a',
        196224,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '254b1a9878dd1e9479e9aab40683ad5d17b35782b413a724f71d89952f460b39',
        195864,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd9144eab6daf83585fcb44f4726902a8cbca81d5df060ed6f09787fd5192239f',
        192624,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Eczar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Eczar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eczar
  static TextTheme eczarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eczar(textStyle: textTheme?.display4),
      display3: GoogleFonts.eczar(textStyle: textTheme?.display3),
      display2: GoogleFonts.eczar(textStyle: textTheme?.display2),
      display1: GoogleFonts.eczar(textStyle: textTheme?.display1),
      headline: GoogleFonts.eczar(textStyle: textTheme?.headline),
      title: GoogleFonts.eczar(textStyle: textTheme?.title),
      subhead: GoogleFonts.eczar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eczar(textStyle: textTheme?.body2),
      body1: GoogleFonts.eczar(textStyle: textTheme?.body1),
      caption: GoogleFonts.eczar(textStyle: textTheme?.caption),
      button: GoogleFonts.eczar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eczar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eczar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the El Messiri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/El+Messiri
  static TextStyle elMessiri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '05a194beec1a2e2d57ac0ee1d517ad0b59142391481adbd18fee77752639ddda',
        81504,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9da80f76bf936a3cccb71afc2d2a95fcb8eb5be79a494c0b44e5e75f61031a05',
        82784,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dc6415daf94f76a9dbea542ec17e7df4f5b01a18796c44448bd0c817cd2d433e',
        82764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a25eabeb2e7f6f2cbe92e832bf052cb0bd0930c95b6457ee6cb8469552b97c63',
        81596,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ElMessiri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the El Messiri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/El+Messiri
  static TextTheme elMessiriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.elMessiri(textStyle: textTheme?.display4),
      display3: GoogleFonts.elMessiri(textStyle: textTheme?.display3),
      display2: GoogleFonts.elMessiri(textStyle: textTheme?.display2),
      display1: GoogleFonts.elMessiri(textStyle: textTheme?.display1),
      headline: GoogleFonts.elMessiri(textStyle: textTheme?.headline),
      title: GoogleFonts.elMessiri(textStyle: textTheme?.title),
      subhead: GoogleFonts.elMessiri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.elMessiri(textStyle: textTheme?.body2),
      body1: GoogleFonts.elMessiri(textStyle: textTheme?.body1),
      caption: GoogleFonts.elMessiri(textStyle: textTheme?.caption),
      button: GoogleFonts.elMessiri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.elMessiri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.elMessiri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Electrolize font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Electrolize
  static TextStyle electrolize({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c68d85c8396ce2228f3bd601b3423d838c24c546404f25a38db6c05e64a4521b',
        34676,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Electrolize',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Electrolize font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Electrolize
  static TextTheme electrolizeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.electrolize(textStyle: textTheme?.display4),
      display3: GoogleFonts.electrolize(textStyle: textTheme?.display3),
      display2: GoogleFonts.electrolize(textStyle: textTheme?.display2),
      display1: GoogleFonts.electrolize(textStyle: textTheme?.display1),
      headline: GoogleFonts.electrolize(textStyle: textTheme?.headline),
      title: GoogleFonts.electrolize(textStyle: textTheme?.title),
      subhead: GoogleFonts.electrolize(textStyle: textTheme?.subhead),
      body2: GoogleFonts.electrolize(textStyle: textTheme?.body2),
      body1: GoogleFonts.electrolize(textStyle: textTheme?.body1),
      caption: GoogleFonts.electrolize(textStyle: textTheme?.caption),
      button: GoogleFonts.electrolize(textStyle: textTheme?.button),
      subtitle: GoogleFonts.electrolize(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.electrolize(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Elsie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Elsie
  static TextStyle elsie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bc0b83b9cbe3b25809361a2f4e495bdc9f10756f669072da3bc89689a42c8845',
        40644,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9aca439d3b5c4abdf62ae59fb1a643c185345724ebdb002f388d25d7926f8f98',
        41932,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Elsie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Elsie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Elsie
  static TextTheme elsieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.elsie(textStyle: textTheme?.display4),
      display3: GoogleFonts.elsie(textStyle: textTheme?.display3),
      display2: GoogleFonts.elsie(textStyle: textTheme?.display2),
      display1: GoogleFonts.elsie(textStyle: textTheme?.display1),
      headline: GoogleFonts.elsie(textStyle: textTheme?.headline),
      title: GoogleFonts.elsie(textStyle: textTheme?.title),
      subhead: GoogleFonts.elsie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.elsie(textStyle: textTheme?.body2),
      body1: GoogleFonts.elsie(textStyle: textTheme?.body1),
      caption: GoogleFonts.elsie(textStyle: textTheme?.caption),
      button: GoogleFonts.elsie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.elsie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.elsie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Elsie Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Elsie+Swash+Caps
  static TextStyle elsieSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5073c3bee53b70fcf6b284c6882db47468b86bb95077b497007cfecf47b76bdb',
        37692,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b3610e846ce9868a9ba2c54980426523ef730f265ae56366cb7fa77fd9cdce35',
        38904,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ElsieSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Elsie Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Elsie+Swash+Caps
  static TextTheme elsieSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Emblema One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Emblema+One
  static TextStyle emblemaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ae7300f04f026825b14eaefb3738782763992c203df0821debfdf47a5bd349ed',
        61832,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EmblemaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Emblema One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Emblema+One
  static TextTheme emblemaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.emblemaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.emblemaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.emblemaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.emblemaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.emblemaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.emblemaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.emblemaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.emblemaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.emblemaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.emblemaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.emblemaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.emblemaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.emblemaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Emilys Candy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Emilys+Candy
  static TextStyle emilysCandy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '333e01b7709d7ade3e2afa1ce5b5d193cbb59ce4909a4bd8a9061d7f12368e33',
        236800,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EmilysCandy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Emilys Candy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Emilys+Candy
  static TextTheme emilysCandyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.emilysCandy(textStyle: textTheme?.display4),
      display3: GoogleFonts.emilysCandy(textStyle: textTheme?.display3),
      display2: GoogleFonts.emilysCandy(textStyle: textTheme?.display2),
      display1: GoogleFonts.emilysCandy(textStyle: textTheme?.display1),
      headline: GoogleFonts.emilysCandy(textStyle: textTheme?.headline),
      title: GoogleFonts.emilysCandy(textStyle: textTheme?.title),
      subhead: GoogleFonts.emilysCandy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.emilysCandy(textStyle: textTheme?.body2),
      body1: GoogleFonts.emilysCandy(textStyle: textTheme?.body1),
      caption: GoogleFonts.emilysCandy(textStyle: textTheme?.caption),
      button: GoogleFonts.emilysCandy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.emilysCandy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.emilysCandy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Encode Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans
  static TextStyle encodeSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8c0f6eafec00e65a8d851e33e6e7e658e34b858ffc9f2ee39ec4bf972891fdf0',
        123088,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3e78947fa53e3e3269b141c073de12ac5c7ad7767084452cf00d157c8c0a623b',
        126316,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd81973e76c4a72a0723f8d83671c01e6a763e4c108b05dcb921abfe786017850',
        126120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '726603f17d4dde111b9e7c3a3ceab5b48d4d9fa010f95c39308a05f7744918c7',
        126176,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1e6070ed7f7df855034f826d501716460f36b8d45f7920099539a66c5ccc44b5',
        125848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7ed81c5a76ba3b44f2c7b4faaee7440283325e7bbe8efbbd976893ed9798166c',
        126108,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f2bf7fce49ca2e3dd0d2fc1203ba30dea4e97ef171f1d693e9e21e23437dd8b8',
        126352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '474df7202478321bede629db8dd5a6720566e44763591e17dc881df6a0b50144',
        126980,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '276a8dae33896588063889970f61a2b2ace3957ebb2024662e9637dc144c0e1a',
        125896,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c2d65f9836891e7be8e4f366b0daa5300822ec7e50add6db5597d2947739ea20',
        123152,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '138b74330c8e0d86094f3164019df7594d74187b1d46294fc1be869488146eb5',
        126308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c2fbe98bd01eed6d6e9965149ece772f8df140fa27924151375ad388148a46a3',
        125988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '864d5dbdc88484d744c5f412429aee361f61759144cb2a09436e172e49cb0396',
        125864,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd681997db3c7754ba70e3d8b22cbe560677787b73469a962a069f9e257235795',
        125816,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8c085d57fde1c82f5051fcdd197852a958132024196a3989c6ab00f550576534',
        125612,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a9dde6d2d55aa492820fd930f6d9358fe60b27d9deb328384adca6f7efd4984d',
        126044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e295aa9a8ecab00ca9e9012a789c72ec620a1e03dabae570058ecf0b61ad43f0',
        126828,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '65117e9c412bff42a1dd46d75a60d81bf0f70390e437c1d689525a2c422e4a71',
        125332,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '05e33431ccd816003d590171a6110b72fc3f122c224c46c4f5339f4919b57873',
        123124,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '06726656f1a2937a42770740e0772bbcd1187d2bdbe2f5bfd42bab081286b643',
        126604,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6ea764a1fca4cd3308fdc9f6284e890fe9ef8409ab991115bb08a4d0be1b544a',
        126332,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ec67d15d3d449c0b0cf65c4fc57fbca88395b306ff4f30d409b4c8eb4d06abbf',
        126216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '972df21a043f38bbac81d476692cdd0ccea7537ceac026fe837daf17c4836aa4',
        126012,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '654f95bfaeb0563e8a7622832f25016d47e3f8e60e4dd59c2ef9cf3835f5e1b1',
        126148,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '99c6ae51b272d20f915f0c4b8454b27ac9400423ba0a207b770a7dc3201f9d5c',
        126476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7d33b1fd6f457c91d58d3287767a4f0089fa3fd5ee2c18539c597f8a895b3646',
        127116,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7075bb5ddbdaca47f1356022fa375630ca868fc11d6ac6e53026c8bac0888b1',
        126184,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '380345d9f11a5d51121f04ec7692992b4393552df2a3a7d880f4fee2445141d0',
        123684,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a7de0181c2afd610c6c4f4cdd0c1b277e273ce075ebc1aeac436fad20e45419',
        125872,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9b50fe9a059788e12206f492db451f122f3ae30e6b8aa5944b51f4fa9b128373',
        125664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f2fa9b86d419104b4b7ab7aa2d8507d9998032c843e7127317c103b55c3900c3',
        125524,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ec9211a546cbefbb5fdbdca840aa8782bdbfdef2bc24a03e769b5676d869dd1',
        125672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '57adaf522bbff1044518d732d894dc3b9619455577129c3806e15c41ab7a0cf0',
        125848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ff65de1f2f27bec57c2af88329ff74b61c90a349cda06d054d87125aa4d4588',
        126108,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '93137f85c3ca94e2b0d5d2501170e4b955208bf20d99d3279a12420033315efe',
        126540,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bc58d2db7b8afc49e3bc54a2ffd46ce334497d9361768e992654a18428895228',
        125144,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dac238a8febf393531eee30878adc66774dcd33b426136f91db2c3094cdbbc87',
        123324,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a57cc45a15668d01ed3de253cf2cdf14b05212ccf8f5ed876ecdf23610598f7d',
        126728,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ce3f3d0f672e4bdcd7688f38c1ba9cb57ed89bab6f5028da4bb87ed3407edd2',
        126540,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7e3397e73831600b41c8b2381dae7b2f9fbaf91ad2dd7eda631a23dcfa4b9d95',
        126584,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3fe7f827d5bc65690cf565f4e5a7662f8ae67d2871679b9cd6e8551a94ad4faa',
        126272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1ab6bbce3162ec2c3cdd343f0ff38a4d8988517afb002ad887736c6a2df3a9d1',
        126556,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '35e2e50ea2e448f64fd31c6479eedc42e754710a0efb4e16fb6bc55724dc3b0c',
        126828,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aff573a59e5988f277836dfe45250f8fb62d9289084f3798c5b8d3adef115da9',
        127356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f945eac695f316de1c89017007aef0369d2d9c13e4564a642da83224ea32e464',
        126324,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EncodeSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Encode Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans
  static TextTheme encodeSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.encodeSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.encodeSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.encodeSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.encodeSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.encodeSans(textStyle: textTheme?.headline),
      title: GoogleFonts.encodeSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.encodeSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.encodeSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.encodeSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.encodeSans(textStyle: textTheme?.caption),
      button: GoogleFonts.encodeSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.encodeSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.encodeSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Engagement font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Engagement
  static TextStyle engagement({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '14dc139d3b6796ff833b0eb8daf08b16fcc822ca78db05a4bb8c6e65c16507ce',
        75992,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Engagement',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Engagement font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Engagement
  static TextTheme engagementTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.engagement(textStyle: textTheme?.display4),
      display3: GoogleFonts.engagement(textStyle: textTheme?.display3),
      display2: GoogleFonts.engagement(textStyle: textTheme?.display2),
      display1: GoogleFonts.engagement(textStyle: textTheme?.display1),
      headline: GoogleFonts.engagement(textStyle: textTheme?.headline),
      title: GoogleFonts.engagement(textStyle: textTheme?.title),
      subhead: GoogleFonts.engagement(textStyle: textTheme?.subhead),
      body2: GoogleFonts.engagement(textStyle: textTheme?.body2),
      body1: GoogleFonts.engagement(textStyle: textTheme?.body1),
      caption: GoogleFonts.engagement(textStyle: textTheme?.caption),
      button: GoogleFonts.engagement(textStyle: textTheme?.button),
      subtitle: GoogleFonts.engagement(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.engagement(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Englebert font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Englebert
  static TextStyle englebert({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5ceab7490f339b83c9f46a3baf7274203de3e060802b185fbd65c2aa9f5ec76c',
        52632,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Englebert',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Englebert font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Englebert
  static TextTheme englebertTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.englebert(textStyle: textTheme?.display4),
      display3: GoogleFonts.englebert(textStyle: textTheme?.display3),
      display2: GoogleFonts.englebert(textStyle: textTheme?.display2),
      display1: GoogleFonts.englebert(textStyle: textTheme?.display1),
      headline: GoogleFonts.englebert(textStyle: textTheme?.headline),
      title: GoogleFonts.englebert(textStyle: textTheme?.title),
      subhead: GoogleFonts.englebert(textStyle: textTheme?.subhead),
      body2: GoogleFonts.englebert(textStyle: textTheme?.body2),
      body1: GoogleFonts.englebert(textStyle: textTheme?.body1),
      caption: GoogleFonts.englebert(textStyle: textTheme?.caption),
      button: GoogleFonts.englebert(textStyle: textTheme?.button),
      subtitle: GoogleFonts.englebert(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.englebert(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Enriqueta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Enriqueta
  static TextStyle enriqueta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8efdf359579cbd9731b621eb32ddd55b3311bb4f3efe2479e1b87a731deb2b3f',
        53432,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '75092b77ab687551bb7a93707771fa18a40ebfe0621befe7dbaca438b8a8c954',
        45192,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Enriqueta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Enriqueta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Enriqueta
  static TextTheme enriquetaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.enriqueta(textStyle: textTheme?.display4),
      display3: GoogleFonts.enriqueta(textStyle: textTheme?.display3),
      display2: GoogleFonts.enriqueta(textStyle: textTheme?.display2),
      display1: GoogleFonts.enriqueta(textStyle: textTheme?.display1),
      headline: GoogleFonts.enriqueta(textStyle: textTheme?.headline),
      title: GoogleFonts.enriqueta(textStyle: textTheme?.title),
      subhead: GoogleFonts.enriqueta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.enriqueta(textStyle: textTheme?.body2),
      body1: GoogleFonts.enriqueta(textStyle: textTheme?.body1),
      caption: GoogleFonts.enriqueta(textStyle: textTheme?.caption),
      button: GoogleFonts.enriqueta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.enriqueta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.enriqueta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Erica One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Erica+One
  static TextStyle ericaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '718a969fb44854ce221ced461f15a49e4e53dea2478eb4fb6bac911b5dc5a99b',
        25996,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EricaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Erica One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Erica+One
  static TextTheme ericaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ericaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.ericaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.ericaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.ericaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.ericaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.ericaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.ericaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ericaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.ericaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.ericaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.ericaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ericaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ericaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Esteban font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Esteban
  static TextStyle esteban({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f0226acf9a0738f8dba187bbb11a569ea1e5329575144243525a23e543276b37',
        46456,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Esteban',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Esteban font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Esteban
  static TextTheme estebanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.esteban(textStyle: textTheme?.display4),
      display3: GoogleFonts.esteban(textStyle: textTheme?.display3),
      display2: GoogleFonts.esteban(textStyle: textTheme?.display2),
      display1: GoogleFonts.esteban(textStyle: textTheme?.display1),
      headline: GoogleFonts.esteban(textStyle: textTheme?.headline),
      title: GoogleFonts.esteban(textStyle: textTheme?.title),
      subhead: GoogleFonts.esteban(textStyle: textTheme?.subhead),
      body2: GoogleFonts.esteban(textStyle: textTheme?.body2),
      body1: GoogleFonts.esteban(textStyle: textTheme?.body1),
      caption: GoogleFonts.esteban(textStyle: textTheme?.caption),
      button: GoogleFonts.esteban(textStyle: textTheme?.button),
      subtitle: GoogleFonts.esteban(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.esteban(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Euphoria Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Euphoria+Script
  static TextStyle euphoriaScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '49720d65299334ddc97b89311f78ec792b2862791a226a49f7bb5f8e19d709a5',
        38376,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EuphoriaScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Euphoria Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Euphoria+Script
  static TextTheme euphoriaScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.euphoriaScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.euphoriaScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.euphoriaScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.euphoriaScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.euphoriaScript(textStyle: textTheme?.headline),
      title: GoogleFonts.euphoriaScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.euphoriaScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.euphoriaScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.euphoriaScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.euphoriaScript(textStyle: textTheme?.caption),
      button: GoogleFonts.euphoriaScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.euphoriaScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.euphoriaScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ewert font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ewert
  static TextStyle ewert({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e2a4aed1fe4d33019eb7c6a9273a251e7f28ac19b2820f61ef61329d32cb89a8',
        70704,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ewert',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ewert font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ewert
  static TextTheme ewertTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ewert(textStyle: textTheme?.display4),
      display3: GoogleFonts.ewert(textStyle: textTheme?.display3),
      display2: GoogleFonts.ewert(textStyle: textTheme?.display2),
      display1: GoogleFonts.ewert(textStyle: textTheme?.display1),
      headline: GoogleFonts.ewert(textStyle: textTheme?.headline),
      title: GoogleFonts.ewert(textStyle: textTheme?.title),
      subhead: GoogleFonts.ewert(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ewert(textStyle: textTheme?.body2),
      body1: GoogleFonts.ewert(textStyle: textTheme?.body1),
      caption: GoogleFonts.ewert(textStyle: textTheme?.caption),
      button: GoogleFonts.ewert(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ewert(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ewert(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Exo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Exo
  static TextStyle exo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2eda7d4b0bab32b1724ead985ca4ab23ba46b1647e60b50df836f3e142105e85',
        109668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5315edfaf9326a2112d609345e056a733da22ecf1c3aed8f0a78d51539300ec7',
        115720,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b9271134900d316a8aa07b17a3850ad179e6c77b533419aad39926ab5fbbba5e',
        109812,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '58251d3b9daf7e91b2c9371c9800e0dbcd1374a54b0eee6b026a237c4d9fe63c',
        116352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bf846eb403540e7bfaae3e3975ff0577b88730403c02d4b2e57bb241e7294e1f',
        109416,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '278cc62e59aeca97f6e14f44ded0943df0201e7aa692faff1b40a9e6d7b22dc0',
        115868,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ab24d45bd0887f54e98614ec395c5addfe82b0e8389b4721f5465954e1e2f060',
        109144,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b79a6db3b900824a3c9cbd804a328bc0bd070b648e0615e9a45f5a5c0eb8dd63',
        115404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cb038971b993fa7fa126ed43d4dc54e20af90eeb8213b0c2a9c735a2c82c0d4e',
        108848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '224493dbc8c8852c0a452618d375990f1383d43ba5f9f4726b4d87ec6c6f50c0',
        115204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '754632bf7096e73d05f2e15e3f52a82b34201bad1aa105d6e650de745d120eda',
        108772,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '397a2c49640d1470bf9df914dfbbfa914148dd86642d25e248193a1f649b27dc',
        114872,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3b0e87021af2542173d6c39db5a95d9e18ba59c0c9aa7ad37b6df04523947309',
        108476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '75d249c747ae8332516fd6d2c3996d3f2c440f659339765dc8e13a97f942ad64',
        114360,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5e5a390588a0eb152906de109ebd9c65d662628da5f1afbb3d17bd4a237c873d',
        108380,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0c6ffd7e0358672dd7d40462c46a11562e062f1cab60d82d80b8a71737cb3141',
        114288,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d12eeaf10d56d2e39321c9d10253d25ccce5e188ab6684ec5eac5d7d9ac99be',
        108500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5a6cc3dfdcfe4e6990da4fa3f55a861ed2ae701a0ae1a30d30b23daafa215604',
        113996,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Exo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Exo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Exo
  static TextTheme exoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.exo(textStyle: textTheme?.display4),
      display3: GoogleFonts.exo(textStyle: textTheme?.display3),
      display2: GoogleFonts.exo(textStyle: textTheme?.display2),
      display1: GoogleFonts.exo(textStyle: textTheme?.display1),
      headline: GoogleFonts.exo(textStyle: textTheme?.headline),
      title: GoogleFonts.exo(textStyle: textTheme?.title),
      subhead: GoogleFonts.exo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.exo(textStyle: textTheme?.body2),
      body1: GoogleFonts.exo(textStyle: textTheme?.body1),
      caption: GoogleFonts.exo(textStyle: textTheme?.caption),
      button: GoogleFonts.exo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.exo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.exo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Exo 2 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Exo+2
  static TextStyle exo2({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f19c0e2523de9afe6da463f303aefcf3e38b416875d48ef6c98328379e1a61ce',
        73868,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd39266e34642d4861ef777d4d3ae4150ae0b18b16d94713a78bb60cf03bf85b4',
        79980,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dbf766d9b363fe87cee0afda4c59bc8a59f1c8d0a0d245063c720108d85dd9d6',
        75360,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fb55978ca6abd55f49aab78def94b5c8b96bed1439a6dc4dae6dd1d0596ced50',
        81004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '64d41ba51bf8991e5322fbc8d80e400281604f70cd061562aad4bdf6aedd582e',
        75152,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '110c181389ab4ffd19a1212a2c7b53e86dd2deefa76fbd3208663e85b34cd46e',
        80724,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a0dfef91dddc6d2e9820c4faf4c31bfa1533f090efe935e91150ee1b4cc59f4f',
        75456,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd7c5bd167ace5154cd5e8806a913d620cb479062db24c06433f7f38b3e6811cf',
        80784,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f9b5326ebe6f800499e333e88b5d52d47d995cb1eb20ce541991deb5ae2792a4',
        75568,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6abd6d5f1ca760d693fe03958a2e85de8ffeeabb5e2794bc2725ce8775807924',
        81168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8999193c1336c6f666fba9f56ec1d12485be48c9f31a2e97e00056b311d2b79a',
        77592,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '73cdbc23b75cf90b91216670334c663046fe0b9d08f39991d5b9d26942b358a0',
        81332,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2fa1bb398f33123661ab6d19927457c499ee32ba16819269d005ec1a4343aaf5',
        77316,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '656cda11a815f2f5c7ef493608481f3ea6da47880dbcc3b6be65059319597393',
        80652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '88f76cbd5e824b5c45fb8278750d69a37690ede91efd8901a27dc5f20c69de70',
        77484,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fa96b010fc061593439675e03f0f7b4f36bcf4ef79b2f68d5820122313c84ac9',
        80764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '78b737edc063f02e62ffc88e8b71820aa12f17972b3dc70d9cc6aa20cbf8bb81',
        76568,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9c49337689c4c8e998cdfc92575356ddef9b8d31b07c19c2e7d466c806b5de15',
        79492,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Exo2',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Exo 2 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Exo+2
  static TextTheme exo2TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.exo2(textStyle: textTheme?.display4),
      display3: GoogleFonts.exo2(textStyle: textTheme?.display3),
      display2: GoogleFonts.exo2(textStyle: textTheme?.display2),
      display1: GoogleFonts.exo2(textStyle: textTheme?.display1),
      headline: GoogleFonts.exo2(textStyle: textTheme?.headline),
      title: GoogleFonts.exo2(textStyle: textTheme?.title),
      subhead: GoogleFonts.exo2(textStyle: textTheme?.subhead),
      body2: GoogleFonts.exo2(textStyle: textTheme?.body2),
      body1: GoogleFonts.exo2(textStyle: textTheme?.body1),
      caption: GoogleFonts.exo2(textStyle: textTheme?.caption),
      button: GoogleFonts.exo2(textStyle: textTheme?.button),
      subtitle: GoogleFonts.exo2(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.exo2(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Expletus Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Expletus+Sans
  static TextStyle expletusSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8e8194fbcb2069328e5c506a10ab38e405a359ec0ab5c0d2379659cdff0830db',
        26352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '072928d584fe0a92e93d576c43798a1dc6d1bf065c7db59d28112cb4733cad2a',
        27304,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b5cd6f4acc507801fef499ca08c7da56ff9e5df77a4ba14eac1718e7ccfe49e5',
        26656,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b16455d3607896d0b779898db128a332df5ed111317da3f1341a85a07317b209',
        50592,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '732974a8456ad103e02e3ad28c0844e71113017aae30a88969af3ec454dc2043',
        26636,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '935e18b8d6f075d9b37b0017bde129fd0e68ee0800f60eac4c68f6534c528aa3',
        27828,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1f5f64f05469211d27b24f1b1f39e57ec0ca9e4211a24b28c336f629254bd482',
        26620,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '77c1827497333ee775fc45b32a1c0c2da85ac489afa78e6ee3808130e850e355',
        29012,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ExpletusSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Expletus Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Expletus+Sans
  static TextTheme expletusSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.expletusSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.expletusSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.expletusSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.expletusSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.expletusSans(textStyle: textTheme?.headline),
      title: GoogleFonts.expletusSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.expletusSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.expletusSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.expletusSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.expletusSans(textStyle: textTheme?.caption),
      button: GoogleFonts.expletusSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.expletusSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.expletusSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fahkwang font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fahkwang
  static TextStyle fahkwang({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '07a682d6bc044cbd486744e34dcb061077bac07d9501f34c8f50b67aa2c02b7f',
        79476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c9cba18dabd9762bcd5cd460bbc145d71a364a65255b3ff8514cb385997506c8',
        82060,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a4f936e2bce0a9dc318b8e50537d34ffd7475cd6199842a810f7b9ef9072cdae',
        79520,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a1ef09b096105c18faf5fadb52cbeb7979873ad7e9d50910b116ce244b4fe166',
        82128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9e288aad85ecd44f0568c3d218d1478f896a2e9656dea8978a0462f0432102f7',
        79356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd39b9b3782631bd9e5ca85b327f2e86ade2f88ca6d30a9f85112209c08f703e5',
        82044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f7b5bd7dd6726ca8619156e571f3ab9429a229e110e87eb4807508a6e603b055',
        79100,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '99dff1eec80cee80e76e31de570b32a627c8b114c5f4a6edda2349c62ef7eb9e',
        82064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b415ad58dda4167eef2957ac799ec99e305a626797d3f015c814096dcab8244f',
        79136,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a3cb35f606a6f504a703c26834f242e79e57064c9cc15b016acd7ead15c1c379',
        82048,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d4c87b61ab6b7a8c8fd345b20f1bdea3f0eaf90b1f3d014ba9a1aed4df71bc5',
        78988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '02444f0d64cab232aa85ca6646af07c761791397753194217bec25ee19e4107e',
        81940,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fahkwang',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fahkwang font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fahkwang
  static TextTheme fahkwangTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fahkwang(textStyle: textTheme?.display4),
      display3: GoogleFonts.fahkwang(textStyle: textTheme?.display3),
      display2: GoogleFonts.fahkwang(textStyle: textTheme?.display2),
      display1: GoogleFonts.fahkwang(textStyle: textTheme?.display1),
      headline: GoogleFonts.fahkwang(textStyle: textTheme?.headline),
      title: GoogleFonts.fahkwang(textStyle: textTheme?.title),
      subhead: GoogleFonts.fahkwang(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fahkwang(textStyle: textTheme?.body2),
      body1: GoogleFonts.fahkwang(textStyle: textTheme?.body1),
      caption: GoogleFonts.fahkwang(textStyle: textTheme?.caption),
      button: GoogleFonts.fahkwang(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fahkwang(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fahkwang(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fanwood Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fanwood+Text
  static TextStyle fanwoodText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '37c7865d9942ebc3e421992f87faa2a1c1f686716fd40054035736abd0938f1d',
        119168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ebb9e6f0a9aad6a9a9a13de40ed43e94061e0aefeb1fc8ab3399b0a3307dfee8',
        96316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FanwoodText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fanwood Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fanwood+Text
  static TextTheme fanwoodTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fanwoodText(textStyle: textTheme?.display4),
      display3: GoogleFonts.fanwoodText(textStyle: textTheme?.display3),
      display2: GoogleFonts.fanwoodText(textStyle: textTheme?.display2),
      display1: GoogleFonts.fanwoodText(textStyle: textTheme?.display1),
      headline: GoogleFonts.fanwoodText(textStyle: textTheme?.headline),
      title: GoogleFonts.fanwoodText(textStyle: textTheme?.title),
      subhead: GoogleFonts.fanwoodText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fanwoodText(textStyle: textTheme?.body2),
      body1: GoogleFonts.fanwoodText(textStyle: textTheme?.body1),
      caption: GoogleFonts.fanwoodText(textStyle: textTheme?.caption),
      button: GoogleFonts.fanwoodText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fanwoodText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fanwoodText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Farro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Farro
  static TextStyle farro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ca8a2c854888fbeb59e572d229d903a5793ba08741fb5effc6484dad0baca84b',
        38668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '04c2276c71a6e273507190f49761498509d6b0b4dda77befd400b8b093ca1ad8',
        38536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '43a287bb29da4b09c5492c818eeb5cab21180fcead8c66a9340ba185728d5ab5',
        38584,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f000197888095e4fccd58e6e7af75f410a611fe4292e359d52d9110505fb0373',
        38012,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Farro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Farro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Farro
  static TextTheme farroTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.farro(textStyle: textTheme?.display4),
      display3: GoogleFonts.farro(textStyle: textTheme?.display3),
      display2: GoogleFonts.farro(textStyle: textTheme?.display2),
      display1: GoogleFonts.farro(textStyle: textTheme?.display1),
      headline: GoogleFonts.farro(textStyle: textTheme?.headline),
      title: GoogleFonts.farro(textStyle: textTheme?.title),
      subhead: GoogleFonts.farro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.farro(textStyle: textTheme?.body2),
      body1: GoogleFonts.farro(textStyle: textTheme?.body1),
      caption: GoogleFonts.farro(textStyle: textTheme?.caption),
      button: GoogleFonts.farro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.farro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.farro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Farsan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Farsan
  static TextStyle farsan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '06d96e20a2d15a86aca97dc3632eec9628587c3c335c563af7181458c2e91c54',
        243680,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Farsan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Farsan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Farsan
  static TextTheme farsanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.farsan(textStyle: textTheme?.display4),
      display3: GoogleFonts.farsan(textStyle: textTheme?.display3),
      display2: GoogleFonts.farsan(textStyle: textTheme?.display2),
      display1: GoogleFonts.farsan(textStyle: textTheme?.display1),
      headline: GoogleFonts.farsan(textStyle: textTheme?.headline),
      title: GoogleFonts.farsan(textStyle: textTheme?.title),
      subhead: GoogleFonts.farsan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.farsan(textStyle: textTheme?.body2),
      body1: GoogleFonts.farsan(textStyle: textTheme?.body1),
      caption: GoogleFonts.farsan(textStyle: textTheme?.caption),
      button: GoogleFonts.farsan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.farsan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.farsan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fascinate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fascinate
  static TextStyle fascinate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f23d154a851bb211f83de2d4f7dd5242620662579daa75f0a4ac8e4c692a1832',
        51484,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fascinate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fascinate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fascinate
  static TextTheme fascinateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fascinate(textStyle: textTheme?.display4),
      display3: GoogleFonts.fascinate(textStyle: textTheme?.display3),
      display2: GoogleFonts.fascinate(textStyle: textTheme?.display2),
      display1: GoogleFonts.fascinate(textStyle: textTheme?.display1),
      headline: GoogleFonts.fascinate(textStyle: textTheme?.headline),
      title: GoogleFonts.fascinate(textStyle: textTheme?.title),
      subhead: GoogleFonts.fascinate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fascinate(textStyle: textTheme?.body2),
      body1: GoogleFonts.fascinate(textStyle: textTheme?.body1),
      caption: GoogleFonts.fascinate(textStyle: textTheme?.caption),
      button: GoogleFonts.fascinate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fascinate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fascinate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fascinate Inline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fascinate+Inline
  static TextStyle fascinateInline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c052c5d8595ae4b44c8e2c92cd12be41381064837072f05fc6a3f4807f1d80e7',
        59188,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FascinateInline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fascinate Inline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fascinate+Inline
  static TextTheme fascinateInlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fascinateInline(textStyle: textTheme?.display4),
      display3: GoogleFonts.fascinateInline(textStyle: textTheme?.display3),
      display2: GoogleFonts.fascinateInline(textStyle: textTheme?.display2),
      display1: GoogleFonts.fascinateInline(textStyle: textTheme?.display1),
      headline: GoogleFonts.fascinateInline(textStyle: textTheme?.headline),
      title: GoogleFonts.fascinateInline(textStyle: textTheme?.title),
      subhead: GoogleFonts.fascinateInline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fascinateInline(textStyle: textTheme?.body2),
      body1: GoogleFonts.fascinateInline(textStyle: textTheme?.body1),
      caption: GoogleFonts.fascinateInline(textStyle: textTheme?.caption),
      button: GoogleFonts.fascinateInline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fascinateInline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fascinateInline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Faster One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Faster+One
  static TextStyle fasterOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fbde65e70c94e07f0152fa5b1506d0a77cf338a94d29423fec1aa0730891cd04',
        44372,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FasterOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Faster One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Faster+One
  static TextTheme fasterOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fasterOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fasterOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fasterOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fasterOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fasterOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fasterOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fasterOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fasterOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fasterOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fasterOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fasterOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fasterOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fasterOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fauna One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fauna+One
  static TextStyle faunaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'afbf7594d1feb78a9b5e6262887492adcf721a6e1d033b1c6d26aeba06bcc132',
        30196,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FaunaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fauna One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fauna+One
  static TextTheme faunaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.faunaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.faunaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.faunaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.faunaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.faunaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.faunaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.faunaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.faunaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.faunaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.faunaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.faunaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.faunaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.faunaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Faustina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Faustina
  static TextStyle faustina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b83e2bcd1f015e1e288c5870cf0301c94cff5d1d346b1c0b7d0e497ec7165a06',
        83308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a7f8c492e8ce7588c67e918c52ae5a4c9517a62c3057c9aaa9f2a2f8bcc1278d',
        84980,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ced47c330edb05d2c4dc0cfe0e0b69f9b23cfce448a95ab12a7179b3f3e7d8e9',
        88172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '02caa39209526de5d9a8cd33d2d06056bd7dd2c4f91748ddd6a5af7fb9abfa87',
        90276,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '617c505971ec93fa27bd52270f4a605f1f9e8c04efa06181c1f9e6a684cb907a',
        88292,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5f2f74ee4758fad98604d34c6a8e8df131c924bfd4654546327cc02df81af527',
        90052,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e680d2565c4001336be567bd147c16b8d88d21b36f499cd98e689a429568ebcd',
        84148,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '32a38ed85ba3470cf4ff6929aae4fdb13233d68ba71b97ce606bc2ce782b0961',
        86792,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Faustina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Faustina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Faustina
  static TextTheme faustinaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.faustina(textStyle: textTheme?.display4),
      display3: GoogleFonts.faustina(textStyle: textTheme?.display3),
      display2: GoogleFonts.faustina(textStyle: textTheme?.display2),
      display1: GoogleFonts.faustina(textStyle: textTheme?.display1),
      headline: GoogleFonts.faustina(textStyle: textTheme?.headline),
      title: GoogleFonts.faustina(textStyle: textTheme?.title),
      subhead: GoogleFonts.faustina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.faustina(textStyle: textTheme?.body2),
      body1: GoogleFonts.faustina(textStyle: textTheme?.body1),
      caption: GoogleFonts.faustina(textStyle: textTheme?.caption),
      button: GoogleFonts.faustina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.faustina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.faustina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Federant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Federant
  static TextStyle federant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '64e759e186856942cf96caca16925f320d145c552c214f61546d51aad8e02bbe',
        32556,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Federant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Federant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Federant
  static TextTheme federantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.federant(textStyle: textTheme?.display4),
      display3: GoogleFonts.federant(textStyle: textTheme?.display3),
      display2: GoogleFonts.federant(textStyle: textTheme?.display2),
      display1: GoogleFonts.federant(textStyle: textTheme?.display1),
      headline: GoogleFonts.federant(textStyle: textTheme?.headline),
      title: GoogleFonts.federant(textStyle: textTheme?.title),
      subhead: GoogleFonts.federant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.federant(textStyle: textTheme?.body2),
      body1: GoogleFonts.federant(textStyle: textTheme?.body1),
      caption: GoogleFonts.federant(textStyle: textTheme?.caption),
      button: GoogleFonts.federant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.federant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.federant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Federo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Federo
  static TextStyle federo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cefb7b8c896226fdb5493d3bd75dbb0baae167b10f60d892578bc75dc1acc5b5',
        116756,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Federo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Federo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Federo
  static TextTheme federoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.federo(textStyle: textTheme?.display4),
      display3: GoogleFonts.federo(textStyle: textTheme?.display3),
      display2: GoogleFonts.federo(textStyle: textTheme?.display2),
      display1: GoogleFonts.federo(textStyle: textTheme?.display1),
      headline: GoogleFonts.federo(textStyle: textTheme?.headline),
      title: GoogleFonts.federo(textStyle: textTheme?.title),
      subhead: GoogleFonts.federo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.federo(textStyle: textTheme?.body2),
      body1: GoogleFonts.federo(textStyle: textTheme?.body1),
      caption: GoogleFonts.federo(textStyle: textTheme?.caption),
      button: GoogleFonts.federo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.federo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.federo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Felipa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Felipa
  static TextStyle felipa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1636ce9582e69c11f567c7e8cbea02601d37fb40da1e6affdd5b71a01c7cd36b',
        39952,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Felipa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Felipa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Felipa
  static TextTheme felipaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.felipa(textStyle: textTheme?.display4),
      display3: GoogleFonts.felipa(textStyle: textTheme?.display3),
      display2: GoogleFonts.felipa(textStyle: textTheme?.display2),
      display1: GoogleFonts.felipa(textStyle: textTheme?.display1),
      headline: GoogleFonts.felipa(textStyle: textTheme?.headline),
      title: GoogleFonts.felipa(textStyle: textTheme?.title),
      subhead: GoogleFonts.felipa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.felipa(textStyle: textTheme?.body2),
      body1: GoogleFonts.felipa(textStyle: textTheme?.body1),
      caption: GoogleFonts.felipa(textStyle: textTheme?.caption),
      button: GoogleFonts.felipa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.felipa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.felipa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fenix font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fenix
  static TextStyle fenix({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8601d9f9c9a93dcbc9a75b2e7e9e1f567e66ca628768e1567225078fee043e8f',
        45096,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fenix',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fenix font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fenix
  static TextTheme fenixTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fenix(textStyle: textTheme?.display4),
      display3: GoogleFonts.fenix(textStyle: textTheme?.display3),
      display2: GoogleFonts.fenix(textStyle: textTheme?.display2),
      display1: GoogleFonts.fenix(textStyle: textTheme?.display1),
      headline: GoogleFonts.fenix(textStyle: textTheme?.headline),
      title: GoogleFonts.fenix(textStyle: textTheme?.title),
      subhead: GoogleFonts.fenix(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fenix(textStyle: textTheme?.body2),
      body1: GoogleFonts.fenix(textStyle: textTheme?.body1),
      caption: GoogleFonts.fenix(textStyle: textTheme?.caption),
      button: GoogleFonts.fenix(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fenix(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fenix(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Finger Paint font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Finger+Paint
  static TextStyle fingerPaint({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6ab3ff7f8e0eaf096c590997201b069ff984623d2eae2b71d8712f4a94a504a9',
        101364,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FingerPaint',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Finger Paint font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Finger+Paint
  static TextTheme fingerPaintTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fingerPaint(textStyle: textTheme?.display4),
      display3: GoogleFonts.fingerPaint(textStyle: textTheme?.display3),
      display2: GoogleFonts.fingerPaint(textStyle: textTheme?.display2),
      display1: GoogleFonts.fingerPaint(textStyle: textTheme?.display1),
      headline: GoogleFonts.fingerPaint(textStyle: textTheme?.headline),
      title: GoogleFonts.fingerPaint(textStyle: textTheme?.title),
      subhead: GoogleFonts.fingerPaint(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fingerPaint(textStyle: textTheme?.body2),
      body1: GoogleFonts.fingerPaint(textStyle: textTheme?.body1),
      caption: GoogleFonts.fingerPaint(textStyle: textTheme?.caption),
      button: GoogleFonts.fingerPaint(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fingerPaint(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fingerPaint(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Mono
  static TextStyle firaMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f17d60778f78f5928584a4f314a221b328dbce03da62fcc09caeebac82f76809',
        131780,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '003aa1dc6866482549cf715d4075e470701e918eadd47a035568d8d254f63e02',
        131368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4dab36f8faa3f89e09e177a6ef40eaacd307b98b2a38a14426be96ce9ed67a3b',
        131392,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Mono
  static TextTheme firaMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.firaMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.firaMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.firaMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.firaMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.firaMono(textStyle: textTheme?.headline),
      title: GoogleFonts.firaMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.firaMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.firaMono(textStyle: textTheme?.caption),
      button: GoogleFonts.firaMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.firaMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.firaMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans
  static TextStyle firaSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8c710b8842ec687cf4d723fa7cf54656e4600a5fc0b35581c6c5db5811eb3648',
        363328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c12ca8dc162546809677cd3a931692841e7d605b092be571767436772cbca571',
        377284,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0fdce9dc421c231fd5eb33b58fa54bfc22e73eb766fbf24c099102a3c9745a04',
        367616,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6fc161a574855f456dd5f6aca03b07bd5fbbda95409eaaeea8d32b83efdd82d4',
        381668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0cf10b5f7c89c8b6cc74e27189f128a0632fcc969d1d71639d7df41a988241ea',
        366972,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ed16991f9880c1cdf370062abe98f041f9c4227d7b7533bf2f7915cd203d33a6',
        380468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '25d5c70026b4ecf845ee6e70a5db8152c460c77457ee2c198f857b9dc194d2f3',
        366252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '68cee55e27446a07ee1a11f047f9ce975c099a77beb93636576f205f1f79e949',
        379696,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '92c4968351b66aa1751300d33479286d7efbba08a54f8e4ff3bf2f46a9cf39be',
        366356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '61820fb5cb8cddf45429ac27bd1b3ddc92f5fa8df2558b86f251a7d3b02eb896',
        379848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '63399ee49cc66340dce320237ad9177a3c4425f1e2e067f36fc16613bff0566e',
        366296,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5bb43f8686cc19df2202a071cae38722fe0cc2a3a3fe6e23a2cf6a96f7744782',
        380132,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '87babfdf164afa1f458032e5d4166b48f6e1fe8599501da30592a5f2fb2dd18a',
        366376,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3b86fe4a8430dc147fd75bedeb04f37cb3fc160fcb9b905263e11f945cf8de60',
        379804,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c11b26719603ed8ca563718737b415405dd2010a56408dc403bf6292e3c11561',
        366128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9c5bac7e128fa9013ef3cdc329d8f441aea8fdca1051acdb22814bfcf14f8aff',
        379332,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3a957f6ef941a2c07855a9f053c3f0c03091299a68530247f3bb1c3c6ab574c4',
        365756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd2813a992761a32da93a8230e2d86dbc1f4c430516ebc63b870d6865995d8233',
        379500,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans
  static TextTheme firaSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.firaSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.firaSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.firaSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.firaSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.firaSans(textStyle: textTheme?.headline),
      title: GoogleFonts.firaSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.firaSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.firaSans(textStyle: textTheme?.caption),
      button: GoogleFonts.firaSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.firaSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.firaSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Sans Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans+Condensed
  static TextStyle firaSansCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bf9b3d9811dd234f65f59b0d76d65a3e1e0c670aebac4deba38952c2a936f715',
        362440,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '90a6e0b1a1c39abb49b18aa5dbe06d7495f40394b01fab73b9e1e2bfec8a63f1',
        376612,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a88fd0b03c58284d60144855004f6888c1b91eb5a7d21ac6060d56968934163e',
        366560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '07ba37d808679122d7388590ccc622b6f8f48bfad8116ba243f202818d5cd687',
        380672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '028eb7598bbb6f3a2bf5ea109d7df59dc6518811cde6bc25a6f865eca25b8cee',
        366388,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c87c9cbd8b98469f1021dcdc5e28dc336195b600990e646a06cd9e832b747236',
        380244,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '169ee94c3194b600460cd09916275e7fb039fb87644ad57a8892658bba9306c3',
        365908,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a80c7a96e3707ecec8c736d84d84610e8872d361a22b5dbe0ebc3edd438d0d73',
        378688,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '703cb9e1a6d80a19812381b5edceb1970b68ee76546ba8ae6ffed4c952fc475c',
        366208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9ad537677b67359092459fe782eab5dbddc81f5a162d5e5089e46dab0d6d3dd5',
        379868,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c134a6d726ac821a9d923951743e3265e9f99a3853356396d759d0fb71cda42a',
        365892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '59ba972744bb1ef52a903a84b4b035e2086ee740963c12a11f352474b9aa841e',
        379376,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '29ce6255f4e521be2749f9557160ebbff60c5d160cd3a920e7bfc471c723dc3f',
        366196,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '02a6c070347c5261fef75b88834e9b34ca51774d98830932ac9082d60713a416',
        379104,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a3fb82c69c6f36043219173b6f3137c43ead2f79f748d4a4a92ab045215eee54',
        366556,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '22f5b83e1b510958faf311954f84c3a505ac7ca89aa279ee4e6a9274ec38e37f',
        379268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cbc26fda4428ab404d1e295ba3295da5cacf05e0851f8e4db99a4f65e1a0b382',
        366044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd732a2087e508d3999de6ed5f8c8834fe6eed4e270dabbce0bdc668087bace49',
        379108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraSansCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Sans Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans+Condensed
  static TextTheme firaSansCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.firaSansCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.firaSansCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.firaSansCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.firaSansCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.firaSansCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.firaSansCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.firaSansCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaSansCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaSansCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.firaSansCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.firaSansCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.firaSansCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.firaSansCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Sans Extra Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans+Extra+Condensed
  static TextStyle firaSansExtraCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aa0b73aa84c42a6d80d67e8301430b1553b52c7bd68fb79ebe8a2ff750ff58d7',
        361612,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9f3e0c06798b24d5853a7192055d69133a9cbd73a9af9f24f62a00b0040d5776',
        376268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bbe50e8aab5ce91f02434c94791440b79cfbc9ee514967d9db84519325fb09bc',
        365232,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1c79fb24ec14754ab4fcb134db375dcab006d976fab22d0b109e35fdfcd23366',
        380328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '40d22d65e7e493b473980345c73d89b480fede26e26e656d2f209dca5e38c1ff',
        364864,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'facbc467dbce58d849a1d881e13552a97aac95f1729e1fc2616bcbb139bc454e',
        379592,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '86b9aeff0987b7a36348174495862b0223a80ca3b251901d0ee4e171911f3313',
        364844,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a9b18a404b2171c7bd6f0b62b4a449ac30caaf7479ea04cf72848bf1e102975a',
        378808,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7fcaa10bd6c77effd3a995f07ef8dcc91c68362f20f82be9f906ba8cd66e3a36',
        365952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'cf42464fc9f3e1569e0e1538e46fcc39fd02dba1db928aa594205dd74b6e7c72',
        379444,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0763b0bd415a608f8406877206fbac60d4785217a0983cf5569a0a2ed2922a87',
        365700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0f8d32c8579b66b9a1c5be889f3a3b21d4bd26f53af102bd2b4669b8407da059',
        379196,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f844b8d0ff4049bc54bf6eeb2fadd15e2e910f98d0a77a3ca693111015e8a365',
        365784,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '07bfb33f5214d059269b95893bcb1220d50d72c1912c6b53f105a147900b7806',
        379176,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7a9cf07642c68b3200835e3a7e3688ed58ed76a3180a2e5cf9b94ce09e158671',
        365784,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '16f3dcda792af199394d486b422a6a669c52ee944c7bacd532337e88d9840501',
        379648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '99e363528f9256b35bd83f2a25a2e5f6739df4eeb724246bc87c5ab657192270',
        366184,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '53c97db75ae729e99796dc36bad33e04ea9d0036b759f49f202c3b403c3df3eb',
        380528,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraSansExtraCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Sans Extra Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans+Extra+Condensed
  static TextTheme firaSansExtraCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.title),
      subhead:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.body1),
      caption:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fjalla One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fjalla+One
  static TextStyle fjallaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9bcbda294de33762d864eb998b9a19f1590afc95fe83a252472514751bd3ec21',
        26548,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FjallaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fjalla One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fjalla+One
  static TextTheme fjallaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fjallaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fjallaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fjallaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fjallaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fjallaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fjallaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fjallaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fjallaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fjallaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fjallaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fjallaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fjallaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fjallaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fjord One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fjord+One
  static TextStyle fjordOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1d617688444b306b1af1ecd21190c110fcd2299e6164c66b9828f25bfaeeefa2',
        54132,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FjordOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fjord One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fjord+One
  static TextTheme fjordOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fjordOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fjordOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fjordOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fjordOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fjordOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fjordOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fjordOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fjordOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fjordOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fjordOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fjordOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fjordOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fjordOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Flamenco font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Flamenco
  static TextStyle flamenco({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5e1405fc92b58d9d35feb160e51edfaa54ace38f1e035d9fe2bfbf79a4087fe2',
        34360,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f5146448316dfb5f65a04e6a343c26f45f45587351d34559af1459a54eaa864c',
        36340,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Flamenco',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Flamenco font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Flamenco
  static TextTheme flamencoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.flamenco(textStyle: textTheme?.display4),
      display3: GoogleFonts.flamenco(textStyle: textTheme?.display3),
      display2: GoogleFonts.flamenco(textStyle: textTheme?.display2),
      display1: GoogleFonts.flamenco(textStyle: textTheme?.display1),
      headline: GoogleFonts.flamenco(textStyle: textTheme?.headline),
      title: GoogleFonts.flamenco(textStyle: textTheme?.title),
      subhead: GoogleFonts.flamenco(textStyle: textTheme?.subhead),
      body2: GoogleFonts.flamenco(textStyle: textTheme?.body2),
      body1: GoogleFonts.flamenco(textStyle: textTheme?.body1),
      caption: GoogleFonts.flamenco(textStyle: textTheme?.caption),
      button: GoogleFonts.flamenco(textStyle: textTheme?.button),
      subtitle: GoogleFonts.flamenco(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.flamenco(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Flavors font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Flavors
  static TextStyle flavors({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f56d6a319c30faa62651b4a9fde87c7e4a496c678e7fb6642dccfa9c815d29dd',
        186224,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Flavors',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Flavors font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Flavors
  static TextTheme flavorsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.flavors(textStyle: textTheme?.display4),
      display3: GoogleFonts.flavors(textStyle: textTheme?.display3),
      display2: GoogleFonts.flavors(textStyle: textTheme?.display2),
      display1: GoogleFonts.flavors(textStyle: textTheme?.display1),
      headline: GoogleFonts.flavors(textStyle: textTheme?.headline),
      title: GoogleFonts.flavors(textStyle: textTheme?.title),
      subhead: GoogleFonts.flavors(textStyle: textTheme?.subhead),
      body2: GoogleFonts.flavors(textStyle: textTheme?.body2),
      body1: GoogleFonts.flavors(textStyle: textTheme?.body1),
      caption: GoogleFonts.flavors(textStyle: textTheme?.caption),
      button: GoogleFonts.flavors(textStyle: textTheme?.button),
      subtitle: GoogleFonts.flavors(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.flavors(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fondamento font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fondamento
  static TextStyle fondamento({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '75f9d66c336050a69b4366a5bd1cd8d8a0a5b7338dddd16b9af1f679ed3f6543',
        86560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '78976bc375126e59b80ff99b8d26195e4332d5cc86505149fc21d183b60e8340',
        78140,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fondamento',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fondamento font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fondamento
  static TextTheme fondamentoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fondamento(textStyle: textTheme?.display4),
      display3: GoogleFonts.fondamento(textStyle: textTheme?.display3),
      display2: GoogleFonts.fondamento(textStyle: textTheme?.display2),
      display1: GoogleFonts.fondamento(textStyle: textTheme?.display1),
      headline: GoogleFonts.fondamento(textStyle: textTheme?.headline),
      title: GoogleFonts.fondamento(textStyle: textTheme?.title),
      subhead: GoogleFonts.fondamento(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fondamento(textStyle: textTheme?.body2),
      body1: GoogleFonts.fondamento(textStyle: textTheme?.body1),
      caption: GoogleFonts.fondamento(textStyle: textTheme?.caption),
      button: GoogleFonts.fondamento(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fondamento(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fondamento(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fontdiner Swanky font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fontdiner+Swanky
  static TextStyle fontdinerSwanky({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bf7bb77a0222af06961048f7335a7c3ced76ac59796882a14738b145a87f9b7a',
        45108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FontdinerSwanky',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fontdiner Swanky font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fontdiner+Swanky
  static TextTheme fontdinerSwankyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.display4),
      display3: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.display3),
      display2: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.display2),
      display1: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.display1),
      headline: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.headline),
      title: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.title),
      subhead: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.body2),
      body1: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.body1),
      caption: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.caption),
      button: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Forum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Forum
  static TextStyle forum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3dd2cb0744af0bc963b13a121b6194f8d271243f3973b40041c90b6113d168b2',
        204156,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Forum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Forum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Forum
  static TextTheme forumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.forum(textStyle: textTheme?.display4),
      display3: GoogleFonts.forum(textStyle: textTheme?.display3),
      display2: GoogleFonts.forum(textStyle: textTheme?.display2),
      display1: GoogleFonts.forum(textStyle: textTheme?.display1),
      headline: GoogleFonts.forum(textStyle: textTheme?.headline),
      title: GoogleFonts.forum(textStyle: textTheme?.title),
      subhead: GoogleFonts.forum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.forum(textStyle: textTheme?.body2),
      body1: GoogleFonts.forum(textStyle: textTheme?.body1),
      caption: GoogleFonts.forum(textStyle: textTheme?.caption),
      button: GoogleFonts.forum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.forum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.forum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Francois One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Francois+One
  static TextStyle francoisOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9732016aa4f374d99be54bb4dff92ffaa1133a4d293595c2bd7f621e01b38e85',
        57756,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FrancoisOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Francois One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Francois+One
  static TextTheme francoisOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.francoisOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.francoisOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.francoisOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.francoisOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.francoisOne(textStyle: textTheme?.headline),
      title: GoogleFonts.francoisOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.francoisOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.francoisOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.francoisOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.francoisOne(textStyle: textTheme?.caption),
      button: GoogleFonts.francoisOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.francoisOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.francoisOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Frank Ruhl Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Frank+Ruhl+Libre
  static TextStyle frankRuhlLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a5522476a201c815bdc0a30e19c5eb768edd4ddbe563647bf958a6326d7de351',
        62032,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9a33b30005cd2b612a70785a7205c43bf5f1a43c839b44d7ab7ddb581503e7ea',
        63180,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '009ea0ba06f79de2ac7a440b5f01b2aa767bbe10be39cfb151cef128d8c5c378',
        62764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bf711279089d27a7d3707704287cee15972baf963565dccb30e23486a65697cf',
        63068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1be4c921fb7b84259c4252c3caadda7f65b0ed5ad332ce0b680224f76e280363',
        63056,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FrankRuhlLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Frank Ruhl Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Frank+Ruhl+Libre
  static TextTheme frankRuhlLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Freckle Face font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Freckle+Face
  static TextStyle freckleFace({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9c910c4a9c496679a818b2d0399b140f598d9f2f8b80bd1ad82b11b1aee3e93d',
        120676,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FreckleFace',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Freckle Face font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Freckle+Face
  static TextTheme freckleFaceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.freckleFace(textStyle: textTheme?.display4),
      display3: GoogleFonts.freckleFace(textStyle: textTheme?.display3),
      display2: GoogleFonts.freckleFace(textStyle: textTheme?.display2),
      display1: GoogleFonts.freckleFace(textStyle: textTheme?.display1),
      headline: GoogleFonts.freckleFace(textStyle: textTheme?.headline),
      title: GoogleFonts.freckleFace(textStyle: textTheme?.title),
      subhead: GoogleFonts.freckleFace(textStyle: textTheme?.subhead),
      body2: GoogleFonts.freckleFace(textStyle: textTheme?.body2),
      body1: GoogleFonts.freckleFace(textStyle: textTheme?.body1),
      caption: GoogleFonts.freckleFace(textStyle: textTheme?.caption),
      button: GoogleFonts.freckleFace(textStyle: textTheme?.button),
      subtitle: GoogleFonts.freckleFace(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.freckleFace(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fredericka the Great font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fredericka+the+Great
  static TextStyle frederickatheGreat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '532a820c85a4591fdb49ad776bcc3950cb9e66fec68cb9263fc47c65406e575d',
        486172,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FrederickatheGreat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fredericka the Great font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fredericka+the+Great
  static TextTheme frederickatheGreatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.frederickatheGreat(textStyle: textTheme?.display4),
      display3: GoogleFonts.frederickatheGreat(textStyle: textTheme?.display3),
      display2: GoogleFonts.frederickatheGreat(textStyle: textTheme?.display2),
      display1: GoogleFonts.frederickatheGreat(textStyle: textTheme?.display1),
      headline: GoogleFonts.frederickatheGreat(textStyle: textTheme?.headline),
      title: GoogleFonts.frederickatheGreat(textStyle: textTheme?.title),
      subhead: GoogleFonts.frederickatheGreat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.frederickatheGreat(textStyle: textTheme?.body2),
      body1: GoogleFonts.frederickatheGreat(textStyle: textTheme?.body1),
      caption: GoogleFonts.frederickatheGreat(textStyle: textTheme?.caption),
      button: GoogleFonts.frederickatheGreat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.frederickatheGreat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.frederickatheGreat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fredoka One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fredoka+One
  static TextStyle fredokaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b002f69e5dfa418bb4943743c033c0ace0b62544c935797166842e3571c6e8c9',
        43452,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FredokaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fredoka One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fredoka+One
  static TextTheme fredokaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fredokaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fredokaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fredokaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fredokaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fredokaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fredokaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fredokaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fredokaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fredokaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fredokaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fredokaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fredokaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fredokaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fresca font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fresca
  static TextStyle fresca({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a2fb3bbb67399806b72a60bce8a66e5e8c7260a33a6ac9368b6130534242f340',
        32596,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fresca',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fresca font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fresca
  static TextTheme frescaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fresca(textStyle: textTheme?.display4),
      display3: GoogleFonts.fresca(textStyle: textTheme?.display3),
      display2: GoogleFonts.fresca(textStyle: textTheme?.display2),
      display1: GoogleFonts.fresca(textStyle: textTheme?.display1),
      headline: GoogleFonts.fresca(textStyle: textTheme?.headline),
      title: GoogleFonts.fresca(textStyle: textTheme?.title),
      subhead: GoogleFonts.fresca(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fresca(textStyle: textTheme?.body2),
      body1: GoogleFonts.fresca(textStyle: textTheme?.body1),
      caption: GoogleFonts.fresca(textStyle: textTheme?.caption),
      button: GoogleFonts.fresca(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fresca(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fresca(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Frijole font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Frijole
  static TextStyle frijole({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '82733a19e8b30ed4cd1325f58bf2631042b40495acd959d7dd5e38a7437ca7b1',
        227444,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Frijole',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Frijole font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Frijole
  static TextTheme frijoleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.frijole(textStyle: textTheme?.display4),
      display3: GoogleFonts.frijole(textStyle: textTheme?.display3),
      display2: GoogleFonts.frijole(textStyle: textTheme?.display2),
      display1: GoogleFonts.frijole(textStyle: textTheme?.display1),
      headline: GoogleFonts.frijole(textStyle: textTheme?.headline),
      title: GoogleFonts.frijole(textStyle: textTheme?.title),
      subhead: GoogleFonts.frijole(textStyle: textTheme?.subhead),
      body2: GoogleFonts.frijole(textStyle: textTheme?.body2),
      body1: GoogleFonts.frijole(textStyle: textTheme?.body1),
      caption: GoogleFonts.frijole(textStyle: textTheme?.caption),
      button: GoogleFonts.frijole(textStyle: textTheme?.button),
      subtitle: GoogleFonts.frijole(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.frijole(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fruktur font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fruktur
  static TextStyle fruktur({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '78b40ffd5e4efdcbad2cda23700072933938f41123f3149b98ceef2c1abdea2e',
        53120,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fruktur',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fruktur font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fruktur
  static TextTheme frukturTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fruktur(textStyle: textTheme?.display4),
      display3: GoogleFonts.fruktur(textStyle: textTheme?.display3),
      display2: GoogleFonts.fruktur(textStyle: textTheme?.display2),
      display1: GoogleFonts.fruktur(textStyle: textTheme?.display1),
      headline: GoogleFonts.fruktur(textStyle: textTheme?.headline),
      title: GoogleFonts.fruktur(textStyle: textTheme?.title),
      subhead: GoogleFonts.fruktur(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fruktur(textStyle: textTheme?.body2),
      body1: GoogleFonts.fruktur(textStyle: textTheme?.body1),
      caption: GoogleFonts.fruktur(textStyle: textTheme?.caption),
      button: GoogleFonts.fruktur(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fruktur(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fruktur(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fugaz One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fugaz+One
  static TextStyle fugazOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bfd2016b130a197bdc3a7842cf6711aea8a2bc92fc2b0962ff9c9c266e680a07',
        27820,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FugazOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fugaz One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fugaz+One
  static TextTheme fugazOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fugazOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fugazOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fugazOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fugazOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fugazOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fugazOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fugazOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fugazOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fugazOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fugazOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fugazOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fugazOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fugazOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the GFS Didot font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/GFS+Didot
  static TextStyle gFSDidot({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f1953ca586ed73b65dd476de045e1f32b7446b71165bff9533f465ac46c73741',
        191144,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GFSDidot',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the GFS Didot font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/GFS+Didot
  static TextTheme gFSDidotTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gFSDidot(textStyle: textTheme?.display4),
      display3: GoogleFonts.gFSDidot(textStyle: textTheme?.display3),
      display2: GoogleFonts.gFSDidot(textStyle: textTheme?.display2),
      display1: GoogleFonts.gFSDidot(textStyle: textTheme?.display1),
      headline: GoogleFonts.gFSDidot(textStyle: textTheme?.headline),
      title: GoogleFonts.gFSDidot(textStyle: textTheme?.title),
      subhead: GoogleFonts.gFSDidot(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gFSDidot(textStyle: textTheme?.body2),
      body1: GoogleFonts.gFSDidot(textStyle: textTheme?.body1),
      caption: GoogleFonts.gFSDidot(textStyle: textTheme?.caption),
      button: GoogleFonts.gFSDidot(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gFSDidot(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gFSDidot(textStyle: textTheme?.overline),
    );
  }

  /// Applies the GFS Neohellenic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/GFS+Neohellenic
  static TextStyle gFSNeohellenic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bd8b39a679957cee00c5e50a23c2e6d3d6ba8d207873672a245c1de120f75028',
        189340,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '44d41c717d709e6a615d33a24a85f8bd9bb4eff83466d4fafb85844a41ac142b',
        164156,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '07ff63886ca5101d1a9bc31d7fb3f8dba0dfe2b725183cfb5349444e2ad8d4ad',
        148172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3317aac2c90d40a458f2817b4d514af6fa109becec2a0735a3415f2fda7a4603',
        161008,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GFSNeohellenic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the GFS Neohellenic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/GFS+Neohellenic
  static TextTheme gFSNeohellenicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.display4),
      display3: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.display3),
      display2: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.display2),
      display1: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.display1),
      headline: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.headline),
      title: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.title),
      subhead: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.body2),
      body1: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.body1),
      caption: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.caption),
      button: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gabriela font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gabriela
  static TextStyle gabriela({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2de2bbd02e6ea795828c6e6d6f6caf4fa1606b6a34d85e13e2700bba2b35e174',
        60904,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gabriela',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gabriela font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gabriela
  static TextTheme gabrielaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gabriela(textStyle: textTheme?.display4),
      display3: GoogleFonts.gabriela(textStyle: textTheme?.display3),
      display2: GoogleFonts.gabriela(textStyle: textTheme?.display2),
      display1: GoogleFonts.gabriela(textStyle: textTheme?.display1),
      headline: GoogleFonts.gabriela(textStyle: textTheme?.headline),
      title: GoogleFonts.gabriela(textStyle: textTheme?.title),
      subhead: GoogleFonts.gabriela(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gabriela(textStyle: textTheme?.body2),
      body1: GoogleFonts.gabriela(textStyle: textTheme?.body1),
      caption: GoogleFonts.gabriela(textStyle: textTheme?.caption),
      button: GoogleFonts.gabriela(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gabriela(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gabriela(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gaegu font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gaegu
  static TextStyle gaegu({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4b15c05b09479751067fd7c35435678b929504ea6e4a7e996ab5d09a77df6a9c',
        1665520,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aee336135ec347654a2f36421c05f5d68a6017eec18e264e58e7aeda0f702951',
        1687664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '047c721d06b371ebfb6f94beb758b1de181d8afc8c8e6eca6829405bd8a1cb91',
        1588560,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gaegu',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gaegu font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gaegu
  static TextTheme gaeguTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gaegu(textStyle: textTheme?.display4),
      display3: GoogleFonts.gaegu(textStyle: textTheme?.display3),
      display2: GoogleFonts.gaegu(textStyle: textTheme?.display2),
      display1: GoogleFonts.gaegu(textStyle: textTheme?.display1),
      headline: GoogleFonts.gaegu(textStyle: textTheme?.headline),
      title: GoogleFonts.gaegu(textStyle: textTheme?.title),
      subhead: GoogleFonts.gaegu(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gaegu(textStyle: textTheme?.body2),
      body1: GoogleFonts.gaegu(textStyle: textTheme?.body1),
      caption: GoogleFonts.gaegu(textStyle: textTheme?.caption),
      button: GoogleFonts.gaegu(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gaegu(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gaegu(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gafata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gafata
  static TextStyle gafata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd93ec736426526ff4d866b0522a300711a10168b8198ae7985029233601b84ac',
        37384,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gafata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gafata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gafata
  static TextTheme gafataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gafata(textStyle: textTheme?.display4),
      display3: GoogleFonts.gafata(textStyle: textTheme?.display3),
      display2: GoogleFonts.gafata(textStyle: textTheme?.display2),
      display1: GoogleFonts.gafata(textStyle: textTheme?.display1),
      headline: GoogleFonts.gafata(textStyle: textTheme?.headline),
      title: GoogleFonts.gafata(textStyle: textTheme?.title),
      subhead: GoogleFonts.gafata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gafata(textStyle: textTheme?.body2),
      body1: GoogleFonts.gafata(textStyle: textTheme?.body1),
      caption: GoogleFonts.gafata(textStyle: textTheme?.caption),
      button: GoogleFonts.gafata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gafata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gafata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Galada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galada
  static TextStyle galada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '51eded8448fda4469fa2bddc7f049589ba69c75270cdf61adabbe4453abc8728',
        155660,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Galada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Galada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galada
  static TextTheme galadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.galada(textStyle: textTheme?.display4),
      display3: GoogleFonts.galada(textStyle: textTheme?.display3),
      display2: GoogleFonts.galada(textStyle: textTheme?.display2),
      display1: GoogleFonts.galada(textStyle: textTheme?.display1),
      headline: GoogleFonts.galada(textStyle: textTheme?.headline),
      title: GoogleFonts.galada(textStyle: textTheme?.title),
      subhead: GoogleFonts.galada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.galada(textStyle: textTheme?.body2),
      body1: GoogleFonts.galada(textStyle: textTheme?.body1),
      caption: GoogleFonts.galada(textStyle: textTheme?.caption),
      button: GoogleFonts.galada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.galada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.galada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Galdeano font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galdeano
  static TextStyle galdeano({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '854bd50aee5dea55f44b1b53ec61e1810043d0a16cdc4adaf2cd764a30bb3424',
        24820,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Galdeano',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Galdeano font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galdeano
  static TextTheme galdeanoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.galdeano(textStyle: textTheme?.display4),
      display3: GoogleFonts.galdeano(textStyle: textTheme?.display3),
      display2: GoogleFonts.galdeano(textStyle: textTheme?.display2),
      display1: GoogleFonts.galdeano(textStyle: textTheme?.display1),
      headline: GoogleFonts.galdeano(textStyle: textTheme?.headline),
      title: GoogleFonts.galdeano(textStyle: textTheme?.title),
      subhead: GoogleFonts.galdeano(textStyle: textTheme?.subhead),
      body2: GoogleFonts.galdeano(textStyle: textTheme?.body2),
      body1: GoogleFonts.galdeano(textStyle: textTheme?.body1),
      caption: GoogleFonts.galdeano(textStyle: textTheme?.caption),
      button: GoogleFonts.galdeano(textStyle: textTheme?.button),
      subtitle: GoogleFonts.galdeano(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.galdeano(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Galindo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galindo
  static TextStyle galindo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c0d36dd1f81706dfcb698113c2682bb84feeffd515b1fa33d5c947ecc09e9719',
        57688,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Galindo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Galindo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galindo
  static TextTheme galindoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.galindo(textStyle: textTheme?.display4),
      display3: GoogleFonts.galindo(textStyle: textTheme?.display3),
      display2: GoogleFonts.galindo(textStyle: textTheme?.display2),
      display1: GoogleFonts.galindo(textStyle: textTheme?.display1),
      headline: GoogleFonts.galindo(textStyle: textTheme?.headline),
      title: GoogleFonts.galindo(textStyle: textTheme?.title),
      subhead: GoogleFonts.galindo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.galindo(textStyle: textTheme?.body2),
      body1: GoogleFonts.galindo(textStyle: textTheme?.body1),
      caption: GoogleFonts.galindo(textStyle: textTheme?.caption),
      button: GoogleFonts.galindo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.galindo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.galindo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gamja Flower font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gamja+Flower
  static TextStyle gamjaFlower({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e1315b2ce49da4d60b566f31827736a5b33670f46d95c26c4df7a7608f8634ea',
        6240108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GamjaFlower',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gamja Flower font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gamja+Flower
  static TextTheme gamjaFlowerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gamjaFlower(textStyle: textTheme?.display4),
      display3: GoogleFonts.gamjaFlower(textStyle: textTheme?.display3),
      display2: GoogleFonts.gamjaFlower(textStyle: textTheme?.display2),
      display1: GoogleFonts.gamjaFlower(textStyle: textTheme?.display1),
      headline: GoogleFonts.gamjaFlower(textStyle: textTheme?.headline),
      title: GoogleFonts.gamjaFlower(textStyle: textTheme?.title),
      subhead: GoogleFonts.gamjaFlower(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gamjaFlower(textStyle: textTheme?.body2),
      body1: GoogleFonts.gamjaFlower(textStyle: textTheme?.body1),
      caption: GoogleFonts.gamjaFlower(textStyle: textTheme?.caption),
      button: GoogleFonts.gamjaFlower(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gamjaFlower(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gamjaFlower(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gayathri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gayathri
  static TextStyle gayathri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6d8dba16325ef843155b024f792235ef54403fc4ce39f71ffe50c6a7cca110da',
        149780,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd5538d385b6f28efddc8cc7d5e5cf0dcbe3243febfcb81ba4112a03ab5901d1e',
        148700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dac84e865cf4bf1f5f2bd54100f9b5ded81e0b2e3904ba8a3a6a992df1c13627',
        149624,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gayathri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gayathri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gayathri
  static TextTheme gayathriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gayathri(textStyle: textTheme?.display4),
      display3: GoogleFonts.gayathri(textStyle: textTheme?.display3),
      display2: GoogleFonts.gayathri(textStyle: textTheme?.display2),
      display1: GoogleFonts.gayathri(textStyle: textTheme?.display1),
      headline: GoogleFonts.gayathri(textStyle: textTheme?.headline),
      title: GoogleFonts.gayathri(textStyle: textTheme?.title),
      subhead: GoogleFonts.gayathri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gayathri(textStyle: textTheme?.body2),
      body1: GoogleFonts.gayathri(textStyle: textTheme?.body1),
      caption: GoogleFonts.gayathri(textStyle: textTheme?.caption),
      button: GoogleFonts.gayathri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gayathri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gayathri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gentium Basic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gentium+Basic
  static TextStyle gentiumBasic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '86bcf47467c7c966ff4e8c216451273329982a4bbf3477b33615c1e5ff916fb2',
        204224,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd84eb1ad32e37c3f5e4a8eeaf077b66ec63a516eb0a631a71b3b17b0d6c43de1',
        211200,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '33b22faef221568e2734ae86ee972b4499a967b00f6d6ae128b1649a904044d7',
        207812,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b1ea05dbd54b903a6206abbb48c0183924236546ddb457db2f97273aa1d47fcd',
        213608,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GentiumBasic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gentium Basic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gentium+Basic
  static TextTheme gentiumBasicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gentiumBasic(textStyle: textTheme?.display4),
      display3: GoogleFonts.gentiumBasic(textStyle: textTheme?.display3),
      display2: GoogleFonts.gentiumBasic(textStyle: textTheme?.display2),
      display1: GoogleFonts.gentiumBasic(textStyle: textTheme?.display1),
      headline: GoogleFonts.gentiumBasic(textStyle: textTheme?.headline),
      title: GoogleFonts.gentiumBasic(textStyle: textTheme?.title),
      subhead: GoogleFonts.gentiumBasic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gentiumBasic(textStyle: textTheme?.body2),
      body1: GoogleFonts.gentiumBasic(textStyle: textTheme?.body1),
      caption: GoogleFonts.gentiumBasic(textStyle: textTheme?.caption),
      button: GoogleFonts.gentiumBasic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gentiumBasic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gentiumBasic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gentium Book Basic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gentium+Book+Basic
  static TextStyle gentiumBookBasic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0323cf4ee5a40f059eff7a114c130fd29fb414699c37336d6d305d42e3d30318',
        206468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '105db1c75307402ef0aaf8126c049e1910ec90f6a89c2745ac1fff1eb7525d03',
        212700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '743cd21e49c299921cf5cdf719c179e0adc85a19aa73a142726805c1cb607f82',
        207756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '73ca1eff2db69f993bfff34753f6f216404bceaeb657dbf84734a8bce6f279a5',
        214236,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GentiumBookBasic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gentium Book Basic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gentium+Book+Basic
  static TextTheme gentiumBookBasicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.display4),
      display3: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.display3),
      display2: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.display2),
      display1: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.display1),
      headline: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.headline),
      title: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.title),
      subhead: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.body2),
      body1: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.body1),
      caption: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.caption),
      button: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Geo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geo
  static TextStyle geo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1eea344681e2eab82088131eca8f88554cd2107b68a5bc70ac8e0eeb7877920e',
        27012,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6aff203bbf11c87ca0cbd331d3181277be2cc5f373a85fc6a0c898ed393d151b',
        27932,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Geo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Geo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geo
  static TextTheme geoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.geo(textStyle: textTheme?.display4),
      display3: GoogleFonts.geo(textStyle: textTheme?.display3),
      display2: GoogleFonts.geo(textStyle: textTheme?.display2),
      display1: GoogleFonts.geo(textStyle: textTheme?.display1),
      headline: GoogleFonts.geo(textStyle: textTheme?.headline),
      title: GoogleFonts.geo(textStyle: textTheme?.title),
      subhead: GoogleFonts.geo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.geo(textStyle: textTheme?.body2),
      body1: GoogleFonts.geo(textStyle: textTheme?.body1),
      caption: GoogleFonts.geo(textStyle: textTheme?.caption),
      button: GoogleFonts.geo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.geo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.geo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Geostar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geostar
  static TextStyle geostar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7b9967368c76fa8693221781a74e18323bde42a1df8fff30b1d5b2dd2e654dc5',
        41264,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Geostar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Geostar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geostar
  static TextTheme geostarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.geostar(textStyle: textTheme?.display4),
      display3: GoogleFonts.geostar(textStyle: textTheme?.display3),
      display2: GoogleFonts.geostar(textStyle: textTheme?.display2),
      display1: GoogleFonts.geostar(textStyle: textTheme?.display1),
      headline: GoogleFonts.geostar(textStyle: textTheme?.headline),
      title: GoogleFonts.geostar(textStyle: textTheme?.title),
      subhead: GoogleFonts.geostar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.geostar(textStyle: textTheme?.body2),
      body1: GoogleFonts.geostar(textStyle: textTheme?.body1),
      caption: GoogleFonts.geostar(textStyle: textTheme?.caption),
      button: GoogleFonts.geostar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.geostar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.geostar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Geostar Fill font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geostar+Fill
  static TextStyle geostarFill({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4be1af95d7c9c5f412f0bd7ca965a79a3691840d102dc4d542068f95fc8a04ac',
        38800,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GeostarFill',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Geostar Fill font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geostar+Fill
  static TextTheme geostarFillTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.geostarFill(textStyle: textTheme?.display4),
      display3: GoogleFonts.geostarFill(textStyle: textTheme?.display3),
      display2: GoogleFonts.geostarFill(textStyle: textTheme?.display2),
      display1: GoogleFonts.geostarFill(textStyle: textTheme?.display1),
      headline: GoogleFonts.geostarFill(textStyle: textTheme?.headline),
      title: GoogleFonts.geostarFill(textStyle: textTheme?.title),
      subhead: GoogleFonts.geostarFill(textStyle: textTheme?.subhead),
      body2: GoogleFonts.geostarFill(textStyle: textTheme?.body2),
      body1: GoogleFonts.geostarFill(textStyle: textTheme?.body1),
      caption: GoogleFonts.geostarFill(textStyle: textTheme?.caption),
      button: GoogleFonts.geostarFill(textStyle: textTheme?.button),
      subtitle: GoogleFonts.geostarFill(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.geostarFill(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Germania One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Germania+One
  static TextStyle germaniaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8b7dd1af0258695612f37eb7db169c99f09801337d690f6880dc4a7c351f830d',
        33192,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GermaniaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Germania One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Germania+One
  static TextTheme germaniaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.germaniaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.germaniaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.germaniaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.germaniaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.germaniaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.germaniaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.germaniaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.germaniaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.germaniaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.germaniaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.germaniaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.germaniaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.germaniaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gidugu font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gidugu
  static TextStyle gidugu({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8cbe8c40904c76d293cafa7611edff01d450f676f40d33e66863b5f7b10e7e1e',
        185544,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gidugu',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gidugu font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gidugu
  static TextTheme giduguTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gidugu(textStyle: textTheme?.display4),
      display3: GoogleFonts.gidugu(textStyle: textTheme?.display3),
      display2: GoogleFonts.gidugu(textStyle: textTheme?.display2),
      display1: GoogleFonts.gidugu(textStyle: textTheme?.display1),
      headline: GoogleFonts.gidugu(textStyle: textTheme?.headline),
      title: GoogleFonts.gidugu(textStyle: textTheme?.title),
      subhead: GoogleFonts.gidugu(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gidugu(textStyle: textTheme?.body2),
      body1: GoogleFonts.gidugu(textStyle: textTheme?.body1),
      caption: GoogleFonts.gidugu(textStyle: textTheme?.caption),
      button: GoogleFonts.gidugu(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gidugu(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gidugu(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gilda Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gilda+Display
  static TextStyle gildaDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd46a827dcf6e69348a898d71938544f7f63de075eaea97cb6cb797bd3c234904',
        36756,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GildaDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gilda Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gilda+Display
  static TextTheme gildaDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gildaDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.gildaDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.gildaDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.gildaDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.gildaDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.gildaDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.gildaDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gildaDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.gildaDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.gildaDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.gildaDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gildaDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gildaDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Give You Glory font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Give+You+Glory
  static TextStyle giveYouGlory({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '309c5df7e1fe41874a8f14de3edeb9c32a42ec3e31d17e863696920deb848095',
        42564,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GiveYouGlory',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Give You Glory font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Give+You+Glory
  static TextTheme giveYouGloryTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.giveYouGlory(textStyle: textTheme?.display4),
      display3: GoogleFonts.giveYouGlory(textStyle: textTheme?.display3),
      display2: GoogleFonts.giveYouGlory(textStyle: textTheme?.display2),
      display1: GoogleFonts.giveYouGlory(textStyle: textTheme?.display1),
      headline: GoogleFonts.giveYouGlory(textStyle: textTheme?.headline),
      title: GoogleFonts.giveYouGlory(textStyle: textTheme?.title),
      subhead: GoogleFonts.giveYouGlory(textStyle: textTheme?.subhead),
      body2: GoogleFonts.giveYouGlory(textStyle: textTheme?.body2),
      body1: GoogleFonts.giveYouGlory(textStyle: textTheme?.body1),
      caption: GoogleFonts.giveYouGlory(textStyle: textTheme?.caption),
      button: GoogleFonts.giveYouGlory(textStyle: textTheme?.button),
      subtitle: GoogleFonts.giveYouGlory(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.giveYouGlory(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Glass Antiqua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Glass+Antiqua
  static TextStyle glassAntiqua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e175bb6abcc9cd23e8e7fff60b5a13a870ecafeb7aab3af67614547c14354aad',
        62964,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GlassAntiqua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Glass Antiqua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Glass+Antiqua
  static TextTheme glassAntiquaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.glassAntiqua(textStyle: textTheme?.display4),
      display3: GoogleFonts.glassAntiqua(textStyle: textTheme?.display3),
      display2: GoogleFonts.glassAntiqua(textStyle: textTheme?.display2),
      display1: GoogleFonts.glassAntiqua(textStyle: textTheme?.display1),
      headline: GoogleFonts.glassAntiqua(textStyle: textTheme?.headline),
      title: GoogleFonts.glassAntiqua(textStyle: textTheme?.title),
      subhead: GoogleFonts.glassAntiqua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.glassAntiqua(textStyle: textTheme?.body2),
      body1: GoogleFonts.glassAntiqua(textStyle: textTheme?.body1),
      caption: GoogleFonts.glassAntiqua(textStyle: textTheme?.caption),
      button: GoogleFonts.glassAntiqua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.glassAntiqua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.glassAntiqua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Glegoo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Glegoo
  static TextStyle glegoo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '91a94e2b397503a978c0e061d4d1f39323e741fd649d6f743538a8d947cc1f13',
        226220,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '32ba529e1df310b4629e2a4b94b577e8d2b995647f1b0b02b97cbc401c43100c',
        221232,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Glegoo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Glegoo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Glegoo
  static TextTheme glegooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.glegoo(textStyle: textTheme?.display4),
      display3: GoogleFonts.glegoo(textStyle: textTheme?.display3),
      display2: GoogleFonts.glegoo(textStyle: textTheme?.display2),
      display1: GoogleFonts.glegoo(textStyle: textTheme?.display1),
      headline: GoogleFonts.glegoo(textStyle: textTheme?.headline),
      title: GoogleFonts.glegoo(textStyle: textTheme?.title),
      subhead: GoogleFonts.glegoo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.glegoo(textStyle: textTheme?.body2),
      body1: GoogleFonts.glegoo(textStyle: textTheme?.body1),
      caption: GoogleFonts.glegoo(textStyle: textTheme?.caption),
      button: GoogleFonts.glegoo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.glegoo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.glegoo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gloria Hallelujah font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gloria+Hallelujah
  static TextStyle gloriaHallelujah({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0ea0610b2d462be9ddfd55db487fd670e7b0855857d198cc6293f623adc66ff8',
        56248,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GloriaHallelujah',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gloria Hallelujah font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gloria+Hallelujah
  static TextTheme gloriaHallelujahTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.display4),
      display3: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.display3),
      display2: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.display2),
      display1: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.display1),
      headline: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.headline),
      title: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.title),
      subhead: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.body2),
      body1: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.body1),
      caption: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.caption),
      button: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Goblin One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Goblin+One
  static TextStyle goblinOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4d2f4678ed209cc09bfe4cefb1df66ef95e21a1b2f6f71fdf1c8408b5135472f',
        36712,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GoblinOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Goblin One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Goblin+One
  static TextTheme goblinOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.goblinOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.goblinOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.goblinOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.goblinOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.goblinOne(textStyle: textTheme?.headline),
      title: GoogleFonts.goblinOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.goblinOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.goblinOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.goblinOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.goblinOne(textStyle: textTheme?.caption),
      button: GoogleFonts.goblinOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.goblinOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.goblinOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gochi Hand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gochi+Hand
  static TextStyle gochiHand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e396d3d6d4147d9267b06c9619b938d34176559c67b48c046d971904edf8ce36',
        36908,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GochiHand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gochi Hand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gochi+Hand
  static TextTheme gochiHandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gochiHand(textStyle: textTheme?.display4),
      display3: GoogleFonts.gochiHand(textStyle: textTheme?.display3),
      display2: GoogleFonts.gochiHand(textStyle: textTheme?.display2),
      display1: GoogleFonts.gochiHand(textStyle: textTheme?.display1),
      headline: GoogleFonts.gochiHand(textStyle: textTheme?.headline),
      title: GoogleFonts.gochiHand(textStyle: textTheme?.title),
      subhead: GoogleFonts.gochiHand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gochiHand(textStyle: textTheme?.body2),
      body1: GoogleFonts.gochiHand(textStyle: textTheme?.body1),
      caption: GoogleFonts.gochiHand(textStyle: textTheme?.caption),
      button: GoogleFonts.gochiHand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gochiHand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gochiHand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Google Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Google+Sans
  static TextStyle googleSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2f8196857291dec5a18099b9965adc9aa5ea5a92c383f39a6e07c62020ca23c6',
        132080,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '61704bdefc0e81fb26bcf0ac3104d29b0804d495ad76d64831ec80f1e36272c3',
        134128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bf47378305012e74214f3f44779d3fbd483fa4bdc250c2c842a6a9218f39dca5',
        131952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2c9898ecbcf96325f4412b277cd7e2aff286e3f116f866a9a2351a4b1137fa08',
        133972,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '13dc41812ad1461ddc98d5d863984d13ce84c65cfe41db589bcbc7cba95fbf84',
        131416,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8fbd3289523e4525c67411fc94dda09a1900c3b729786d0a7809b14d10d891ed',
        133980,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GoogleSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Google Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Google+Sans
  static TextTheme googleSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.googleSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.googleSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.googleSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.googleSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.googleSans(textStyle: textTheme?.headline),
      title: GoogleFonts.googleSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.googleSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.googleSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.googleSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.googleSans(textStyle: textTheme?.caption),
      button: GoogleFonts.googleSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.googleSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.googleSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Google Sans Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Google+Sans+Display
  static TextStyle googleSansDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '87487be6f154cac5c77ae1e4221d45dbf3d2b6d0786651f01330516874b642ae',
        132004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'af21167fbf3c6489834dc96309a9b55dda588f174a66b5065ccd153da2ca56ac',
        134116,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5048cc8fe61cb0b7e2b219e3d96202f9ec5cb495544d1b4b1765ec3c428a8841',
        131804,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '483ef2478611565d8aa31e490e80797f535dfe9166895fdd3bb98fd3bd0376c8',
        134116,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aa6b0f7200a396cbbc20f4cfeb68854d6f39850dd07e9bc3754c16134e89b5b1',
        131384,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b192d184d5b00b34a232426b7d6fc90fea8ce96341800ccda1a34873d9b738f9',
        133792,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GoogleSansDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Google Sans Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Google+Sans+Display
  static TextTheme googleSansDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.googleSansDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.googleSansDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.googleSansDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.googleSansDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.googleSansDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.googleSansDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.googleSansDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.googleSansDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.googleSansDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.googleSansDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.googleSansDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.googleSansDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.googleSansDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gorditas font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gorditas
  static TextStyle gorditas({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '987a5551dac8207ac89158c984bb117eac9569a4def85c67405a6f7ee656ca7b',
        76880,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a73ab190434815fb46d5c9f8095a8d40543c248bd203391f3e120aebb2c223e',
        78612,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gorditas',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gorditas font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gorditas
  static TextTheme gorditasTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gorditas(textStyle: textTheme?.display4),
      display3: GoogleFonts.gorditas(textStyle: textTheme?.display3),
      display2: GoogleFonts.gorditas(textStyle: textTheme?.display2),
      display1: GoogleFonts.gorditas(textStyle: textTheme?.display1),
      headline: GoogleFonts.gorditas(textStyle: textTheme?.headline),
      title: GoogleFonts.gorditas(textStyle: textTheme?.title),
      subhead: GoogleFonts.gorditas(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gorditas(textStyle: textTheme?.body2),
      body1: GoogleFonts.gorditas(textStyle: textTheme?.body1),
      caption: GoogleFonts.gorditas(textStyle: textTheme?.caption),
      button: GoogleFonts.gorditas(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gorditas(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gorditas(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gothic A1 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gothic+A1
  static TextStyle gothicA1({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1ae3fbdff726cb716a361659f8efd51296b280ce94f4582c7eea6a69905050e0',
        1315216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c2132aa2e6fae5ce3ac066aa23fc45e7a83571666c0b4cc9c4dd7bf734363f05',
        1313548,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '91a462996301381a669ea6f51dc5030f155c0a85e896a575a5d80dfbd8471779',
        1314204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a9676e8d54fdeef2976f9c8fde17f39fec21956933f3ee203655c2655f350e08',
        1311208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4d0781b8cc09648594a3bba783b1d463592a004fea48584b181b631e2bfc9956',
        1311800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '94fbbaaaa3c999db13176f3b5a8cc657f1e471472f8efc8fd47d298191d6ea56',
        1311192,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e689bf118e2ff1a2884e3170b3d1829ccfdd0147baf98523e7fe0494299969f1',
        1310932,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'db82d9a4e6dabe467f8879d6c23074f7bb1b8ea95857527aec64201e53126f6d',
        1310760,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ad367f71a0970215c6e16efbe180999b11228c398745e8021187b0aa608fdd2d',
        1312032,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GothicA1',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gothic A1 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gothic+A1
  static TextTheme gothicA1TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gothicA1(textStyle: textTheme?.display4),
      display3: GoogleFonts.gothicA1(textStyle: textTheme?.display3),
      display2: GoogleFonts.gothicA1(textStyle: textTheme?.display2),
      display1: GoogleFonts.gothicA1(textStyle: textTheme?.display1),
      headline: GoogleFonts.gothicA1(textStyle: textTheme?.headline),
      title: GoogleFonts.gothicA1(textStyle: textTheme?.title),
      subhead: GoogleFonts.gothicA1(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gothicA1(textStyle: textTheme?.body2),
      body1: GoogleFonts.gothicA1(textStyle: textTheme?.body1),
      caption: GoogleFonts.gothicA1(textStyle: textTheme?.caption),
      button: GoogleFonts.gothicA1(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gothicA1(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gothicA1(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Goudy Bookletter 1911 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Goudy+Bookletter+1911
  static TextStyle goudyBookletter1911({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a4ea1fd345de7df9251d754f6ecc38147180ed991b78a0979f3ec409ee987e8b',
        53284,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GoudyBookletter1911',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Goudy Bookletter 1911 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Goudy+Bookletter+1911
  static TextTheme goudyBookletter1911TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.display4),
      display3: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.display3),
      display2: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.display2),
      display1: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.display1),
      headline: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.headline),
      title: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.title),
      subhead: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.subhead),
      body2: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.body2),
      body1: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.body1),
      caption: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.caption),
      button: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.button),
      subtitle: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Graduate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Graduate
  static TextStyle graduate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '26483ff4a5a591dbbd59a7a59b4dfcfbc10b96f20b67a1b2af0da6fbc33dc2da',
        22684,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Graduate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Graduate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Graduate
  static TextTheme graduateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.graduate(textStyle: textTheme?.display4),
      display3: GoogleFonts.graduate(textStyle: textTheme?.display3),
      display2: GoogleFonts.graduate(textStyle: textTheme?.display2),
      display1: GoogleFonts.graduate(textStyle: textTheme?.display1),
      headline: GoogleFonts.graduate(textStyle: textTheme?.headline),
      title: GoogleFonts.graduate(textStyle: textTheme?.title),
      subhead: GoogleFonts.graduate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.graduate(textStyle: textTheme?.body2),
      body1: GoogleFonts.graduate(textStyle: textTheme?.body1),
      caption: GoogleFonts.graduate(textStyle: textTheme?.caption),
      button: GoogleFonts.graduate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.graduate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.graduate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Grand Hotel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Grand+Hotel
  static TextStyle grandHotel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0804e7944e677d28eec42a45ba39935faadd27b2b1a8aab2e96c1736b7bb4e2d',
        64596,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GrandHotel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Grand Hotel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Grand+Hotel
  static TextTheme grandHotelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.grandHotel(textStyle: textTheme?.display4),
      display3: GoogleFonts.grandHotel(textStyle: textTheme?.display3),
      display2: GoogleFonts.grandHotel(textStyle: textTheme?.display2),
      display1: GoogleFonts.grandHotel(textStyle: textTheme?.display1),
      headline: GoogleFonts.grandHotel(textStyle: textTheme?.headline),
      title: GoogleFonts.grandHotel(textStyle: textTheme?.title),
      subhead: GoogleFonts.grandHotel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.grandHotel(textStyle: textTheme?.body2),
      body1: GoogleFonts.grandHotel(textStyle: textTheme?.body1),
      caption: GoogleFonts.grandHotel(textStyle: textTheme?.caption),
      button: GoogleFonts.grandHotel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.grandHotel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.grandHotel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gravitas One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gravitas+One
  static TextStyle gravitasOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8173c77c59dd22de492971f099b97bde163e13062c6df365ffe3f201cf4de551',
        41424,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GravitasOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gravitas One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gravitas+One
  static TextTheme gravitasOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gravitasOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.gravitasOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.gravitasOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.gravitasOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.gravitasOne(textStyle: textTheme?.headline),
      title: GoogleFonts.gravitasOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.gravitasOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gravitasOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.gravitasOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.gravitasOne(textStyle: textTheme?.caption),
      button: GoogleFonts.gravitasOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gravitasOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gravitasOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Great Vibes font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Great+Vibes
  static TextStyle greatVibes({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a4131255cb3cb73cefc120a8d68c6888fa33a5c24045934a0353f0c199fe254d',
        105956,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GreatVibes',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Great Vibes font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Great+Vibes
  static TextTheme greatVibesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.greatVibes(textStyle: textTheme?.display4),
      display3: GoogleFonts.greatVibes(textStyle: textTheme?.display3),
      display2: GoogleFonts.greatVibes(textStyle: textTheme?.display2),
      display1: GoogleFonts.greatVibes(textStyle: textTheme?.display1),
      headline: GoogleFonts.greatVibes(textStyle: textTheme?.headline),
      title: GoogleFonts.greatVibes(textStyle: textTheme?.title),
      subhead: GoogleFonts.greatVibes(textStyle: textTheme?.subhead),
      body2: GoogleFonts.greatVibes(textStyle: textTheme?.body2),
      body1: GoogleFonts.greatVibes(textStyle: textTheme?.body1),
      caption: GoogleFonts.greatVibes(textStyle: textTheme?.caption),
      button: GoogleFonts.greatVibes(textStyle: textTheme?.button),
      subtitle: GoogleFonts.greatVibes(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.greatVibes(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Grenze font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Grenze
  static TextStyle grenze({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0990a8c493d15ce4bc040461ac83778fbd658ffb4e5470ded379c5d932c0ad64',
        62884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b76ab96616d0138d6376f8da6777f4dcd53174ecd6cc3d105f926d138412156a',
        65344,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ea5652640e0126eca9dd8ec9af72afd38c03f0608cf8066ba85e8d3cc84b72f5',
        63156,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '62177aecb9fc857767b77f93de0e28aaff0aa14d6743fcb2e074b3b17d10ed6a',
        65532,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '306db261f5db582fb834c4d4bd749cd7bbd220410f22c0f91e9da3906fea195a',
        62964,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8328aa2d7be6cb51506689c284e11d44e22a65cc87f444619d3e74029b3c6b4d',
        65500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c881a6bd46175e518a6059d0c5fd2fef4f0e1ad8433e903ab0df21ac113772f6',
        62924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '396353d483f4c64a4c320999b4a8ea7bd7d3fc2f3d1126d31dd62c2bd7474f60',
        64960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7685525db63573b7d2818041934dd2608e56fd7eaf5af7bcbb29f02b9cd5f948',
        62892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'da991020ed06646693057a5dfc4dae9bed270609081f0e2167ff1b6d6893483a',
        65556,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c4b885545038f7f41fa22671f8e1d9becd9672ffe403f1267a77e244c2ebbe7f',
        62772,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e85fde935308bfd3bcdc33373ab0a7296b4c852c9689504d830dd8a2c722828c',
        65404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '59bbcbbac7dbc3b0875ff2e1f9b73917427553fe9494ce5072c9408e4805693c',
        62696,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b408bf29942d61415edcf80e8d329a6c9d54eedf1b2a0be057164e93cda0029a',
        65328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '10f31373e1d786f62febeb25a546f803218359aefe0c2e9d0247008665f54a92',
        62844,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6c6bbecf82467b9cbc2bc5373b2132d2a72fc1ab1d19beab9247d96b9aeaf437',
        65244,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e99c2c3ccee2de60f0fa0836977cfb7f1f5db667eaba9c59b205a9860377cb15',
        62624,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '26ebaa2c75db3de90f21f701605ab5e085a7f4c1f23fcb5235a754a34ef4defa',
        65320,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Grenze',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Grenze font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Grenze
  static TextTheme grenzeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.grenze(textStyle: textTheme?.display4),
      display3: GoogleFonts.grenze(textStyle: textTheme?.display3),
      display2: GoogleFonts.grenze(textStyle: textTheme?.display2),
      display1: GoogleFonts.grenze(textStyle: textTheme?.display1),
      headline: GoogleFonts.grenze(textStyle: textTheme?.headline),
      title: GoogleFonts.grenze(textStyle: textTheme?.title),
      subhead: GoogleFonts.grenze(textStyle: textTheme?.subhead),
      body2: GoogleFonts.grenze(textStyle: textTheme?.body2),
      body1: GoogleFonts.grenze(textStyle: textTheme?.body1),
      caption: GoogleFonts.grenze(textStyle: textTheme?.caption),
      button: GoogleFonts.grenze(textStyle: textTheme?.button),
      subtitle: GoogleFonts.grenze(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.grenze(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Griffy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Griffy
  static TextStyle griffy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9f37c4a3b39667330abe546b4133f6acfb3799da67a89997fb46b39dbc3fc6d8',
        208332,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Griffy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Griffy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Griffy
  static TextTheme griffyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.griffy(textStyle: textTheme?.display4),
      display3: GoogleFonts.griffy(textStyle: textTheme?.display3),
      display2: GoogleFonts.griffy(textStyle: textTheme?.display2),
      display1: GoogleFonts.griffy(textStyle: textTheme?.display1),
      headline: GoogleFonts.griffy(textStyle: textTheme?.headline),
      title: GoogleFonts.griffy(textStyle: textTheme?.title),
      subhead: GoogleFonts.griffy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.griffy(textStyle: textTheme?.body2),
      body1: GoogleFonts.griffy(textStyle: textTheme?.body1),
      caption: GoogleFonts.griffy(textStyle: textTheme?.caption),
      button: GoogleFonts.griffy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.griffy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.griffy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gruppo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gruppo
  static TextStyle gruppo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6cf289ec6fe4592706aa68de1f9711e3f1967db26053962cfbddd4e51a7ac65e',
        58988,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gruppo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gruppo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gruppo
  static TextTheme gruppoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gruppo(textStyle: textTheme?.display4),
      display3: GoogleFonts.gruppo(textStyle: textTheme?.display3),
      display2: GoogleFonts.gruppo(textStyle: textTheme?.display2),
      display1: GoogleFonts.gruppo(textStyle: textTheme?.display1),
      headline: GoogleFonts.gruppo(textStyle: textTheme?.headline),
      title: GoogleFonts.gruppo(textStyle: textTheme?.title),
      subhead: GoogleFonts.gruppo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gruppo(textStyle: textTheme?.body2),
      body1: GoogleFonts.gruppo(textStyle: textTheme?.body1),
      caption: GoogleFonts.gruppo(textStyle: textTheme?.caption),
      button: GoogleFonts.gruppo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gruppo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gruppo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gudea font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gudea
  static TextStyle gudea({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4b41bce93d5a05ba71bb86e2be22eb03b270fa198be7df07c9c5a818a1724c0f',
        22884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ab00b4c571bb901b0d274550fab83154da5b8bb4529e382ae7d58962b0d05f80',
        26980,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b1c48f399971799fe09414206e205ea8a5f37a1e17adc5ed4329ee9ddb9d074e',
        22512,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gudea',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gudea font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gudea
  static TextTheme gudeaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gudea(textStyle: textTheme?.display4),
      display3: GoogleFonts.gudea(textStyle: textTheme?.display3),
      display2: GoogleFonts.gudea(textStyle: textTheme?.display2),
      display1: GoogleFonts.gudea(textStyle: textTheme?.display1),
      headline: GoogleFonts.gudea(textStyle: textTheme?.headline),
      title: GoogleFonts.gudea(textStyle: textTheme?.title),
      subhead: GoogleFonts.gudea(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gudea(textStyle: textTheme?.body2),
      body1: GoogleFonts.gudea(textStyle: textTheme?.body1),
      caption: GoogleFonts.gudea(textStyle: textTheme?.caption),
      button: GoogleFonts.gudea(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gudea(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gudea(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gugi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gugi
  static TextStyle gugi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4fbf616bf21ec330d026a7115b7224fe9baf30418cdbb19b26eed6ebcd6ce2cc',
        552880,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gugi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gugi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gugi
  static TextTheme gugiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gugi(textStyle: textTheme?.display4),
      display3: GoogleFonts.gugi(textStyle: textTheme?.display3),
      display2: GoogleFonts.gugi(textStyle: textTheme?.display2),
      display1: GoogleFonts.gugi(textStyle: textTheme?.display1),
      headline: GoogleFonts.gugi(textStyle: textTheme?.headline),
      title: GoogleFonts.gugi(textStyle: textTheme?.title),
      subhead: GoogleFonts.gugi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gugi(textStyle: textTheme?.body2),
      body1: GoogleFonts.gugi(textStyle: textTheme?.body1),
      caption: GoogleFonts.gugi(textStyle: textTheme?.caption),
      button: GoogleFonts.gugi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gugi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gugi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gurajada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gurajada
  static TextStyle gurajada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9647a956c03e34f58b38200ffb45cc56377e8ba1c333ce052b8e20c3216198c3',
        234900,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gurajada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gurajada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gurajada
  static TextTheme gurajadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gurajada(textStyle: textTheme?.display4),
      display3: GoogleFonts.gurajada(textStyle: textTheme?.display3),
      display2: GoogleFonts.gurajada(textStyle: textTheme?.display2),
      display1: GoogleFonts.gurajada(textStyle: textTheme?.display1),
      headline: GoogleFonts.gurajada(textStyle: textTheme?.headline),
      title: GoogleFonts.gurajada(textStyle: textTheme?.title),
      subhead: GoogleFonts.gurajada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gurajada(textStyle: textTheme?.body2),
      body1: GoogleFonts.gurajada(textStyle: textTheme?.body1),
      caption: GoogleFonts.gurajada(textStyle: textTheme?.caption),
      button: GoogleFonts.gurajada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gurajada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gurajada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Habibi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Habibi
  static TextStyle habibi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9177d379d59937eb418704aa1a5f16ff6bfa046d3828ba6f495ffe7c2d040c5c',
        36236,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Habibi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Habibi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Habibi
  static TextTheme habibiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.habibi(textStyle: textTheme?.display4),
      display3: GoogleFonts.habibi(textStyle: textTheme?.display3),
      display2: GoogleFonts.habibi(textStyle: textTheme?.display2),
      display1: GoogleFonts.habibi(textStyle: textTheme?.display1),
      headline: GoogleFonts.habibi(textStyle: textTheme?.headline),
      title: GoogleFonts.habibi(textStyle: textTheme?.title),
      subhead: GoogleFonts.habibi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.habibi(textStyle: textTheme?.body2),
      body1: GoogleFonts.habibi(textStyle: textTheme?.body1),
      caption: GoogleFonts.habibi(textStyle: textTheme?.caption),
      button: GoogleFonts.habibi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.habibi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.habibi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Halant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Halant
  static TextStyle halant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'efbf1567d1ee285b609cc33198f6bf85b75ffc137871c0c74b770bda82fe5f96',
        163344,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd2becc2fc9d31bd06f7378b501b26b4eb057167cc3722297588a277f45b05fba',
        163064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e6e6c9b73832eb91900f4298ec5c6b73e8d537163220299fa6213b8d702b9f37',
        161020,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c38923af0ef17edd914dfb2737891b725cd1cc9dfc36bd72ba413213e99839a3',
        159016,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4d09a5ce42fc23e8619b6c817a9bc5522bc64ede74b5a75d99fe2815244ca6a8',
        157804,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Halant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Halant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Halant
  static TextTheme halantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.halant(textStyle: textTheme?.display4),
      display3: GoogleFonts.halant(textStyle: textTheme?.display3),
      display2: GoogleFonts.halant(textStyle: textTheme?.display2),
      display1: GoogleFonts.halant(textStyle: textTheme?.display1),
      headline: GoogleFonts.halant(textStyle: textTheme?.headline),
      title: GoogleFonts.halant(textStyle: textTheme?.title),
      subhead: GoogleFonts.halant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.halant(textStyle: textTheme?.body2),
      body1: GoogleFonts.halant(textStyle: textTheme?.body1),
      caption: GoogleFonts.halant(textStyle: textTheme?.caption),
      button: GoogleFonts.halant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.halant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.halant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hammersmith One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hammersmith+One
  static TextStyle hammersmithOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bbd2dab2dede4753a7b96c8c6c16d212a15b9feda00f0620edbe4cb62e1604fe',
        57584,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HammersmithOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hammersmith One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hammersmith+One
  static TextTheme hammersmithOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hammersmithOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.hammersmithOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.hammersmithOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.hammersmithOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.hammersmithOne(textStyle: textTheme?.headline),
      title: GoogleFonts.hammersmithOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.hammersmithOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hammersmithOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.hammersmithOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.hammersmithOne(textStyle: textTheme?.caption),
      button: GoogleFonts.hammersmithOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hammersmithOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hammersmithOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hanalei font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanalei
  static TextStyle hanalei({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a5f5db562e15a26c9d07e75a9375af4b46c68460a9dbaaf21847567dafcf8619',
        183760,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Hanalei',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hanalei font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanalei
  static TextTheme hanaleiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hanalei(textStyle: textTheme?.display4),
      display3: GoogleFonts.hanalei(textStyle: textTheme?.display3),
      display2: GoogleFonts.hanalei(textStyle: textTheme?.display2),
      display1: GoogleFonts.hanalei(textStyle: textTheme?.display1),
      headline: GoogleFonts.hanalei(textStyle: textTheme?.headline),
      title: GoogleFonts.hanalei(textStyle: textTheme?.title),
      subhead: GoogleFonts.hanalei(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hanalei(textStyle: textTheme?.body2),
      body1: GoogleFonts.hanalei(textStyle: textTheme?.body1),
      caption: GoogleFonts.hanalei(textStyle: textTheme?.caption),
      button: GoogleFonts.hanalei(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hanalei(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hanalei(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hanalei Fill font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanalei+Fill
  static TextStyle hanaleiFill({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8a762eb869da8deb93071d72d31cc3f5d6ab83cbeff8da397a582e507aa65465',
        91692,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HanaleiFill',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hanalei Fill font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanalei+Fill
  static TextTheme hanaleiFillTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hanaleiFill(textStyle: textTheme?.display4),
      display3: GoogleFonts.hanaleiFill(textStyle: textTheme?.display3),
      display2: GoogleFonts.hanaleiFill(textStyle: textTheme?.display2),
      display1: GoogleFonts.hanaleiFill(textStyle: textTheme?.display1),
      headline: GoogleFonts.hanaleiFill(textStyle: textTheme?.headline),
      title: GoogleFonts.hanaleiFill(textStyle: textTheme?.title),
      subhead: GoogleFonts.hanaleiFill(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hanaleiFill(textStyle: textTheme?.body2),
      body1: GoogleFonts.hanaleiFill(textStyle: textTheme?.body1),
      caption: GoogleFonts.hanaleiFill(textStyle: textTheme?.caption),
      button: GoogleFonts.hanaleiFill(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hanaleiFill(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hanaleiFill(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Handlee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Handlee
  static TextStyle handlee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '10f3e83c9fcbcd234b04cde9d1f8001a0255ea2bf3be48eb39ba87a44ff27fac',
        39084,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Handlee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Handlee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Handlee
  static TextTheme handleeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.handlee(textStyle: textTheme?.display4),
      display3: GoogleFonts.handlee(textStyle: textTheme?.display3),
      display2: GoogleFonts.handlee(textStyle: textTheme?.display2),
      display1: GoogleFonts.handlee(textStyle: textTheme?.display1),
      headline: GoogleFonts.handlee(textStyle: textTheme?.headline),
      title: GoogleFonts.handlee(textStyle: textTheme?.title),
      subhead: GoogleFonts.handlee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.handlee(textStyle: textTheme?.body2),
      body1: GoogleFonts.handlee(textStyle: textTheme?.body1),
      caption: GoogleFonts.handlee(textStyle: textTheme?.caption),
      button: GoogleFonts.handlee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.handlee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.handlee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Happy Monkey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Happy+Monkey
  static TextStyle happyMonkey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'edf47e48fdc5ee842cf7de5d9333a50f1455140283974d5f0585583198b0b994',
        55964,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HappyMonkey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Happy Monkey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Happy+Monkey
  static TextTheme happyMonkeyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.happyMonkey(textStyle: textTheme?.display4),
      display3: GoogleFonts.happyMonkey(textStyle: textTheme?.display3),
      display2: GoogleFonts.happyMonkey(textStyle: textTheme?.display2),
      display1: GoogleFonts.happyMonkey(textStyle: textTheme?.display1),
      headline: GoogleFonts.happyMonkey(textStyle: textTheme?.headline),
      title: GoogleFonts.happyMonkey(textStyle: textTheme?.title),
      subhead: GoogleFonts.happyMonkey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.happyMonkey(textStyle: textTheme?.body2),
      body1: GoogleFonts.happyMonkey(textStyle: textTheme?.body1),
      caption: GoogleFonts.happyMonkey(textStyle: textTheme?.caption),
      button: GoogleFonts.happyMonkey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.happyMonkey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.happyMonkey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Harmattan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Harmattan
  static TextStyle harmattan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '41320202de91ac539042bef1e0b4e68bb221cb422a2afcfd15a946a73ac99f64',
        528540,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Harmattan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Harmattan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Harmattan
  static TextTheme harmattanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.harmattan(textStyle: textTheme?.display4),
      display3: GoogleFonts.harmattan(textStyle: textTheme?.display3),
      display2: GoogleFonts.harmattan(textStyle: textTheme?.display2),
      display1: GoogleFonts.harmattan(textStyle: textTheme?.display1),
      headline: GoogleFonts.harmattan(textStyle: textTheme?.headline),
      title: GoogleFonts.harmattan(textStyle: textTheme?.title),
      subhead: GoogleFonts.harmattan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.harmattan(textStyle: textTheme?.body2),
      body1: GoogleFonts.harmattan(textStyle: textTheme?.body1),
      caption: GoogleFonts.harmattan(textStyle: textTheme?.caption),
      button: GoogleFonts.harmattan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.harmattan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.harmattan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Headland One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Headland+One
  static TextStyle headlandOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '09bc81418bd95b221c7661eb2081838c8bd80b6bcd38c45d2e560ff3983c9fde',
        75448,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HeadlandOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Headland One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Headland+One
  static TextTheme headlandOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.headlandOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.headlandOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.headlandOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.headlandOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.headlandOne(textStyle: textTheme?.headline),
      title: GoogleFonts.headlandOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.headlandOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.headlandOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.headlandOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.headlandOne(textStyle: textTheme?.caption),
      button: GoogleFonts.headlandOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.headlandOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.headlandOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Heebo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Heebo
  static TextStyle heebo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2f2d859884539805a307db5a1953174f56bbb1e6903e915be95fe2a03d9ccacf',
        45672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eca72d49e0e063205daeaedb86fcdfc0cc36c5aaeb2d564ace316302e6ae62d9',
        45524,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'afb3fdd559b309c81c88a054148d94587299a397f1e8a3798cfb7cc2d485369c',
        44868,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6655017f4c44bf09c5f66243feddb0c2cc8654284f24057da878243794d13286',
        44708,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '61bb78902136df2bcd0ef85590cbe95a59a3d85b975e0778906df1211029bd34',
        44840,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c1324f3250d2f9405f19d63450423cd5a8a8cf6c6b7129e3afda9592f69c2df4',
        44964,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '500b1881e185310128c33157aa1484b2a52573bfe32f11d60065e0deffe8471c',
        45328,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Heebo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Heebo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Heebo
  static TextTheme heeboTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.heebo(textStyle: textTheme?.display4),
      display3: GoogleFonts.heebo(textStyle: textTheme?.display3),
      display2: GoogleFonts.heebo(textStyle: textTheme?.display2),
      display1: GoogleFonts.heebo(textStyle: textTheme?.display1),
      headline: GoogleFonts.heebo(textStyle: textTheme?.headline),
      title: GoogleFonts.heebo(textStyle: textTheme?.title),
      subhead: GoogleFonts.heebo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.heebo(textStyle: textTheme?.body2),
      body1: GoogleFonts.heebo(textStyle: textTheme?.body1),
      caption: GoogleFonts.heebo(textStyle: textTheme?.caption),
      button: GoogleFonts.heebo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.heebo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.heebo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Henny Penny font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Henny+Penny
  static TextStyle hennyPenny({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f0a1cf7a7ff413b8e4b7efebd74b65892f11e78dc663ec993b133ccfd9177864',
        78004,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HennyPenny',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Henny Penny font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Henny+Penny
  static TextTheme hennyPennyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hennyPenny(textStyle: textTheme?.display4),
      display3: GoogleFonts.hennyPenny(textStyle: textTheme?.display3),
      display2: GoogleFonts.hennyPenny(textStyle: textTheme?.display2),
      display1: GoogleFonts.hennyPenny(textStyle: textTheme?.display1),
      headline: GoogleFonts.hennyPenny(textStyle: textTheme?.headline),
      title: GoogleFonts.hennyPenny(textStyle: textTheme?.title),
      subhead: GoogleFonts.hennyPenny(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hennyPenny(textStyle: textTheme?.body2),
      body1: GoogleFonts.hennyPenny(textStyle: textTheme?.body1),
      caption: GoogleFonts.hennyPenny(textStyle: textTheme?.caption),
      button: GoogleFonts.hennyPenny(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hennyPenny(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hennyPenny(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Herr Von Muellerhoff font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Herr+Von+Muellerhoff
  static TextStyle herrVonMuellerhoff({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8c993280c6ba0eaa30f678b4c9821389abad4632e23c3a1629655afe7f463395',
        46576,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HerrVonMuellerhoff',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Herr Von Muellerhoff font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Herr+Von+Muellerhoff
  static TextTheme herrVonMuellerhoffTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.display4),
      display3: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.display3),
      display2: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.display2),
      display1: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.display1),
      headline: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.headline),
      title: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.title),
      subhead: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.subhead),
      body2: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.body2),
      body1: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.body1),
      caption: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.caption),
      button: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.button),
      subtitle: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hi Melody font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hi+Melody
  static TextStyle hiMelody({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '306d4c79415f43cc2f655c997e9edc971ad12227c39d46aef4fae766ba572d12',
        6090832,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HiMelody',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hi Melody font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hi+Melody
  static TextTheme hiMelodyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hiMelody(textStyle: textTheme?.display4),
      display3: GoogleFonts.hiMelody(textStyle: textTheme?.display3),
      display2: GoogleFonts.hiMelody(textStyle: textTheme?.display2),
      display1: GoogleFonts.hiMelody(textStyle: textTheme?.display1),
      headline: GoogleFonts.hiMelody(textStyle: textTheme?.headline),
      title: GoogleFonts.hiMelody(textStyle: textTheme?.title),
      subhead: GoogleFonts.hiMelody(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hiMelody(textStyle: textTheme?.body2),
      body1: GoogleFonts.hiMelody(textStyle: textTheme?.body1),
      caption: GoogleFonts.hiMelody(textStyle: textTheme?.caption),
      button: GoogleFonts.hiMelody(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hiMelody(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hiMelody(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind
  static TextStyle hind({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fa60918477db30de0e2a697db644a3ada9014744668b10708e487b2731a95e70',
        152472,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c6c2ab346a94eb5613fbc0721b8b1b9062968050182abaa239ca636a32911d90',
        152124,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd4fd25d01c80707a336cb4b040f3a52767f1cd612f042572d044e0b575c4d05b',
        151708,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '98d33c7c6f79077dfb001ecff6aa383168fca5cebe664a277c74acff145e6685',
        151452,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2e7dd62cde147432a10070b99d17f623f3c13f9c8796be3afa987f6e0707f030',
        149692,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Hind',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind
  static TextTheme hindTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hind(textStyle: textTheme?.display4),
      display3: GoogleFonts.hind(textStyle: textTheme?.display3),
      display2: GoogleFonts.hind(textStyle: textTheme?.display2),
      display1: GoogleFonts.hind(textStyle: textTheme?.display1),
      headline: GoogleFonts.hind(textStyle: textTheme?.headline),
      title: GoogleFonts.hind(textStyle: textTheme?.title),
      subhead: GoogleFonts.hind(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hind(textStyle: textTheme?.body2),
      body1: GoogleFonts.hind(textStyle: textTheme?.body1),
      caption: GoogleFonts.hind(textStyle: textTheme?.caption),
      button: GoogleFonts.hind(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hind(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hind(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind Guntur font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Guntur
  static TextStyle hindGuntur({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '83f2591cf78a025ae8e85ebecda4a590c393eb80bf83f18bace7e5d144b57bc8',
        173452,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '58962c61fd64e7df2aa4d0fbf8b7044df4531b4098533fd14348043d05fb8b42',
        172528,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1548c29a01fac4cf5904cd44cf584eaec84e08ed0b15f96638c1cb9ff8995583',
        171468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '12aa908469a5d74ca315816664934ede78906a4593e2310e5ea1894cd964c2a1',
        170280,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '751c8dd12898b1caafe20c6458531dce8773242b36537ea2e341d9a4bd01bafe',
        169956,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HindGuntur',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind Guntur font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Guntur
  static TextTheme hindGunturTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hindGuntur(textStyle: textTheme?.display4),
      display3: GoogleFonts.hindGuntur(textStyle: textTheme?.display3),
      display2: GoogleFonts.hindGuntur(textStyle: textTheme?.display2),
      display1: GoogleFonts.hindGuntur(textStyle: textTheme?.display1),
      headline: GoogleFonts.hindGuntur(textStyle: textTheme?.headline),
      title: GoogleFonts.hindGuntur(textStyle: textTheme?.title),
      subhead: GoogleFonts.hindGuntur(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hindGuntur(textStyle: textTheme?.body2),
      body1: GoogleFonts.hindGuntur(textStyle: textTheme?.body1),
      caption: GoogleFonts.hindGuntur(textStyle: textTheme?.caption),
      button: GoogleFonts.hindGuntur(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hindGuntur(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hindGuntur(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind Madurai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Madurai
  static TextStyle hindMadurai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5d2a60f4ad6943bf7f1de4b16722cf8992b893d91bdb242860538507d4514dfa',
        71760,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fe0b759733d5d95da02f65af60da858c2e45e9fc35332036694fef1e4f2369aa',
        71136,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '367a1897906f0dafe97990639330a1ad8058b45f8d8deae93db5e40a9ae90f44',
        71428,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '559d4bdf4c6fc62a412864ae9323ea997294ef17fda3b84684d928c0e042c1a0',
        71476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '59964f77b9fded7f3b4030894b5bde3bf552e70132670a0108ec2218ae31fb9b',
        70344,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HindMadurai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind Madurai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Madurai
  static TextTheme hindMaduraiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hindMadurai(textStyle: textTheme?.display4),
      display3: GoogleFonts.hindMadurai(textStyle: textTheme?.display3),
      display2: GoogleFonts.hindMadurai(textStyle: textTheme?.display2),
      display1: GoogleFonts.hindMadurai(textStyle: textTheme?.display1),
      headline: GoogleFonts.hindMadurai(textStyle: textTheme?.headline),
      title: GoogleFonts.hindMadurai(textStyle: textTheme?.title),
      subhead: GoogleFonts.hindMadurai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hindMadurai(textStyle: textTheme?.body2),
      body1: GoogleFonts.hindMadurai(textStyle: textTheme?.body1),
      caption: GoogleFonts.hindMadurai(textStyle: textTheme?.caption),
      button: GoogleFonts.hindMadurai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hindMadurai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hindMadurai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind Siliguri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Siliguri
  static TextStyle hindSiliguri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ac4fb0e6616374786c8c79c069fb7ec555580917d9534053bbc5cfca7cc35a6b',
        135788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4f3c785b698527e53bc193bce4c13e1eedc1eadefe7c65720c5eb0ddafcc78c4',
        135144,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f112da1e6bbd4b1fbf998db772359e0812e0bf2acc7c60e21a0e99c24ec1e48f',
        134792,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c80fdec935e6023f68b5a13e7bde8edff218450fe58f3ca7c3fe6e454b4cdd54',
        134828,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3b363f06eb2b3264843731ba51fa467aba8cf06454281e9ceab83a3bc8c802ce',
        133192,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HindSiliguri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind Siliguri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Siliguri
  static TextTheme hindSiliguriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hindSiliguri(textStyle: textTheme?.display4),
      display3: GoogleFonts.hindSiliguri(textStyle: textTheme?.display3),
      display2: GoogleFonts.hindSiliguri(textStyle: textTheme?.display2),
      display1: GoogleFonts.hindSiliguri(textStyle: textTheme?.display1),
      headline: GoogleFonts.hindSiliguri(textStyle: textTheme?.headline),
      title: GoogleFonts.hindSiliguri(textStyle: textTheme?.title),
      subhead: GoogleFonts.hindSiliguri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hindSiliguri(textStyle: textTheme?.body2),
      body1: GoogleFonts.hindSiliguri(textStyle: textTheme?.body1),
      caption: GoogleFonts.hindSiliguri(textStyle: textTheme?.caption),
      button: GoogleFonts.hindSiliguri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hindSiliguri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hindSiliguri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind Vadodara font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Vadodara
  static TextStyle hindVadodara({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '28ad92a17d66f3a0995bb68875c29dba3cdaf9fb43feb40a882e2eb2638b7d0e',
        132940,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ceba975d8428bc0815764806b013c8ab2629dd726f64eedc432d9089567ba31',
        132588,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '99808cdfa62f14d0fb695cf7a37fd7987ec1f14b71dfd11d87f428432e5641c7',
        132420,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '931dba7983e3c75f3bcfc57cbb486114347aa39bd48e261bf327bfc5d2b2f7cd',
        131916,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e717f555c38c3a3665cdb7fc053e8b12904225205d5eab82b472417208c7c483',
        130448,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HindVadodara',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind Vadodara font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Vadodara
  static TextTheme hindVadodaraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hindVadodara(textStyle: textTheme?.display4),
      display3: GoogleFonts.hindVadodara(textStyle: textTheme?.display3),
      display2: GoogleFonts.hindVadodara(textStyle: textTheme?.display2),
      display1: GoogleFonts.hindVadodara(textStyle: textTheme?.display1),
      headline: GoogleFonts.hindVadodara(textStyle: textTheme?.headline),
      title: GoogleFonts.hindVadodara(textStyle: textTheme?.title),
      subhead: GoogleFonts.hindVadodara(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hindVadodara(textStyle: textTheme?.body2),
      body1: GoogleFonts.hindVadodara(textStyle: textTheme?.body1),
      caption: GoogleFonts.hindVadodara(textStyle: textTheme?.caption),
      button: GoogleFonts.hindVadodara(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hindVadodara(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hindVadodara(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Holtwood One SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Holtwood+One+SC
  static TextStyle holtwoodOneSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e13ec5f1ab20c1d4d3cd916510331011904e2d9a5083dff4b0bdfa42c86a4eac',
        36652,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HoltwoodOneSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Holtwood One SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Holtwood+One+SC
  static TextTheme holtwoodOneSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.headline),
      title: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.caption),
      button: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Homemade Apple font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Homemade+Apple
  static TextStyle homemadeApple({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '492f1c4f1d496ff595958cd8454693eccded599173fc699c93cb2df8a2561201',
        109592,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HomemadeApple',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Homemade Apple font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Homemade+Apple
  static TextTheme homemadeAppleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.homemadeApple(textStyle: textTheme?.display4),
      display3: GoogleFonts.homemadeApple(textStyle: textTheme?.display3),
      display2: GoogleFonts.homemadeApple(textStyle: textTheme?.display2),
      display1: GoogleFonts.homemadeApple(textStyle: textTheme?.display1),
      headline: GoogleFonts.homemadeApple(textStyle: textTheme?.headline),
      title: GoogleFonts.homemadeApple(textStyle: textTheme?.title),
      subhead: GoogleFonts.homemadeApple(textStyle: textTheme?.subhead),
      body2: GoogleFonts.homemadeApple(textStyle: textTheme?.body2),
      body1: GoogleFonts.homemadeApple(textStyle: textTheme?.body1),
      caption: GoogleFonts.homemadeApple(textStyle: textTheme?.caption),
      button: GoogleFonts.homemadeApple(textStyle: textTheme?.button),
      subtitle: GoogleFonts.homemadeApple(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.homemadeApple(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Homenaje font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Homenaje
  static TextStyle homenaje({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'efaa8006929ef2ce2bc82593647ea2be59dcb513e048e4cb4b105cc66119d343',
        21568,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Homenaje',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Homenaje font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Homenaje
  static TextTheme homenajeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.homenaje(textStyle: textTheme?.display4),
      display3: GoogleFonts.homenaje(textStyle: textTheme?.display3),
      display2: GoogleFonts.homenaje(textStyle: textTheme?.display2),
      display1: GoogleFonts.homenaje(textStyle: textTheme?.display1),
      headline: GoogleFonts.homenaje(textStyle: textTheme?.headline),
      title: GoogleFonts.homenaje(textStyle: textTheme?.title),
      subhead: GoogleFonts.homenaje(textStyle: textTheme?.subhead),
      body2: GoogleFonts.homenaje(textStyle: textTheme?.body2),
      body1: GoogleFonts.homenaje(textStyle: textTheme?.body1),
      caption: GoogleFonts.homenaje(textStyle: textTheme?.caption),
      button: GoogleFonts.homenaje(textStyle: textTheme?.button),
      subtitle: GoogleFonts.homenaje(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.homenaje(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IBM Plex Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Mono
  static TextStyle iBMPlexMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0b176030119e3bf8008cc3a1ab395de2490609893cbf42c9ad93a1b97131c1ad',
        62804,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '49cc21b7b1c2e02aec83be236218fc1bf64c43ab6693d02e5f57dc5c4d580a42',
        69308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '84f407c2acc498e7797432543eba48500150e851182f2706d2a48e4fc61aef13',
        62428,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '973e67e339972330580f84b47bc69af70b6ffb871605061a2c44830772432449',
        69268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7860eafcb749cd16c35f7d63a81d0d83919b82475eeb29338cd5eea961a4bbfd',
        62176,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ad14a6133399a3b691d1311e56718da47fe30d69f6f48d68f43c25f62084f4d0',
        68876,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4e5360e6435ca0fda23ac8bde947e30a690395bedc6a0e0f9b360aceeb490851',
        62712,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8b7513201954154b316d56ba7185e0f58200a044e0150145e17d797a98dcbb52',
        69680,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8bea2481c75885bfb6d132add1b2ac6d4ccdbedfa94dda1d4dc34e7d00ca8ffd',
        62328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'eb363301d9364248dd094562021ed86fc2b1b9e2351f313c635e72b14d98179f',
        68924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b6f0266c5d40d72cd5d4051aaa3dc1836d7874fc40471cae205892e07fdd87ad',
        62288,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '48174c08a0c28ee87d255c8380c23b2beca649d5ed46c8287c5062304417209b',
        68600,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '089c2f087950891775cef79553f8c15f825bea671e0a1323f495354feb06d3b3',
        62324,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3fdca15f4f471d5ef3f57c790ad9b09474ab6d24e75f300f10c9eb8219ddad39',
        68980,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IBMPlexMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IBM Plex Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Mono
  static TextTheme iBMPlexMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iBMPlexMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.iBMPlexMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.iBMPlexMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.iBMPlexMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.iBMPlexMono(textStyle: textTheme?.headline),
      title: GoogleFonts.iBMPlexMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.iBMPlexMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iBMPlexMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.iBMPlexMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.iBMPlexMono(textStyle: textTheme?.caption),
      button: GoogleFonts.iBMPlexMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iBMPlexMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iBMPlexMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IBM Plex Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Sans
  static TextStyle iBMPlexSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '813b794a62b57fce9544b834ad183c1e5175f1825c2fa2067d3480518d81f446',
        97392,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '550fbb9acc0447f5ddf482b1659912f8f4076179a59e288fd71dc1e7d86885c9',
        105688,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f6209628705dc0331422f8e21345a1e1387a26fd07293496dbcc6a3551859177',
        99360,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '224494b659d44d626398ec8760d4b0e4ea459e0be556f8219de0ddf0f170cebb',
        107380,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '86b8f04cfeba166a0a6eed0b57970518f638c9745fea6212e6805b004579da75',
        99180,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '60e2fc65f3e87d1813c4a598c88cc21e21334a5b6b8e1d821dbb7b17edabbf21',
        107012,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8cd70b2671db7396694b0e2a1a3a9859018db199711237cdf67322e3d9060bbf',
        98888,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd7e4bb3b1d26be9695d85cfc1cdaef4376e22aca80f216e22c43c28ce7969ae0',
        106248,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c8d348ccb6205cc4dd9833d972d8decd8b526df3d482aedc4aa47ae9f7bd46f1',
        99256,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c576912fcd0266aba72ffcf4b1b7d770bdf1353f90c2a0bdc8686e8dd740eac6',
        106664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '26aefb8b77b2efc1dd517b6c5baaca61435844c281e5a51125bd65213f2cc5e0',
        99140,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1aeff1379a138b4aa07f5fd0066ca778f321b9a1c8f1b234d858812b684ebb66',
        106720,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '13670a62ca981b5bc10df4425d93c3c41647b8934455c891e16f9384881606ef',
        98260,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '64d98b387f5233a7cbc684f09cd4b5c622058a02d63fe1af27e247ee88e4573e',
        105704,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '95cb5ef68ced474a2288be174bf62af93746ddbce9a8be785d59e05d46221cb9',
        64480,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ea2881ac7cbb7d0a0d0d89b3c81e0ccbd79e1dd040b84f4b28c7ea083a958926',
        68820,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a51cec8648be38680ff0325b258659173e8d6cf8bf91ce3af4dfe72d96ad57bd',
        64844,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '459eb773994095169ba8f6f04dfad1a45c205782fd393d467e9c8d3a21701fa2',
        69132,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c8260d42c2195a564a8bc5b74144874ac850ad48b4c507271d5fe4151f4802b6',
        64424,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2b1c9ad90a1fb240d2e8ebb5f3a3d4a544c37662964daf7dc0941d047876b826',
        68452,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6f14a51d14c32df9b6829dbd95e680ca603bb1f0e0c8a23f3d18f6e96f970eef',
        64056,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a2c2c799b5a7b8b957579016dedfd8bd110c064310c1a491a71ee84964ff0a56',
        68720,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '17c6dabfa0ed7d9b258acae9bd3a20e61dbd27fa029bd3df75a0deadaa90e24e',
        63756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b605737f157c6f7c5977d9a151ff622fa93439d4b364d24f6431f52eb6a5affd',
        67728,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '368b327e4f44c9bf4ba628ecb081c53e0e3f087a4c0822435fe6ad6527dbe958',
        63804,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a4fd2820e497b76a6c413f52ce87fa7521d6ff5bd0fac82b9c53e48c5febf174',
        67920,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '58ace9c95662b3ff47b0a066336d863bcc0515df78f5a23e9e424c1fbd4f451a',
        63812,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '064ee4d57bfdc62832b848b5c300e9abaadd59d151ca0279ad569edceffcf029',
        68712,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IBMPlexSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IBM Plex Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Sans
  static TextTheme iBMPlexSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iBMPlexSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.iBMPlexSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.iBMPlexSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.iBMPlexSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.iBMPlexSans(textStyle: textTheme?.headline),
      title: GoogleFonts.iBMPlexSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.iBMPlexSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iBMPlexSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.iBMPlexSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.iBMPlexSans(textStyle: textTheme?.caption),
      button: GoogleFonts.iBMPlexSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iBMPlexSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iBMPlexSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IBM Plex Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Serif
  static TextStyle iBMPlexSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7d42efee4f1a7ac97d078340d6652728fe15929c68ba6d23cb2bb12c08ade3c',
        104216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2d6348f0337897dfd4f35a24aeb41df7d2026b073c6e62091ba3d4be45deccef',
        114056,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '22d162d23ce0e5ad78699d3f15d64aee792adff19238b2d5fff9ed6e4e2aeaa6',
        106996,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'eca320d0ebf030d252c42622bd633b638607e007a1106887d72c483f4ab3703b',
        117848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5b62452067d16ab5b1653fe5af7e516fd1d6a727050d37060d0f83941b25ff44',
        106800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '66bf94992c7ae7e495fcd422302ec2554955bf1ee81cc891a365b889836f3386',
        117812,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '69cbfef212c06c3e226a30329e377aa4501105e862a1d1c6cd3fde2b6c15507d',
        106692,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '454337a7189c7dcf2a8c37a8d69c51ece177de9ba36cb5133fc924e7bfd7042b',
        117816,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9700f2e4399528de12a7e7ec1551047d64261256a776bcdd963c55963568f4b9',
        107204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '92215eb3720b2d7e6181a7f1a7f330fc9668b05e48e1160a1d0bde3d1ebd34d9',
        117868,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '85939ee252119c0a4249c1d780751347047ccdc1fe552595be038544c3792788',
        107392,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4373c99de7c1eefefd7971019ac15ad2bc0db7cd3f62c3013925018d0586e38c',
        117840,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fe6766f5ba5906651095f3917fbfa426cf5904f0f0c7490a7b6d246dae8d60b9',
        106036,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8728efc5271b4928172f32a8701ff0e2cde5210bd8277aa95cd936d723eecceb',
        116836,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IBMPlexSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IBM Plex Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Serif
  static TextTheme iBMPlexSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell DW Pica font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+DW+Pica
  static TextStyle iMFellDWPica({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '04268ecc548fa2dfe787958a051a8e1b42b355a945f5a4d47f003e70886debc3',
        216968,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd2109f0f97280a92b37673b7bf664eee72f3b3874097dcbf1906740841b17fb0',
        244584,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellDWPica',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell DW Pica font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+DW+Pica
  static TextTheme iMFellDWPicaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellDWPica(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellDWPica(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellDWPica(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellDWPica(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellDWPica(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellDWPica(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellDWPica(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellDWPica(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellDWPica(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellDWPica(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellDWPica(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellDWPica(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellDWPica(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell DW Pica SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+DW+Pica+SC
  static TextStyle iMFellDWPicaSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6fb16b0108016bc27dd4f279a9d1e8247d0028f492cfca827753ea01a8423c83',
        198012,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellDWPicaSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell DW Pica SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+DW+Pica+SC
  static TextTheme iMFellDWPicaSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell Double Pica font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Double+Pica
  static TextStyle iMFellDoublePica({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '450b7878b03e1b88b59cd3c88d5a9dab68e698f5e89d49f6bd99bd40514f1eff',
        210916,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '63f80b5f83de7edd9b6a5674a903289d1c0f0679fefe1835d013e2c6910afacd',
        255092,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellDoublePica',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell Double Pica font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Double+Pica
  static TextTheme iMFellDoublePicaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell Double Pica SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Double+Pica+SC
  static TextStyle iMFellDoublePicaSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f63ae624a66cf32943ef34cf81b7d800305ce516f8396bd0b01895abf588d8d6',
        197012,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellDoublePicaSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell Double Pica SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Double+Pica+SC
  static TextTheme iMFellDoublePicaSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell English font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+English
  static TextStyle iMFellEnglish({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1f559be93fb1947f0551b021260410225bbafe0586dd5236d734d852bf0769f1',
        194992,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '67701b098b491cf87633fd626de486662128571e48aee106245d472750bcd7c4',
        202368,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellEnglish',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell English font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+English
  static TextTheme iMFellEnglishTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellEnglish(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellEnglish(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellEnglish(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellEnglish(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellEnglish(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellEnglish(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellEnglish(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellEnglish(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellEnglish(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellEnglish(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellEnglish(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellEnglish(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellEnglish(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell English SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+English+SC
  static TextStyle iMFellEnglishSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b52b93a50244bb83984cf1b52863db1a14baf8f683fe002dd71199783477502a',
        183932,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellEnglishSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell English SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+English+SC
  static TextTheme iMFellEnglishSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell French Canon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+French+Canon
  static TextStyle iMFellFrenchCanon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3a31b3ab35a73617ff634ad3017bc55e23ceb3daa2bf23c00c25afa3331aade8',
        145832,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '54332a8adf4fa4b9bd5ba4553b7f66a4e8c5ffb07d61701dbfee60bfac4394a4',
        158184,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellFrenchCanon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell French Canon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+French+Canon
  static TextTheme iMFellFrenchCanonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell French Canon SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+French+Canon+SC
  static TextStyle iMFellFrenchCanonSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '618df3e2380b8d244fa861a295bcae3cb41ac4f0cea67f01a815355fcd198ce8',
        136188,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellFrenchCanonSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell French Canon SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+French+Canon+SC
  static TextTheme iMFellFrenchCanonSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell Great Primer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Great+Primer
  static TextStyle iMFellGreatPrimer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fede2a25cf42680231c7bfb90da7306e0962092c8e1074fbfc44ef59289257ec',
        216552,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '020c8f65ef327b827d6e28ca2e4be8f019b4a81075f1c7c00a53993664b41b93',
        249324,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellGreatPrimer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell Great Primer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Great+Primer
  static TextTheme iMFellGreatPrimerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell Great Primer SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Great+Primer+SC
  static TextStyle iMFellGreatPrimerSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8894f603e127ce2093a63d487149eb1cf10f58b20ea4abbae6ac6635472dcc85',
        203776,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellGreatPrimerSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell Great Primer SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Great+Primer+SC
  static TextTheme iMFellGreatPrimerSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Iceberg font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Iceberg
  static TextStyle iceberg({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4863f9363951873a52e866b2ad79c760da5a5c1c076692511a8fae46789aedae',
        16680,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Iceberg',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Iceberg font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Iceberg
  static TextTheme icebergTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iceberg(textStyle: textTheme?.display4),
      display3: GoogleFonts.iceberg(textStyle: textTheme?.display3),
      display2: GoogleFonts.iceberg(textStyle: textTheme?.display2),
      display1: GoogleFonts.iceberg(textStyle: textTheme?.display1),
      headline: GoogleFonts.iceberg(textStyle: textTheme?.headline),
      title: GoogleFonts.iceberg(textStyle: textTheme?.title),
      subhead: GoogleFonts.iceberg(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iceberg(textStyle: textTheme?.body2),
      body1: GoogleFonts.iceberg(textStyle: textTheme?.body1),
      caption: GoogleFonts.iceberg(textStyle: textTheme?.caption),
      button: GoogleFonts.iceberg(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iceberg(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iceberg(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Iceland font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Iceland
  static TextStyle iceland({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd15cc78dabadb60a047db08291c49cb8c2d05c29de29c7505de00383b8f447cf',
        17548,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Iceland',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Iceland font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Iceland
  static TextTheme icelandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iceland(textStyle: textTheme?.display4),
      display3: GoogleFonts.iceland(textStyle: textTheme?.display3),
      display2: GoogleFonts.iceland(textStyle: textTheme?.display2),
      display1: GoogleFonts.iceland(textStyle: textTheme?.display1),
      headline: GoogleFonts.iceland(textStyle: textTheme?.headline),
      title: GoogleFonts.iceland(textStyle: textTheme?.title),
      subhead: GoogleFonts.iceland(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iceland(textStyle: textTheme?.body2),
      body1: GoogleFonts.iceland(textStyle: textTheme?.body1),
      caption: GoogleFonts.iceland(textStyle: textTheme?.caption),
      button: GoogleFonts.iceland(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iceland(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iceland(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Imprima font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Imprima
  static TextStyle imprima({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '40a584db206f3a44197d5245155bcca66a72cf6c2dd346e78ca4b30b36af92b4',
        24864,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Imprima',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Imprima font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Imprima
  static TextTheme imprimaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.imprima(textStyle: textTheme?.display4),
      display3: GoogleFonts.imprima(textStyle: textTheme?.display3),
      display2: GoogleFonts.imprima(textStyle: textTheme?.display2),
      display1: GoogleFonts.imprima(textStyle: textTheme?.display1),
      headline: GoogleFonts.imprima(textStyle: textTheme?.headline),
      title: GoogleFonts.imprima(textStyle: textTheme?.title),
      subhead: GoogleFonts.imprima(textStyle: textTheme?.subhead),
      body2: GoogleFonts.imprima(textStyle: textTheme?.body2),
      body1: GoogleFonts.imprima(textStyle: textTheme?.body1),
      caption: GoogleFonts.imprima(textStyle: textTheme?.caption),
      button: GoogleFonts.imprima(textStyle: textTheme?.button),
      subtitle: GoogleFonts.imprima(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.imprima(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inconsolata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inconsolata
  static TextStyle inconsolata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7b710cb16b36b86fd08be8de67824345433e776ff152ce4d819f8dac26b76bb2',
        70528,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '499bfec42f5525e40e1acc5d044cce315e80cc9c1205db693cf68fd5a7b724d3',
        74916,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Inconsolata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inconsolata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inconsolata
  static TextTheme inconsolataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inconsolata(textStyle: textTheme?.display4),
      display3: GoogleFonts.inconsolata(textStyle: textTheme?.display3),
      display2: GoogleFonts.inconsolata(textStyle: textTheme?.display2),
      display1: GoogleFonts.inconsolata(textStyle: textTheme?.display1),
      headline: GoogleFonts.inconsolata(textStyle: textTheme?.headline),
      title: GoogleFonts.inconsolata(textStyle: textTheme?.title),
      subhead: GoogleFonts.inconsolata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inconsolata(textStyle: textTheme?.body2),
      body1: GoogleFonts.inconsolata(textStyle: textTheme?.body1),
      caption: GoogleFonts.inconsolata(textStyle: textTheme?.caption),
      button: GoogleFonts.inconsolata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inconsolata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inconsolata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inder font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inder
  static TextStyle inder({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eb41a206e08e82f74d76415f5d8d2feeaf53587676b8ed6c2ea15bb2e88ccf8d',
        31008,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Inder',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inder font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inder
  static TextTheme inderTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inder(textStyle: textTheme?.display4),
      display3: GoogleFonts.inder(textStyle: textTheme?.display3),
      display2: GoogleFonts.inder(textStyle: textTheme?.display2),
      display1: GoogleFonts.inder(textStyle: textTheme?.display1),
      headline: GoogleFonts.inder(textStyle: textTheme?.headline),
      title: GoogleFonts.inder(textStyle: textTheme?.title),
      subhead: GoogleFonts.inder(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inder(textStyle: textTheme?.body2),
      body1: GoogleFonts.inder(textStyle: textTheme?.body1),
      caption: GoogleFonts.inder(textStyle: textTheme?.caption),
      button: GoogleFonts.inder(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inder(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inder(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Indie Flower font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Indie+Flower
  static TextStyle indieFlower({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '61c24604992861512306296260abd7382a4e89dbe2d6e0d5ba3dbd1a15b95ff4',
        60484,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IndieFlower',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Indie Flower font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Indie+Flower
  static TextTheme indieFlowerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.indieFlower(textStyle: textTheme?.display4),
      display3: GoogleFonts.indieFlower(textStyle: textTheme?.display3),
      display2: GoogleFonts.indieFlower(textStyle: textTheme?.display2),
      display1: GoogleFonts.indieFlower(textStyle: textTheme?.display1),
      headline: GoogleFonts.indieFlower(textStyle: textTheme?.headline),
      title: GoogleFonts.indieFlower(textStyle: textTheme?.title),
      subhead: GoogleFonts.indieFlower(textStyle: textTheme?.subhead),
      body2: GoogleFonts.indieFlower(textStyle: textTheme?.body2),
      body1: GoogleFonts.indieFlower(textStyle: textTheme?.body1),
      caption: GoogleFonts.indieFlower(textStyle: textTheme?.caption),
      button: GoogleFonts.indieFlower(textStyle: textTheme?.button),
      subtitle: GoogleFonts.indieFlower(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.indieFlower(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inika
  static TextStyle inika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b4a85642ea25e8b6a0657684af8ab67401b31b1f39ef952616d46f1ee711107e',
        39652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e831ff700e7e5ee39b33fb1ae47d7f98ce526a136e1d90c4aaf1cbfbba0d4336',
        38688,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Inika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inika
  static TextTheme inikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inika(textStyle: textTheme?.display4),
      display3: GoogleFonts.inika(textStyle: textTheme?.display3),
      display2: GoogleFonts.inika(textStyle: textTheme?.display2),
      display1: GoogleFonts.inika(textStyle: textTheme?.display1),
      headline: GoogleFonts.inika(textStyle: textTheme?.headline),
      title: GoogleFonts.inika(textStyle: textTheme?.title),
      subhead: GoogleFonts.inika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inika(textStyle: textTheme?.body2),
      body1: GoogleFonts.inika(textStyle: textTheme?.body1),
      caption: GoogleFonts.inika(textStyle: textTheme?.caption),
      button: GoogleFonts.inika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inknut Antiqua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inknut+Antiqua
  static TextStyle inknutAntiqua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8fae03035a8fb6772fc7bcac683c4a01747a3902ede69b6897be980d35cd3c42',
        279252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bad6e7b6f2580d3870d5242c04a7edbb0712500e639570759d1b76b16ad225af',
        274980,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f7bad3658649b817553e3c3a1e3b75b8b1c2f93af24d3ee0c2f491f13695cee4',
        277544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4249a7edc9acfbbb46d50638be038427a109d75df9478fd696a6d61ac2c6262b',
        277284,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ed4800a911bc4a319bbb68949167b0e0c9149ae4542444b3643b0949f21dbebb',
        275168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '58f6a2abd44b4a7ba81f42611ec481c40e08bed9129fec6f638b2dca583bf20d',
        274600,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '068486e18282d9c5300c186834bd1a055d1d4d2697ac3498756bc41e999b676b',
        269264,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'InknutAntiqua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inknut Antiqua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inknut+Antiqua
  static TextTheme inknutAntiquaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inknutAntiqua(textStyle: textTheme?.display4),
      display3: GoogleFonts.inknutAntiqua(textStyle: textTheme?.display3),
      display2: GoogleFonts.inknutAntiqua(textStyle: textTheme?.display2),
      display1: GoogleFonts.inknutAntiqua(textStyle: textTheme?.display1),
      headline: GoogleFonts.inknutAntiqua(textStyle: textTheme?.headline),
      title: GoogleFonts.inknutAntiqua(textStyle: textTheme?.title),
      subhead: GoogleFonts.inknutAntiqua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inknutAntiqua(textStyle: textTheme?.body2),
      body1: GoogleFonts.inknutAntiqua(textStyle: textTheme?.body1),
      caption: GoogleFonts.inknutAntiqua(textStyle: textTheme?.caption),
      button: GoogleFonts.inknutAntiqua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inknutAntiqua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inknutAntiqua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Irish Grover font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Irish+Grover
  static TextStyle irishGrover({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '871e6c825a4e60667eb8131be9f23ace65f65e3f15a9c08c3a798797c9e361b2',
        52272,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IrishGrover',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Irish Grover font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Irish+Grover
  static TextTheme irishGroverTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.irishGrover(textStyle: textTheme?.display4),
      display3: GoogleFonts.irishGrover(textStyle: textTheme?.display3),
      display2: GoogleFonts.irishGrover(textStyle: textTheme?.display2),
      display1: GoogleFonts.irishGrover(textStyle: textTheme?.display1),
      headline: GoogleFonts.irishGrover(textStyle: textTheme?.headline),
      title: GoogleFonts.irishGrover(textStyle: textTheme?.title),
      subhead: GoogleFonts.irishGrover(textStyle: textTheme?.subhead),
      body2: GoogleFonts.irishGrover(textStyle: textTheme?.body2),
      body1: GoogleFonts.irishGrover(textStyle: textTheme?.body1),
      caption: GoogleFonts.irishGrover(textStyle: textTheme?.caption),
      button: GoogleFonts.irishGrover(textStyle: textTheme?.button),
      subtitle: GoogleFonts.irishGrover(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.irishGrover(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Istok Web font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Istok+Web
  static TextStyle istokWeb({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '69f0e211d11c1acf74b2c9076af79b8c4437700758d0282acf48674ef128953a',
        137024,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '05eee5ff9d276f82970504c5e15e6097ae58262e043f86c6620a18611cdcf94e',
        89568,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '000e33f7e7a72f87087ee83ef75edf7993294fc065f5f8e52ae6ca1c90c7517f',
        92660,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c19d7189ef0fb5066351d3851d3a386722d97b98c62fc344ffce8f4f1889512a',
        89608,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IstokWeb',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Istok Web font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Istok+Web
  static TextTheme istokWebTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.istokWeb(textStyle: textTheme?.display4),
      display3: GoogleFonts.istokWeb(textStyle: textTheme?.display3),
      display2: GoogleFonts.istokWeb(textStyle: textTheme?.display2),
      display1: GoogleFonts.istokWeb(textStyle: textTheme?.display1),
      headline: GoogleFonts.istokWeb(textStyle: textTheme?.headline),
      title: GoogleFonts.istokWeb(textStyle: textTheme?.title),
      subhead: GoogleFonts.istokWeb(textStyle: textTheme?.subhead),
      body2: GoogleFonts.istokWeb(textStyle: textTheme?.body2),
      body1: GoogleFonts.istokWeb(textStyle: textTheme?.body1),
      caption: GoogleFonts.istokWeb(textStyle: textTheme?.caption),
      button: GoogleFonts.istokWeb(textStyle: textTheme?.button),
      subtitle: GoogleFonts.istokWeb(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.istokWeb(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Italiana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Italiana
  static TextStyle italiana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b1324621b4067c2f4664c85776eaa7a358556c72c41adc3672d1e85e255b715a',
        31560,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Italiana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Italiana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Italiana
  static TextTheme italianaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.italiana(textStyle: textTheme?.display4),
      display3: GoogleFonts.italiana(textStyle: textTheme?.display3),
      display2: GoogleFonts.italiana(textStyle: textTheme?.display2),
      display1: GoogleFonts.italiana(textStyle: textTheme?.display1),
      headline: GoogleFonts.italiana(textStyle: textTheme?.headline),
      title: GoogleFonts.italiana(textStyle: textTheme?.title),
      subhead: GoogleFonts.italiana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.italiana(textStyle: textTheme?.body2),
      body1: GoogleFonts.italiana(textStyle: textTheme?.body1),
      caption: GoogleFonts.italiana(textStyle: textTheme?.caption),
      button: GoogleFonts.italiana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.italiana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.italiana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Italianno font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Italianno
  static TextStyle italianno({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bfbaa565dcb115e0d8e8af969814850e25a50df02022afefd5b2ba3174c386e3',
        137316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Italianno',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Italianno font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Italianno
  static TextTheme italiannoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.italianno(textStyle: textTheme?.display4),
      display3: GoogleFonts.italianno(textStyle: textTheme?.display3),
      display2: GoogleFonts.italianno(textStyle: textTheme?.display2),
      display1: GoogleFonts.italianno(textStyle: textTheme?.display1),
      headline: GoogleFonts.italianno(textStyle: textTheme?.headline),
      title: GoogleFonts.italianno(textStyle: textTheme?.title),
      subhead: GoogleFonts.italianno(textStyle: textTheme?.subhead),
      body2: GoogleFonts.italianno(textStyle: textTheme?.body2),
      body1: GoogleFonts.italianno(textStyle: textTheme?.body1),
      caption: GoogleFonts.italianno(textStyle: textTheme?.caption),
      button: GoogleFonts.italianno(textStyle: textTheme?.button),
      subtitle: GoogleFonts.italianno(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.italianno(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Itim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Itim
  static TextStyle itim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd649b08c03fa8e37e169c6e7fc22372fe2c6f97d639fbcbe67f8702afb9ef1bc',
        249260,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Itim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Itim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Itim
  static TextTheme itimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.itim(textStyle: textTheme?.display4),
      display3: GoogleFonts.itim(textStyle: textTheme?.display3),
      display2: GoogleFonts.itim(textStyle: textTheme?.display2),
      display1: GoogleFonts.itim(textStyle: textTheme?.display1),
      headline: GoogleFonts.itim(textStyle: textTheme?.headline),
      title: GoogleFonts.itim(textStyle: textTheme?.title),
      subhead: GoogleFonts.itim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.itim(textStyle: textTheme?.body2),
      body1: GoogleFonts.itim(textStyle: textTheme?.body1),
      caption: GoogleFonts.itim(textStyle: textTheme?.caption),
      button: GoogleFonts.itim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.itim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.itim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jacques Francois font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jacques+Francois
  static TextStyle jacquesFrancois({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd263121e53613f81bea06459cb1ac924693f48b654d9943d34776a3efa1fc52e',
        42580,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JacquesFrancois',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jacques Francois font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jacques+Francois
  static TextTheme jacquesFrancoisTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jacquesFrancois(textStyle: textTheme?.display4),
      display3: GoogleFonts.jacquesFrancois(textStyle: textTheme?.display3),
      display2: GoogleFonts.jacquesFrancois(textStyle: textTheme?.display2),
      display1: GoogleFonts.jacquesFrancois(textStyle: textTheme?.display1),
      headline: GoogleFonts.jacquesFrancois(textStyle: textTheme?.headline),
      title: GoogleFonts.jacquesFrancois(textStyle: textTheme?.title),
      subhead: GoogleFonts.jacquesFrancois(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jacquesFrancois(textStyle: textTheme?.body2),
      body1: GoogleFonts.jacquesFrancois(textStyle: textTheme?.body1),
      caption: GoogleFonts.jacquesFrancois(textStyle: textTheme?.caption),
      button: GoogleFonts.jacquesFrancois(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jacquesFrancois(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jacquesFrancois(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jacques Francois Shadow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jacques+Francois+Shadow
  static TextStyle jacquesFrancoisShadow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e4664490f27116a48b79a15fc06c1817e3669ac1d3ee0e65f80b093997b5e935',
        56088,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JacquesFrancoisShadow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jacques Francois Shadow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jacques+Francois+Shadow
  static TextTheme jacquesFrancoisShadowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.headline),
      title: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.title),
      subhead: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.body2),
      body1: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.body1),
      caption: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.caption),
      button: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jaldi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jaldi
  static TextStyle jaldi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2fd0aecfd94af32615e102201a3d6b70dd7b98a317a4b6457f9d5683435f2680',
        273184,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1eb9040b249dbbf98470eca20e05d667c64d16570d20f4f3b5c8082472d03566',
        272924,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jaldi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jaldi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jaldi
  static TextTheme jaldiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jaldi(textStyle: textTheme?.display4),
      display3: GoogleFonts.jaldi(textStyle: textTheme?.display3),
      display2: GoogleFonts.jaldi(textStyle: textTheme?.display2),
      display1: GoogleFonts.jaldi(textStyle: textTheme?.display1),
      headline: GoogleFonts.jaldi(textStyle: textTheme?.headline),
      title: GoogleFonts.jaldi(textStyle: textTheme?.title),
      subhead: GoogleFonts.jaldi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jaldi(textStyle: textTheme?.body2),
      body1: GoogleFonts.jaldi(textStyle: textTheme?.body1),
      caption: GoogleFonts.jaldi(textStyle: textTheme?.caption),
      button: GoogleFonts.jaldi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jaldi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jaldi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jim Nightshade font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jim+Nightshade
  static TextStyle jimNightshade({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '69667733e323bd8537cd7e8ab6c0cde0b0d48e1f336695228e8a9de962feec29',
        153264,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JimNightshade',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jim Nightshade font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jim+Nightshade
  static TextTheme jimNightshadeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jimNightshade(textStyle: textTheme?.display4),
      display3: GoogleFonts.jimNightshade(textStyle: textTheme?.display3),
      display2: GoogleFonts.jimNightshade(textStyle: textTheme?.display2),
      display1: GoogleFonts.jimNightshade(textStyle: textTheme?.display1),
      headline: GoogleFonts.jimNightshade(textStyle: textTheme?.headline),
      title: GoogleFonts.jimNightshade(textStyle: textTheme?.title),
      subhead: GoogleFonts.jimNightshade(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jimNightshade(textStyle: textTheme?.body2),
      body1: GoogleFonts.jimNightshade(textStyle: textTheme?.body1),
      caption: GoogleFonts.jimNightshade(textStyle: textTheme?.caption),
      button: GoogleFonts.jimNightshade(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jimNightshade(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jimNightshade(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jockey One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jockey+One
  static TextStyle jockeyOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cbdbfa4fff4214a6685ff84262303ce8f4c9a4b6e563f149a8cc5322417aae81',
        48560,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JockeyOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jockey One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jockey+One
  static TextTheme jockeyOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jockeyOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.jockeyOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.jockeyOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.jockeyOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.jockeyOne(textStyle: textTheme?.headline),
      title: GoogleFonts.jockeyOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.jockeyOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jockeyOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.jockeyOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.jockeyOne(textStyle: textTheme?.caption),
      button: GoogleFonts.jockeyOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jockeyOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jockeyOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jolly Lodger font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jolly+Lodger
  static TextStyle jollyLodger({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '816f864e770d0e20f949a3c6064291765734593637efde29ea2295a773c7afa2',
        39384,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JollyLodger',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jolly Lodger font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jolly+Lodger
  static TextTheme jollyLodgerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jollyLodger(textStyle: textTheme?.display4),
      display3: GoogleFonts.jollyLodger(textStyle: textTheme?.display3),
      display2: GoogleFonts.jollyLodger(textStyle: textTheme?.display2),
      display1: GoogleFonts.jollyLodger(textStyle: textTheme?.display1),
      headline: GoogleFonts.jollyLodger(textStyle: textTheme?.headline),
      title: GoogleFonts.jollyLodger(textStyle: textTheme?.title),
      subhead: GoogleFonts.jollyLodger(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jollyLodger(textStyle: textTheme?.body2),
      body1: GoogleFonts.jollyLodger(textStyle: textTheme?.body1),
      caption: GoogleFonts.jollyLodger(textStyle: textTheme?.caption),
      button: GoogleFonts.jollyLodger(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jollyLodger(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jollyLodger(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jomhuria font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jomhuria
  static TextStyle jomhuria({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6dce267ed457cc6f5511cd60d4fbbc941e2c0cf029959a91effbd93815f66d47',
        170560,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jomhuria',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jomhuria font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jomhuria
  static TextTheme jomhuriaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jomhuria(textStyle: textTheme?.display4),
      display3: GoogleFonts.jomhuria(textStyle: textTheme?.display3),
      display2: GoogleFonts.jomhuria(textStyle: textTheme?.display2),
      display1: GoogleFonts.jomhuria(textStyle: textTheme?.display1),
      headline: GoogleFonts.jomhuria(textStyle: textTheme?.headline),
      title: GoogleFonts.jomhuria(textStyle: textTheme?.title),
      subhead: GoogleFonts.jomhuria(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jomhuria(textStyle: textTheme?.body2),
      body1: GoogleFonts.jomhuria(textStyle: textTheme?.body1),
      caption: GoogleFonts.jomhuria(textStyle: textTheme?.caption),
      button: GoogleFonts.jomhuria(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jomhuria(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jomhuria(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Josefin Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Josefin+Sans
  static TextStyle josefinSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd9274027036e4bec6eeac49709c56529144d0714f2d42cfefabb8f29aa669110',
        71844,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fe583724f6b3b6ff7f2a65b872c7a8be86957b1f03d8efb03b7c3a83271d22f0',
        71124,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2bfd7038e00c3bcb80df604697efc092891a519557503aab5b119fad6fb79d41',
        70504,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7ab4a22bc24c0da9b9abeae23dcabe78ebe9cb10010845ffc5b916764b87f63a',
        70336,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ad0ce8b3f694b796a43e60893235246f404c728782ef2719a3122b54b6aee1d6',
        71316,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e240205c12a00fd8fec9a99ee4ce68015307c91c1dc38586775ff103177bbf6b',
        70608,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1af031215debaf6e64b6373e58d995de8763c248952fcf2a5f2b03b1cff3e26f',
        73004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd8d67f5eb2f1bd5f94c9574d8aee64e7e1706e25d0e4715e73d236bf12efeca0',
        71876,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dd252f6382ade7107cb7955cfb5062f3b8b8546376fd9bdb6774fc830292db75',
        70672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'de8609adb9deaf3cd40532c56050226a1aa22c9f100b56fd248fd4b77fd8fd88',
        72656,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JosefinSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Josefin Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Josefin+Sans
  static TextTheme josefinSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.josefinSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.josefinSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.josefinSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.josefinSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.josefinSans(textStyle: textTheme?.headline),
      title: GoogleFonts.josefinSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.josefinSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.josefinSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.josefinSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.josefinSans(textStyle: textTheme?.caption),
      button: GoogleFonts.josefinSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.josefinSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.josefinSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Josefin Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Josefin+Slab
  static TextStyle josefinSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '447b30a4f09ce882924bc14b5cb2d46ed8a09e31fbd138c82200fce2411f2612',
        20404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9e521fdac6770840a2382fe98c7220bc471558f801d8965edf8573e7f30b69b5',
        21704,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ed15a28fd4c2b8d4813431c543e1e1d9293d3054ccc2ba5ef342f99ce5a44c08',
        20896,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5e1991a7b37703dc6b6e746ddc357b7310c82534d6438bdb6f7ae3748790800e',
        22096,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a95bda8e2687087242a1a437c00ed9c693590a2280a21d2a4734a3ad6dfce08b',
        20448,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '61d7f09bf0f42191d6840eb606f9898b7faf7fe6493a630405fe91aac97327f4',
        21468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a3215f9937cb8a3b66779e1b69158645771177c7433046a9d0929ddc30e126e',
        20744,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'efaff26fee494b1b09da8456684d5c03d3bb898803d186aa6a88154f10bfdfee',
        22096,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '00f4364ef7f981110c8e894aa31ef2195629999eeb5bc8689c21745ec03cf534',
        19936,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '999b995ee79a2865d9ed663bd3b3d65fcd10a6c15198afb228ca225b210eac8c',
        21064,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JosefinSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Josefin Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Josefin+Slab
  static TextTheme josefinSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.josefinSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.josefinSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.josefinSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.josefinSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.josefinSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.josefinSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.josefinSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.josefinSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.josefinSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.josefinSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.josefinSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.josefinSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.josefinSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Joti One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Joti+One
  static TextStyle jotiOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8f5feca23a0920be0f78e1eb58c62cdb9ef32b1c4142f6b1ebc3cf13e172683d',
        45536,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JotiOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Joti One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Joti+One
  static TextTheme jotiOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jotiOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.jotiOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.jotiOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.jotiOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.jotiOne(textStyle: textTheme?.headline),
      title: GoogleFonts.jotiOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.jotiOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jotiOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.jotiOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.jotiOne(textStyle: textTheme?.caption),
      button: GoogleFonts.jotiOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jotiOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jotiOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jua
  static TextStyle jua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6e140114334d538cd7aba3f5c53621623e62b941efa1a0fd2aa8d5dbea4c61e1',
        1366212,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jua
  static TextTheme juaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jua(textStyle: textTheme?.display4),
      display3: GoogleFonts.jua(textStyle: textTheme?.display3),
      display2: GoogleFonts.jua(textStyle: textTheme?.display2),
      display1: GoogleFonts.jua(textStyle: textTheme?.display1),
      headline: GoogleFonts.jua(textStyle: textTheme?.headline),
      title: GoogleFonts.jua(textStyle: textTheme?.title),
      subhead: GoogleFonts.jua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jua(textStyle: textTheme?.body2),
      body1: GoogleFonts.jua(textStyle: textTheme?.body1),
      caption: GoogleFonts.jua(textStyle: textTheme?.caption),
      button: GoogleFonts.jua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Judson font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Judson
  static TextStyle judson({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a0e44f8bee5db23549c40c2bdd46ee689a1d4427410df98883638059880eb73b',
        120496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '434a445b96fb17f89c47a66f76abe63757bb6c0997d49bc83a86e2b0cca56b58',
        111732,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b39af14b252a5cb398202d4738e995ef23ad94afe48fbd78fac58759d298f49e',
        107400,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Judson',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Judson font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Judson
  static TextTheme judsonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.judson(textStyle: textTheme?.display4),
      display3: GoogleFonts.judson(textStyle: textTheme?.display3),
      display2: GoogleFonts.judson(textStyle: textTheme?.display2),
      display1: GoogleFonts.judson(textStyle: textTheme?.display1),
      headline: GoogleFonts.judson(textStyle: textTheme?.headline),
      title: GoogleFonts.judson(textStyle: textTheme?.title),
      subhead: GoogleFonts.judson(textStyle: textTheme?.subhead),
      body2: GoogleFonts.judson(textStyle: textTheme?.body2),
      body1: GoogleFonts.judson(textStyle: textTheme?.body1),
      caption: GoogleFonts.judson(textStyle: textTheme?.caption),
      button: GoogleFonts.judson(textStyle: textTheme?.button),
      subtitle: GoogleFonts.judson(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.judson(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Julee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Julee
  static TextStyle julee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3f334d6179a0a109566471f8a12eb16eb9b7ce8b2fb4ae975450fc8a2dd71358',
        30828,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Julee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Julee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Julee
  static TextTheme juleeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.julee(textStyle: textTheme?.display4),
      display3: GoogleFonts.julee(textStyle: textTheme?.display3),
      display2: GoogleFonts.julee(textStyle: textTheme?.display2),
      display1: GoogleFonts.julee(textStyle: textTheme?.display1),
      headline: GoogleFonts.julee(textStyle: textTheme?.headline),
      title: GoogleFonts.julee(textStyle: textTheme?.title),
      subhead: GoogleFonts.julee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.julee(textStyle: textTheme?.body2),
      body1: GoogleFonts.julee(textStyle: textTheme?.body1),
      caption: GoogleFonts.julee(textStyle: textTheme?.caption),
      button: GoogleFonts.julee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.julee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.julee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Julius Sans One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Julius+Sans+One
  static TextStyle juliusSansOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2453dedd8ffddbabbe0e7b6822b7cf607757d98524241a40596bb7ae18212156',
        27868,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JuliusSansOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Julius Sans One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Julius+Sans+One
  static TextTheme juliusSansOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.juliusSansOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.juliusSansOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.juliusSansOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.juliusSansOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.juliusSansOne(textStyle: textTheme?.headline),
      title: GoogleFonts.juliusSansOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.juliusSansOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.juliusSansOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.juliusSansOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.juliusSansOne(textStyle: textTheme?.caption),
      button: GoogleFonts.juliusSansOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.juliusSansOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.juliusSansOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Junge font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Junge
  static TextStyle junge({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '573f4ddfb30769905cf4446b3fc01243dd50c8d9ad1f810c91f3b009b109d031',
        38872,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Junge',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Junge font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Junge
  static TextTheme jungeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.junge(textStyle: textTheme?.display4),
      display3: GoogleFonts.junge(textStyle: textTheme?.display3),
      display2: GoogleFonts.junge(textStyle: textTheme?.display2),
      display1: GoogleFonts.junge(textStyle: textTheme?.display1),
      headline: GoogleFonts.junge(textStyle: textTheme?.headline),
      title: GoogleFonts.junge(textStyle: textTheme?.title),
      subhead: GoogleFonts.junge(textStyle: textTheme?.subhead),
      body2: GoogleFonts.junge(textStyle: textTheme?.body2),
      body1: GoogleFonts.junge(textStyle: textTheme?.body1),
      caption: GoogleFonts.junge(textStyle: textTheme?.caption),
      button: GoogleFonts.junge(textStyle: textTheme?.button),
      subtitle: GoogleFonts.junge(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.junge(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jura font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jura
  static TextStyle jura({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '77bf0cc35f4472e54d1b2daf9d1bfc5f02b062280d8dccd089869c247b4787ee',
        130688,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '33eb5cfd183074e05fa8299bd75531ec22a6a6d5f8778170d27310d95b1bbbb6',
        131592,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '77d5a89082924bbe692443c95c536a679eef0891bfbe46d7e30f206f8486631f',
        132540,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '85ee38dc27e08fef91f43a628bfb4a044e79102b07af8ea7d859b249c169aada',
        134512,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8215e86097df83eb3473c6f3ee4d3c63cd00dce9d02b9cd816d27f4e13616183',
        136056,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jura',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jura font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jura
  static TextTheme juraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jura(textStyle: textTheme?.display4),
      display3: GoogleFonts.jura(textStyle: textTheme?.display3),
      display2: GoogleFonts.jura(textStyle: textTheme?.display2),
      display1: GoogleFonts.jura(textStyle: textTheme?.display1),
      headline: GoogleFonts.jura(textStyle: textTheme?.headline),
      title: GoogleFonts.jura(textStyle: textTheme?.title),
      subhead: GoogleFonts.jura(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jura(textStyle: textTheme?.body2),
      body1: GoogleFonts.jura(textStyle: textTheme?.body1),
      caption: GoogleFonts.jura(textStyle: textTheme?.caption),
      button: GoogleFonts.jura(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jura(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jura(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Just Another Hand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Just+Another+Hand
  static TextStyle justAnotherHand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a03840122f7580fc7dfc0c3371d5450fd3b1c04f891bcc1e86780354e7c53d4',
        164136,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JustAnotherHand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Just Another Hand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Just+Another+Hand
  static TextTheme justAnotherHandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.justAnotherHand(textStyle: textTheme?.display4),
      display3: GoogleFonts.justAnotherHand(textStyle: textTheme?.display3),
      display2: GoogleFonts.justAnotherHand(textStyle: textTheme?.display2),
      display1: GoogleFonts.justAnotherHand(textStyle: textTheme?.display1),
      headline: GoogleFonts.justAnotherHand(textStyle: textTheme?.headline),
      title: GoogleFonts.justAnotherHand(textStyle: textTheme?.title),
      subhead: GoogleFonts.justAnotherHand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.justAnotherHand(textStyle: textTheme?.body2),
      body1: GoogleFonts.justAnotherHand(textStyle: textTheme?.body1),
      caption: GoogleFonts.justAnotherHand(textStyle: textTheme?.caption),
      button: GoogleFonts.justAnotherHand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.justAnotherHand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.justAnotherHand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Just Me Again Down Here font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Just+Me+Again+Down+Here
  static TextStyle justMeAgainDownHere({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fc0ac5f253850191002f529e5fd66829627682a2f9740fe0345a4bb339da7438',
        52984,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JustMeAgainDownHere',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Just Me Again Down Here font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Just+Me+Again+Down+Here
  static TextTheme justMeAgainDownHereTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.display4),
      display3: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.display3),
      display2: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.display2),
      display1: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.display1),
      headline: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.headline),
      title: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.title),
      subhead: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.subhead),
      body2: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.body2),
      body1: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.body1),
      caption: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.caption),
      button: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.button),
      subtitle: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.overline),
    );
  }

  /// Applies the K2D font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/K2D
  static TextStyle k2D({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd221fa3a362d33d180e193b479bfddbf9e8ab02b545540d3a80121af669090de',
        90864,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2ee77370590db6101099fae848e5f0e4fad425bcb6a8bb711390100587eacf49',
        94760,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '84c5594915b66f9cd68b4acb3820acdf5be79979f881f4edbece711c1a63d0cd',
        90688,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '989bf534f4958d0d4655079703f5c6788e8cd7b1add81d08a1de93c354d69c1c',
        94820,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bad065e1eeca31036e60587a4472530b8db84eb93149d94f2b687a28c8b0af39',
        90728,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1696fa34076cad6a8c919ffbe3247882c29a281086a573ddb8abc0c175794aed',
        94808,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ebd6d32612d7badd90f78a25b0a45e1573bcbd0b93954b702d17188d178d9e87',
        90976,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd7dc126127f8fcfeda097e5da4a1097f60e396ed7c4696060eaa0da6f1727366',
        95068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '57c28cc8eae5e455cd2000ea358ed6be014ff9f0e69866e18a1e7b9c6345bce0',
        91356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '00dc6e342b171a8e55a277d83326c4612d8f176cd576ee5f666636b13fc4ca18',
        95456,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8ceb3795ff3e683d9c70a4d12f431d94434b2527d61dcc11d59f840bfd644a8a',
        91488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3bff6acc9a59d6af0e9d2b3170d55987d1c96e9bb88ff5c20be84053cdb0dd81',
        95596,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '42e6c8a5b79abf6121af3fc8777219f39b88045a96a42dfe628d28c2112a4e12',
        91500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3d449eedd3718213cee306d0dd007fccf31827c55aa2d25b3d14ca933471e53b',
        95704,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8f35ce22ce957eeee7bffef62f142fb7bf751169767ad5ab73cd78ba6c135821',
        91496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2141bd5b98bac331831e687a2131f46a8d23093831953a533451e0081a54f6aa',
        95800,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'K2D',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the K2D font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/K2D
  static TextTheme k2DTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.k2D(textStyle: textTheme?.display4),
      display3: GoogleFonts.k2D(textStyle: textTheme?.display3),
      display2: GoogleFonts.k2D(textStyle: textTheme?.display2),
      display1: GoogleFonts.k2D(textStyle: textTheme?.display1),
      headline: GoogleFonts.k2D(textStyle: textTheme?.headline),
      title: GoogleFonts.k2D(textStyle: textTheme?.title),
      subhead: GoogleFonts.k2D(textStyle: textTheme?.subhead),
      body2: GoogleFonts.k2D(textStyle: textTheme?.body2),
      body1: GoogleFonts.k2D(textStyle: textTheme?.body1),
      caption: GoogleFonts.k2D(textStyle: textTheme?.caption),
      button: GoogleFonts.k2D(textStyle: textTheme?.button),
      subtitle: GoogleFonts.k2D(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.k2D(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kadwa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kadwa
  static TextStyle kadwa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5b5f18ab4eefeddcf41f6246b7bdc63d6971c57ff6d628b86fc955f8eacc2e01',
        216352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2355f2b7cea1ab51a7388a8586f175dbb411a58e530e26b1f86b5a62ca80faa2',
        208480,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kadwa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kadwa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kadwa
  static TextTheme kadwaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kadwa(textStyle: textTheme?.display4),
      display3: GoogleFonts.kadwa(textStyle: textTheme?.display3),
      display2: GoogleFonts.kadwa(textStyle: textTheme?.display2),
      display1: GoogleFonts.kadwa(textStyle: textTheme?.display1),
      headline: GoogleFonts.kadwa(textStyle: textTheme?.headline),
      title: GoogleFonts.kadwa(textStyle: textTheme?.title),
      subhead: GoogleFonts.kadwa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kadwa(textStyle: textTheme?.body2),
      body1: GoogleFonts.kadwa(textStyle: textTheme?.body1),
      caption: GoogleFonts.kadwa(textStyle: textTheme?.caption),
      button: GoogleFonts.kadwa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kadwa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kadwa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kalam font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kalam
  static TextStyle kalam({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'acc410247649f3164d61952a81b88737fb56977ac409e4d5f35d960e3b13747a',
        220496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '546c956074b4cd1c7d9936a82b03a712ec46df693b5a0faa80d4233f6bc17d2c',
        220796,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd48470c951c546b15999abb42141211e85484cffff16ce7612d07676efb9d0d8',
        223060,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kalam',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kalam font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kalam
  static TextTheme kalamTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kalam(textStyle: textTheme?.display4),
      display3: GoogleFonts.kalam(textStyle: textTheme?.display3),
      display2: GoogleFonts.kalam(textStyle: textTheme?.display2),
      display1: GoogleFonts.kalam(textStyle: textTheme?.display1),
      headline: GoogleFonts.kalam(textStyle: textTheme?.headline),
      title: GoogleFonts.kalam(textStyle: textTheme?.title),
      subhead: GoogleFonts.kalam(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kalam(textStyle: textTheme?.body2),
      body1: GoogleFonts.kalam(textStyle: textTheme?.body1),
      caption: GoogleFonts.kalam(textStyle: textTheme?.caption),
      button: GoogleFonts.kalam(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kalam(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kalam(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kameron font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kameron
  static TextStyle kameron({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '31d4c66237b8a2353dcb28cc0c0fcf347f10cb20582071c7db1e3d2820bc9d29',
        39420,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba1c38d9290bf8209d9ff96941f976a43f44f9bd3eee9b066349fe39d6a0eef6',
        40328,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kameron',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kameron font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kameron
  static TextTheme kameronTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kameron(textStyle: textTheme?.display4),
      display3: GoogleFonts.kameron(textStyle: textTheme?.display3),
      display2: GoogleFonts.kameron(textStyle: textTheme?.display2),
      display1: GoogleFonts.kameron(textStyle: textTheme?.display1),
      headline: GoogleFonts.kameron(textStyle: textTheme?.headline),
      title: GoogleFonts.kameron(textStyle: textTheme?.title),
      subhead: GoogleFonts.kameron(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kameron(textStyle: textTheme?.body2),
      body1: GoogleFonts.kameron(textStyle: textTheme?.body1),
      caption: GoogleFonts.kameron(textStyle: textTheme?.caption),
      button: GoogleFonts.kameron(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kameron(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kameron(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kanit font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kanit
  static TextStyle kanit({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ae2534d6b4ec69c677d8c2cf336e1ba3c802e9e316c028c99a8db43ebb63f70',
        91856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '07d136289c506d3788ccbfcdf9e764427270b557b1b601d925bf997d002827ff',
        101028,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5a7bd784e91a9a006ec021a5f891a29ac3d867878f998bb1c2d7cdeac7dcb6b2',
        91724,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4171f0d7fdb919ffe44d9fb9fcccb08610ca5646f6e1f258e62ebe1b237d40b7',
        101072,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'af3df5dc97d26cade1367d07a411e2ce209ab130f0d0f22c73594f2f9488f231',
        91856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '684fbd0330c7997a7aa6d6b72454ed7dbcaab91d2c54be50157988c9669ff845',
        100884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7996f53043acf5b6c782024a9c21ccd0bbab714f137cba3f64a2108709df989b',
        91176,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9367b66fe82713a777016d80d74986e22f272688d4fa1a7aaa2e8d999d31b0d4',
        100492,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '696301b8ecd45c7227d2c5ff3a308bbf701b05428b121fa43523622416c87e12',
        90588,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6dd4b995a1dde18512697195090fb6bee9d0f44b124e8deb55d8619204637957',
        99036,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ccc6cb20ad4fe61a7cd12f4124476933985e5e8c105008bf5549dee46d671fcb',
        90688,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5f81f4c0eae984a4ba6dec488b4b74c2b72db9871111ee3b595473a73be34d5b',
        99316,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9844297d29f6a9c9d97cfa435750cc2933cc8d47b30e9c380e080d665310aaad',
        89616,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '84a74264e2a1b11040aa80b859501eb498938736938cc12e1838be482ca1681f',
        99564,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ac86afa00dd8b070dc0325ff6ee63daee98cd4004aacce60aab9a9f147d3151e',
        90344,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0d3cf6f6f9f8952c9fbffa0fba60279f3b0fee229b846a4ff1d127732642c3c8',
        99912,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '593120b5c1292664ccee5994d9936265b8372449097d70ce0cdc3737408f0c1f',
        89780,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '887e5a2586587398cc15672b3f3fef3e35836150f74ff4c8f80a34895effe69a',
        119368,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kanit',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kanit font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kanit
  static TextTheme kanitTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kanit(textStyle: textTheme?.display4),
      display3: GoogleFonts.kanit(textStyle: textTheme?.display3),
      display2: GoogleFonts.kanit(textStyle: textTheme?.display2),
      display1: GoogleFonts.kanit(textStyle: textTheme?.display1),
      headline: GoogleFonts.kanit(textStyle: textTheme?.headline),
      title: GoogleFonts.kanit(textStyle: textTheme?.title),
      subhead: GoogleFonts.kanit(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kanit(textStyle: textTheme?.body2),
      body1: GoogleFonts.kanit(textStyle: textTheme?.body1),
      caption: GoogleFonts.kanit(textStyle: textTheme?.caption),
      button: GoogleFonts.kanit(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kanit(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kanit(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kantumruy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kantumruy
  static TextStyle kantumruy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b1d181333c6beb8df855376481f36dcaa1e27f9c6fe7ba0c990035a73aca6686',
        43484,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9b0483d5bc7f567f83bda10131a033929865349c666f585d4feaa69600a60802',
        42468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6e6b33a5b9d03c7ed3f4e94d9704262ca70dc513ac1f129964f79ccddba04e06',
        41952,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kantumruy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kantumruy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kantumruy
  static TextTheme kantumruyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kantumruy(textStyle: textTheme?.display4),
      display3: GoogleFonts.kantumruy(textStyle: textTheme?.display3),
      display2: GoogleFonts.kantumruy(textStyle: textTheme?.display2),
      display1: GoogleFonts.kantumruy(textStyle: textTheme?.display1),
      headline: GoogleFonts.kantumruy(textStyle: textTheme?.headline),
      title: GoogleFonts.kantumruy(textStyle: textTheme?.title),
      subhead: GoogleFonts.kantumruy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kantumruy(textStyle: textTheme?.body2),
      body1: GoogleFonts.kantumruy(textStyle: textTheme?.body1),
      caption: GoogleFonts.kantumruy(textStyle: textTheme?.caption),
      button: GoogleFonts.kantumruy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kantumruy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kantumruy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Karla font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Karla
  static TextStyle karla({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6f59c39b7fe5470c4c19a0bd67174cb94cdbe2053382046ea00b00fbfd5008a7',
        16768,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8dfdedc9371e4b6c128ba66b488cc38a94142de7a6aec5633026651dbbe7fd50',
        18500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '60f1379da84423da4c84a9d3ad1a1293ce82daf3c8337c5f3d027e5e0aa892c3',
        17820,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '11cdf8ae7a17fbd7e9d7e2b43ced2e092b6d3a77cd2846dbf42cf3d82ffcb5e8',
        18624,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Karla',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Karla font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Karla
  static TextTheme karlaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.karla(textStyle: textTheme?.display4),
      display3: GoogleFonts.karla(textStyle: textTheme?.display3),
      display2: GoogleFonts.karla(textStyle: textTheme?.display2),
      display1: GoogleFonts.karla(textStyle: textTheme?.display1),
      headline: GoogleFonts.karla(textStyle: textTheme?.headline),
      title: GoogleFonts.karla(textStyle: textTheme?.title),
      subhead: GoogleFonts.karla(textStyle: textTheme?.subhead),
      body2: GoogleFonts.karla(textStyle: textTheme?.body2),
      body1: GoogleFonts.karla(textStyle: textTheme?.body1),
      caption: GoogleFonts.karla(textStyle: textTheme?.caption),
      button: GoogleFonts.karla(textStyle: textTheme?.button),
      subtitle: GoogleFonts.karla(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.karla(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Karma font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Karma
  static TextStyle karma({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3efd1dc089cbb099173fc03a8bfc22d406db0671888af830ca7137e548369989',
        213140,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8852b0f721a3603b10be618c6a5ad02f581025568b8db801a75130da5f0c8d48',
        213320,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2701feff031a171c4d982c100c27cf15d52d5051c49481762f43eeecc4bd54bd',
        212556,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '932cd064de412606a66f2a06a29ed0003de9669fe26d7f1f9f3e76bfc74dbb78',
        213564,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '132e41c0f90df6a2646b59a685af793e0ce62b2b64245d2db081d1ab1f6889e8',
        214132,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Karma',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Karma font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Karma
  static TextTheme karmaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.karma(textStyle: textTheme?.display4),
      display3: GoogleFonts.karma(textStyle: textTheme?.display3),
      display2: GoogleFonts.karma(textStyle: textTheme?.display2),
      display1: GoogleFonts.karma(textStyle: textTheme?.display1),
      headline: GoogleFonts.karma(textStyle: textTheme?.headline),
      title: GoogleFonts.karma(textStyle: textTheme?.title),
      subhead: GoogleFonts.karma(textStyle: textTheme?.subhead),
      body2: GoogleFonts.karma(textStyle: textTheme?.body2),
      body1: GoogleFonts.karma(textStyle: textTheme?.body1),
      caption: GoogleFonts.karma(textStyle: textTheme?.caption),
      button: GoogleFonts.karma(textStyle: textTheme?.button),
      subtitle: GoogleFonts.karma(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.karma(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Katibeh font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Katibeh
  static TextStyle katibeh({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '16765d8ec4094a1fc5253399ebcf655c81c391de1a03f36d75059b0118e154a0',
        188360,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Katibeh',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Katibeh font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Katibeh
  static TextTheme katibehTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.katibeh(textStyle: textTheme?.display4),
      display3: GoogleFonts.katibeh(textStyle: textTheme?.display3),
      display2: GoogleFonts.katibeh(textStyle: textTheme?.display2),
      display1: GoogleFonts.katibeh(textStyle: textTheme?.display1),
      headline: GoogleFonts.katibeh(textStyle: textTheme?.headline),
      title: GoogleFonts.katibeh(textStyle: textTheme?.title),
      subhead: GoogleFonts.katibeh(textStyle: textTheme?.subhead),
      body2: GoogleFonts.katibeh(textStyle: textTheme?.body2),
      body1: GoogleFonts.katibeh(textStyle: textTheme?.body1),
      caption: GoogleFonts.katibeh(textStyle: textTheme?.caption),
      button: GoogleFonts.katibeh(textStyle: textTheme?.button),
      subtitle: GoogleFonts.katibeh(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.katibeh(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kaushan Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kaushan+Script
  static TextStyle kaushanScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a873f20587d6d9f0fc829b52f62b3d79665f806ca3062b6d5c14e6450e10c623',
        138340,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KaushanScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kaushan Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kaushan+Script
  static TextTheme kaushanScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kaushanScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.kaushanScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.kaushanScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.kaushanScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.kaushanScript(textStyle: textTheme?.headline),
      title: GoogleFonts.kaushanScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.kaushanScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kaushanScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.kaushanScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.kaushanScript(textStyle: textTheme?.caption),
      button: GoogleFonts.kaushanScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kaushanScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kaushanScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kavivanar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kavivanar
  static TextStyle kavivanar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '18f829fa1d200c2774144c3fcc8eb4f393a7bf7e2c8e3d95ecf831dd96e498ae',
        66336,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kavivanar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kavivanar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kavivanar
  static TextTheme kavivanarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kavivanar(textStyle: textTheme?.display4),
      display3: GoogleFonts.kavivanar(textStyle: textTheme?.display3),
      display2: GoogleFonts.kavivanar(textStyle: textTheme?.display2),
      display1: GoogleFonts.kavivanar(textStyle: textTheme?.display1),
      headline: GoogleFonts.kavivanar(textStyle: textTheme?.headline),
      title: GoogleFonts.kavivanar(textStyle: textTheme?.title),
      subhead: GoogleFonts.kavivanar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kavivanar(textStyle: textTheme?.body2),
      body1: GoogleFonts.kavivanar(textStyle: textTheme?.body1),
      caption: GoogleFonts.kavivanar(textStyle: textTheme?.caption),
      button: GoogleFonts.kavivanar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kavivanar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kavivanar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kavoon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kavoon
  static TextStyle kavoon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2c2328be5a827d790cddbe56db46b1c94043f473e5d01286be1567e454a4038d',
        52288,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kavoon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kavoon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kavoon
  static TextTheme kavoonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kavoon(textStyle: textTheme?.display4),
      display3: GoogleFonts.kavoon(textStyle: textTheme?.display3),
      display2: GoogleFonts.kavoon(textStyle: textTheme?.display2),
      display1: GoogleFonts.kavoon(textStyle: textTheme?.display1),
      headline: GoogleFonts.kavoon(textStyle: textTheme?.headline),
      title: GoogleFonts.kavoon(textStyle: textTheme?.title),
      subhead: GoogleFonts.kavoon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kavoon(textStyle: textTheme?.body2),
      body1: GoogleFonts.kavoon(textStyle: textTheme?.body1),
      caption: GoogleFonts.kavoon(textStyle: textTheme?.caption),
      button: GoogleFonts.kavoon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kavoon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kavoon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kdam Thmor font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kdam+Thmor
  static TextStyle kdamThmor({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9fc30fa8d328331e5132a7c7bf04cc803ada727681101c00dce2c9e84732f191',
        56332,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KdamThmor',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kdam Thmor font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kdam+Thmor
  static TextTheme kdamThmorTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kdamThmor(textStyle: textTheme?.display4),
      display3: GoogleFonts.kdamThmor(textStyle: textTheme?.display3),
      display2: GoogleFonts.kdamThmor(textStyle: textTheme?.display2),
      display1: GoogleFonts.kdamThmor(textStyle: textTheme?.display1),
      headline: GoogleFonts.kdamThmor(textStyle: textTheme?.headline),
      title: GoogleFonts.kdamThmor(textStyle: textTheme?.title),
      subhead: GoogleFonts.kdamThmor(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kdamThmor(textStyle: textTheme?.body2),
      body1: GoogleFonts.kdamThmor(textStyle: textTheme?.body1),
      caption: GoogleFonts.kdamThmor(textStyle: textTheme?.caption),
      button: GoogleFonts.kdamThmor(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kdamThmor(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kdamThmor(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Keania One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Keania+One
  static TextStyle keaniaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '39c288c7a1580666e2ebb839a9df6cfb69104742879e8e61900550b02a4f9fb8',
        38764,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KeaniaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Keania One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Keania+One
  static TextTheme keaniaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.keaniaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.keaniaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.keaniaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.keaniaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.keaniaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.keaniaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.keaniaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.keaniaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.keaniaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.keaniaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.keaniaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.keaniaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.keaniaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kelly Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kelly+Slab
  static TextStyle kellySlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0e2083c69e8813f4eaba66f9dbe4960cd23ce5e098577997c4a3ae8d09c15c31',
        77792,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KellySlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kelly Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kelly+Slab
  static TextTheme kellySlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kellySlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.kellySlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.kellySlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.kellySlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.kellySlab(textStyle: textTheme?.headline),
      title: GoogleFonts.kellySlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.kellySlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kellySlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.kellySlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.kellySlab(textStyle: textTheme?.caption),
      button: GoogleFonts.kellySlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kellySlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kellySlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kenia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kenia
  static TextStyle kenia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '504cbb4c7a6888c5333bff718cde206f914f047b6247076cd4033f6457a2a9a6',
        39060,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kenia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kenia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kenia
  static TextTheme keniaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kenia(textStyle: textTheme?.display4),
      display3: GoogleFonts.kenia(textStyle: textTheme?.display3),
      display2: GoogleFonts.kenia(textStyle: textTheme?.display2),
      display1: GoogleFonts.kenia(textStyle: textTheme?.display1),
      headline: GoogleFonts.kenia(textStyle: textTheme?.headline),
      title: GoogleFonts.kenia(textStyle: textTheme?.title),
      subhead: GoogleFonts.kenia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kenia(textStyle: textTheme?.body2),
      body1: GoogleFonts.kenia(textStyle: textTheme?.body1),
      caption: GoogleFonts.kenia(textStyle: textTheme?.caption),
      button: GoogleFonts.kenia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kenia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kenia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Khand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khand
  static TextStyle khand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7cd4683a916646dd278fb0eb4426f6826ca4f0cc92ce083de087f2287fb11f98',
        168560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '325e1b6938310cd0385a917b47fcadabece70ea8fa6356a276e20fb171d57af5',
        168592,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6dd2785eedd866d3f7e329ad7264d66157ec7a40ef41d48aab098287b5a8863d',
        167652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2471269ec4d3228c379da2bc6e54db78b4c7b315613d0cd1e639539c7d92d75d',
        167892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '609dc9682e1321a8db6ab6a4caeffe07395b8517327ee5ce936b365e586fb402',
        167440,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Khand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Khand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khand
  static TextTheme khandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.khand(textStyle: textTheme?.display4),
      display3: GoogleFonts.khand(textStyle: textTheme?.display3),
      display2: GoogleFonts.khand(textStyle: textTheme?.display2),
      display1: GoogleFonts.khand(textStyle: textTheme?.display1),
      headline: GoogleFonts.khand(textStyle: textTheme?.headline),
      title: GoogleFonts.khand(textStyle: textTheme?.title),
      subhead: GoogleFonts.khand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.khand(textStyle: textTheme?.body2),
      body1: GoogleFonts.khand(textStyle: textTheme?.body1),
      caption: GoogleFonts.khand(textStyle: textTheme?.caption),
      button: GoogleFonts.khand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.khand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.khand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Khula font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khula
  static TextStyle khula({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '565c281fe5c11e451834dd30eda6e6d94a41c1a9c186c175541aa8ddef492d4f',
        103456,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '743e9de20b77192c80fd43452b591fcc85ef36aa1dd7746171503962b5687046',
        101668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'af7d4733894aa875443cf8921445981662df9f4f3ee13e8cc151dee7c9ca5dde',
        101652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f8536c085e0c982334e632c44c763535658fd643b50254fb20784b8f377a6231',
        101984,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '976ee869557699be72a4b83bbb3362cc7be7de27930b5b671210b69063a49d2f',
        103132,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Khula',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Khula font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khula
  static TextTheme khulaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.khula(textStyle: textTheme?.display4),
      display3: GoogleFonts.khula(textStyle: textTheme?.display3),
      display2: GoogleFonts.khula(textStyle: textTheme?.display2),
      display1: GoogleFonts.khula(textStyle: textTheme?.display1),
      headline: GoogleFonts.khula(textStyle: textTheme?.headline),
      title: GoogleFonts.khula(textStyle: textTheme?.title),
      subhead: GoogleFonts.khula(textStyle: textTheme?.subhead),
      body2: GoogleFonts.khula(textStyle: textTheme?.body2),
      body1: GoogleFonts.khula(textStyle: textTheme?.body1),
      caption: GoogleFonts.khula(textStyle: textTheme?.caption),
      button: GoogleFonts.khula(textStyle: textTheme?.button),
      subtitle: GoogleFonts.khula(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.khula(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kirang Haerang font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kirang+Haerang
  static TextStyle kirangHaerang({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '419ae98f0574b7c2a5b81ce99a859d0db9335d7be00145712bad1d7d8881abb1',
        3554608,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KirangHaerang',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kirang Haerang font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kirang+Haerang
  static TextTheme kirangHaerangTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kirangHaerang(textStyle: textTheme?.display4),
      display3: GoogleFonts.kirangHaerang(textStyle: textTheme?.display3),
      display2: GoogleFonts.kirangHaerang(textStyle: textTheme?.display2),
      display1: GoogleFonts.kirangHaerang(textStyle: textTheme?.display1),
      headline: GoogleFonts.kirangHaerang(textStyle: textTheme?.headline),
      title: GoogleFonts.kirangHaerang(textStyle: textTheme?.title),
      subhead: GoogleFonts.kirangHaerang(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kirangHaerang(textStyle: textTheme?.body2),
      body1: GoogleFonts.kirangHaerang(textStyle: textTheme?.body1),
      caption: GoogleFonts.kirangHaerang(textStyle: textTheme?.caption),
      button: GoogleFonts.kirangHaerang(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kirangHaerang(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kirangHaerang(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kite One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kite+One
  static TextStyle kiteOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '34684b654cf048f7030568588f753ee06c120f4d68ba9426e47995af21a6aa8b',
        37560,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KiteOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kite One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kite+One
  static TextTheme kiteOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kiteOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.kiteOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.kiteOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.kiteOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.kiteOne(textStyle: textTheme?.headline),
      title: GoogleFonts.kiteOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.kiteOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kiteOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.kiteOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.kiteOne(textStyle: textTheme?.caption),
      button: GoogleFonts.kiteOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kiteOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kiteOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Knewave font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Knewave
  static TextStyle knewave({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c3a13f54f0f82d09a1c116c40d693c4e9a6212437c8602f91acb88a205ea9fdc',
        32412,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Knewave',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Knewave font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Knewave
  static TextTheme knewaveTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.knewave(textStyle: textTheme?.display4),
      display3: GoogleFonts.knewave(textStyle: textTheme?.display3),
      display2: GoogleFonts.knewave(textStyle: textTheme?.display2),
      display1: GoogleFonts.knewave(textStyle: textTheme?.display1),
      headline: GoogleFonts.knewave(textStyle: textTheme?.headline),
      title: GoogleFonts.knewave(textStyle: textTheme?.title),
      subhead: GoogleFonts.knewave(textStyle: textTheme?.subhead),
      body2: GoogleFonts.knewave(textStyle: textTheme?.body2),
      body1: GoogleFonts.knewave(textStyle: textTheme?.body1),
      caption: GoogleFonts.knewave(textStyle: textTheme?.caption),
      button: GoogleFonts.knewave(textStyle: textTheme?.button),
      subtitle: GoogleFonts.knewave(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.knewave(textStyle: textTheme?.overline),
    );
  }

  /// Applies the KoHo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/KoHo
  static TextStyle koHo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7b4addbdb3d0cadc2f6c0149b90b29c059dc7f2be08d0b28292acb880db45124',
        86716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '73dd6271884581477beeb0860878fd6b524f3e880cc020295c24e2bf1d41a70c',
        90908,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '676e89293e4714a1c63fdd477c5dc88950461834031e2ea0437e65b31fc5a03a',
        86412,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5c2ce20516635678f4f67581782cd3c0429b8cf361e732c24021bc1711fc609e',
        90612,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8128e00cc778e37cc7db7f518f22ca833399d8c4bdfac07fd1fd063435ba658',
        86204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3225382b5d36a6963f8d1cc5fb60086a657ecb39882bab5259eda483f292af57',
        90532,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '90a011adf31d93ee90f5e105dd20a7a69e7de53626672d10449e9bced87b5916',
        85892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'cd0a466ebee7135ca6790a7908264c0457b65dbd9c927ec7082f43827d45f5d4',
        90208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7cf86562498ddfbbaa3a3b5d46e848407702a925472a4a3e76ab1ef1a7949106',
        85700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'cd527fcf4a07b728233b2d93e0ef12477bf9988918e604f16fd823a15a2c3639',
        89800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c059ce850125c2f3bec60528a808fea56f6191b9b9bac380a4a38da9d2f42bfa',
        85128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '16a471d3f9b251d19034945ede1cd8c304c08caba74db67fc08e01556ec0e3b4',
        88844,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KoHo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the KoHo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/KoHo
  static TextTheme koHoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.koHo(textStyle: textTheme?.display4),
      display3: GoogleFonts.koHo(textStyle: textTheme?.display3),
      display2: GoogleFonts.koHo(textStyle: textTheme?.display2),
      display1: GoogleFonts.koHo(textStyle: textTheme?.display1),
      headline: GoogleFonts.koHo(textStyle: textTheme?.headline),
      title: GoogleFonts.koHo(textStyle: textTheme?.title),
      subhead: GoogleFonts.koHo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.koHo(textStyle: textTheme?.body2),
      body1: GoogleFonts.koHo(textStyle: textTheme?.body1),
      caption: GoogleFonts.koHo(textStyle: textTheme?.caption),
      button: GoogleFonts.koHo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.koHo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.koHo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kodchasan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kodchasan
  static TextStyle kodchasan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2edcba243e7c1435577d6a15a666013f9b4f4db824a08ac150024e2000e4b7de',
        95536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6dabeb02077bcb1ee80b8aa519c66632dc2429a3cd60c6cabd5f91154288b103',
        99884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6eb43574315a2c2b393aa7ca05550b9b578bddd384857e454e5fbe82b515bfea',
        96716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fb557cb4f6efc30f933535fb5248e6730fbdcd42302a4b7ee4a58357d71aa0a9',
        100924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eeae77f326fa242ac959bdcb27637f93f6ca476033b7d1e36f106cd40c510317',
        96988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ec040aba86add77fe833d612e33ecb85ef59b26b83c92a86771db7e3f11a8f55',
        101700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '25d7924da481a4595e389025f7a5d21b4bdcc49e7e9766bcdb939f3fe48a3f11',
        97288,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '86198a3feb862a0d1abbba874238ef724e7f0e39221baf31690c24d363b75c52',
        102088,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fa4d9b59366b50f70d33afeb164cee9a13230055602bfdd410ceba9ec9c94132',
        97376,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'bcc4ef0fab22eb3e1e2ef611c53721b1d133ddc5ae972a8e978c4b8024b6aa30',
        102560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7df1e9c701a40ce05b3d8a4189480e045deff521a283218f2094f2cbbc434e17',
        97212,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '37e6fe167fcb53ce25beebb7983c99d3fb3831d1891cb10d36bdffdcc9bef707',
        102668,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kodchasan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kodchasan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kodchasan
  static TextTheme kodchasanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kodchasan(textStyle: textTheme?.display4),
      display3: GoogleFonts.kodchasan(textStyle: textTheme?.display3),
      display2: GoogleFonts.kodchasan(textStyle: textTheme?.display2),
      display1: GoogleFonts.kodchasan(textStyle: textTheme?.display1),
      headline: GoogleFonts.kodchasan(textStyle: textTheme?.headline),
      title: GoogleFonts.kodchasan(textStyle: textTheme?.title),
      subhead: GoogleFonts.kodchasan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kodchasan(textStyle: textTheme?.body2),
      body1: GoogleFonts.kodchasan(textStyle: textTheme?.body1),
      caption: GoogleFonts.kodchasan(textStyle: textTheme?.caption),
      button: GoogleFonts.kodchasan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kodchasan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kodchasan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kotta One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kotta+One
  static TextStyle kottaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0d0a0a70c6c66af4f55948fe817266bdb57b4ac8de0a0fe31f41350ccb139a41',
        36576,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KottaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kotta One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kotta+One
  static TextTheme kottaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kottaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.kottaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.kottaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.kottaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.kottaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.kottaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.kottaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kottaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.kottaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.kottaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.kottaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kottaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kottaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kranky font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kranky
  static TextStyle kranky({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6ede337ff9d5b44d7958a35407098749494ddd69efd07cad00c906439794d962',
        198904,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kranky',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kranky font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kranky
  static TextTheme krankyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kranky(textStyle: textTheme?.display4),
      display3: GoogleFonts.kranky(textStyle: textTheme?.display3),
      display2: GoogleFonts.kranky(textStyle: textTheme?.display2),
      display1: GoogleFonts.kranky(textStyle: textTheme?.display1),
      headline: GoogleFonts.kranky(textStyle: textTheme?.headline),
      title: GoogleFonts.kranky(textStyle: textTheme?.title),
      subhead: GoogleFonts.kranky(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kranky(textStyle: textTheme?.body2),
      body1: GoogleFonts.kranky(textStyle: textTheme?.body1),
      caption: GoogleFonts.kranky(textStyle: textTheme?.caption),
      button: GoogleFonts.kranky(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kranky(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kranky(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kreon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kreon
  static TextStyle kreon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '988fb49f563aec3452b26437e4cef99cd52bf368c5fb6c30e7b9e1419e4a3723',
        37016,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '95de76c3d8f95714fbfda4a89b6cf0b74a4285d9d0f81908cbd91c7146109d83',
        36852,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d9092c90a6173026afefda0a94456688b33166363b733d8d42200e68837b012',
        37648,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kreon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kreon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kreon
  static TextTheme kreonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kreon(textStyle: textTheme?.display4),
      display3: GoogleFonts.kreon(textStyle: textTheme?.display3),
      display2: GoogleFonts.kreon(textStyle: textTheme?.display2),
      display1: GoogleFonts.kreon(textStyle: textTheme?.display1),
      headline: GoogleFonts.kreon(textStyle: textTheme?.headline),
      title: GoogleFonts.kreon(textStyle: textTheme?.title),
      subhead: GoogleFonts.kreon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kreon(textStyle: textTheme?.body2),
      body1: GoogleFonts.kreon(textStyle: textTheme?.body1),
      caption: GoogleFonts.kreon(textStyle: textTheme?.caption),
      button: GoogleFonts.kreon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kreon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kreon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kristi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kristi
  static TextStyle kristi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6769ae6a5019b65b4c320170421385429bc0ab627affdc0b481ad8b7f7e2814b',
        26988,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kristi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kristi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kristi
  static TextTheme kristiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kristi(textStyle: textTheme?.display4),
      display3: GoogleFonts.kristi(textStyle: textTheme?.display3),
      display2: GoogleFonts.kristi(textStyle: textTheme?.display2),
      display1: GoogleFonts.kristi(textStyle: textTheme?.display1),
      headline: GoogleFonts.kristi(textStyle: textTheme?.headline),
      title: GoogleFonts.kristi(textStyle: textTheme?.title),
      subhead: GoogleFonts.kristi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kristi(textStyle: textTheme?.body2),
      body1: GoogleFonts.kristi(textStyle: textTheme?.body1),
      caption: GoogleFonts.kristi(textStyle: textTheme?.caption),
      button: GoogleFonts.kristi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kristi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kristi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Krona One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Krona+One
  static TextStyle kronaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c3051123d5b341e07e0a0c83f46022f8c16edd2373a7405e1857ddbf3ac95132',
        35168,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KronaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Krona One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Krona+One
  static TextTheme kronaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kronaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.kronaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.kronaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.kronaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.kronaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.kronaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.kronaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kronaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.kronaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.kronaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.kronaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kronaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kronaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Krub font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Krub
  static TextStyle krub({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e99da9729e8beb706a3f7dd95ff2b13b7e33f89ceabaf9f2330e61896b93fa39',
        81664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '63f21c0600aea197624e3d1c2e40daafe5eabdfd3f3b604ef5a0240158275df3',
        84648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c051f20fb436fad0503f887fa3835d2787be9ae5fbe5be539dc1532d24f8df2f',
        81100,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e7745d1a884ad74618766af351077c4625adf1e3ba22d4d86f3aa7cf49306b98',
        83988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd0e841ab6bf1b00cdeb73777db2ee1a1cfa53adda512b49fbd12511e8fd15169',
        80988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9e23fec650c8fabcf0ecb628c198acb3c2a8cc928f9ab5814f5eafa81c9ceeaa',
        84040,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2964f338dadae9da331e3cb292ca6fa5a8fe4eb8267fc4846b40115fbb645f2b',
        80900,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'defa6560ee637da7a34fda9c66033c4a5465e3bc8b92a02da190b58dfdd71ad6',
        83856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6f875531446bca4ea9d68ff550096ba0371fb5c0b8fa84667d9de385848b424e',
        80800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'af1dcba5de7428e1ddd0d849ddffc16f048518210fefe8a98bf21ff22234b3f1',
        83792,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '066231a170b822e951eb201a38fd17e6a13d82773be17af5e9b184928e32c6c7',
        80756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'bb202066513c0b7b93b2e8552d17feeaf2580daa45fdf8e88f3e98205ca2342e',
        83796,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Krub',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Krub font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Krub
  static TextTheme krubTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.krub(textStyle: textTheme?.display4),
      display3: GoogleFonts.krub(textStyle: textTheme?.display3),
      display2: GoogleFonts.krub(textStyle: textTheme?.display2),
      display1: GoogleFonts.krub(textStyle: textTheme?.display1),
      headline: GoogleFonts.krub(textStyle: textTheme?.headline),
      title: GoogleFonts.krub(textStyle: textTheme?.title),
      subhead: GoogleFonts.krub(textStyle: textTheme?.subhead),
      body2: GoogleFonts.krub(textStyle: textTheme?.body2),
      body1: GoogleFonts.krub(textStyle: textTheme?.body1),
      caption: GoogleFonts.krub(textStyle: textTheme?.caption),
      button: GoogleFonts.krub(textStyle: textTheme?.button),
      subtitle: GoogleFonts.krub(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.krub(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kumar One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kumar+One
  static TextStyle kumarOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7aa5fb44eb6e2f7f5a30bf8ae90da684a6d448b161974422dee1109dcdb3cab',
        94132,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KumarOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kumar One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kumar+One
  static TextTheme kumarOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kumarOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.kumarOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.kumarOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.kumarOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.kumarOne(textStyle: textTheme?.headline),
      title: GoogleFonts.kumarOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.kumarOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kumarOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.kumarOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.kumarOne(textStyle: textTheme?.caption),
      button: GoogleFonts.kumarOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kumarOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kumarOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kumar One Outline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kumar+One+Outline
  static TextStyle kumarOneOutline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b69d95adfdc90ffb8852e1828c7d227219b5374737613f23a88cfbb02439e915',
        127824,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KumarOneOutline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kumar One Outline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kumar+One+Outline
  static TextTheme kumarOneOutlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kumarOneOutline(textStyle: textTheme?.display4),
      display3: GoogleFonts.kumarOneOutline(textStyle: textTheme?.display3),
      display2: GoogleFonts.kumarOneOutline(textStyle: textTheme?.display2),
      display1: GoogleFonts.kumarOneOutline(textStyle: textTheme?.display1),
      headline: GoogleFonts.kumarOneOutline(textStyle: textTheme?.headline),
      title: GoogleFonts.kumarOneOutline(textStyle: textTheme?.title),
      subhead: GoogleFonts.kumarOneOutline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kumarOneOutline(textStyle: textTheme?.body2),
      body1: GoogleFonts.kumarOneOutline(textStyle: textTheme?.body1),
      caption: GoogleFonts.kumarOneOutline(textStyle: textTheme?.caption),
      button: GoogleFonts.kumarOneOutline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kumarOneOutline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kumarOneOutline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kurale font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kurale
  static TextStyle kurale({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dfcb85ac1c2a3ca188df6595b0099ece1a830475577e1897d491f575e6746e56',
        164312,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kurale',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kurale font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kurale
  static TextTheme kuraleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kurale(textStyle: textTheme?.display4),
      display3: GoogleFonts.kurale(textStyle: textTheme?.display3),
      display2: GoogleFonts.kurale(textStyle: textTheme?.display2),
      display1: GoogleFonts.kurale(textStyle: textTheme?.display1),
      headline: GoogleFonts.kurale(textStyle: textTheme?.headline),
      title: GoogleFonts.kurale(textStyle: textTheme?.title),
      subhead: GoogleFonts.kurale(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kurale(textStyle: textTheme?.body2),
      body1: GoogleFonts.kurale(textStyle: textTheme?.body1),
      caption: GoogleFonts.kurale(textStyle: textTheme?.caption),
      button: GoogleFonts.kurale(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kurale(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kurale(textStyle: textTheme?.overline),
    );
  }

  /// Applies the La Belle Aurore font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/La+Belle+Aurore
  static TextStyle laBelleAurore({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '604ab650c1e1ab2e45459ba2bc1302e120467025e2f3a9946978bb7e7e0d03a3',
        58692,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LaBelleAurore',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the La Belle Aurore font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/La+Belle+Aurore
  static TextTheme laBelleAuroreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.laBelleAurore(textStyle: textTheme?.display4),
      display3: GoogleFonts.laBelleAurore(textStyle: textTheme?.display3),
      display2: GoogleFonts.laBelleAurore(textStyle: textTheme?.display2),
      display1: GoogleFonts.laBelleAurore(textStyle: textTheme?.display1),
      headline: GoogleFonts.laBelleAurore(textStyle: textTheme?.headline),
      title: GoogleFonts.laBelleAurore(textStyle: textTheme?.title),
      subhead: GoogleFonts.laBelleAurore(textStyle: textTheme?.subhead),
      body2: GoogleFonts.laBelleAurore(textStyle: textTheme?.body2),
      body1: GoogleFonts.laBelleAurore(textStyle: textTheme?.body1),
      caption: GoogleFonts.laBelleAurore(textStyle: textTheme?.caption),
      button: GoogleFonts.laBelleAurore(textStyle: textTheme?.button),
      subtitle: GoogleFonts.laBelleAurore(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.laBelleAurore(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lacquer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lacquer
  static TextStyle lacquer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4d33d0518b8cf4ae8d6149c8bc8e7e19ced4124d6b80d47934fd4e7897cda55a',
        203048,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lacquer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lacquer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lacquer
  static TextTheme lacquerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lacquer(textStyle: textTheme?.display4),
      display3: GoogleFonts.lacquer(textStyle: textTheme?.display3),
      display2: GoogleFonts.lacquer(textStyle: textTheme?.display2),
      display1: GoogleFonts.lacquer(textStyle: textTheme?.display1),
      headline: GoogleFonts.lacquer(textStyle: textTheme?.headline),
      title: GoogleFonts.lacquer(textStyle: textTheme?.title),
      subhead: GoogleFonts.lacquer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lacquer(textStyle: textTheme?.body2),
      body1: GoogleFonts.lacquer(textStyle: textTheme?.body1),
      caption: GoogleFonts.lacquer(textStyle: textTheme?.caption),
      button: GoogleFonts.lacquer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lacquer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lacquer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Laila font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Laila
  static TextStyle laila({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8aac335fe109f453ca82438785143a3d54ca6b5860f929a066015b366dd23603',
        203036,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba573905733e8e1ec12baa194825add1cb80997c3c08b032d6439d524eef298a',
        203952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '445309cf766b79874168d66f2dc2f5eb067c865989ed496a8e2389411de9e18b',
        202320,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f393a4935161c1ac8a55a20d2a1107e698de003ace696ae5c6db50c7bf8c0781',
        202264,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a2cfeefaeb650171ed23e31b4fe85b7c5b8605f36e351821ffd3a351aeec6c17',
        201144,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Laila',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Laila font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Laila
  static TextTheme lailaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.laila(textStyle: textTheme?.display4),
      display3: GoogleFonts.laila(textStyle: textTheme?.display3),
      display2: GoogleFonts.laila(textStyle: textTheme?.display2),
      display1: GoogleFonts.laila(textStyle: textTheme?.display1),
      headline: GoogleFonts.laila(textStyle: textTheme?.headline),
      title: GoogleFonts.laila(textStyle: textTheme?.title),
      subhead: GoogleFonts.laila(textStyle: textTheme?.subhead),
      body2: GoogleFonts.laila(textStyle: textTheme?.body2),
      body1: GoogleFonts.laila(textStyle: textTheme?.body1),
      caption: GoogleFonts.laila(textStyle: textTheme?.caption),
      button: GoogleFonts.laila(textStyle: textTheme?.button),
      subtitle: GoogleFonts.laila(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.laila(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lakki Reddy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lakki+Reddy
  static TextStyle lakkiReddy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7517025d73568d9d811b25e8c5ef20a9f9d94bb816d4f334668f3c2d2830d079',
        379840,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LakkiReddy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lakki Reddy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lakki+Reddy
  static TextTheme lakkiReddyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lakkiReddy(textStyle: textTheme?.display4),
      display3: GoogleFonts.lakkiReddy(textStyle: textTheme?.display3),
      display2: GoogleFonts.lakkiReddy(textStyle: textTheme?.display2),
      display1: GoogleFonts.lakkiReddy(textStyle: textTheme?.display1),
      headline: GoogleFonts.lakkiReddy(textStyle: textTheme?.headline),
      title: GoogleFonts.lakkiReddy(textStyle: textTheme?.title),
      subhead: GoogleFonts.lakkiReddy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lakkiReddy(textStyle: textTheme?.body2),
      body1: GoogleFonts.lakkiReddy(textStyle: textTheme?.body1),
      caption: GoogleFonts.lakkiReddy(textStyle: textTheme?.caption),
      button: GoogleFonts.lakkiReddy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lakkiReddy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lakkiReddy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lalezar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lalezar
  static TextStyle lalezar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4fb2ddb0068e2bc905effaccf71a86ff357486d6a30804cd2e1a8109d0f165fc',
        190024,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lalezar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lalezar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lalezar
  static TextTheme lalezarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lalezar(textStyle: textTheme?.display4),
      display3: GoogleFonts.lalezar(textStyle: textTheme?.display3),
      display2: GoogleFonts.lalezar(textStyle: textTheme?.display2),
      display1: GoogleFonts.lalezar(textStyle: textTheme?.display1),
      headline: GoogleFonts.lalezar(textStyle: textTheme?.headline),
      title: GoogleFonts.lalezar(textStyle: textTheme?.title),
      subhead: GoogleFonts.lalezar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lalezar(textStyle: textTheme?.body2),
      body1: GoogleFonts.lalezar(textStyle: textTheme?.body1),
      caption: GoogleFonts.lalezar(textStyle: textTheme?.caption),
      button: GoogleFonts.lalezar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lalezar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lalezar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lancelot font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lancelot
  static TextStyle lancelot({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a717264fe5246a5aae3c8706eb7368a7a36008880de093d205dadca67f8cfc97',
        30668,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lancelot',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lancelot font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lancelot
  static TextTheme lancelotTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lancelot(textStyle: textTheme?.display4),
      display3: GoogleFonts.lancelot(textStyle: textTheme?.display3),
      display2: GoogleFonts.lancelot(textStyle: textTheme?.display2),
      display1: GoogleFonts.lancelot(textStyle: textTheme?.display1),
      headline: GoogleFonts.lancelot(textStyle: textTheme?.headline),
      title: GoogleFonts.lancelot(textStyle: textTheme?.title),
      subhead: GoogleFonts.lancelot(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lancelot(textStyle: textTheme?.body2),
      body1: GoogleFonts.lancelot(textStyle: textTheme?.body1),
      caption: GoogleFonts.lancelot(textStyle: textTheme?.caption),
      button: GoogleFonts.lancelot(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lancelot(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lancelot(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lateef font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lateef
  static TextStyle lateef({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'db6ed59fb822daefac366cd24ad8a0d2b7d9bf35e1ea45490ab50b3f50b0de88',
        172748,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lateef',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lateef font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lateef
  static TextTheme lateefTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lateef(textStyle: textTheme?.display4),
      display3: GoogleFonts.lateef(textStyle: textTheme?.display3),
      display2: GoogleFonts.lateef(textStyle: textTheme?.display2),
      display1: GoogleFonts.lateef(textStyle: textTheme?.display1),
      headline: GoogleFonts.lateef(textStyle: textTheme?.headline),
      title: GoogleFonts.lateef(textStyle: textTheme?.title),
      subhead: GoogleFonts.lateef(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lateef(textStyle: textTheme?.body2),
      body1: GoogleFonts.lateef(textStyle: textTheme?.body1),
      caption: GoogleFonts.lateef(textStyle: textTheme?.caption),
      button: GoogleFonts.lateef(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lateef(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lateef(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lato font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lato
  static TextStyle lato({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2e734a39ad0b4a1dffd327f552cce678e867791007200be49b6a93a6c7c71b27',
        83268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '00d4076b836620336e608f16588994045e53f8aca14d9e430205db56649a8a55',
        78920,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9b25850654f3dd59daf526a3d63dcca1c435e231c9fa2dd949ccde9cea994366',
        80608,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4cf23877950718d8775e526ee06380072a1bba6692d47bb5fb623fefb650b74b',
        79388,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a649aaf21573a59079c46db19314fd95648f531e610fa932101f2705616b2882',
        80676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '484dd58cc095656f129f756067ede55183de20d70a6260c22ac747ed583672d6',
        79376,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '407592da08cb1f6060fbc69262ad33edd0b61ec9160521455eca8f726bbd4353',
        84716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6449b474d050304983a9431099406936e7f6978e22025a4a5ff8533871529bba',
        79536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'abae7ec6de16f8108f1a3e1e3dc9edf11c5903ab89b3513821f4e079a51ae175',
        81116,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '60407472b091a98e26c61f47900329eb3f971651fa76edc26d9f32f87e27f13f',
        76532,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lato',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lato font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lato
  static TextTheme latoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lato(textStyle: textTheme?.display4),
      display3: GoogleFonts.lato(textStyle: textTheme?.display3),
      display2: GoogleFonts.lato(textStyle: textTheme?.display2),
      display1: GoogleFonts.lato(textStyle: textTheme?.display1),
      headline: GoogleFonts.lato(textStyle: textTheme?.headline),
      title: GoogleFonts.lato(textStyle: textTheme?.title),
      subhead: GoogleFonts.lato(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lato(textStyle: textTheme?.body2),
      body1: GoogleFonts.lato(textStyle: textTheme?.body1),
      caption: GoogleFonts.lato(textStyle: textTheme?.caption),
      button: GoogleFonts.lato(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lato(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lato(textStyle: textTheme?.overline),
    );
  }

  /// Applies the League Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/League+Script
  static TextStyle leagueScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ffa526d6dea17c40fade9bfb691be36a5db63e9da4a760462b7df5dce51f4e51',
        51724,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LeagueScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the League Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/League+Script
  static TextTheme leagueScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.leagueScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.leagueScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.leagueScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.leagueScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.leagueScript(textStyle: textTheme?.headline),
      title: GoogleFonts.leagueScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.leagueScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.leagueScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.leagueScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.leagueScript(textStyle: textTheme?.caption),
      button: GoogleFonts.leagueScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.leagueScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.leagueScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Leckerli One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Leckerli+One
  static TextStyle leckerliOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4f4b119a522d79aaa310d37682ccbfd758366df5ab6009b1bd0ff022a5405a5f',
        43164,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LeckerliOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Leckerli One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Leckerli+One
  static TextTheme leckerliOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.leckerliOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.leckerliOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.leckerliOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.leckerliOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.leckerliOne(textStyle: textTheme?.headline),
      title: GoogleFonts.leckerliOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.leckerliOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.leckerliOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.leckerliOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.leckerliOne(textStyle: textTheme?.caption),
      button: GoogleFonts.leckerliOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.leckerliOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.leckerliOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ledger font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ledger
  static TextStyle ledger({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3d3e17668a2b5762ca671d8a2496ba50de6e3896eaada54fa3f74ad82f0daf43',
        62272,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ledger',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ledger font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ledger
  static TextTheme ledgerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ledger(textStyle: textTheme?.display4),
      display3: GoogleFonts.ledger(textStyle: textTheme?.display3),
      display2: GoogleFonts.ledger(textStyle: textTheme?.display2),
      display1: GoogleFonts.ledger(textStyle: textTheme?.display1),
      headline: GoogleFonts.ledger(textStyle: textTheme?.headline),
      title: GoogleFonts.ledger(textStyle: textTheme?.title),
      subhead: GoogleFonts.ledger(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ledger(textStyle: textTheme?.body2),
      body1: GoogleFonts.ledger(textStyle: textTheme?.body1),
      caption: GoogleFonts.ledger(textStyle: textTheme?.caption),
      button: GoogleFonts.ledger(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ledger(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ledger(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lekton font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lekton
  static TextStyle lekton({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '919f93dff330901c348455426b31bc6ad6270b29b4527387ab2f16ae1a8b1b37',
        114272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5bdc665e2f574f3cde6b0db13ba296956f6736f4277decf03a015151ca063072',
        34164,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '34d7bf522a1cd2ddb84bd57082d9651c5155029004a5a66c713dec61c865ab08',
        113636,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lekton',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lekton font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lekton
  static TextTheme lektonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lekton(textStyle: textTheme?.display4),
      display3: GoogleFonts.lekton(textStyle: textTheme?.display3),
      display2: GoogleFonts.lekton(textStyle: textTheme?.display2),
      display1: GoogleFonts.lekton(textStyle: textTheme?.display1),
      headline: GoogleFonts.lekton(textStyle: textTheme?.headline),
      title: GoogleFonts.lekton(textStyle: textTheme?.title),
      subhead: GoogleFonts.lekton(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lekton(textStyle: textTheme?.body2),
      body1: GoogleFonts.lekton(textStyle: textTheme?.body1),
      caption: GoogleFonts.lekton(textStyle: textTheme?.caption),
      button: GoogleFonts.lekton(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lekton(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lekton(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lemon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lemon
  static TextStyle lemon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '512e0e1aeb4008ca5b6b9a325a936751f306ba97d1a480fe76da5adfc1f404c8',
        34600,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lemon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lemon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lemon
  static TextTheme lemonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lemon(textStyle: textTheme?.display4),
      display3: GoogleFonts.lemon(textStyle: textTheme?.display3),
      display2: GoogleFonts.lemon(textStyle: textTheme?.display2),
      display1: GoogleFonts.lemon(textStyle: textTheme?.display1),
      headline: GoogleFonts.lemon(textStyle: textTheme?.headline),
      title: GoogleFonts.lemon(textStyle: textTheme?.title),
      subhead: GoogleFonts.lemon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lemon(textStyle: textTheme?.body2),
      body1: GoogleFonts.lemon(textStyle: textTheme?.body1),
      caption: GoogleFonts.lemon(textStyle: textTheme?.caption),
      button: GoogleFonts.lemon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lemon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lemon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lemonada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lemonada
  static TextStyle lemonada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cd1018b5355f76f3e9ff9d859172bbccef3a0e0bb0b6956ed913a2edba4e9673',
        101408,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6c9760a51ed4b78cf2a172836b2cbc10f540963fdcaf88ef76d10cd4559ee07e',
        101664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b17674113757a97537383dc22f4c28496ce5d1fc8274386430fd9d602216a6a7',
        101480,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9f8159cd531775a6fab18432a618771064672ca7a1c6c7db49780d18de0d87d0',
        101300,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lemonada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lemonada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lemonada
  static TextTheme lemonadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lemonada(textStyle: textTheme?.display4),
      display3: GoogleFonts.lemonada(textStyle: textTheme?.display3),
      display2: GoogleFonts.lemonada(textStyle: textTheme?.display2),
      display1: GoogleFonts.lemonada(textStyle: textTheme?.display1),
      headline: GoogleFonts.lemonada(textStyle: textTheme?.headline),
      title: GoogleFonts.lemonada(textStyle: textTheme?.title),
      subhead: GoogleFonts.lemonada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lemonada(textStyle: textTheme?.body2),
      body1: GoogleFonts.lemonada(textStyle: textTheme?.body1),
      caption: GoogleFonts.lemonada(textStyle: textTheme?.caption),
      button: GoogleFonts.lemonada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lemonada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lemonada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Baskerville font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Baskerville
  static TextStyle libreBaskerville({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9823638a0177e6fb752280379b200fdaa407e687c8c8e2e7f67bb73b6098f478',
        101356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '47c63ebb507fc5ce683210642c5b0529745a907c2a98ca886eef85e798558b3b',
        121336,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e4f9416f4d8d90e78dc3993de94575a0c44a72da6b4216e5f6346cfee242d201',
        101584,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreBaskerville',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Baskerville font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Baskerville
  static TextTheme libreBaskervilleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreBaskerville(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreBaskerville(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreBaskerville(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreBaskerville(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreBaskerville(textStyle: textTheme?.headline),
      title: GoogleFonts.libreBaskerville(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreBaskerville(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreBaskerville(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreBaskerville(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreBaskerville(textStyle: textTheme?.caption),
      button: GoogleFonts.libreBaskerville(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreBaskerville(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreBaskerville(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Franklin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Franklin
  static TextStyle libreFranklin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a1f21b9a28ecb3d6ea935dfde51aee05540140c3a25253b0641b9444dda667c1',
        57732,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '09e958f9da1c899ed89026561f56a7c052b9408db021ae9a897f9247aad44039',
        61308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '97dcc6cedbef15bad22ec4941bcf10ede26cae6bbf0844281f0935c77e475130',
        59320,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd7ed8c62c5358fda45d46e54541af5e0e8397f71242f11a485c04dc39a11218d',
        63088,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '948626a8cfb11d7e06c5fafa6b5e1c4fa4be5db5351c6a223f2ca782b9795798',
        59124,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '34e2e0606ed438b0a6d4debccf0e4c6db3db50b9963425c4f53fa58c91e75aae',
        63500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd81c9f4f52bd37777bfda74e64a609d354ef7ccbae5ccc54d946e46d0355ce5d',
        59384,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a6f8c531931908db5a4f8c02ab8f7bb923b97ba2db982c240715f93114bcd958',
        63856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '05ef5f27b97c4867b996bc39496419b7ece8741ac22d6eefe59e893a9a499089',
        59800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '92e317ea35eba4231dde4a6c824a53ccfa8c615e10e8ecc6cae2d148cdff6b49',
        64444,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b31f2f6914b461a54f80a39780a73cfc0e9fdb98c0025558fc780865881f4379',
        59952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '51e7bd4a4cc8faf0e20e3a2f9ee81132e7a586a1cd64c19fa34654b505fd56ec',
        64912,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'df03d679c9dba10b0ec29c9d44006aba2dd476ae7c3886c4b3e713665ca443fe',
        60492,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a6883fda2b8a258fd408d8655880863ebf75e8eb0c22afc895f6e7f60d955d6c',
        65272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '09d37126271e3ab9282776debe97a4652875fb69f4d98f773a1b6b8d37256299',
        61056,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1a059fcf7d8cb61a71e33599611f5f014c20d34592f0ce2d4afb7ce9e3dfbbd8',
        65812,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '41ab0fe0ad9c37f298d693d6b8e4c5f3cef041ad27ed08c25ee44af8653ee501',
        61128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '136f29fe980b3eaed9bf88c730b2383f963681429fc8d55de10ce71392487a12',
        65916,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreFranklin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Franklin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Franklin
  static TextTheme libreFranklinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreFranklin(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreFranklin(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreFranklin(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreFranklin(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreFranklin(textStyle: textTheme?.headline),
      title: GoogleFonts.libreFranklin(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreFranklin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreFranklin(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreFranklin(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreFranklin(textStyle: textTheme?.caption),
      button: GoogleFonts.libreFranklin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreFranklin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreFranklin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Life Savers font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Life+Savers
  static TextStyle lifeSavers({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '04d39ceac525bd7119947e50ca506cd62efc8803e38347a7b1d07e401463bcee',
        136132,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '362b7da392f70200e34ca8d939a7739b45fdd4cb54b9aee41f6a1db39d13a08b',
        109788,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LifeSavers',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Life Savers font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Life+Savers
  static TextTheme lifeSaversTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lifeSavers(textStyle: textTheme?.display4),
      display3: GoogleFonts.lifeSavers(textStyle: textTheme?.display3),
      display2: GoogleFonts.lifeSavers(textStyle: textTheme?.display2),
      display1: GoogleFonts.lifeSavers(textStyle: textTheme?.display1),
      headline: GoogleFonts.lifeSavers(textStyle: textTheme?.headline),
      title: GoogleFonts.lifeSavers(textStyle: textTheme?.title),
      subhead: GoogleFonts.lifeSavers(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lifeSavers(textStyle: textTheme?.body2),
      body1: GoogleFonts.lifeSavers(textStyle: textTheme?.body1),
      caption: GoogleFonts.lifeSavers(textStyle: textTheme?.caption),
      button: GoogleFonts.lifeSavers(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lifeSavers(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lifeSavers(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lilita One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lilita+One
  static TextStyle lilitaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9bec8798e040c1fbce51e8a057cea3e28ed1d6af1f649b2abec2cba17eb20016',
        28044,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LilitaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lilita One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lilita+One
  static TextTheme lilitaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lilitaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.lilitaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.lilitaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.lilitaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.lilitaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.lilitaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.lilitaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lilitaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.lilitaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.lilitaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.lilitaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lilitaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lilitaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lily Script One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lily+Script+One
  static TextStyle lilyScriptOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8c1fa639d81f625fc5e1f8d3e2988ea5a29d0a6b0a0b6b6a617ee21af28ffc6',
        37524,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LilyScriptOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lily Script One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lily+Script+One
  static TextTheme lilyScriptOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lilyScriptOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.lilyScriptOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.lilyScriptOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.lilyScriptOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.lilyScriptOne(textStyle: textTheme?.headline),
      title: GoogleFonts.lilyScriptOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.lilyScriptOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lilyScriptOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.lilyScriptOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.lilyScriptOne(textStyle: textTheme?.caption),
      button: GoogleFonts.lilyScriptOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lilyScriptOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lilyScriptOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Limelight font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Limelight
  static TextStyle limelight({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba79f57019c587202d831e35a7e10e6dc9ab23546f46ec9da01aa4d25d509913',
        63860,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Limelight',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Limelight font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Limelight
  static TextTheme limelightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.limelight(textStyle: textTheme?.display4),
      display3: GoogleFonts.limelight(textStyle: textTheme?.display3),
      display2: GoogleFonts.limelight(textStyle: textTheme?.display2),
      display1: GoogleFonts.limelight(textStyle: textTheme?.display1),
      headline: GoogleFonts.limelight(textStyle: textTheme?.headline),
      title: GoogleFonts.limelight(textStyle: textTheme?.title),
      subhead: GoogleFonts.limelight(textStyle: textTheme?.subhead),
      body2: GoogleFonts.limelight(textStyle: textTheme?.body2),
      body1: GoogleFonts.limelight(textStyle: textTheme?.body1),
      caption: GoogleFonts.limelight(textStyle: textTheme?.caption),
      button: GoogleFonts.limelight(textStyle: textTheme?.button),
      subtitle: GoogleFonts.limelight(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.limelight(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Linden Hill font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Linden+Hill
  static TextStyle lindenHill({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f32a2438962995a6cced863561c2653cdbd06a951ca2497da2a9275d3fb83fcb',
        124796,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '312de55c585397a60a43de01015efb512a794ffb875c4edd86fcb2e8af39db39',
        94492,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LindenHill',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Linden Hill font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Linden+Hill
  static TextTheme lindenHillTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lindenHill(textStyle: textTheme?.display4),
      display3: GoogleFonts.lindenHill(textStyle: textTheme?.display3),
      display2: GoogleFonts.lindenHill(textStyle: textTheme?.display2),
      display1: GoogleFonts.lindenHill(textStyle: textTheme?.display1),
      headline: GoogleFonts.lindenHill(textStyle: textTheme?.headline),
      title: GoogleFonts.lindenHill(textStyle: textTheme?.title),
      subhead: GoogleFonts.lindenHill(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lindenHill(textStyle: textTheme?.body2),
      body1: GoogleFonts.lindenHill(textStyle: textTheme?.body1),
      caption: GoogleFonts.lindenHill(textStyle: textTheme?.caption),
      button: GoogleFonts.lindenHill(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lindenHill(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lindenHill(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Liu Jian Mao Cao font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Liu+Jian+Mao+Cao
  static TextStyle liuJianMaoCao({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b88821c3a72f98bbab2428a3b3f4a51c2f0eba1644fd8877d195afdf32143cdd',
        4937244,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LiuJianMaoCao',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Liu Jian Mao Cao font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Liu+Jian+Mao+Cao
  static TextTheme liuJianMaoCaoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.display4),
      display3: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.display3),
      display2: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.display2),
      display1: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.display1),
      headline: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.headline),
      title: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.title),
      subhead: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.subhead),
      body2: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.body2),
      body1: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.body1),
      caption: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.caption),
      button: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.button),
      subtitle: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Livvic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Livvic
  static TextStyle livvic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '69cf7d68bd7ea7e4f1eea68a6ce1241109949e773f7342713cc8394cfc3a9350',
        75488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'bac5d8a0627f56ade7281b777b0753a1e5c0d8954b749c43c474cef3987fabb3',
        76756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4339e04cdaa30779650ab9cd08a8e6208806c5d3e61ae9934286f6a0fb3045e2',
        75700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1e90ead4569f3a9562d934ed81529f5b9f77d31c3f3fb04d0761808cc8121c00',
        77044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1d4d9954fddbfe812dc3f05be50de4c32cc79db0ac03c061be82e347885a0d16',
        75612,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '56eb0ced8438e313f473ed5c0d4ee2b2a14fd14f795e437c8fe91da30d6bfa87',
        77080,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '684c0977078ce7a0aa4baca696a867093d47a8b698ac6524e6cba0262e63cc57',
        75488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ed0c728d0a90d1b99fd01bfbc0371e526ddad2ea79d269182c60cd5bb8241393',
        77004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c9399fe200dc52728dd923fc8ef5e8f2566eaa599bfcc903102b49126535701f',
        75736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'eebd5e2f0a3762de32ae06a0aecd96d94322b7e078bc768455d63e202a74411f',
        77136,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '38ef1c46a21565d37981213d2daba4d8f216e1f0f25972c1003069f2c05df6d1',
        75880,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4c557b68961f711648417be8fe965f0ee26452f0b78ade0beda7fdfa4a13b939',
        77048,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '87b0c42cfd0f29daea2867b06adda2fdf978a1c565072fc54ba65774ef420c1e',
        75936,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5431f875e19403b74700eaecfee54e157b5661d8a1fb32712bee2165274e7b03',
        77016,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a61243d45e4b7c886a8af1be0488f4cd259518fea160b655891a491dc90bd01',
        76060,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '541bf67ff4d9b5b56c9d47e30220519bc5d38c2ca202037bf673fba3fe3a8b77',
        77112,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Livvic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Livvic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Livvic
  static TextTheme livvicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.livvic(textStyle: textTheme?.display4),
      display3: GoogleFonts.livvic(textStyle: textTheme?.display3),
      display2: GoogleFonts.livvic(textStyle: textTheme?.display2),
      display1: GoogleFonts.livvic(textStyle: textTheme?.display1),
      headline: GoogleFonts.livvic(textStyle: textTheme?.headline),
      title: GoogleFonts.livvic(textStyle: textTheme?.title),
      subhead: GoogleFonts.livvic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.livvic(textStyle: textTheme?.body2),
      body1: GoogleFonts.livvic(textStyle: textTheme?.body1),
      caption: GoogleFonts.livvic(textStyle: textTheme?.caption),
      button: GoogleFonts.livvic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.livvic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.livvic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lobster font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lobster
  static TextStyle lobster({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ce455bfe5094ab723cf0b59871eb112f9f9acbe6d58811590b3d22a7236fa435',
        257344,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lobster',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lobster font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lobster
  static TextTheme lobsterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lobster(textStyle: textTheme?.display4),
      display3: GoogleFonts.lobster(textStyle: textTheme?.display3),
      display2: GoogleFonts.lobster(textStyle: textTheme?.display2),
      display1: GoogleFonts.lobster(textStyle: textTheme?.display1),
      headline: GoogleFonts.lobster(textStyle: textTheme?.headline),
      title: GoogleFonts.lobster(textStyle: textTheme?.title),
      subhead: GoogleFonts.lobster(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lobster(textStyle: textTheme?.body2),
      body1: GoogleFonts.lobster(textStyle: textTheme?.body1),
      caption: GoogleFonts.lobster(textStyle: textTheme?.caption),
      button: GoogleFonts.lobster(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lobster(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lobster(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lobster Two font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lobster+Two
  static TextStyle lobsterTwo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0c7a1501aa183946996d6a6dd00639131356d161f596511cf06339053570e634',
        108456,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c0dbd5c04e410d8e4da9017651e742b0e62adac50ae9b77ad22cf0407e27e211',
        111476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '510f984a2bfaf23d533e8c389063fe40f2e0d02c2d16889ff79e565345b3aaa5',
        106956,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '37a829bca6d8cab14c9768897a1dafc7fcc08b7b459ba3bd2a2e0dac406eead9',
        110608,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LobsterTwo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lobster Two font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lobster+Two
  static TextTheme lobsterTwoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lobsterTwo(textStyle: textTheme?.display4),
      display3: GoogleFonts.lobsterTwo(textStyle: textTheme?.display3),
      display2: GoogleFonts.lobsterTwo(textStyle: textTheme?.display2),
      display1: GoogleFonts.lobsterTwo(textStyle: textTheme?.display1),
      headline: GoogleFonts.lobsterTwo(textStyle: textTheme?.headline),
      title: GoogleFonts.lobsterTwo(textStyle: textTheme?.title),
      subhead: GoogleFonts.lobsterTwo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lobsterTwo(textStyle: textTheme?.body2),
      body1: GoogleFonts.lobsterTwo(textStyle: textTheme?.body1),
      caption: GoogleFonts.lobsterTwo(textStyle: textTheme?.caption),
      button: GoogleFonts.lobsterTwo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lobsterTwo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lobsterTwo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Londrina Outline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Outline
  static TextStyle londrinaOutline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f2c1c90df8f0b2111b8b45fe4112b8016fcde0874de248c3bd10e4f63da86e57',
        79572,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LondrinaOutline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Londrina Outline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Outline
  static TextTheme londrinaOutlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.londrinaOutline(textStyle: textTheme?.display4),
      display3: GoogleFonts.londrinaOutline(textStyle: textTheme?.display3),
      display2: GoogleFonts.londrinaOutline(textStyle: textTheme?.display2),
      display1: GoogleFonts.londrinaOutline(textStyle: textTheme?.display1),
      headline: GoogleFonts.londrinaOutline(textStyle: textTheme?.headline),
      title: GoogleFonts.londrinaOutline(textStyle: textTheme?.title),
      subhead: GoogleFonts.londrinaOutline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.londrinaOutline(textStyle: textTheme?.body2),
      body1: GoogleFonts.londrinaOutline(textStyle: textTheme?.body1),
      caption: GoogleFonts.londrinaOutline(textStyle: textTheme?.caption),
      button: GoogleFonts.londrinaOutline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.londrinaOutline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.londrinaOutline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Londrina Shadow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Shadow
  static TextStyle londrinaShadow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '84cd8dae1b878c823a1c39d7d9e9893bae747ef212a4a917ab537193b2399287',
        85464,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LondrinaShadow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Londrina Shadow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Shadow
  static TextTheme londrinaShadowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.londrinaShadow(textStyle: textTheme?.display4),
      display3: GoogleFonts.londrinaShadow(textStyle: textTheme?.display3),
      display2: GoogleFonts.londrinaShadow(textStyle: textTheme?.display2),
      display1: GoogleFonts.londrinaShadow(textStyle: textTheme?.display1),
      headline: GoogleFonts.londrinaShadow(textStyle: textTheme?.headline),
      title: GoogleFonts.londrinaShadow(textStyle: textTheme?.title),
      subhead: GoogleFonts.londrinaShadow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.londrinaShadow(textStyle: textTheme?.body2),
      body1: GoogleFonts.londrinaShadow(textStyle: textTheme?.body1),
      caption: GoogleFonts.londrinaShadow(textStyle: textTheme?.caption),
      button: GoogleFonts.londrinaShadow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.londrinaShadow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.londrinaShadow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Londrina Sketch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Sketch
  static TextStyle londrinaSketch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f0bd303136aee90e673136b6266fb6b196cc94ef0966d955269deffaecbffacc',
        172392,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LondrinaSketch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Londrina Sketch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Sketch
  static TextTheme londrinaSketchTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.londrinaSketch(textStyle: textTheme?.display4),
      display3: GoogleFonts.londrinaSketch(textStyle: textTheme?.display3),
      display2: GoogleFonts.londrinaSketch(textStyle: textTheme?.display2),
      display1: GoogleFonts.londrinaSketch(textStyle: textTheme?.display1),
      headline: GoogleFonts.londrinaSketch(textStyle: textTheme?.headline),
      title: GoogleFonts.londrinaSketch(textStyle: textTheme?.title),
      subhead: GoogleFonts.londrinaSketch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.londrinaSketch(textStyle: textTheme?.body2),
      body1: GoogleFonts.londrinaSketch(textStyle: textTheme?.body1),
      caption: GoogleFonts.londrinaSketch(textStyle: textTheme?.caption),
      button: GoogleFonts.londrinaSketch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.londrinaSketch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.londrinaSketch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Londrina Solid font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Solid
  static TextStyle londrinaSolid({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '85115a63ada513540474540a077cb696b1e089220014e3496bbb17c6d81ae8af',
        51980,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LondrinaSolid',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Londrina Solid font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Solid
  static TextTheme londrinaSolidTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.londrinaSolid(textStyle: textTheme?.display4),
      display3: GoogleFonts.londrinaSolid(textStyle: textTheme?.display3),
      display2: GoogleFonts.londrinaSolid(textStyle: textTheme?.display2),
      display1: GoogleFonts.londrinaSolid(textStyle: textTheme?.display1),
      headline: GoogleFonts.londrinaSolid(textStyle: textTheme?.headline),
      title: GoogleFonts.londrinaSolid(textStyle: textTheme?.title),
      subhead: GoogleFonts.londrinaSolid(textStyle: textTheme?.subhead),
      body2: GoogleFonts.londrinaSolid(textStyle: textTheme?.body2),
      body1: GoogleFonts.londrinaSolid(textStyle: textTheme?.body1),
      caption: GoogleFonts.londrinaSolid(textStyle: textTheme?.caption),
      button: GoogleFonts.londrinaSolid(textStyle: textTheme?.button),
      subtitle: GoogleFonts.londrinaSolid(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.londrinaSolid(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Long Cang font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Long+Cang
  static TextStyle longCang({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'abadf560e9284e557329d5cac93ab26b805d175ed1d48da30b843ac4c21623a2',
        5150448,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LongCang',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Long Cang font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Long+Cang
  static TextTheme longCangTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.longCang(textStyle: textTheme?.display4),
      display3: GoogleFonts.longCang(textStyle: textTheme?.display3),
      display2: GoogleFonts.longCang(textStyle: textTheme?.display2),
      display1: GoogleFonts.longCang(textStyle: textTheme?.display1),
      headline: GoogleFonts.longCang(textStyle: textTheme?.headline),
      title: GoogleFonts.longCang(textStyle: textTheme?.title),
      subhead: GoogleFonts.longCang(textStyle: textTheme?.subhead),
      body2: GoogleFonts.longCang(textStyle: textTheme?.body2),
      body1: GoogleFonts.longCang(textStyle: textTheme?.body1),
      caption: GoogleFonts.longCang(textStyle: textTheme?.caption),
      button: GoogleFonts.longCang(textStyle: textTheme?.button),
      subtitle: GoogleFonts.longCang(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.longCang(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lora font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lora
  static TextStyle lora({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ab4a36d4eeabba7b21d6d9f9cf3402c3cfc28c64a4fb06cb6c424de03a8c98b9',
        116620,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5bda244cfbcaf07666bfff144e4e1e5809f93966fa537d9ba1a29fcfd7e0ebb5',
        127672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aada77cdac3a872737be48f8c95b39befadbb124e16cc8b8e5076dd429400ea1',
        114072,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b8238541d0dfa01767e098baf5d7942885a58372a7b97e09d2af15e9d295f2f2',
        118464,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lora',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lora font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lora
  static TextTheme loraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lora(textStyle: textTheme?.display4),
      display3: GoogleFonts.lora(textStyle: textTheme?.display3),
      display2: GoogleFonts.lora(textStyle: textTheme?.display2),
      display1: GoogleFonts.lora(textStyle: textTheme?.display1),
      headline: GoogleFonts.lora(textStyle: textTheme?.headline),
      title: GoogleFonts.lora(textStyle: textTheme?.title),
      subhead: GoogleFonts.lora(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lora(textStyle: textTheme?.body2),
      body1: GoogleFonts.lora(textStyle: textTheme?.body1),
      caption: GoogleFonts.lora(textStyle: textTheme?.caption),
      button: GoogleFonts.lora(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lora(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lora(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Love Ya Like A Sister font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Love+Ya+Like+A+Sister
  static TextStyle loveYaLikeASister({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd7068a0e071e73ae0e18893c97cb33a901b4cd1482fed4150d017e6ac0f7a636',
        271876,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LoveYaLikeASister',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Love Ya Like A Sister font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Love+Ya+Like+A+Sister
  static TextTheme loveYaLikeASisterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.display4),
      display3: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.display3),
      display2: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.display2),
      display1: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.display1),
      headline: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.headline),
      title: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.title),
      subhead: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.subhead),
      body2: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.body2),
      body1: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.body1),
      caption: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.caption),
      button: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.button),
      subtitle: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Loved by the King font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Loved+by+the+King
  static TextStyle lovedbytheKing({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a37e323dc32cf1679842583e8ac1cf460c0cbf68f0367394bb943ad1f662a77b',
        27432,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LovedbytheKing',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Loved by the King font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Loved+by+the+King
  static TextTheme lovedbytheKingTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lovedbytheKing(textStyle: textTheme?.display4),
      display3: GoogleFonts.lovedbytheKing(textStyle: textTheme?.display3),
      display2: GoogleFonts.lovedbytheKing(textStyle: textTheme?.display2),
      display1: GoogleFonts.lovedbytheKing(textStyle: textTheme?.display1),
      headline: GoogleFonts.lovedbytheKing(textStyle: textTheme?.headline),
      title: GoogleFonts.lovedbytheKing(textStyle: textTheme?.title),
      subhead: GoogleFonts.lovedbytheKing(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lovedbytheKing(textStyle: textTheme?.body2),
      body1: GoogleFonts.lovedbytheKing(textStyle: textTheme?.body1),
      caption: GoogleFonts.lovedbytheKing(textStyle: textTheme?.caption),
      button: GoogleFonts.lovedbytheKing(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lovedbytheKing(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lovedbytheKing(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lovers Quarrel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lovers+Quarrel
  static TextStyle loversQuarrel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2b3afd5d2a24b3641cc9053301da4dd11e595d360d1f052a9527036e96ab00e9',
        61824,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LoversQuarrel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lovers Quarrel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lovers+Quarrel
  static TextTheme loversQuarrelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.loversQuarrel(textStyle: textTheme?.display4),
      display3: GoogleFonts.loversQuarrel(textStyle: textTheme?.display3),
      display2: GoogleFonts.loversQuarrel(textStyle: textTheme?.display2),
      display1: GoogleFonts.loversQuarrel(textStyle: textTheme?.display1),
      headline: GoogleFonts.loversQuarrel(textStyle: textTheme?.headline),
      title: GoogleFonts.loversQuarrel(textStyle: textTheme?.title),
      subhead: GoogleFonts.loversQuarrel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.loversQuarrel(textStyle: textTheme?.body2),
      body1: GoogleFonts.loversQuarrel(textStyle: textTheme?.body1),
      caption: GoogleFonts.loversQuarrel(textStyle: textTheme?.caption),
      button: GoogleFonts.loversQuarrel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.loversQuarrel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.loversQuarrel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Luckiest Guy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Luckiest+Guy
  static TextStyle luckiestGuy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6a9e5eaeb4d4b04aa5e82f16dabc4206d86d2981ac19d033b535be88d1a773e7',
        72952,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LuckiestGuy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Luckiest Guy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Luckiest+Guy
  static TextTheme luckiestGuyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.luckiestGuy(textStyle: textTheme?.display4),
      display3: GoogleFonts.luckiestGuy(textStyle: textTheme?.display3),
      display2: GoogleFonts.luckiestGuy(textStyle: textTheme?.display2),
      display1: GoogleFonts.luckiestGuy(textStyle: textTheme?.display1),
      headline: GoogleFonts.luckiestGuy(textStyle: textTheme?.headline),
      title: GoogleFonts.luckiestGuy(textStyle: textTheme?.title),
      subhead: GoogleFonts.luckiestGuy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.luckiestGuy(textStyle: textTheme?.body2),
      body1: GoogleFonts.luckiestGuy(textStyle: textTheme?.body1),
      caption: GoogleFonts.luckiestGuy(textStyle: textTheme?.caption),
      button: GoogleFonts.luckiestGuy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.luckiestGuy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.luckiestGuy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lusitana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lusitana
  static TextStyle lusitana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c6df963163bf20f6d3c7e20307b4e363715e13d9047b5707caa9407e11af4ebb',
        30140,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f5505e39683b141ee21482fcfc3818a5bb6f049abf15928c81caac05296eba18',
        29236,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lusitana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lusitana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lusitana
  static TextTheme lusitanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lusitana(textStyle: textTheme?.display4),
      display3: GoogleFonts.lusitana(textStyle: textTheme?.display3),
      display2: GoogleFonts.lusitana(textStyle: textTheme?.display2),
      display1: GoogleFonts.lusitana(textStyle: textTheme?.display1),
      headline: GoogleFonts.lusitana(textStyle: textTheme?.headline),
      title: GoogleFonts.lusitana(textStyle: textTheme?.title),
      subhead: GoogleFonts.lusitana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lusitana(textStyle: textTheme?.body2),
      body1: GoogleFonts.lusitana(textStyle: textTheme?.body1),
      caption: GoogleFonts.lusitana(textStyle: textTheme?.caption),
      button: GoogleFonts.lusitana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lusitana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lusitana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lustria font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lustria
  static TextStyle lustria({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba208c56243ec0aa08c1b911132f8649f5d87f93a699d115fbb59cf02e5bd636',
        37352,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lustria',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lustria font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lustria
  static TextTheme lustriaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lustria(textStyle: textTheme?.display4),
      display3: GoogleFonts.lustria(textStyle: textTheme?.display3),
      display2: GoogleFonts.lustria(textStyle: textTheme?.display2),
      display1: GoogleFonts.lustria(textStyle: textTheme?.display1),
      headline: GoogleFonts.lustria(textStyle: textTheme?.headline),
      title: GoogleFonts.lustria(textStyle: textTheme?.title),
      subhead: GoogleFonts.lustria(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lustria(textStyle: textTheme?.body2),
      body1: GoogleFonts.lustria(textStyle: textTheme?.body1),
      caption: GoogleFonts.lustria(textStyle: textTheme?.caption),
      button: GoogleFonts.lustria(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lustria(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lustria(textStyle: textTheme?.overline),
    );
  }

  /// Applies the M PLUS Rounded 1c font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/M+PLUS+Rounded+1c
  static TextStyle mPLUSRounded1c({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6d028025ec621f30d69f25f3b121f0eb6e4678e96d47f16d760f1fcf59248d2c',
        2899200,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8e6655c0fc1e40abbfe6631bef1b71cf55ed1f706c0d130fa9fc82cfb1a644c7',
        3284736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ff70cb1f3f4fe4691c6ec7c7725c4a0aa37e2d1fa2704d659c9efcd304a6bb24',
        3379736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a6066483cf3c5b68c17d69a4a957e9a50dbe366ac10cbf88a9f3776744ec5048',
        3422384,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c9070409f93c9e7a46a302d0205de1c15bdde3b59f65c32ff73315592afaf17e',
        3532232,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7b92c0902d7c3f543a4ecc04c44c8cf62f26c4bcc92ecb26e40ef9849277e61',
        3617848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cadad2376795cd1bcdaae984a16f1fef7e2f18ca27fd2493f32f620867a1ef05',
        3624724,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MPLUSRounded1c',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the M PLUS Rounded 1c font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/M+PLUS+Rounded+1c
  static TextTheme mPLUSRounded1cTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.display4),
      display3: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.display3),
      display2: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.display2),
      display1: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.display1),
      headline: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.headline),
      title: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.title),
      subhead: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.body2),
      body1: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.body1),
      caption: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.caption),
      button: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ma Shan Zheng font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ma+Shan+Zheng
  static TextStyle maShanZheng({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b09c8b63681f2770158618c3110f15aa53948e2ef43d7bcbee34cfe43cdfa646',
        5855516,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MaShanZheng',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ma Shan Zheng font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ma+Shan+Zheng
  static TextTheme maShanZhengTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.maShanZheng(textStyle: textTheme?.display4),
      display3: GoogleFonts.maShanZheng(textStyle: textTheme?.display3),
      display2: GoogleFonts.maShanZheng(textStyle: textTheme?.display2),
      display1: GoogleFonts.maShanZheng(textStyle: textTheme?.display1),
      headline: GoogleFonts.maShanZheng(textStyle: textTheme?.headline),
      title: GoogleFonts.maShanZheng(textStyle: textTheme?.title),
      subhead: GoogleFonts.maShanZheng(textStyle: textTheme?.subhead),
      body2: GoogleFonts.maShanZheng(textStyle: textTheme?.body2),
      body1: GoogleFonts.maShanZheng(textStyle: textTheme?.body1),
      caption: GoogleFonts.maShanZheng(textStyle: textTheme?.caption),
      button: GoogleFonts.maShanZheng(textStyle: textTheme?.button),
      subtitle: GoogleFonts.maShanZheng(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.maShanZheng(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Macondo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Macondo
  static TextStyle macondo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ecbf710a53864dd6307e2422a043a2a6904563df10226e7278fea2ef2d293dbd',
        48728,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Macondo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Macondo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Macondo
  static TextTheme macondoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.macondo(textStyle: textTheme?.display4),
      display3: GoogleFonts.macondo(textStyle: textTheme?.display3),
      display2: GoogleFonts.macondo(textStyle: textTheme?.display2),
      display1: GoogleFonts.macondo(textStyle: textTheme?.display1),
      headline: GoogleFonts.macondo(textStyle: textTheme?.headline),
      title: GoogleFonts.macondo(textStyle: textTheme?.title),
      subhead: GoogleFonts.macondo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.macondo(textStyle: textTheme?.body2),
      body1: GoogleFonts.macondo(textStyle: textTheme?.body1),
      caption: GoogleFonts.macondo(textStyle: textTheme?.caption),
      button: GoogleFonts.macondo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.macondo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.macondo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Macondo Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Macondo+Swash+Caps
  static TextStyle macondoSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4143af0ceceb156b80e5e2055d178d84cfca13b39056f49121b05c6b3843f1fd',
        32968,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MacondoSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Macondo Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Macondo+Swash+Caps
  static TextTheme macondoSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mada
  static TextStyle mada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9e8f4edc7b74697883d4382000502d7429481f7ccc59b65ac62c28e99481cbc3',
        40552,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4987425fde45e8da45ede3fad409b0ac00e32ca0255a60b44b8e1f701764346c',
        40352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9e3c24ab83037a6d4fc5b72d068caaa6a0767414bd20d7defe31c562ced6d6e7',
        40316,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c3e70bf71ab0557ddd82906726c36d89e199792db1997040b1599f61e00acd78',
        40136,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '052e0e0f174e9e8ff63bf2a85f70db6cc59d3391a016a31ace8e20c49d0fa0d6',
        40004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b94e1f9c917ae40e5e6b8d95fe24de1817e37942aafb9b9310d5e0d4b049221a',
        39924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7746a4ca1c6767a971c0db31ec18594fa5211adcc318e293d27b55efc36bded9',
        40036,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mada
  static TextTheme madaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mada(textStyle: textTheme?.display4),
      display3: GoogleFonts.mada(textStyle: textTheme?.display3),
      display2: GoogleFonts.mada(textStyle: textTheme?.display2),
      display1: GoogleFonts.mada(textStyle: textTheme?.display1),
      headline: GoogleFonts.mada(textStyle: textTheme?.headline),
      title: GoogleFonts.mada(textStyle: textTheme?.title),
      subhead: GoogleFonts.mada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mada(textStyle: textTheme?.body2),
      body1: GoogleFonts.mada(textStyle: textTheme?.body1),
      caption: GoogleFonts.mada(textStyle: textTheme?.caption),
      button: GoogleFonts.mada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Magra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Magra
  static TextStyle magra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9af41cbbd0f37a100cfb6828248fbfbac10111faefb7b379eb4d74092ebd2f8b',
        45488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ab81d03efbb8cfb766cdee7ef1e7333d196769ab264426971367541a4feee673',
        44452,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Magra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Magra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Magra
  static TextTheme magraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.magra(textStyle: textTheme?.display4),
      display3: GoogleFonts.magra(textStyle: textTheme?.display3),
      display2: GoogleFonts.magra(textStyle: textTheme?.display2),
      display1: GoogleFonts.magra(textStyle: textTheme?.display1),
      headline: GoogleFonts.magra(textStyle: textTheme?.headline),
      title: GoogleFonts.magra(textStyle: textTheme?.title),
      subhead: GoogleFonts.magra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.magra(textStyle: textTheme?.body2),
      body1: GoogleFonts.magra(textStyle: textTheme?.body1),
      caption: GoogleFonts.magra(textStyle: textTheme?.caption),
      button: GoogleFonts.magra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.magra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.magra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Maiden Orange font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maiden+Orange
  static TextStyle maidenOrange({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f4952dcb36962c7d3f35f54be08eb204ab4600cfc9afad59f213d36b5ff5e8e6',
        60316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MaidenOrange',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Maiden Orange font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maiden+Orange
  static TextTheme maidenOrangeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.maidenOrange(textStyle: textTheme?.display4),
      display3: GoogleFonts.maidenOrange(textStyle: textTheme?.display3),
      display2: GoogleFonts.maidenOrange(textStyle: textTheme?.display2),
      display1: GoogleFonts.maidenOrange(textStyle: textTheme?.display1),
      headline: GoogleFonts.maidenOrange(textStyle: textTheme?.headline),
      title: GoogleFonts.maidenOrange(textStyle: textTheme?.title),
      subhead: GoogleFonts.maidenOrange(textStyle: textTheme?.subhead),
      body2: GoogleFonts.maidenOrange(textStyle: textTheme?.body2),
      body1: GoogleFonts.maidenOrange(textStyle: textTheme?.body1),
      caption: GoogleFonts.maidenOrange(textStyle: textTheme?.caption),
      button: GoogleFonts.maidenOrange(textStyle: textTheme?.button),
      subtitle: GoogleFonts.maidenOrange(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.maidenOrange(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Maitree font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maitree
  static TextStyle maitree({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0739208db7083eb1320ec06ca68d5399840b972ed04401c338c373289f55ea74',
        123008,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '19f05ca05c789289a2d8b35a68f7d2eb186a1bdbb47ff7d630f96485b8d06f67',
        120308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'acbe712e2f0c98c52be38409f5b250521e6124b9af003a579b4c94e4e1ad0f49',
        121608,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '40f80d32ae82b7f67fe5a2ba972ccaecdf4b1cafee213b04baf2deb885eaf0a5',
        123172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fa9e3fc69089c2a19cf33871b62432a04f1b7d8bbb7faa0150665802ed267f0e',
        124716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0dd3d4080658f7cdb11b91c35ec62b8ff94caac9d5808f03343f66556b2f0ed9',
        126316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Maitree',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Maitree font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maitree
  static TextTheme maitreeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.maitree(textStyle: textTheme?.display4),
      display3: GoogleFonts.maitree(textStyle: textTheme?.display3),
      display2: GoogleFonts.maitree(textStyle: textTheme?.display2),
      display1: GoogleFonts.maitree(textStyle: textTheme?.display1),
      headline: GoogleFonts.maitree(textStyle: textTheme?.headline),
      title: GoogleFonts.maitree(textStyle: textTheme?.title),
      subhead: GoogleFonts.maitree(textStyle: textTheme?.subhead),
      body2: GoogleFonts.maitree(textStyle: textTheme?.body2),
      body1: GoogleFonts.maitree(textStyle: textTheme?.body1),
      caption: GoogleFonts.maitree(textStyle: textTheme?.caption),
      button: GoogleFonts.maitree(textStyle: textTheme?.button),
      subtitle: GoogleFonts.maitree(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.maitree(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Major Mono Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Major+Mono+Display
  static TextStyle majorMonoDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9901077f5681d4ec7e01e0ebe4bd61ba47669c64a7aedea472cd94fe1175751b',
        73196,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MajorMonoDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Major Mono Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Major+Mono+Display
  static TextTheme majorMonoDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mako font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mako
  static TextStyle mako({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'db4609e335050755bb95ce1a179f4666e1a93d3fac9c679e99d96b472582d0a1',
        64280,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mako',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mako font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mako
  static TextTheme makoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mako(textStyle: textTheme?.display4),
      display3: GoogleFonts.mako(textStyle: textTheme?.display3),
      display2: GoogleFonts.mako(textStyle: textTheme?.display2),
      display1: GoogleFonts.mako(textStyle: textTheme?.display1),
      headline: GoogleFonts.mako(textStyle: textTheme?.headline),
      title: GoogleFonts.mako(textStyle: textTheme?.title),
      subhead: GoogleFonts.mako(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mako(textStyle: textTheme?.body2),
      body1: GoogleFonts.mako(textStyle: textTheme?.body1),
      caption: GoogleFonts.mako(textStyle: textTheme?.caption),
      button: GoogleFonts.mako(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mako(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mako(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mali font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mali
  static TextStyle mali({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e492669e95f03389c8fdab60ebc0fc25dc89f921dfa3b4156ed4ee3556b26a22',
        104192,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9c4049d3990bfb82d515b0f6b44c0669352cf1d4f0ad71a6c39c4d800d91afc5',
        107084,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7ea3a4d356e5cb938ea97489c60b148dd2e33b9bdc641f01c245b965a8028725',
        104400,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4aec4ec351696e4bc5a49deed841e02a84880d0fdc72dafdedce7154770dd8d0',
        107256,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cc1fb36bca8387ebe3fdb1a9052a01ed8312a51a3ac265b51d93b7a6bf6ae45c',
        104480,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '575418ad9604b624f1d09cbaa0d15edbdec2653423419c83fae61131d0f0fdc5',
        107544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '56baed7152d5e08635cc8a9e3a241afd0e7659f30374cb82033266959d273382',
        104528,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd1e4f0963402e82a0e541cc7ff0d371c1311270840c7059b94bd710b0953210a',
        107536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3d34348744efcb7d239f7d07237bf644507c1d98545de940f5e36475267d7937',
        104580,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '56a65ebf56f24e0082786c224207d28f9e3ac7d58473839ef4e014f58dddc92e',
        107532,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7d22887c912c6d24c96e8a7bd85a8bec285b2f6e82cb0f1239c7d62df8d66db1',
        103972,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0cf0f0229db8cba537f46efd1c9a4734268f6011e5e10fc1ad8981849edfc421',
        107396,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mali',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mali font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mali
  static TextTheme maliTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mali(textStyle: textTheme?.display4),
      display3: GoogleFonts.mali(textStyle: textTheme?.display3),
      display2: GoogleFonts.mali(textStyle: textTheme?.display2),
      display1: GoogleFonts.mali(textStyle: textTheme?.display1),
      headline: GoogleFonts.mali(textStyle: textTheme?.headline),
      title: GoogleFonts.mali(textStyle: textTheme?.title),
      subhead: GoogleFonts.mali(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mali(textStyle: textTheme?.body2),
      body1: GoogleFonts.mali(textStyle: textTheme?.body1),
      caption: GoogleFonts.mali(textStyle: textTheme?.caption),
      button: GoogleFonts.mali(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mali(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mali(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mallanna font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mallanna
  static TextStyle mallanna({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '81feb01d40b2b7875e496dde6320f6af4ca381b03d376608ba5d8f9a8eb72db4',
        359540,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mallanna',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mallanna font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mallanna
  static TextTheme mallannaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mallanna(textStyle: textTheme?.display4),
      display3: GoogleFonts.mallanna(textStyle: textTheme?.display3),
      display2: GoogleFonts.mallanna(textStyle: textTheme?.display2),
      display1: GoogleFonts.mallanna(textStyle: textTheme?.display1),
      headline: GoogleFonts.mallanna(textStyle: textTheme?.headline),
      title: GoogleFonts.mallanna(textStyle: textTheme?.title),
      subhead: GoogleFonts.mallanna(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mallanna(textStyle: textTheme?.body2),
      body1: GoogleFonts.mallanna(textStyle: textTheme?.body1),
      caption: GoogleFonts.mallanna(textStyle: textTheme?.caption),
      button: GoogleFonts.mallanna(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mallanna(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mallanna(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mandali font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mandali
  static TextStyle mandali({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bf8fcb272aa15d749c2b5a6660a64af1b0014a47b0fe3ed3394e761ce7637f1d',
        368992,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mandali',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mandali font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mandali
  static TextTheme mandaliTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mandali(textStyle: textTheme?.display4),
      display3: GoogleFonts.mandali(textStyle: textTheme?.display3),
      display2: GoogleFonts.mandali(textStyle: textTheme?.display2),
      display1: GoogleFonts.mandali(textStyle: textTheme?.display1),
      headline: GoogleFonts.mandali(textStyle: textTheme?.headline),
      title: GoogleFonts.mandali(textStyle: textTheme?.title),
      subhead: GoogleFonts.mandali(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mandali(textStyle: textTheme?.body2),
      body1: GoogleFonts.mandali(textStyle: textTheme?.body1),
      caption: GoogleFonts.mandali(textStyle: textTheme?.caption),
      button: GoogleFonts.mandali(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mandali(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mandali(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Manjari font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Manjari
  static TextStyle manjari({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bf27671bb835dda0357f930bf36e8187a3b84c55eee29c45942c1f24658669b6',
        136496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1f336f99d4a94b987c207d844c5dcf944f0499c38fa5136e75debe864ea9cb43',
        136428,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3679ad318e4f3587d288eeeedd62d875b904a491a6163aecc418b38e359be2d4',
        135944,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Manjari',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Manjari font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Manjari
  static TextTheme manjariTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.manjari(textStyle: textTheme?.display4),
      display3: GoogleFonts.manjari(textStyle: textTheme?.display3),
      display2: GoogleFonts.manjari(textStyle: textTheme?.display2),
      display1: GoogleFonts.manjari(textStyle: textTheme?.display1),
      headline: GoogleFonts.manjari(textStyle: textTheme?.headline),
      title: GoogleFonts.manjari(textStyle: textTheme?.title),
      subhead: GoogleFonts.manjari(textStyle: textTheme?.subhead),
      body2: GoogleFonts.manjari(textStyle: textTheme?.body2),
      body1: GoogleFonts.manjari(textStyle: textTheme?.body1),
      caption: GoogleFonts.manjari(textStyle: textTheme?.caption),
      button: GoogleFonts.manjari(textStyle: textTheme?.button),
      subtitle: GoogleFonts.manjari(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.manjari(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Manuale font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Manuale
  static TextStyle manuale({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cfd06fa1d33d937fd3d097835096788da1e29fe217c0e6619d7f4e92770987f2',
        91676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b7144bb9db9fc28df1a2f22173a91396c535d078a58256b0937d0ed4916ac08d',
        96700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bee63de104b5fab81c246551830fd9cf2910da15ffb1fe837913493df2612797',
        94432,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b9d7d38e3301e49ed48cee4bdbfdf8bf85004f299e7d33795cc55fad29b5406f',
        101664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1b0e482a58bde31d3c0408ea84a5ce8287b1669e24bb7e75648b20ee859ade8b',
        94576,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '023ded306bfcddff115b0b04ed36de8a5184275774cd972ce1fb34d8d917c61e',
        101776,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '50014d6214dc09001362c4e4a770de808a95fc3f590d52d895c9eef86b71d68a',
        91536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2a59ed27fb6985f70acb9fc94d9038ae63cfc4a2ddc5226dfecb7c8407b5a93f',
        96612,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Manuale',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Manuale font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Manuale
  static TextTheme manualeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.manuale(textStyle: textTheme?.display4),
      display3: GoogleFonts.manuale(textStyle: textTheme?.display3),
      display2: GoogleFonts.manuale(textStyle: textTheme?.display2),
      display1: GoogleFonts.manuale(textStyle: textTheme?.display1),
      headline: GoogleFonts.manuale(textStyle: textTheme?.headline),
      title: GoogleFonts.manuale(textStyle: textTheme?.title),
      subhead: GoogleFonts.manuale(textStyle: textTheme?.subhead),
      body2: GoogleFonts.manuale(textStyle: textTheme?.body2),
      body1: GoogleFonts.manuale(textStyle: textTheme?.body1),
      caption: GoogleFonts.manuale(textStyle: textTheme?.caption),
      button: GoogleFonts.manuale(textStyle: textTheme?.button),
      subtitle: GoogleFonts.manuale(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.manuale(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marcellus font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marcellus
  static TextStyle marcellus({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'da6549c2bc3ceec2f36d4caac4758fda610e67ff654b4c90304b83b55ee36084',
        45588,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Marcellus',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marcellus font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marcellus
  static TextTheme marcellusTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marcellus(textStyle: textTheme?.display4),
      display3: GoogleFonts.marcellus(textStyle: textTheme?.display3),
      display2: GoogleFonts.marcellus(textStyle: textTheme?.display2),
      display1: GoogleFonts.marcellus(textStyle: textTheme?.display1),
      headline: GoogleFonts.marcellus(textStyle: textTheme?.headline),
      title: GoogleFonts.marcellus(textStyle: textTheme?.title),
      subhead: GoogleFonts.marcellus(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marcellus(textStyle: textTheme?.body2),
      body1: GoogleFonts.marcellus(textStyle: textTheme?.body1),
      caption: GoogleFonts.marcellus(textStyle: textTheme?.caption),
      button: GoogleFonts.marcellus(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marcellus(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marcellus(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marcellus SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marcellus+SC
  static TextStyle marcellusSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7c5ce48eb9c8ceab009d792056be549983c1b1322fca2784a6e75e7579b347f9',
        47472,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MarcellusSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marcellus SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marcellus+SC
  static TextTheme marcellusSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marcellusSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.marcellusSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.marcellusSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.marcellusSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.marcellusSC(textStyle: textTheme?.headline),
      title: GoogleFonts.marcellusSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.marcellusSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marcellusSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.marcellusSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.marcellusSC(textStyle: textTheme?.caption),
      button: GoogleFonts.marcellusSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marcellusSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marcellusSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marck Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marck+Script
  static TextStyle marckScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f111edb73a2a290328fb706396fd239519a491528780e18030fc8b0265a1b669',
        83616,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MarckScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marck Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marck+Script
  static TextTheme marckScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marckScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.marckScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.marckScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.marckScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.marckScript(textStyle: textTheme?.headline),
      title: GoogleFonts.marckScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.marckScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marckScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.marckScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.marckScript(textStyle: textTheme?.caption),
      button: GoogleFonts.marckScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marckScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marckScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Margarine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Margarine
  static TextStyle margarine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '86d801ed5c2e92441a7292c5dd8599a87757c63d0c8723543bcd44b504f37776',
        148404,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Margarine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Margarine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Margarine
  static TextTheme margarineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.margarine(textStyle: textTheme?.display4),
      display3: GoogleFonts.margarine(textStyle: textTheme?.display3),
      display2: GoogleFonts.margarine(textStyle: textTheme?.display2),
      display1: GoogleFonts.margarine(textStyle: textTheme?.display1),
      headline: GoogleFonts.margarine(textStyle: textTheme?.headline),
      title: GoogleFonts.margarine(textStyle: textTheme?.title),
      subhead: GoogleFonts.margarine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.margarine(textStyle: textTheme?.body2),
      body1: GoogleFonts.margarine(textStyle: textTheme?.body1),
      caption: GoogleFonts.margarine(textStyle: textTheme?.caption),
      button: GoogleFonts.margarine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.margarine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.margarine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marko One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marko+One
  static TextStyle markoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f84b713ecebd47ffa67dc6fea96096b65f6a1abfb9819f1014a1ed0d1a4c1455',
        34436,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MarkoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marko One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marko+One
  static TextTheme markoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.markoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.markoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.markoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.markoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.markoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.markoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.markoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.markoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.markoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.markoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.markoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.markoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.markoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marmelad font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marmelad
  static TextStyle marmelad({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d26c08790a329b7df0bf3cd14c6102856d22040c14545f72c05a2f1f47633d6',
        64620,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Marmelad',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marmelad font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marmelad
  static TextTheme marmeladTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marmelad(textStyle: textTheme?.display4),
      display3: GoogleFonts.marmelad(textStyle: textTheme?.display3),
      display2: GoogleFonts.marmelad(textStyle: textTheme?.display2),
      display1: GoogleFonts.marmelad(textStyle: textTheme?.display1),
      headline: GoogleFonts.marmelad(textStyle: textTheme?.headline),
      title: GoogleFonts.marmelad(textStyle: textTheme?.title),
      subhead: GoogleFonts.marmelad(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marmelad(textStyle: textTheme?.body2),
      body1: GoogleFonts.marmelad(textStyle: textTheme?.body1),
      caption: GoogleFonts.marmelad(textStyle: textTheme?.caption),
      button: GoogleFonts.marmelad(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marmelad(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marmelad(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Martel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Martel
  static TextStyle martel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c4024da71647bc66c6880037b41d29ad5ae7b5426518ad225ee14562d6dae75a',
        120120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '138cff935a5284819d91b6908fed6fc1cb770eddf8d812c17ef1dc6092010fb9',
        121516,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0bd68a5be6ee9107bc21ade86bd0199d47d96c7895a7a1c2c3080377779b268a',
        121136,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd22af0f3a51da296280637f9124f2579cf8b495c74ce080f84aca6ad6c12c889',
        120600,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5b81175087fcd5061785115771a9e1c7ab3c69ca0de682426b8338a372e23153',
        120924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3e03eaab1b6ec761214d4dc76edf835a3eafc1c7170942a240f46c25a571bd41',
        121552,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8d00654db8f5901e4a51129ff21160fe34513ff2284309ccd0b00cc79684c7cb',
        114876,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Martel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Martel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Martel
  static TextTheme martelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.martel(textStyle: textTheme?.display4),
      display3: GoogleFonts.martel(textStyle: textTheme?.display3),
      display2: GoogleFonts.martel(textStyle: textTheme?.display2),
      display1: GoogleFonts.martel(textStyle: textTheme?.display1),
      headline: GoogleFonts.martel(textStyle: textTheme?.headline),
      title: GoogleFonts.martel(textStyle: textTheme?.title),
      subhead: GoogleFonts.martel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.martel(textStyle: textTheme?.body2),
      body1: GoogleFonts.martel(textStyle: textTheme?.body1),
      caption: GoogleFonts.martel(textStyle: textTheme?.caption),
      button: GoogleFonts.martel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.martel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.martel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Martel Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Martel+Sans
  static TextStyle martelSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1fc958d478da9b8b19e77c989d4fb6dbbd2f412a15b122ba72a2b11ee450907f',
        107308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2115f8757576a27c80ccede4ba84e8febb53a0ec9f63840ab713b4d5e848f950',
        107084,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f782be9e1cecfb4c75dd0bb7a8d88dce2794738a35bf5532079d99d4d529502d',
        107068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '52f4a456d3927808cd2aa64f46cd6d63f7a938b904b289f66ab69c0db2e884a7',
        106336,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fcf8c1bb73f62f8c3e86ed5126daf3eb4ee130c49e70f7ebdcaf27ae635bfc1b',
        106340,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0860874935148b1b8ffd9705d6ccef02322d3972a1bf7a38e63a65cf542e6395',
        106224,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9145c71bcab8472ba22b19f9e4e898639945be5fed13f10cd4d399fd5eac5a83',
        105840,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MartelSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Martel Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Martel+Sans
  static TextTheme martelSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.martelSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.martelSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.martelSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.martelSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.martelSans(textStyle: textTheme?.headline),
      title: GoogleFonts.martelSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.martelSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.martelSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.martelSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.martelSans(textStyle: textTheme?.caption),
      button: GoogleFonts.martelSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.martelSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.martelSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marvel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marvel
  static TextStyle marvel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3762fad5facc07dfebad111a683192dbddb8dc02a4a43406d2c79a4303b11b95',
        38196,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'aaf0a4ec8425cfad4c7d8c41f37da8d7de878baf6fe877de46e9bb6a21afa443',
        40644,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '84edf56bb5528f4a5a646cc54e1df7f8b8f0acfcab08ba176e2140d05e3576dc',
        36944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3b41fd323f8f2702af4eac210e3a7aaccc576298b28256bf11c98cba436c90c9',
        40056,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Marvel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marvel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marvel
  static TextTheme marvelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marvel(textStyle: textTheme?.display4),
      display3: GoogleFonts.marvel(textStyle: textTheme?.display3),
      display2: GoogleFonts.marvel(textStyle: textTheme?.display2),
      display1: GoogleFonts.marvel(textStyle: textTheme?.display1),
      headline: GoogleFonts.marvel(textStyle: textTheme?.headline),
      title: GoogleFonts.marvel(textStyle: textTheme?.title),
      subhead: GoogleFonts.marvel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marvel(textStyle: textTheme?.body2),
      body1: GoogleFonts.marvel(textStyle: textTheme?.body1),
      caption: GoogleFonts.marvel(textStyle: textTheme?.caption),
      button: GoogleFonts.marvel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marvel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marvel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mate
  static TextStyle mate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5701b2952429c600058781ef4db8a7525ee3bfcdc98015ed08588eff40647848',
        28168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '30cd036adcb37680b470e2671c3973733f6900c1cc99419e1fde6201aa100018',
        27660,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mate
  static TextTheme mateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mate(textStyle: textTheme?.display4),
      display3: GoogleFonts.mate(textStyle: textTheme?.display3),
      display2: GoogleFonts.mate(textStyle: textTheme?.display2),
      display1: GoogleFonts.mate(textStyle: textTheme?.display1),
      headline: GoogleFonts.mate(textStyle: textTheme?.headline),
      title: GoogleFonts.mate(textStyle: textTheme?.title),
      subhead: GoogleFonts.mate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mate(textStyle: textTheme?.body2),
      body1: GoogleFonts.mate(textStyle: textTheme?.body1),
      caption: GoogleFonts.mate(textStyle: textTheme?.caption),
      button: GoogleFonts.mate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mate SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mate+SC
  static TextStyle mateSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9105b12c369a593ea31abf9530db6e89458635e2c5584c36d4e9af55177be4b8',
        29808,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MateSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mate SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mate+SC
  static TextTheme mateSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mateSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.mateSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.mateSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.mateSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.mateSC(textStyle: textTheme?.headline),
      title: GoogleFonts.mateSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.mateSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mateSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.mateSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.mateSC(textStyle: textTheme?.caption),
      button: GoogleFonts.mateSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mateSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mateSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Maven Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maven+Pro
  static TextStyle mavenPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '20ff29ac0e19858eec2689ee81f18e45489d0afec4b61a21036d0c755edafcd7',
        60872,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'afd784d77bd20f7e76864636023d94a988f8732c47ec791f79d096b11d1c327c',
        61472,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1f1c606af4cb59fd55c5e9d478e3c109eb47ee3c48c458ab10edcbcde15f0562',
        61364,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9a922f263eff247f7ccc3823865c2b9241e10c305b6c64b3754dbb06ce6b5e33',
        60948,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MavenPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Maven Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maven+Pro
  static TextTheme mavenProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mavenPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.mavenPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.mavenPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.mavenPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.mavenPro(textStyle: textTheme?.headline),
      title: GoogleFonts.mavenPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.mavenPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mavenPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.mavenPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.mavenPro(textStyle: textTheme?.caption),
      button: GoogleFonts.mavenPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mavenPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mavenPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the McLaren font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/McLaren
  static TextStyle mcLaren({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ca48a5e17b0201057453d49c4271d139e5824b553505ad1c6fbbd7cbbbf4d1dc',
        54088,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'McLaren',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the McLaren font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/McLaren
  static TextTheme mcLarenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mcLaren(textStyle: textTheme?.display4),
      display3: GoogleFonts.mcLaren(textStyle: textTheme?.display3),
      display2: GoogleFonts.mcLaren(textStyle: textTheme?.display2),
      display1: GoogleFonts.mcLaren(textStyle: textTheme?.display1),
      headline: GoogleFonts.mcLaren(textStyle: textTheme?.headline),
      title: GoogleFonts.mcLaren(textStyle: textTheme?.title),
      subhead: GoogleFonts.mcLaren(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mcLaren(textStyle: textTheme?.body2),
      body1: GoogleFonts.mcLaren(textStyle: textTheme?.body1),
      caption: GoogleFonts.mcLaren(textStyle: textTheme?.caption),
      button: GoogleFonts.mcLaren(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mcLaren(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mcLaren(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Meddon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meddon
  static TextStyle meddon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '50d2aafad12ffd4c696c904a7fdfa8fa855a6edc2d671fdd64af6375a052029e',
        79884,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Meddon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Meddon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meddon
  static TextTheme meddonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.meddon(textStyle: textTheme?.display4),
      display3: GoogleFonts.meddon(textStyle: textTheme?.display3),
      display2: GoogleFonts.meddon(textStyle: textTheme?.display2),
      display1: GoogleFonts.meddon(textStyle: textTheme?.display1),
      headline: GoogleFonts.meddon(textStyle: textTheme?.headline),
      title: GoogleFonts.meddon(textStyle: textTheme?.title),
      subhead: GoogleFonts.meddon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.meddon(textStyle: textTheme?.body2),
      body1: GoogleFonts.meddon(textStyle: textTheme?.body1),
      caption: GoogleFonts.meddon(textStyle: textTheme?.caption),
      button: GoogleFonts.meddon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.meddon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.meddon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the MedievalSharp font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/MedievalSharp
  static TextStyle medievalSharp({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '93afbe692f662b93c6faf17b061d07ad7b343db38496d49e05bc31fcfaf585ae',
        71108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MedievalSharp',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the MedievalSharp font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/MedievalSharp
  static TextTheme medievalSharpTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.medievalSharp(textStyle: textTheme?.display4),
      display3: GoogleFonts.medievalSharp(textStyle: textTheme?.display3),
      display2: GoogleFonts.medievalSharp(textStyle: textTheme?.display2),
      display1: GoogleFonts.medievalSharp(textStyle: textTheme?.display1),
      headline: GoogleFonts.medievalSharp(textStyle: textTheme?.headline),
      title: GoogleFonts.medievalSharp(textStyle: textTheme?.title),
      subhead: GoogleFonts.medievalSharp(textStyle: textTheme?.subhead),
      body2: GoogleFonts.medievalSharp(textStyle: textTheme?.body2),
      body1: GoogleFonts.medievalSharp(textStyle: textTheme?.body1),
      caption: GoogleFonts.medievalSharp(textStyle: textTheme?.caption),
      button: GoogleFonts.medievalSharp(textStyle: textTheme?.button),
      subtitle: GoogleFonts.medievalSharp(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.medievalSharp(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Medula One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Medula+One
  static TextStyle medulaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '01411348aab468ebfca2f176a931010b30ec982ff382993310e5cc4d65e49904',
        33636,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MedulaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Medula One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Medula+One
  static TextTheme medulaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.medulaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.medulaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.medulaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.medulaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.medulaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.medulaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.medulaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.medulaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.medulaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.medulaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.medulaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.medulaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.medulaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Meera Inimai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meera+Inimai
  static TextStyle meeraInimai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '199785360f92220660b6a90e66afd8907c31df21ef4e4470e2af99c968017208',
        72272,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MeeraInimai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Meera Inimai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meera+Inimai
  static TextTheme meeraInimaiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.meeraInimai(textStyle: textTheme?.display4),
      display3: GoogleFonts.meeraInimai(textStyle: textTheme?.display3),
      display2: GoogleFonts.meeraInimai(textStyle: textTheme?.display2),
      display1: GoogleFonts.meeraInimai(textStyle: textTheme?.display1),
      headline: GoogleFonts.meeraInimai(textStyle: textTheme?.headline),
      title: GoogleFonts.meeraInimai(textStyle: textTheme?.title),
      subhead: GoogleFonts.meeraInimai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.meeraInimai(textStyle: textTheme?.body2),
      body1: GoogleFonts.meeraInimai(textStyle: textTheme?.body1),
      caption: GoogleFonts.meeraInimai(textStyle: textTheme?.caption),
      button: GoogleFonts.meeraInimai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.meeraInimai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.meeraInimai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Megrim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Megrim
  static TextStyle megrim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'af75cd9219b5b5df8c1ebc7dff3232935d81325c33d502dfabc83f32a310831d',
        32164,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Megrim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Megrim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Megrim
  static TextTheme megrimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.megrim(textStyle: textTheme?.display4),
      display3: GoogleFonts.megrim(textStyle: textTheme?.display3),
      display2: GoogleFonts.megrim(textStyle: textTheme?.display2),
      display1: GoogleFonts.megrim(textStyle: textTheme?.display1),
      headline: GoogleFonts.megrim(textStyle: textTheme?.headline),
      title: GoogleFonts.megrim(textStyle: textTheme?.title),
      subhead: GoogleFonts.megrim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.megrim(textStyle: textTheme?.body2),
      body1: GoogleFonts.megrim(textStyle: textTheme?.body1),
      caption: GoogleFonts.megrim(textStyle: textTheme?.caption),
      button: GoogleFonts.megrim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.megrim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.megrim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Meie Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meie+Script
  static TextStyle meieScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aefe23d9bdd07bdf03debfd770abb2ea2f50634e5b0803593abf3eb0b9a784c4',
        53640,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MeieScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Meie Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meie+Script
  static TextTheme meieScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.meieScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.meieScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.meieScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.meieScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.meieScript(textStyle: textTheme?.headline),
      title: GoogleFonts.meieScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.meieScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.meieScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.meieScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.meieScript(textStyle: textTheme?.caption),
      button: GoogleFonts.meieScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.meieScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.meieScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Merienda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merienda
  static TextStyle merienda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1132399bc1f3e2caf41c69cc4f7c590c83da549f8e9b8cf43dadc262df733048',
        41028,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5f177984e147fff648e2e2bd9ca6e74e13c2be2d6d14b466b154b51e93df5f14',
        34984,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Merienda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Merienda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merienda
  static TextTheme meriendaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.merienda(textStyle: textTheme?.display4),
      display3: GoogleFonts.merienda(textStyle: textTheme?.display3),
      display2: GoogleFonts.merienda(textStyle: textTheme?.display2),
      display1: GoogleFonts.merienda(textStyle: textTheme?.display1),
      headline: GoogleFonts.merienda(textStyle: textTheme?.headline),
      title: GoogleFonts.merienda(textStyle: textTheme?.title),
      subhead: GoogleFonts.merienda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.merienda(textStyle: textTheme?.body2),
      body1: GoogleFonts.merienda(textStyle: textTheme?.body1),
      caption: GoogleFonts.merienda(textStyle: textTheme?.caption),
      button: GoogleFonts.merienda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.merienda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.merienda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Merienda One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merienda+One
  static TextStyle meriendaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aa4c2d33606a440380daab12052cc4b38ac64de26f9dc46de18e3405571ea638',
        30500,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MeriendaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Merienda One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merienda+One
  static TextTheme meriendaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.meriendaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.meriendaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.meriendaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.meriendaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.meriendaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.meriendaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.meriendaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.meriendaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.meriendaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.meriendaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.meriendaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.meriendaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.meriendaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Merriweather font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merriweather
  static TextStyle merriweather({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8e88a5324d8b8b44503a016700f8509fb935a78d5668c821daa0092bfea21493',
        73036,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '328531f24df7325999a988ae9020486990b3f719e0380ebc4c92287bf487a8ff',
        77736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7c2d3ddfee4c635410c77868a5443efcbf7f660b64d159ba2cbd7d03f43e02f3',
        74308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ec0e385dcae93a7bfa85adcf27ca8465f179fba9a112e05f07384561b29a4b1a',
        77292,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '853dd62f5464fdb7677eeceedf17f771b710501d4fb15dd7076912d7430e92e3',
        73672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'acca91ffc59368ee6894a41c9c417f5d2ec9f03c2c181b8e90013e49a401caf4',
        77196,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aeb362f6ad7c32d24b6a96265394b98c1da77b6620d79ecace57a083ff21c9d2',
        74176,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c6aef6fa65ac3afe1f4e813c13cc623329ddae356f8fa330370e3f1cd754f928',
        76980,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Merriweather',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Merriweather font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merriweather
  static TextTheme merriweatherTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.merriweather(textStyle: textTheme?.display4),
      display3: GoogleFonts.merriweather(textStyle: textTheme?.display3),
      display2: GoogleFonts.merriweather(textStyle: textTheme?.display2),
      display1: GoogleFonts.merriweather(textStyle: textTheme?.display1),
      headline: GoogleFonts.merriweather(textStyle: textTheme?.headline),
      title: GoogleFonts.merriweather(textStyle: textTheme?.title),
      subhead: GoogleFonts.merriweather(textStyle: textTheme?.subhead),
      body2: GoogleFonts.merriweather(textStyle: textTheme?.body2),
      body1: GoogleFonts.merriweather(textStyle: textTheme?.body1),
      caption: GoogleFonts.merriweather(textStyle: textTheme?.caption),
      button: GoogleFonts.merriweather(textStyle: textTheme?.button),
      subtitle: GoogleFonts.merriweather(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.merriweather(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Merriweather Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merriweather+Sans
  static TextStyle merriweatherSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f616380e06211b4f761656da4fa581a7d0342e10ef56f5be45bee9306dfc3a9b',
        41572,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '05ca1d14a17191d43a6d7622e29059462800af4da0f507c95243b2bad8fa630c',
        42068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6bed429e28f419d7f2a83544104f8c0561a37b088ae9f84c2bcd7400c2589dea',
        41204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2064c7a30f875f7364657c94031f67a4ec37225a03e604d81190ef884df6b744',
        41616,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fa38d2e5c8adaa4e200490a344d5cf28495405d0d83c6a0620bef8510853c9ac',
        41152,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5c33c69255f4345f6510aeb92fb1edd05495c99313368face8b8c9f996bf5545',
        41752,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '344758d11e4f83c18b0998f11d76dfc215dabfffa863207739c8a99248ec5f89',
        41740,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '45321dfdc3c655bfed2b7abc7fb30131d49e307233bf42d8a8d477135890fc04',
        42420,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MerriweatherSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Merriweather Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merriweather+Sans
  static TextTheme merriweatherSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.merriweatherSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.merriweatherSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.merriweatherSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.merriweatherSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.merriweatherSans(textStyle: textTheme?.headline),
      title: GoogleFonts.merriweatherSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.merriweatherSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.merriweatherSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.merriweatherSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.merriweatherSans(textStyle: textTheme?.caption),
      button: GoogleFonts.merriweatherSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.merriweatherSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.merriweatherSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Metal Mania font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metal+Mania
  static TextStyle metalMania({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9495d91ee2029ca622be05cf5924ab5d44a3f54809cb02e792987386e0ba2265',
        215332,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MetalMania',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Metal Mania font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metal+Mania
  static TextTheme metalManiaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.metalMania(textStyle: textTheme?.display4),
      display3: GoogleFonts.metalMania(textStyle: textTheme?.display3),
      display2: GoogleFonts.metalMania(textStyle: textTheme?.display2),
      display1: GoogleFonts.metalMania(textStyle: textTheme?.display1),
      headline: GoogleFonts.metalMania(textStyle: textTheme?.headline),
      title: GoogleFonts.metalMania(textStyle: textTheme?.title),
      subhead: GoogleFonts.metalMania(textStyle: textTheme?.subhead),
      body2: GoogleFonts.metalMania(textStyle: textTheme?.body2),
      body1: GoogleFonts.metalMania(textStyle: textTheme?.body1),
      caption: GoogleFonts.metalMania(textStyle: textTheme?.caption),
      button: GoogleFonts.metalMania(textStyle: textTheme?.button),
      subtitle: GoogleFonts.metalMania(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.metalMania(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Metamorphous font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metamorphous
  static TextStyle metamorphous({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '83d03fe24f83517affbc43ea6f81ba72a2accf111f2e33ccc4cfe1a857789185',
        68972,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Metamorphous',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Metamorphous font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metamorphous
  static TextTheme metamorphousTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.metamorphous(textStyle: textTheme?.display4),
      display3: GoogleFonts.metamorphous(textStyle: textTheme?.display3),
      display2: GoogleFonts.metamorphous(textStyle: textTheme?.display2),
      display1: GoogleFonts.metamorphous(textStyle: textTheme?.display1),
      headline: GoogleFonts.metamorphous(textStyle: textTheme?.headline),
      title: GoogleFonts.metamorphous(textStyle: textTheme?.title),
      subhead: GoogleFonts.metamorphous(textStyle: textTheme?.subhead),
      body2: GoogleFonts.metamorphous(textStyle: textTheme?.body2),
      body1: GoogleFonts.metamorphous(textStyle: textTheme?.body1),
      caption: GoogleFonts.metamorphous(textStyle: textTheme?.caption),
      button: GoogleFonts.metamorphous(textStyle: textTheme?.button),
      subtitle: GoogleFonts.metamorphous(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.metamorphous(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Metrophobic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metrophobic
  static TextStyle metrophobic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fba0d5a8f2ffaa5c02bcfc5580a50f6b1dac80580d8d3a77073e6a74aa189b5c',
        30912,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Metrophobic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Metrophobic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metrophobic
  static TextTheme metrophobicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.metrophobic(textStyle: textTheme?.display4),
      display3: GoogleFonts.metrophobic(textStyle: textTheme?.display3),
      display2: GoogleFonts.metrophobic(textStyle: textTheme?.display2),
      display1: GoogleFonts.metrophobic(textStyle: textTheme?.display1),
      headline: GoogleFonts.metrophobic(textStyle: textTheme?.headline),
      title: GoogleFonts.metrophobic(textStyle: textTheme?.title),
      subhead: GoogleFonts.metrophobic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.metrophobic(textStyle: textTheme?.body2),
      body1: GoogleFonts.metrophobic(textStyle: textTheme?.body1),
      caption: GoogleFonts.metrophobic(textStyle: textTheme?.caption),
      button: GoogleFonts.metrophobic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.metrophobic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.metrophobic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Michroma font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Michroma
  static TextStyle michroma({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5799106e7f554ca9657d0f56c31b6babe55b321aefea779d8eae0c68dec1fd03',
        46924,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Michroma',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Michroma font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Michroma
  static TextTheme michromaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.michroma(textStyle: textTheme?.display4),
      display3: GoogleFonts.michroma(textStyle: textTheme?.display3),
      display2: GoogleFonts.michroma(textStyle: textTheme?.display2),
      display1: GoogleFonts.michroma(textStyle: textTheme?.display1),
      headline: GoogleFonts.michroma(textStyle: textTheme?.headline),
      title: GoogleFonts.michroma(textStyle: textTheme?.title),
      subhead: GoogleFonts.michroma(textStyle: textTheme?.subhead),
      body2: GoogleFonts.michroma(textStyle: textTheme?.body2),
      body1: GoogleFonts.michroma(textStyle: textTheme?.body1),
      caption: GoogleFonts.michroma(textStyle: textTheme?.caption),
      button: GoogleFonts.michroma(textStyle: textTheme?.button),
      subtitle: GoogleFonts.michroma(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.michroma(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Milonga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Milonga
  static TextStyle milonga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0754de34c73ed1446cebd4a2c6594cd4e24a2b8cd3512ad6e0d157285e9c2f7f',
        128132,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Milonga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Milonga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Milonga
  static TextTheme milongaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.milonga(textStyle: textTheme?.display4),
      display3: GoogleFonts.milonga(textStyle: textTheme?.display3),
      display2: GoogleFonts.milonga(textStyle: textTheme?.display2),
      display1: GoogleFonts.milonga(textStyle: textTheme?.display1),
      headline: GoogleFonts.milonga(textStyle: textTheme?.headline),
      title: GoogleFonts.milonga(textStyle: textTheme?.title),
      subhead: GoogleFonts.milonga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.milonga(textStyle: textTheme?.body2),
      body1: GoogleFonts.milonga(textStyle: textTheme?.body1),
      caption: GoogleFonts.milonga(textStyle: textTheme?.caption),
      button: GoogleFonts.milonga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.milonga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.milonga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miltonian font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miltonian
  static TextStyle miltonian({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '39ba52477439aa52410287a79a2d8064fb7b18f82af5f6ae22fd50b70e31d96c',
        91816,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Miltonian',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miltonian font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miltonian
  static TextTheme miltonianTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.miltonian(textStyle: textTheme?.display4),
      display3: GoogleFonts.miltonian(textStyle: textTheme?.display3),
      display2: GoogleFonts.miltonian(textStyle: textTheme?.display2),
      display1: GoogleFonts.miltonian(textStyle: textTheme?.display1),
      headline: GoogleFonts.miltonian(textStyle: textTheme?.headline),
      title: GoogleFonts.miltonian(textStyle: textTheme?.title),
      subhead: GoogleFonts.miltonian(textStyle: textTheme?.subhead),
      body2: GoogleFonts.miltonian(textStyle: textTheme?.body2),
      body1: GoogleFonts.miltonian(textStyle: textTheme?.body1),
      caption: GoogleFonts.miltonian(textStyle: textTheme?.caption),
      button: GoogleFonts.miltonian(textStyle: textTheme?.button),
      subtitle: GoogleFonts.miltonian(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.miltonian(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miltonian Tattoo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miltonian+Tattoo
  static TextStyle miltonianTattoo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e6b0d4cb984d618866e97a59156c448971703186b779d38d1402b650790004cf',
        69528,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MiltonianTattoo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miltonian Tattoo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miltonian+Tattoo
  static TextTheme miltonianTattooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.miltonianTattoo(textStyle: textTheme?.display4),
      display3: GoogleFonts.miltonianTattoo(textStyle: textTheme?.display3),
      display2: GoogleFonts.miltonianTattoo(textStyle: textTheme?.display2),
      display1: GoogleFonts.miltonianTattoo(textStyle: textTheme?.display1),
      headline: GoogleFonts.miltonianTattoo(textStyle: textTheme?.headline),
      title: GoogleFonts.miltonianTattoo(textStyle: textTheme?.title),
      subhead: GoogleFonts.miltonianTattoo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.miltonianTattoo(textStyle: textTheme?.body2),
      body1: GoogleFonts.miltonianTattoo(textStyle: textTheme?.body1),
      caption: GoogleFonts.miltonianTattoo(textStyle: textTheme?.caption),
      button: GoogleFonts.miltonianTattoo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.miltonianTattoo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.miltonianTattoo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mina
  static TextStyle mina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2cb3c2707dad5e0a5f21dbad8da10b86eb3b1da477394a33f4d47a819fafb82d',
        151172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7dae008ee6a398a7d7b23f1fbdeeaced41fd8ba3b71cb12b94900ded063f6467',
        152540,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mina
  static TextTheme minaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mina(textStyle: textTheme?.display4),
      display3: GoogleFonts.mina(textStyle: textTheme?.display3),
      display2: GoogleFonts.mina(textStyle: textTheme?.display2),
      display1: GoogleFonts.mina(textStyle: textTheme?.display1),
      headline: GoogleFonts.mina(textStyle: textTheme?.headline),
      title: GoogleFonts.mina(textStyle: textTheme?.title),
      subhead: GoogleFonts.mina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mina(textStyle: textTheme?.body2),
      body1: GoogleFonts.mina(textStyle: textTheme?.body1),
      caption: GoogleFonts.mina(textStyle: textTheme?.caption),
      button: GoogleFonts.mina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miniver font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miniver
  static TextStyle miniver({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5fee893072a2326d9baa9122deb089cd6f8d0645ee00cd02de22b415de3c7c54',
        45408,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Miniver',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miniver font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miniver
  static TextTheme miniverTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.miniver(textStyle: textTheme?.display4),
      display3: GoogleFonts.miniver(textStyle: textTheme?.display3),
      display2: GoogleFonts.miniver(textStyle: textTheme?.display2),
      display1: GoogleFonts.miniver(textStyle: textTheme?.display1),
      headline: GoogleFonts.miniver(textStyle: textTheme?.headline),
      title: GoogleFonts.miniver(textStyle: textTheme?.title),
      subhead: GoogleFonts.miniver(textStyle: textTheme?.subhead),
      body2: GoogleFonts.miniver(textStyle: textTheme?.body2),
      body1: GoogleFonts.miniver(textStyle: textTheme?.body1),
      caption: GoogleFonts.miniver(textStyle: textTheme?.caption),
      button: GoogleFonts.miniver(textStyle: textTheme?.button),
      subtitle: GoogleFonts.miniver(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.miniver(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miriam Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miriam+Libre
  static TextStyle miriamLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c4dc8662662a1708ab4d397f59152bba9bde4ce4c524d9286d49d078a8c58dc6',
        74628,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cbe1ade0a4a8eddd786eb1050d18d81c71465545f3f80392927a36af9035c775',
        72092,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MiriamLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miriam Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miriam+Libre
  static TextTheme miriamLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.miriamLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.miriamLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.miriamLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.miriamLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.miriamLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.miriamLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.miriamLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.miriamLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.miriamLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.miriamLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.miriamLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.miriamLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.miriamLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mirza font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mirza
  static TextStyle mirza({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5b1ac6cb285ca3492e313a53d5252b9784bf7607f2835a2d44cb3cbad0168539',
        177820,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '423532407cc832ef84cc8f08a3359f26b50e721c8aa0e00221e4215cc83440b3',
        177352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4225215d0df4ad389c4ac29d48fddc531703776591ade64c23f6f995669d4078',
        177188,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '306b412a39d9f93ca840c13ca62300eb5c7712e2afa94bd7ef2272b51131be6d',
        177052,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mirza',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mirza font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mirza
  static TextTheme mirzaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mirza(textStyle: textTheme?.display4),
      display3: GoogleFonts.mirza(textStyle: textTheme?.display3),
      display2: GoogleFonts.mirza(textStyle: textTheme?.display2),
      display1: GoogleFonts.mirza(textStyle: textTheme?.display1),
      headline: GoogleFonts.mirza(textStyle: textTheme?.headline),
      title: GoogleFonts.mirza(textStyle: textTheme?.title),
      subhead: GoogleFonts.mirza(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mirza(textStyle: textTheme?.body2),
      body1: GoogleFonts.mirza(textStyle: textTheme?.body1),
      caption: GoogleFonts.mirza(textStyle: textTheme?.caption),
      button: GoogleFonts.mirza(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mirza(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mirza(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miss Fajardose font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miss+Fajardose
  static TextStyle missFajardose({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8de81a59ca34a15be7f6749a4f5247486c41ce79afb9b16e4212d54c0e5d9a89',
        58824,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MissFajardose',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miss Fajardose font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miss+Fajardose
  static TextTheme missFajardoseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.missFajardose(textStyle: textTheme?.display4),
      display3: GoogleFonts.missFajardose(textStyle: textTheme?.display3),
      display2: GoogleFonts.missFajardose(textStyle: textTheme?.display2),
      display1: GoogleFonts.missFajardose(textStyle: textTheme?.display1),
      headline: GoogleFonts.missFajardose(textStyle: textTheme?.headline),
      title: GoogleFonts.missFajardose(textStyle: textTheme?.title),
      subhead: GoogleFonts.missFajardose(textStyle: textTheme?.subhead),
      body2: GoogleFonts.missFajardose(textStyle: textTheme?.body2),
      body1: GoogleFonts.missFajardose(textStyle: textTheme?.body1),
      caption: GoogleFonts.missFajardose(textStyle: textTheme?.caption),
      button: GoogleFonts.missFajardose(textStyle: textTheme?.button),
      subtitle: GoogleFonts.missFajardose(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.missFajardose(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mitr font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mitr
  static TextStyle mitr({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '13aa43b100ddb2ef3f574409c44d5148c96e262d636030f3546632afc8bec583',
        140672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '42aaeccd38bab09aab541391f181cf90544aed031b28240064e03a597d820aff',
        146132,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '51a838bb86fd8ae3d3b14861b86090b8e590d6cec16828f5ff85cc29e255fdd4',
        148012,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a8c0fad121eecc6ccc06afd51a3ed04b7632eabd778490fabe406d010d492fb6',
        148128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f52b41a04226fd35e8292e4074e68cf18847a0b362d1ea41038b6cebcad7953c',
        147556,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '302b58d18b982fe3745338cc6ea87e5868436d2ba962262423c98cac9d161c47',
        148144,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mitr',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mitr font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mitr
  static TextTheme mitrTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mitr(textStyle: textTheme?.display4),
      display3: GoogleFonts.mitr(textStyle: textTheme?.display3),
      display2: GoogleFonts.mitr(textStyle: textTheme?.display2),
      display1: GoogleFonts.mitr(textStyle: textTheme?.display1),
      headline: GoogleFonts.mitr(textStyle: textTheme?.headline),
      title: GoogleFonts.mitr(textStyle: textTheme?.title),
      subhead: GoogleFonts.mitr(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mitr(textStyle: textTheme?.body2),
      body1: GoogleFonts.mitr(textStyle: textTheme?.body1),
      caption: GoogleFonts.mitr(textStyle: textTheme?.caption),
      button: GoogleFonts.mitr(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mitr(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mitr(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Modak font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Modak
  static TextStyle modak({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '999298cc9b836b6d428706a18192f20ce4f95b9ffc84c016dd59527f7735bdd4',
        362296,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Modak',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Modak font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Modak
  static TextTheme modakTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.modak(textStyle: textTheme?.display4),
      display3: GoogleFonts.modak(textStyle: textTheme?.display3),
      display2: GoogleFonts.modak(textStyle: textTheme?.display2),
      display1: GoogleFonts.modak(textStyle: textTheme?.display1),
      headline: GoogleFonts.modak(textStyle: textTheme?.headline),
      title: GoogleFonts.modak(textStyle: textTheme?.title),
      subhead: GoogleFonts.modak(textStyle: textTheme?.subhead),
      body2: GoogleFonts.modak(textStyle: textTheme?.body2),
      body1: GoogleFonts.modak(textStyle: textTheme?.body1),
      caption: GoogleFonts.modak(textStyle: textTheme?.caption),
      button: GoogleFonts.modak(textStyle: textTheme?.button),
      subtitle: GoogleFonts.modak(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.modak(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Modern Antiqua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Modern+Antiqua
  static TextStyle modernAntiqua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'df7e73ec3e130e1a70e2680351228d3e058ceea718f4e7ab314b98ce3978d7f9',
        70060,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ModernAntiqua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Modern Antiqua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Modern+Antiqua
  static TextTheme modernAntiquaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.modernAntiqua(textStyle: textTheme?.display4),
      display3: GoogleFonts.modernAntiqua(textStyle: textTheme?.display3),
      display2: GoogleFonts.modernAntiqua(textStyle: textTheme?.display2),
      display1: GoogleFonts.modernAntiqua(textStyle: textTheme?.display1),
      headline: GoogleFonts.modernAntiqua(textStyle: textTheme?.headline),
      title: GoogleFonts.modernAntiqua(textStyle: textTheme?.title),
      subhead: GoogleFonts.modernAntiqua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.modernAntiqua(textStyle: textTheme?.body2),
      body1: GoogleFonts.modernAntiqua(textStyle: textTheme?.body1),
      caption: GoogleFonts.modernAntiqua(textStyle: textTheme?.caption),
      button: GoogleFonts.modernAntiqua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.modernAntiqua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.modernAntiqua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mogra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mogra
  static TextStyle mogra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '11a1b64ecdf329dcbc068f036c2c09a2058b63bda66c3a541102b48e959c2a4e',
        233848,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mogra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mogra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mogra
  static TextTheme mograTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mogra(textStyle: textTheme?.display4),
      display3: GoogleFonts.mogra(textStyle: textTheme?.display3),
      display2: GoogleFonts.mogra(textStyle: textTheme?.display2),
      display1: GoogleFonts.mogra(textStyle: textTheme?.display1),
      headline: GoogleFonts.mogra(textStyle: textTheme?.headline),
      title: GoogleFonts.mogra(textStyle: textTheme?.title),
      subhead: GoogleFonts.mogra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mogra(textStyle: textTheme?.body2),
      body1: GoogleFonts.mogra(textStyle: textTheme?.body1),
      caption: GoogleFonts.mogra(textStyle: textTheme?.caption),
      button: GoogleFonts.mogra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mogra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mogra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Molengo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Molengo
  static TextStyle molengo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c17cda006ffaf122363be2ad7ed8394c0bf59581bd9e5e9a7e7f5c0ed161a4c0',
        34868,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Molengo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Molengo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Molengo
  static TextTheme molengoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.molengo(textStyle: textTheme?.display4),
      display3: GoogleFonts.molengo(textStyle: textTheme?.display3),
      display2: GoogleFonts.molengo(textStyle: textTheme?.display2),
      display1: GoogleFonts.molengo(textStyle: textTheme?.display1),
      headline: GoogleFonts.molengo(textStyle: textTheme?.headline),
      title: GoogleFonts.molengo(textStyle: textTheme?.title),
      subhead: GoogleFonts.molengo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.molengo(textStyle: textTheme?.body2),
      body1: GoogleFonts.molengo(textStyle: textTheme?.body1),
      caption: GoogleFonts.molengo(textStyle: textTheme?.caption),
      button: GoogleFonts.molengo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.molengo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.molengo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Molle font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Molle
  static TextStyle molle({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd081c5d8d7d19361eaa68e5c05b211b519fa2d27ca94a3ec76da0a39f880acb9',
        35904,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Molle',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Molle font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Molle
  static TextTheme molleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.molle(textStyle: textTheme?.display4),
      display3: GoogleFonts.molle(textStyle: textTheme?.display3),
      display2: GoogleFonts.molle(textStyle: textTheme?.display2),
      display1: GoogleFonts.molle(textStyle: textTheme?.display1),
      headline: GoogleFonts.molle(textStyle: textTheme?.headline),
      title: GoogleFonts.molle(textStyle: textTheme?.title),
      subhead: GoogleFonts.molle(textStyle: textTheme?.subhead),
      body2: GoogleFonts.molle(textStyle: textTheme?.body2),
      body1: GoogleFonts.molle(textStyle: textTheme?.body1),
      caption: GoogleFonts.molle(textStyle: textTheme?.caption),
      button: GoogleFonts.molle(textStyle: textTheme?.button),
      subtitle: GoogleFonts.molle(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.molle(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Monda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monda
  static TextStyle monda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b28adc169d42a434c7b435bab7f4c11ae50fdc1516bc03426f8835d8b70dbee7',
        28212,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b05dc6798c3ea80d95c20709740c72bb72d07040538c1240f850c220292e3f6f',
        29004,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Monda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Monda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monda
  static TextTheme mondaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.monda(textStyle: textTheme?.display4),
      display3: GoogleFonts.monda(textStyle: textTheme?.display3),
      display2: GoogleFonts.monda(textStyle: textTheme?.display2),
      display1: GoogleFonts.monda(textStyle: textTheme?.display1),
      headline: GoogleFonts.monda(textStyle: textTheme?.headline),
      title: GoogleFonts.monda(textStyle: textTheme?.title),
      subhead: GoogleFonts.monda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.monda(textStyle: textTheme?.body2),
      body1: GoogleFonts.monda(textStyle: textTheme?.body1),
      caption: GoogleFonts.monda(textStyle: textTheme?.caption),
      button: GoogleFonts.monda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.monda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.monda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Monofett font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monofett
  static TextStyle monofett({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ebeb36e324072bc8a4e7717f33c5c72271409af395fdf3b4f1e66b529addb881',
        58108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Monofett',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Monofett font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monofett
  static TextTheme monofettTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.monofett(textStyle: textTheme?.display4),
      display3: GoogleFonts.monofett(textStyle: textTheme?.display3),
      display2: GoogleFonts.monofett(textStyle: textTheme?.display2),
      display1: GoogleFonts.monofett(textStyle: textTheme?.display1),
      headline: GoogleFonts.monofett(textStyle: textTheme?.headline),
      title: GoogleFonts.monofett(textStyle: textTheme?.title),
      subhead: GoogleFonts.monofett(textStyle: textTheme?.subhead),
      body2: GoogleFonts.monofett(textStyle: textTheme?.body2),
      body1: GoogleFonts.monofett(textStyle: textTheme?.body1),
      caption: GoogleFonts.monofett(textStyle: textTheme?.caption),
      button: GoogleFonts.monofett(textStyle: textTheme?.button),
      subtitle: GoogleFonts.monofett(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.monofett(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Monoton font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monoton
  static TextStyle monoton({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '432f7ab89e5991e379800eb285fad653a999a44aca1f9204e62060bbf932b2bf',
        51556,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Monoton',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Monoton font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monoton
  static TextTheme monotonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.monoton(textStyle: textTheme?.display4),
      display3: GoogleFonts.monoton(textStyle: textTheme?.display3),
      display2: GoogleFonts.monoton(textStyle: textTheme?.display2),
      display1: GoogleFonts.monoton(textStyle: textTheme?.display1),
      headline: GoogleFonts.monoton(textStyle: textTheme?.headline),
      title: GoogleFonts.monoton(textStyle: textTheme?.title),
      subhead: GoogleFonts.monoton(textStyle: textTheme?.subhead),
      body2: GoogleFonts.monoton(textStyle: textTheme?.body2),
      body1: GoogleFonts.monoton(textStyle: textTheme?.body1),
      caption: GoogleFonts.monoton(textStyle: textTheme?.caption),
      button: GoogleFonts.monoton(textStyle: textTheme?.button),
      subtitle: GoogleFonts.monoton(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.monoton(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Monsieur La Doulaise font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monsieur+La+Doulaise
  static TextStyle monsieurLaDoulaise({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'def26258142aeeb4021fb91331bd0a7dae943c48caa8b09211393a16ed3c53c9',
        54240,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MonsieurLaDoulaise',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Monsieur La Doulaise font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monsieur+La+Doulaise
  static TextTheme monsieurLaDoulaiseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.display4),
      display3: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.display3),
      display2: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.display2),
      display1: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.display1),
      headline: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.headline),
      title: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.title),
      subhead: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.subhead),
      body2: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.body2),
      body1: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.body1),
      caption: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.caption),
      button: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.button),
      subtitle: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montaga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montaga
  static TextStyle montaga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3b97268f12c527fb933009800e8d887c083f48fa733c69dba7961c887909d99e',
        33908,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Montaga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montaga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montaga
  static TextTheme montagaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.montaga(textStyle: textTheme?.display4),
      display3: GoogleFonts.montaga(textStyle: textTheme?.display3),
      display2: GoogleFonts.montaga(textStyle: textTheme?.display2),
      display1: GoogleFonts.montaga(textStyle: textTheme?.display1),
      headline: GoogleFonts.montaga(textStyle: textTheme?.headline),
      title: GoogleFonts.montaga(textStyle: textTheme?.title),
      subhead: GoogleFonts.montaga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montaga(textStyle: textTheme?.body2),
      body1: GoogleFonts.montaga(textStyle: textTheme?.body1),
      caption: GoogleFonts.montaga(textStyle: textTheme?.caption),
      button: GoogleFonts.montaga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.montaga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.montaga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montez font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montez
  static TextStyle montez({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd2ffdd5ee7b2b6e5f8a08b9bc62a24eac29a4755576e27b7856e039043d596ea',
        76776,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Montez',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montez font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montez
  static TextTheme montezTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.montez(textStyle: textTheme?.display4),
      display3: GoogleFonts.montez(textStyle: textTheme?.display3),
      display2: GoogleFonts.montez(textStyle: textTheme?.display2),
      display1: GoogleFonts.montez(textStyle: textTheme?.display1),
      headline: GoogleFonts.montez(textStyle: textTheme?.headline),
      title: GoogleFonts.montez(textStyle: textTheme?.title),
      subhead: GoogleFonts.montez(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montez(textStyle: textTheme?.body2),
      body1: GoogleFonts.montez(textStyle: textTheme?.body1),
      caption: GoogleFonts.montez(textStyle: textTheme?.caption),
      button: GoogleFonts.montez(textStyle: textTheme?.button),
      subtitle: GoogleFonts.montez(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.montez(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montserrat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat
  static TextStyle montserrat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '13b843ab4d5acd6d99d06a88bbc492bd3ffb0d55b01f159c34a0a6237cb2f148',
        151968,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '282f82e77ce6ec450987922f6c8c55456bd826c8a1557a007adeb4c460c6ce27',
        151680,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b058309166a4bdbc1e36f0f4ca0b8349e9705f457bc71a190e34624de2062455',
        153076,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '778b3406a7b740d7d857323720a66ef72ccb3b507b3488b2e56fb9c9f52977b8',
        152248,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '25cab2a480827c3b70f98fa4fe09b06a974b8afb996f60232b5acacb57acade2',
        152908,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7b490e666930fe7f1379aa62b203966a6f284a9dc74b09e8dd5c59760da460f8',
        151788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '470e93c06a9fffa6851375f54047917a9d774ed6027d9f044cd1bc8d4cd5630b',
        152396,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '83e171717660560888d9a84b2a2b1409b6fb43b806ce9b96059c974be4126d64',
        151288,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cec0f6e0bfbfaa352eb189f0eb220916dd278b02aaf824be87055ba5cc38d58b',
        152092,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a61fc08703fd75883c389503641242523b7140ac0b6df6b22106902767e7bb2c',
        150928,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5f82f6e55db43e905c6ab9d04395566b243c41798d6a53545ffbd10ed6c424c4',
        152148,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '625ed5e1a74ead073b6562f04b509f83c2e1630b25ea4c98ccd3d275418c0308',
        150648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '052bfd7f3dc788ae3f0d59dc8e5d65be0c1ec9acaa6fbe53dc70640f64c075bd',
        151780,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7c882260e0b6664897eb1747188ca151cea2a966109ae534e0eb706aa990510d',
        150528,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8bac23178f38bab6018ed343c524a822a5bcbe2a021decbf30f85a9cb61aade0',
        151776,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f2c00bb055d9f815d97ed28ae9e26ae9bff8d0ffa7c6e9ddd3cc47c070c922ea',
        150292,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c64d95a01ae992dd8ff7474e55c16b2a05ea6c4e9aa944ccb51d4b1016232583',
        149380,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6eac88b190248d68069db0de9c165f24aaffc22097fec98ba72710c2f9a96a71',
        148416,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Montserrat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montserrat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat
  static TextTheme montserratTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.montserrat(textStyle: textTheme?.display4),
      display3: GoogleFonts.montserrat(textStyle: textTheme?.display3),
      display2: GoogleFonts.montserrat(textStyle: textTheme?.display2),
      display1: GoogleFonts.montserrat(textStyle: textTheme?.display1),
      headline: GoogleFonts.montserrat(textStyle: textTheme?.headline),
      title: GoogleFonts.montserrat(textStyle: textTheme?.title),
      subhead: GoogleFonts.montserrat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montserrat(textStyle: textTheme?.body2),
      body1: GoogleFonts.montserrat(textStyle: textTheme?.body1),
      caption: GoogleFonts.montserrat(textStyle: textTheme?.caption),
      button: GoogleFonts.montserrat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.montserrat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.montserrat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montserrat Alternates font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat+Alternates
  static TextStyle montserratAlternates({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5c09b026797ce5fac448caefbdc866f5a81bf9cc625984ef1aa9403631484819',
        111412,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c82e331c5ea52753b4551af7eff9d03c3662fb16fea5c00fa558120532424212',
        114640,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3a0f2fd4ee372169bc19522956923e1ade9563dbf8789d7a74576eca54c0cb98',
        111792,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9e8fdaa328523c20fe857f63acd10406a6fe6165bc82fd41a676e77c55374087',
        114648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '009e98fbd7f5568e68b9379e0d049e1f646ef5001f366eca34cd44c262443dbb',
        111672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd82d87be0bd762617314db90ed2694ea7a75e7aeb4e4da266a9581c67fd97d09',
        114248,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b2f5d183ba5588c36e0f975cd5c154bfab1c4defaf7edcacb101f20a83721bb0',
        111272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a94551458451c010e364df974a12e6de5911fe56b117390ba8d52ac82dfaaec5',
        113800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0ad6f1c378b9acd74dc8ac990b61607e3b218a3fbf0988f0ef5c508fa13fdab1',
        110856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4afe42c2aeb0bd46a2c9f199560bd2ebedb166d1e67618651870b8421499c300',
        113540,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2fec79e6e398e2c513322f7af66001553bf74c69cefe117fb05472b44f6d95ed',
        111008,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3ef634325d5a61d0891d3a6eacd265a2983cf1e9e84caafc7bc2addf2f554d69',
        113232,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '54d33b2d46c465e38dbbac2b2b8b5f0a6242270cf0d5511f0161c21e1f0d4ccf',
        110620,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '95d8420481ab395146970da7489bd9b91f5c0437ac1806c84583787cdd4d9b58',
        113136,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2dd175394efc14d9c412b3bad3e06b26a98655760909e676e5be12e642daee59',
        110684,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0ea02188bddfbe57ace54b7785d677eddcdd630d1073fdcda277f1186aaedf20',
        112928,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4d1eed87eda713f3f729c721ae1754c382e1517f51f29be05babf98f8e985693',
        109236,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '59d0191230f070e7792b5c21e8a1f3ebc0c132ed6564d765d8759903325bda9b',
        111956,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MontserratAlternates',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montserrat Alternates font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat+Alternates
  static TextTheme montserratAlternatesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.headline),
      title: GoogleFonts.montserratAlternates(textStyle: textTheme?.title),
      subhead: GoogleFonts.montserratAlternates(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montserratAlternates(textStyle: textTheme?.body2),
      body1: GoogleFonts.montserratAlternates(textStyle: textTheme?.body1),
      caption: GoogleFonts.montserratAlternates(textStyle: textTheme?.caption),
      button: GoogleFonts.montserratAlternates(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montserrat Subrayada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat+Subrayada
  static TextStyle montserratSubrayada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bcf81f50b96cbae5ccbd3337f693c53bbbe2bb5717bb8637eeaf4d5dff5699c4',
        24284,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6a2a4c0ee5aade485aa6bf9a1a43b1ef3fe0aa5dda27e70b0b9abe7625562124',
        24316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MontserratSubrayada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montserrat Subrayada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat+Subrayada
  static TextTheme montserratSubrayadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.montserratSubrayada(textStyle: textTheme?.display4),
      display3: GoogleFonts.montserratSubrayada(textStyle: textTheme?.display3),
      display2: GoogleFonts.montserratSubrayada(textStyle: textTheme?.display2),
      display1: GoogleFonts.montserratSubrayada(textStyle: textTheme?.display1),
      headline: GoogleFonts.montserratSubrayada(textStyle: textTheme?.headline),
      title: GoogleFonts.montserratSubrayada(textStyle: textTheme?.title),
      subhead: GoogleFonts.montserratSubrayada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montserratSubrayada(textStyle: textTheme?.body2),
      body1: GoogleFonts.montserratSubrayada(textStyle: textTheme?.body1),
      caption: GoogleFonts.montserratSubrayada(textStyle: textTheme?.caption),
      button: GoogleFonts.montserratSubrayada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.montserratSubrayada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.montserratSubrayada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mountains of Christmas font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mountains+of+Christmas
  static TextStyle mountainsofChristmas({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c2200cef227dc27280b133ec5d366a7a1c5e8956523b6a69490c6d3be875831f',
        122496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '52a7b2b21269dc6d67187a7882fa4bbc19f093792adc852c62497c6495d129e6',
        123356,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MountainsofChristmas',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mountains of Christmas font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mountains+of+Christmas
  static TextTheme mountainsofChristmasTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.headline),
      title: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.title),
      subhead: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.body2),
      body1: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.body1),
      caption: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.caption),
      button: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mouse Memoirs font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mouse+Memoirs
  static TextStyle mouseMemoirs({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '36717824ce8893e8e49e371730b587484db4b095302a60970bffe613c3a81960',
        55516,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MouseMemoirs',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mouse Memoirs font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mouse+Memoirs
  static TextTheme mouseMemoirsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mouseMemoirs(textStyle: textTheme?.display4),
      display3: GoogleFonts.mouseMemoirs(textStyle: textTheme?.display3),
      display2: GoogleFonts.mouseMemoirs(textStyle: textTheme?.display2),
      display1: GoogleFonts.mouseMemoirs(textStyle: textTheme?.display1),
      headline: GoogleFonts.mouseMemoirs(textStyle: textTheme?.headline),
      title: GoogleFonts.mouseMemoirs(textStyle: textTheme?.title),
      subhead: GoogleFonts.mouseMemoirs(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mouseMemoirs(textStyle: textTheme?.body2),
      body1: GoogleFonts.mouseMemoirs(textStyle: textTheme?.body1),
      caption: GoogleFonts.mouseMemoirs(textStyle: textTheme?.caption),
      button: GoogleFonts.mouseMemoirs(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mouseMemoirs(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mouseMemoirs(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mr Bedfort font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+Bedfort
  static TextStyle mrBedfort({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e15139ad970a418042aa1bd423cac0ecbc77211a359ea93bf60c67ade7f97542',
        37204,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrBedfort',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mr Bedfort font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+Bedfort
  static TextTheme mrBedfortTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrBedfort(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrBedfort(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrBedfort(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrBedfort(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrBedfort(textStyle: textTheme?.headline),
      title: GoogleFonts.mrBedfort(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrBedfort(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrBedfort(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrBedfort(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrBedfort(textStyle: textTheme?.caption),
      button: GoogleFonts.mrBedfort(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrBedfort(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrBedfort(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mr Dafoe font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+Dafoe
  static TextStyle mrDafoe({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7130e498cceb99869e8233972404152d7f191ca5b5e37435cbd7b31758dec294',
        47928,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrDafoe',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mr Dafoe font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+Dafoe
  static TextTheme mrDafoeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrDafoe(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrDafoe(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrDafoe(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrDafoe(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrDafoe(textStyle: textTheme?.headline),
      title: GoogleFonts.mrDafoe(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrDafoe(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrDafoe(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrDafoe(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrDafoe(textStyle: textTheme?.caption),
      button: GoogleFonts.mrDafoe(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrDafoe(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrDafoe(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mr De Haviland font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+De+Haviland
  static TextStyle mrDeHaviland({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd8eabbdbc1c25c4982d316b366f4cd39f1d12589d7442ec03923353e8b739132',
        44624,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrDeHaviland',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mr De Haviland font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+De+Haviland
  static TextTheme mrDeHavilandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrDeHaviland(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrDeHaviland(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrDeHaviland(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrDeHaviland(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrDeHaviland(textStyle: textTheme?.headline),
      title: GoogleFonts.mrDeHaviland(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrDeHaviland(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrDeHaviland(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrDeHaviland(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrDeHaviland(textStyle: textTheme?.caption),
      button: GoogleFonts.mrDeHaviland(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrDeHaviland(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrDeHaviland(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mrs Saint Delafield font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mrs+Saint+Delafield
  static TextStyle mrsSaintDelafield({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b864d74de51aa37c270217c9c01320fd78f8b1c23077b4ef0c20cb697a41d899',
        49092,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrsSaintDelafield',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mrs Saint Delafield font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mrs+Saint+Delafield
  static TextTheme mrsSaintDelafieldTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.headline),
      title: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.caption),
      button: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mrs Sheppards font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mrs+Sheppards
  static TextStyle mrsSheppards({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e405bf3cb038e30fac744c48068e8e3687a50c1b5cff874a57476b07f44b3b04',
        42336,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrsSheppards',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mrs Sheppards font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mrs+Sheppards
  static TextTheme mrsSheppardsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrsSheppards(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrsSheppards(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrsSheppards(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrsSheppards(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrsSheppards(textStyle: textTheme?.headline),
      title: GoogleFonts.mrsSheppards(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrsSheppards(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrsSheppards(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrsSheppards(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrsSheppards(textStyle: textTheme?.caption),
      button: GoogleFonts.mrsSheppards(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrsSheppards(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrsSheppards(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mukta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta
  static TextStyle mukta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a09d53371d63ff1a2007025ba620e2d49a10d6fa1cfd9771079b881fb10260b',
        302792,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'afd7468706fa0ed52e0b848541b4e7443296d0e40213e7903e1d85de5b78c259',
        299500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7a26594f60f0a156f11685565fac877993f2081741d7eafc7a67d82010f730f8',
        303624,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a8691ddcdc7892d423b4906d2316da09de32309d3d68b21b5d3d640e28901896',
        297420,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7d8e1e1ee78a611bd420d3ad4fb7812e49164acc68f473ee133666fe5376d477',
        293224,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e6fcac27938712ebc52654eee052ffee3cb5608feef54db55a22964fe8c7d974',
        294800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '861cea1030f95eb8f746e95524c8440b56afdd6606e07782193fe436cc52f46b',
        294532,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mukta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mukta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta
  static TextTheme muktaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mukta(textStyle: textTheme?.display4),
      display3: GoogleFonts.mukta(textStyle: textTheme?.display3),
      display2: GoogleFonts.mukta(textStyle: textTheme?.display2),
      display1: GoogleFonts.mukta(textStyle: textTheme?.display1),
      headline: GoogleFonts.mukta(textStyle: textTheme?.headline),
      title: GoogleFonts.mukta(textStyle: textTheme?.title),
      subhead: GoogleFonts.mukta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mukta(textStyle: textTheme?.body2),
      body1: GoogleFonts.mukta(textStyle: textTheme?.body1),
      caption: GoogleFonts.mukta(textStyle: textTheme?.caption),
      button: GoogleFonts.mukta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mukta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mukta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mukta Mahee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Mahee
  static TextStyle muktaMahee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'deb2926281b06e4d02371cd3f6f4883d13a38514549e581c6269cb16250c5a63',
        159216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '448813ce747d7ccc8e7b380c48932fe537454f9a86ac18052fa515874298334e',
        158236,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e185695b95ca5300e131bf6cf64a2442b7517874432a1a82f968ee61ed116717',
        159340,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e224c5c38bb5fe5efb69e8392dfd476427211ddb37a97f4fd77b807d5aad8b7c',
        155880,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f2c62fede24e5fe712f6f59500c550749c89e47b21cb749ea96f447ace17a57a',
        155776,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0bde54d9dc9448b8d81abd2d849dade4e04c4b7c4ec8565ccb09e80f0fd2be99',
        155836,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '561a2604bd143dc10cc3499ba4e3c7eef16b6705db72db31da22ad356b76feb5',
        155592,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MuktaMahee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mukta Mahee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Mahee
  static TextTheme muktaMaheeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.muktaMahee(textStyle: textTheme?.display4),
      display3: GoogleFonts.muktaMahee(textStyle: textTheme?.display3),
      display2: GoogleFonts.muktaMahee(textStyle: textTheme?.display2),
      display1: GoogleFonts.muktaMahee(textStyle: textTheme?.display1),
      headline: GoogleFonts.muktaMahee(textStyle: textTheme?.headline),
      title: GoogleFonts.muktaMahee(textStyle: textTheme?.title),
      subhead: GoogleFonts.muktaMahee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.muktaMahee(textStyle: textTheme?.body2),
      body1: GoogleFonts.muktaMahee(textStyle: textTheme?.body1),
      caption: GoogleFonts.muktaMahee(textStyle: textTheme?.caption),
      button: GoogleFonts.muktaMahee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.muktaMahee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.muktaMahee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mukta Malar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Malar
  static TextStyle muktaMalar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ae35f34ee0aecd84455b8074812b101d5d11bc4ae0ada4a90c3e6963cf1b93c',
        176484,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2d5b4747199d5f755d4d21f2dfb23f52cbeba3d94d82a526575d63a6be36c99b',
        175612,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e58544a43eef9e9b107ca973ca2d3233a1e15b8eddffcc73a3cb767a82c86fd6',
        175612,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '05e1d0c09c615550bb87408248e0d42ce654f55e0757f1fa6f4f93323f8c8121',
        171128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e4f26dcbc25c0f26d1fce4a3558f4aacdf8089148a638079c3353f6049ae21e9',
        171032,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bacffc5f82b7219e1a4ff85b030aca1a5f805e0a1224534a6f2bfb01e4bd61cc',
        171620,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '848b7be10b4d701ac02f5f2208071858aa399b564d503cd2e4ca428d25886da9',
        172316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MuktaMalar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mukta Malar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Malar
  static TextTheme muktaMalarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.muktaMalar(textStyle: textTheme?.display4),
      display3: GoogleFonts.muktaMalar(textStyle: textTheme?.display3),
      display2: GoogleFonts.muktaMalar(textStyle: textTheme?.display2),
      display1: GoogleFonts.muktaMalar(textStyle: textTheme?.display1),
      headline: GoogleFonts.muktaMalar(textStyle: textTheme?.headline),
      title: GoogleFonts.muktaMalar(textStyle: textTheme?.title),
      subhead: GoogleFonts.muktaMalar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.muktaMalar(textStyle: textTheme?.body2),
      body1: GoogleFonts.muktaMalar(textStyle: textTheme?.body1),
      caption: GoogleFonts.muktaMalar(textStyle: textTheme?.caption),
      button: GoogleFonts.muktaMalar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.muktaMalar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.muktaMalar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mukta Vaani font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Vaani
  static TextStyle muktaVaani({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '29b1cbb5d158be22b06c5c6af360d55da720b6c8a7b9b218dd184cbfc2a97885',
        346528,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b273ecb298d23bd198fdcf92d8137f3bb392abc1843e055c814580f254f3a4d2',
        354676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '89cee2e2edc87643ff46594bc56da0b32e9f4fd9acb8b87979dda5d4da2bccb6',
        344512,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5da49257aaa42ad92f5abf8235b58834033471554455112dea55a3a00761f1c0',
        351576,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7f14d4f17f14c4106a7fe56a9e591a9ef7d89e8dee221d5b4d359cac2667f138',
        349868,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6e1e0572586f30b3b9b794997b0b26cc725d41d3348eda988662d14d1fdc89b4',
        349956,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '09f9de8c00ef147925056cf61c1d7e324b50fd29b1fe15c95500c506ddd79aeb',
        342704,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MuktaVaani',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mukta Vaani font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Vaani
  static TextTheme muktaVaaniTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.muktaVaani(textStyle: textTheme?.display4),
      display3: GoogleFonts.muktaVaani(textStyle: textTheme?.display3),
      display2: GoogleFonts.muktaVaani(textStyle: textTheme?.display2),
      display1: GoogleFonts.muktaVaani(textStyle: textTheme?.display1),
      headline: GoogleFonts.muktaVaani(textStyle: textTheme?.headline),
      title: GoogleFonts.muktaVaani(textStyle: textTheme?.title),
      subhead: GoogleFonts.muktaVaani(textStyle: textTheme?.subhead),
      body2: GoogleFonts.muktaVaani(textStyle: textTheme?.body2),
      body1: GoogleFonts.muktaVaani(textStyle: textTheme?.body1),
      caption: GoogleFonts.muktaVaani(textStyle: textTheme?.caption),
      button: GoogleFonts.muktaVaani(textStyle: textTheme?.button),
      subtitle: GoogleFonts.muktaVaani(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.muktaVaani(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Muli font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Muli
  static TextStyle muli({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dbcba4190351f997830d7652727c7f42e0c882f325d1f75ba8a3c606f8ab0e23',
        66880,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '939afc08c356b9f83c67ee2b78dec42c2f7e1eed1ade0be8b8fc1095d1429b04',
        68176,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5de108957fcdaef883f06a6d0852f415189779437851b0d6d7abb06c9b717a86',
        66540,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7cc6d79998df498ec95b3c68aa52f263ad62a25202e7971a6b75de645da069c2',
        67788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ea4701f9a5e0b0e4c96b45b1c04278e62159ddb385941274af0394132622a139',
        66444,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e5a17a307589ccf860441ba4904d3819f0ce0a4d7001a6e4b7d0efd5858bcde8',
        67632,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '10d78b9b78e06d25335389823e4383b15fea791de3324adb6497069821c2e214',
        66332,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9844bb9dc82723a3d8c41821d7ed75f37aa979969dbcf244e03676190a26c279',
        67648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3ab6877022dc43f69329d1c8e73ede36b36ef3cd49a833da18c388c6311a18c7',
        66100,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '93112f6142019f2669649529f27d3d42f5bc8859bf1dadaaf1ab66b07492b366',
        67360,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ba6c90c1b1b2a61cc450ef443603f86e5acffbba7430c4d41e9ce1ef434b516',
        66120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'dc2a00ad0b251d39d19272f9277b6940bb685b29b9cecca33bfb4008d5188d2c',
        67316,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a887d75b7f4ca0f8a220638d755864474c4a89972ef84be00ba81d5764519e8c',
        66128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c1c38c7b31e983faf9ac1ba63d8a98cb93cdf7c854abd833e826a7bea94248c6',
        67448,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Muli',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Muli font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Muli
  static TextTheme muliTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.muli(textStyle: textTheme?.display4),
      display3: GoogleFonts.muli(textStyle: textTheme?.display3),
      display2: GoogleFonts.muli(textStyle: textTheme?.display2),
      display1: GoogleFonts.muli(textStyle: textTheme?.display1),
      headline: GoogleFonts.muli(textStyle: textTheme?.headline),
      title: GoogleFonts.muli(textStyle: textTheme?.title),
      subhead: GoogleFonts.muli(textStyle: textTheme?.subhead),
      body2: GoogleFonts.muli(textStyle: textTheme?.body2),
      body1: GoogleFonts.muli(textStyle: textTheme?.body1),
      caption: GoogleFonts.muli(textStyle: textTheme?.caption),
      button: GoogleFonts.muli(textStyle: textTheme?.button),
      subtitle: GoogleFonts.muli(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.muli(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mystery Quest font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mystery+Quest
  static TextStyle mysteryQuest({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '45f3b5f241a077e28d45ad6f0d542f3d9f2e2204a6d7ba78f4438c3960639003',
        41708,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MysteryQuest',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mystery Quest font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mystery+Quest
  static TextTheme mysteryQuestTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mysteryQuest(textStyle: textTheme?.display4),
      display3: GoogleFonts.mysteryQuest(textStyle: textTheme?.display3),
      display2: GoogleFonts.mysteryQuest(textStyle: textTheme?.display2),
      display1: GoogleFonts.mysteryQuest(textStyle: textTheme?.display1),
      headline: GoogleFonts.mysteryQuest(textStyle: textTheme?.headline),
      title: GoogleFonts.mysteryQuest(textStyle: textTheme?.title),
      subhead: GoogleFonts.mysteryQuest(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mysteryQuest(textStyle: textTheme?.body2),
      body1: GoogleFonts.mysteryQuest(textStyle: textTheme?.body1),
      caption: GoogleFonts.mysteryQuest(textStyle: textTheme?.caption),
      button: GoogleFonts.mysteryQuest(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mysteryQuest(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mysteryQuest(textStyle: textTheme?.overline),
    );
  }

  /// Applies the NTR font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/NTR
  static TextStyle nTR({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a81d9625c6e1cc5d20f097e68c4604194966a833b0bacfa533a882ad3fe92592',
        197756,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NTR',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the NTR font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/NTR
  static TextTheme nTRTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nTR(textStyle: textTheme?.display4),
      display3: GoogleFonts.nTR(textStyle: textTheme?.display3),
      display2: GoogleFonts.nTR(textStyle: textTheme?.display2),
      display1: GoogleFonts.nTR(textStyle: textTheme?.display1),
      headline: GoogleFonts.nTR(textStyle: textTheme?.headline),
      title: GoogleFonts.nTR(textStyle: textTheme?.title),
      subhead: GoogleFonts.nTR(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nTR(textStyle: textTheme?.body2),
      body1: GoogleFonts.nTR(textStyle: textTheme?.body1),
      caption: GoogleFonts.nTR(textStyle: textTheme?.caption),
      button: GoogleFonts.nTR(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nTR(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nTR(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Brush Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Brush+Script
  static TextStyle nanumBrushScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e99eadfe916b8afa1065e368b0c06a725089504ffa9cd2bb1832cbe59ecb4822',
        2740080,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumBrushScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Brush Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Brush+Script
  static TextTheme nanumBrushScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumBrushScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumBrushScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumBrushScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumBrushScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumBrushScript(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumBrushScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumBrushScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumBrushScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumBrushScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumBrushScript(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumBrushScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumBrushScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumBrushScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Gothic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Gothic
  static TextStyle nanumGothic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '384554f92bd4d754bd8750f8885c456c5264d6814731376178dd0727fcf2d98c',
        2879864,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '66257cb7dbb7d38dd5d9b0c7a1f9df7ae828f4a2a79a37070603405220e9f32b',
        2891140,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '560717e4c667f1bdf58f6426ef133e74637eb3c1868feff814bb8a5b707e6880',
        2951544,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumGothic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Gothic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Gothic
  static TextTheme nanumGothicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumGothic(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumGothic(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumGothic(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumGothic(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumGothic(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumGothic(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumGothic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumGothic(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumGothic(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumGothic(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumGothic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumGothic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumGothic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Gothic Coding font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Gothic+Coding
  static TextStyle nanumGothicCoding({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '87aa4e424fb41b2eb66974966afbb9b9d113444c73ddfec8d9960d1c9f15ca2a',
        1432612,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bfd061e7ac41bb2ac41c1b32e194b64a92ea19253afc0008d1a5e58e330434f9',
        1458744,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumGothicCoding',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Gothic Coding font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Gothic+Coding
  static TextTheme nanumGothicCodingTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Myeongjo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Myeongjo
  static TextStyle nanumMyeongjo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3df71af0cacc55f9ee8f8e5e35a48672e379aefb187f3ae133a8fd5100c3810f',
        2167668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c78488cd4af94bf04459b776f90fbe7942e11af15dda46bd856a1abc0523ae11',
        2241272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2da8166e69673863a98b44792cb5b54e1a13b597c11dca437783e5a9336cfa9c',
        2293712,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumMyeongjo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Myeongjo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Myeongjo
  static TextTheme nanumMyeongjoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Pen Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Pen+Script
  static TextStyle nanumPenScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2e0017c2efd9b7de2cf1b9d90c99ebfd4be478763a4f265915ce2302d928a6f4',
        2533592,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumPenScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Pen Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Pen+Script
  static TextTheme nanumPenScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumPenScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumPenScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumPenScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumPenScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumPenScript(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumPenScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumPenScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumPenScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumPenScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumPenScript(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumPenScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumPenScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumPenScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Neucha font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Neucha
  static TextStyle neucha({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1e6e5577b90d7925c65ee7e36c988d5da0c8abd382abf4f7d7a5cbc0ab477a99',
        74808,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Neucha',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Neucha font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Neucha
  static TextTheme neuchaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.neucha(textStyle: textTheme?.display4),
      display3: GoogleFonts.neucha(textStyle: textTheme?.display3),
      display2: GoogleFonts.neucha(textStyle: textTheme?.display2),
      display1: GoogleFonts.neucha(textStyle: textTheme?.display1),
      headline: GoogleFonts.neucha(textStyle: textTheme?.headline),
      title: GoogleFonts.neucha(textStyle: textTheme?.title),
      subhead: GoogleFonts.neucha(textStyle: textTheme?.subhead),
      body2: GoogleFonts.neucha(textStyle: textTheme?.body2),
      body1: GoogleFonts.neucha(textStyle: textTheme?.body1),
      caption: GoogleFonts.neucha(textStyle: textTheme?.caption),
      button: GoogleFonts.neucha(textStyle: textTheme?.button),
      subtitle: GoogleFonts.neucha(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.neucha(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Neuton font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Neuton
  static TextStyle neuton({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '52a1f786965c5e1a5ddb72c3453133e67248c6daa74320a01e034161e4476a0f',
        36124,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ff0297b52f6d34d72fb14e197dd0504d57fdb2769b98619facc41590e900c8e9',
        35804,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2147893351f8ace96b011dcc7c1c826ba84daac170ed6538e0456e5ed8ffe947',
        40944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8be52f34f889303ed24d24ec94bc56c8fb7130049db10eb3983aab619a05bcb5',
        38564,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1c83bf4d18e666ffe37bb75b7005b9ad99f4166347cbce93e1f798c45954f87e',
        37052,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2ccde11ee55979183e280ea4860ec28e4fd88da81c66a8eee82963c4fe2befca',
        36760,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Neuton',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Neuton font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Neuton
  static TextTheme neutonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.neuton(textStyle: textTheme?.display4),
      display3: GoogleFonts.neuton(textStyle: textTheme?.display3),
      display2: GoogleFonts.neuton(textStyle: textTheme?.display2),
      display1: GoogleFonts.neuton(textStyle: textTheme?.display1),
      headline: GoogleFonts.neuton(textStyle: textTheme?.headline),
      title: GoogleFonts.neuton(textStyle: textTheme?.title),
      subhead: GoogleFonts.neuton(textStyle: textTheme?.subhead),
      body2: GoogleFonts.neuton(textStyle: textTheme?.body2),
      body1: GoogleFonts.neuton(textStyle: textTheme?.body1),
      caption: GoogleFonts.neuton(textStyle: textTheme?.caption),
      button: GoogleFonts.neuton(textStyle: textTheme?.button),
      subtitle: GoogleFonts.neuton(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.neuton(textStyle: textTheme?.overline),
    );
  }

  /// Applies the New Rocker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/New+Rocker
  static TextStyle newRocker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '20dd1e4e2d3c0003707b649a59ebb5a729e108cc20929f1a1c06bb03319b07d7',
        128612,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NewRocker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the New Rocker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/New+Rocker
  static TextTheme newRockerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.newRocker(textStyle: textTheme?.display4),
      display3: GoogleFonts.newRocker(textStyle: textTheme?.display3),
      display2: GoogleFonts.newRocker(textStyle: textTheme?.display2),
      display1: GoogleFonts.newRocker(textStyle: textTheme?.display1),
      headline: GoogleFonts.newRocker(textStyle: textTheme?.headline),
      title: GoogleFonts.newRocker(textStyle: textTheme?.title),
      subhead: GoogleFonts.newRocker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.newRocker(textStyle: textTheme?.body2),
      body1: GoogleFonts.newRocker(textStyle: textTheme?.body1),
      caption: GoogleFonts.newRocker(textStyle: textTheme?.caption),
      button: GoogleFonts.newRocker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.newRocker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.newRocker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the News Cycle font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/News+Cycle
  static TextStyle newsCycle({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9dc74270959405ee468a6ea83452b01a8075067bf71cb96c8097511477f8aec6',
        178676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '301d13c6e3a40093c2244566226928b2e8bd2843d5cb06302c5c30b44c3d4bc2',
        60472,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NewsCycle',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the News Cycle font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/News+Cycle
  static TextTheme newsCycleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.newsCycle(textStyle: textTheme?.display4),
      display3: GoogleFonts.newsCycle(textStyle: textTheme?.display3),
      display2: GoogleFonts.newsCycle(textStyle: textTheme?.display2),
      display1: GoogleFonts.newsCycle(textStyle: textTheme?.display1),
      headline: GoogleFonts.newsCycle(textStyle: textTheme?.headline),
      title: GoogleFonts.newsCycle(textStyle: textTheme?.title),
      subhead: GoogleFonts.newsCycle(textStyle: textTheme?.subhead),
      body2: GoogleFonts.newsCycle(textStyle: textTheme?.body2),
      body1: GoogleFonts.newsCycle(textStyle: textTheme?.body1),
      caption: GoogleFonts.newsCycle(textStyle: textTheme?.caption),
      button: GoogleFonts.newsCycle(textStyle: textTheme?.button),
      subtitle: GoogleFonts.newsCycle(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.newsCycle(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Niconne font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Niconne
  static TextStyle niconne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c5d99f37c7fc29904227e4a5909347b604c87dbe244293db4353ba24f5263d28',
        45568,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Niconne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Niconne font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Niconne
  static TextTheme niconneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.niconne(textStyle: textTheme?.display4),
      display3: GoogleFonts.niconne(textStyle: textTheme?.display3),
      display2: GoogleFonts.niconne(textStyle: textTheme?.display2),
      display1: GoogleFonts.niconne(textStyle: textTheme?.display1),
      headline: GoogleFonts.niconne(textStyle: textTheme?.headline),
      title: GoogleFonts.niconne(textStyle: textTheme?.title),
      subhead: GoogleFonts.niconne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.niconne(textStyle: textTheme?.body2),
      body1: GoogleFonts.niconne(textStyle: textTheme?.body1),
      caption: GoogleFonts.niconne(textStyle: textTheme?.caption),
      button: GoogleFonts.niconne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.niconne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.niconne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Niramit font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Niramit
  static TextStyle niramit({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e92669e514d741863c49ee66189090f4d5dca5b6a9d34ccbe435b2f5af660c42',
        89528,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd2d4697e15bf89f5f5ef604984ccc6a79f078de6f91e60deae5736de825110bc',
        92352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cc8b41b318e8ef4a063f6a1d3c4b2b8b07029e70b412f4aff994ee4849efb09c',
        89344,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8b5560e9959b3ffe8583ea5591a0852f3cb9dd7d8f256327fd1dfa761aebbc97',
        91988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b73b7564f064368ecc427a55f6f52ab3191726827cc1b6c8fe10059308a2c576',
        89224,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f2f02627999eb05690e589cbb7e0c1ab1e977f24c976bbeafab5c8bb041cb23c',
        91860,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd57314c8b28aa732f0904f616db80bd02f471e91a0c0620454016ddb37200371',
        89172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3c7d65b0b7438466a6707ae7ee57b82aad56e02798b2bd582110803cfd632e40',
        91624,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '932bdc0ea4e9406b713a29b1a936c3bfba71853a8f834dcf9129914d6ed2f0e7',
        89112,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'deb26883a193441eb594a0e8e42bac1d2d1ac822053c3bd7fcaf06161fbc281d',
        91760,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '67d40f2a9e3f3cc8c4e0873f0c6aa8b2db46210c344b6805eb7a3280b6430a85',
        89328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2d5a53eeb80546748e52c84452b17b60d1e4abfcd7e01f6d6f909ad0446c9f19',
        91772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Niramit',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Niramit font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Niramit
  static TextTheme niramitTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.niramit(textStyle: textTheme?.display4),
      display3: GoogleFonts.niramit(textStyle: textTheme?.display3),
      display2: GoogleFonts.niramit(textStyle: textTheme?.display2),
      display1: GoogleFonts.niramit(textStyle: textTheme?.display1),
      headline: GoogleFonts.niramit(textStyle: textTheme?.headline),
      title: GoogleFonts.niramit(textStyle: textTheme?.title),
      subhead: GoogleFonts.niramit(textStyle: textTheme?.subhead),
      body2: GoogleFonts.niramit(textStyle: textTheme?.body2),
      body1: GoogleFonts.niramit(textStyle: textTheme?.body1),
      caption: GoogleFonts.niramit(textStyle: textTheme?.caption),
      button: GoogleFonts.niramit(textStyle: textTheme?.button),
      subtitle: GoogleFonts.niramit(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.niramit(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nixie One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nixie+One
  static TextStyle nixieOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '087111fe60593408bf58ff7befff4b557a237a72d80e56ad3727d99693b4a087',
        52532,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NixieOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nixie One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nixie+One
  static TextTheme nixieOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nixieOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.nixieOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.nixieOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.nixieOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.nixieOne(textStyle: textTheme?.headline),
      title: GoogleFonts.nixieOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.nixieOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nixieOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.nixieOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.nixieOne(textStyle: textTheme?.caption),
      button: GoogleFonts.nixieOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nixieOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nixieOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nobile font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nobile
  static TextStyle nobile({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd0fcaab1c3dc981d4dcbe2840d5a12039de03b68f4f2736ac648e6eb339249c1',
        35992,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '88fda8926ed6fdf634aeaf690e2d21e66e8e88231993df94bf3b2359a617491b',
        44588,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '809ce5e05bb84a8872fd7ec295e71892fab43593a18179bb43c2a0f94cca53d2',
        34836,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c889dceebe4337abc148cab8adbcb5ad8e6277635316b13a75afb02db100212d',
        44532,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Nobile',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nobile font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nobile
  static TextTheme nobileTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nobile(textStyle: textTheme?.display4),
      display3: GoogleFonts.nobile(textStyle: textTheme?.display3),
      display2: GoogleFonts.nobile(textStyle: textTheme?.display2),
      display1: GoogleFonts.nobile(textStyle: textTheme?.display1),
      headline: GoogleFonts.nobile(textStyle: textTheme?.headline),
      title: GoogleFonts.nobile(textStyle: textTheme?.title),
      subhead: GoogleFonts.nobile(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nobile(textStyle: textTheme?.body2),
      body1: GoogleFonts.nobile(textStyle: textTheme?.body1),
      caption: GoogleFonts.nobile(textStyle: textTheme?.caption),
      button: GoogleFonts.nobile(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nobile(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nobile(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Norican font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Norican
  static TextStyle norican({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f4fbc9fb71760f8b74862d7d705863f375de95bb99192acfeca61ab3185b6468',
        46812,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Norican',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Norican font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Norican
  static TextTheme noricanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.norican(textStyle: textTheme?.display4),
      display3: GoogleFonts.norican(textStyle: textTheme?.display3),
      display2: GoogleFonts.norican(textStyle: textTheme?.display2),
      display1: GoogleFonts.norican(textStyle: textTheme?.display1),
      headline: GoogleFonts.norican(textStyle: textTheme?.headline),
      title: GoogleFonts.norican(textStyle: textTheme?.title),
      subhead: GoogleFonts.norican(textStyle: textTheme?.subhead),
      body2: GoogleFonts.norican(textStyle: textTheme?.body2),
      body1: GoogleFonts.norican(textStyle: textTheme?.body1),
      caption: GoogleFonts.norican(textStyle: textTheme?.caption),
      button: GoogleFonts.norican(textStyle: textTheme?.button),
      subtitle: GoogleFonts.norican(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.norican(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nosifer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nosifer
  static TextStyle nosifer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'db6d798eb7a5adc1193a4757fba4b3bf0f2bf34f9456f9b72dd63e8c21a304e3',
        43228,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Nosifer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nosifer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nosifer
  static TextTheme nosiferTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nosifer(textStyle: textTheme?.display4),
      display3: GoogleFonts.nosifer(textStyle: textTheme?.display3),
      display2: GoogleFonts.nosifer(textStyle: textTheme?.display2),
      display1: GoogleFonts.nosifer(textStyle: textTheme?.display1),
      headline: GoogleFonts.nosifer(textStyle: textTheme?.headline),
      title: GoogleFonts.nosifer(textStyle: textTheme?.title),
      subhead: GoogleFonts.nosifer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nosifer(textStyle: textTheme?.body2),
      body1: GoogleFonts.nosifer(textStyle: textTheme?.body1),
      caption: GoogleFonts.nosifer(textStyle: textTheme?.caption),
      button: GoogleFonts.nosifer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nosifer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nosifer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Notable font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Notable
  static TextStyle notable({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '17b2981242270d0087017ea92cac3bb8bad89c43bd4d9907ded7255e92dbc8aa',
        24588,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Notable',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Notable font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Notable
  static TextTheme notableTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notable(textStyle: textTheme?.display4),
      display3: GoogleFonts.notable(textStyle: textTheme?.display3),
      display2: GoogleFonts.notable(textStyle: textTheme?.display2),
      display1: GoogleFonts.notable(textStyle: textTheme?.display1),
      headline: GoogleFonts.notable(textStyle: textTheme?.headline),
      title: GoogleFonts.notable(textStyle: textTheme?.title),
      subhead: GoogleFonts.notable(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notable(textStyle: textTheme?.body2),
      body1: GoogleFonts.notable(textStyle: textTheme?.body1),
      caption: GoogleFonts.notable(textStyle: textTheme?.caption),
      button: GoogleFonts.notable(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notable(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notable(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nothing You Could Do font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nothing+You+Could+Do
  static TextStyle nothingYouCouldDo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'be0f234b092c9c449e02760df9a51ff0a1bb5867a70825d7074238c1e26e9664',
        34872,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NothingYouCouldDo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nothing You Could Do font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nothing+You+Could+Do
  static TextTheme nothingYouCouldDoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.display4),
      display3: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.display3),
      display2: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.display2),
      display1: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.display1),
      headline: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.headline),
      title: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.title),
      subhead: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.body2),
      body1: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.body1),
      caption: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.caption),
      button: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noticia Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noticia+Text
  static TextStyle noticiaText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8aa05df6db1fd8277eb2791ce573473314c741b8b6b0779c1f5156a33c24e54c',
        82260,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'eae99ba15e584587a39b40e2c6b930d2c6da34555025ef2fcecdad8b5d1096ec',
        66644,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '16462e88dea5568eff3522e2b0e80ac4943e7ade072e98099a0ced914809837a',
        81364,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '89293c9cb0897a9fbf4e63241a6b72e62599bf45fe58a6163b953a9c980ad1f8',
        65616,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NoticiaText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noticia Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noticia+Text
  static TextTheme noticiaTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.noticiaText(textStyle: textTheme?.display4),
      display3: GoogleFonts.noticiaText(textStyle: textTheme?.display3),
      display2: GoogleFonts.noticiaText(textStyle: textTheme?.display2),
      display1: GoogleFonts.noticiaText(textStyle: textTheme?.display1),
      headline: GoogleFonts.noticiaText(textStyle: textTheme?.headline),
      title: GoogleFonts.noticiaText(textStyle: textTheme?.title),
      subhead: GoogleFonts.noticiaText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.noticiaText(textStyle: textTheme?.body2),
      body1: GoogleFonts.noticiaText(textStyle: textTheme?.body1),
      caption: GoogleFonts.noticiaText(textStyle: textTheme?.caption),
      button: GoogleFonts.noticiaText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.noticiaText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.noticiaText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Color Emoji Compat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Color+Emoji+Compat
  static TextStyle notoColorEmojiCompat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '975e5d89d39fa5ce6e443f0acba2d714cdff5675202a3ce66012c61a5fec1698',
        10236828,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoColorEmojiCompat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Color Emoji Compat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Color+Emoji+Compat
  static TextTheme notoColorEmojiCompatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.headline),
      title: GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.caption),
      button: GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.notoColorEmojiCompat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans
  static TextStyle notoSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7ae7b625c88992d250a617f91f64e254aa6ea78ca904f1e5fc1f588f0bb9a4ef',
        310656,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3b65d8f4cdb5997c9e205e125755bec66ef6cd73fadfbf1b6b8b8592d4a952e3',
        211128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f16366c45a8cac801cadd57c692f16cf4c967e3758cf25a911f7df101c23dc11',
        307772,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2b36c5bae3f90cb9def112b8d15a224e0f0e4a0a75a5d83718690c6927872140',
        214176,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans
  static TextTheme notoSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSans(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSans(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif
  static TextStyle notoSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '756d85930a29b444fc130d6ab854e9f796a951dff740c2bedb926522aa2db185',
        219488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3a8f4b27348c68ceb866bc4d52c0eae507c8cf764c1ab8d398805aeb89e40eb6',
        220592,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b8ab5cf0042204e461a5d83a980849507daa6ef58dda05725bcfa7403675eb0d',
        220292,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fff456cbd82e58d6ca98db85fc03a22b982377a0f7e36525541d06b1eaaa1db0',
        233960,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif
  static TextTheme notoSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Cut font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Cut
  static TextStyle novaCut({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '543ab5f33cdf7dc59059344f4a7edc567bd3041f068be2f42c28b47d67dcd3ba',
        52852,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaCut',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Cut font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Cut
  static TextTheme novaCutTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaCut(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaCut(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaCut(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaCut(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaCut(textStyle: textTheme?.headline),
      title: GoogleFonts.novaCut(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaCut(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaCut(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaCut(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaCut(textStyle: textTheme?.caption),
      button: GoogleFonts.novaCut(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaCut(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaCut(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Flat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Flat
  static TextStyle novaFlat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '532bddc6fc21c8561e5bcd3b4e0378be147a5f2eaff0e7e9624374551f0c4a2b',
        53976,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaFlat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Flat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Flat
  static TextTheme novaFlatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaFlat(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaFlat(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaFlat(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaFlat(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaFlat(textStyle: textTheme?.headline),
      title: GoogleFonts.novaFlat(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaFlat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaFlat(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaFlat(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaFlat(textStyle: textTheme?.caption),
      button: GoogleFonts.novaFlat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaFlat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaFlat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Mono
  static TextStyle novaMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b8d5ca79e024fdc4cd75176241d8d2b12f485ddee89219d04d8210d4f53e8919',
        156104,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Mono
  static TextTheme novaMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaMono(textStyle: textTheme?.headline),
      title: GoogleFonts.novaMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaMono(textStyle: textTheme?.caption),
      button: GoogleFonts.novaMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Oval font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Oval
  static TextStyle novaOval({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '73667c60ecac141cd425d3162ed4340d8b511095054d82311ae58c07da3deba4',
        56484,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaOval',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Oval font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Oval
  static TextTheme novaOvalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaOval(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaOval(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaOval(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaOval(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaOval(textStyle: textTheme?.headline),
      title: GoogleFonts.novaOval(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaOval(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaOval(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaOval(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaOval(textStyle: textTheme?.caption),
      button: GoogleFonts.novaOval(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaOval(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaOval(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Round font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Round
  static TextStyle novaRound({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '153aad90d58ece4ea5c7af76531c3fac5f2cfd1c45563654100ee416c5250af1',
        53704,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaRound',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Round font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Round
  static TextTheme novaRoundTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaRound(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaRound(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaRound(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaRound(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaRound(textStyle: textTheme?.headline),
      title: GoogleFonts.novaRound(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaRound(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaRound(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaRound(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaRound(textStyle: textTheme?.caption),
      button: GoogleFonts.novaRound(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaRound(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaRound(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Script
  static TextStyle novaScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9a1e6015bbc608ce441cf104443e50cf0a417624044e945f9d6f4bd0fbfd3e96',
        66560,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Script
  static TextTheme novaScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaScript(textStyle: textTheme?.headline),
      title: GoogleFonts.novaScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaScript(textStyle: textTheme?.caption),
      button: GoogleFonts.novaScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Slim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Slim
  static TextStyle novaSlim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1b56497df8d2fd1b918c16eb9ff0e33f3d57c66a8c3b83e0d23aa0124ae67ca5',
        53708,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaSlim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Slim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Slim
  static TextTheme novaSlimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaSlim(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaSlim(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaSlim(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaSlim(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaSlim(textStyle: textTheme?.headline),
      title: GoogleFonts.novaSlim(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaSlim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaSlim(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaSlim(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaSlim(textStyle: textTheme?.caption),
      button: GoogleFonts.novaSlim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaSlim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaSlim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Square font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Square
  static TextStyle novaSquare({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e0a393378490eb55bf6732aca6c44a808436009d82e3d1c08bfe96e079af967c',
        49156,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaSquare',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Square font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Square
  static TextTheme novaSquareTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaSquare(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaSquare(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaSquare(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaSquare(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaSquare(textStyle: textTheme?.headline),
      title: GoogleFonts.novaSquare(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaSquare(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaSquare(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaSquare(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaSquare(textStyle: textTheme?.caption),
      button: GoogleFonts.novaSquare(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaSquare(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaSquare(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Numans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Numans
  static TextStyle numans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '77ee8c9adcd406c31bd7c13355d741311f9644b995946fe712a47d15fe49907e',
        39320,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Numans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Numans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Numans
  static TextTheme numansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.numans(textStyle: textTheme?.display4),
      display3: GoogleFonts.numans(textStyle: textTheme?.display3),
      display2: GoogleFonts.numans(textStyle: textTheme?.display2),
      display1: GoogleFonts.numans(textStyle: textTheme?.display1),
      headline: GoogleFonts.numans(textStyle: textTheme?.headline),
      title: GoogleFonts.numans(textStyle: textTheme?.title),
      subhead: GoogleFonts.numans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.numans(textStyle: textTheme?.body2),
      body1: GoogleFonts.numans(textStyle: textTheme?.body1),
      caption: GoogleFonts.numans(textStyle: textTheme?.caption),
      button: GoogleFonts.numans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.numans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.numans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nunito font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nunito
  static TextStyle nunito({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6b0fb0ec88912f1ff7a203e8c74ec905e0f2333d071fcb6aa512434f693ed426',
        84536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e542c8162e83b8b4a246d9752149784b7a910e9079625dfe29dfa33afcdacd7f',
        85516,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b6d1ca92958aefa0ca13e7461a345871a0c815ceddf57dff8f143c5cefe954ac',
        84496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'bac03390f60c9c7b5298d6e7849699b7c337daf835bb93fdff988865b0590410',
        85628,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '86b77a6cf443c94b0310523682920874155c008981b3bb827cff87b769309527',
        84452,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8d666361a790f47bc95f249d2c144967589066f4c39f08d2d6a9afa7bf65570d',
        85404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '73212904c911defbb848aea031cf5c7bc5285462708823e12fdb1038f8488039',
        84440,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f3dd598262205c5e81b5834c0a103e1fd79a067d9fab79eee988633314bd4f91',
        85572,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '443daf06190f4c7abd94b7917adb41656e6014e81c12eb036656d63f2b0c08a3',
        84332,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '895450a4f7d173b7729b5b09d6b86710da891fa88870c08630abc1c3c186f8ea',
        85344,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '18790abbb2d00a39aa0f2ddf3af3a275ce1328915d899d44e31fc996c651dc5d',
        84280,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '18558eee9acc53f9de8633498a026360f25c82ef2a1e12b2ec7b9e736237be90',
        85276,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '51945e9a938a0ff892a18d5e623e439bd2c363d1cf2e13251b78f545f1de1d09',
        84400,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b3cebdbb4bdd22cce2495c53142cf925a2e430788ce890e6692637f5d4bb5af4',
        85376,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Nunito',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nunito font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nunito
  static TextTheme nunitoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nunito(textStyle: textTheme?.display4),
      display3: GoogleFonts.nunito(textStyle: textTheme?.display3),
      display2: GoogleFonts.nunito(textStyle: textTheme?.display2),
      display1: GoogleFonts.nunito(textStyle: textTheme?.display1),
      headline: GoogleFonts.nunito(textStyle: textTheme?.headline),
      title: GoogleFonts.nunito(textStyle: textTheme?.title),
      subhead: GoogleFonts.nunito(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nunito(textStyle: textTheme?.body2),
      body1: GoogleFonts.nunito(textStyle: textTheme?.body1),
      caption: GoogleFonts.nunito(textStyle: textTheme?.caption),
      button: GoogleFonts.nunito(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nunito(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nunito(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nunito Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nunito+Sans
  static TextStyle nunitoSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '70c2474c36bf599083e387d302c27f28e5439ccd1d15425222ba9855b31f6e11',
        72256,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c77baab8ad61508949ffaf4c0fc2381d7f31ddc2f12f24bd32fda15d0f02970a',
        73272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5af44ca8126245c16771271ce081fc4c5f5801d190ca549007575c51ec1c91da',
        71848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'acfe4eb8ed22882df2b122cfe78b0bd761d3025ed62826d5335856d565237582',
        72916,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3b369d5939d0bdfcbe583bb27259c6f6616b01b0948a86dade1dd3ec128c3898',
        71716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '988d1d496236aa9ab3e63745e0d5d82783762ea4d3a21d1940ffa2ff7111b664',
        72700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '62d9b0c17a7423bf90868c8da851ce9b40f15422fe0604d85f036703a60f6807',
        71704,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '79fc6cab022106d0daaf1abc5b854c8a876df8e831445c71bc095e8be2a9bd1a',
        72760,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '471cb67b6491aee31f19c1ba10edb324872722bfd6b848706ba31614fe6e1655',
        71640,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'cf6f24fcf4a51b61957a7b72cb3e4c38fc3a9260e5323ee20a7b24bb2c522255',
        72560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7778244928e2e17a87dc2b7bf3a424a284ce6d4cdd2bd9a3f27fbbb31e7a1dcb',
        71468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c0bbb1deb95af6b335d94ee8dd132d4ba26aaee59cd749c84bf1c7609a164748',
        72264,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '76da9a3301eb15a1f2488e15b4385547bcde1c10b13035937296cef72d4deee6',
        71596,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1ef6bb692fd273ef402051d20962975c507172596da00ed72faf7907d1e00118',
        72484,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NunitoSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nunito Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nunito+Sans
  static TextTheme nunitoSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nunitoSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.nunitoSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.nunitoSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.nunitoSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.nunitoSans(textStyle: textTheme?.headline),
      title: GoogleFonts.nunitoSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.nunitoSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nunitoSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.nunitoSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.nunitoSans(textStyle: textTheme?.caption),
      button: GoogleFonts.nunitoSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nunitoSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nunitoSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Odor Mean Chey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Odor+Mean+Chey
  static TextStyle odorMeanChey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '50cfa9e8e065a77d82613a14408be3f61743af92c0b938b32e0fba703c21f027',
        294900,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OdorMeanChey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Odor Mean Chey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Odor+Mean+Chey
  static TextTheme odorMeanCheyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.odorMeanChey(textStyle: textTheme?.display4),
      display3: GoogleFonts.odorMeanChey(textStyle: textTheme?.display3),
      display2: GoogleFonts.odorMeanChey(textStyle: textTheme?.display2),
      display1: GoogleFonts.odorMeanChey(textStyle: textTheme?.display1),
      headline: GoogleFonts.odorMeanChey(textStyle: textTheme?.headline),
      title: GoogleFonts.odorMeanChey(textStyle: textTheme?.title),
      subhead: GoogleFonts.odorMeanChey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.odorMeanChey(textStyle: textTheme?.body2),
      body1: GoogleFonts.odorMeanChey(textStyle: textTheme?.body1),
      caption: GoogleFonts.odorMeanChey(textStyle: textTheme?.caption),
      button: GoogleFonts.odorMeanChey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.odorMeanChey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.odorMeanChey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Offside font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Offside
  static TextStyle offside({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c98690ef66d169347f8cc0792c75158c05d2b92130f122f890ac9cbd756c13e7',
        30792,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Offside',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Offside font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Offside
  static TextTheme offsideTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.offside(textStyle: textTheme?.display4),
      display3: GoogleFonts.offside(textStyle: textTheme?.display3),
      display2: GoogleFonts.offside(textStyle: textTheme?.display2),
      display1: GoogleFonts.offside(textStyle: textTheme?.display1),
      headline: GoogleFonts.offside(textStyle: textTheme?.headline),
      title: GoogleFonts.offside(textStyle: textTheme?.title),
      subhead: GoogleFonts.offside(textStyle: textTheme?.subhead),
      body2: GoogleFonts.offside(textStyle: textTheme?.body2),
      body1: GoogleFonts.offside(textStyle: textTheme?.body1),
      caption: GoogleFonts.offside(textStyle: textTheme?.caption),
      button: GoogleFonts.offside(textStyle: textTheme?.button),
      subtitle: GoogleFonts.offside(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.offside(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Old Standard TT font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Old+Standard+TT
  static TextStyle oldStandardTT({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0fc6378f19416dfb6ed096305aeb6abee213fa26cbab142c18d51d02e9eeb452',
        149944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9510de290956127c311e2965471c31d5c34905c6172d5b9af444bf336c9d956d',
        164788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '235d7e3e4dfc767cd24f3c17574e5fffc001f69a5af3942f47726c123762776a',
        149128,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OldStandardTT',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Old Standard TT font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Old+Standard+TT
  static TextTheme oldStandardTTTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oldStandardTT(textStyle: textTheme?.display4),
      display3: GoogleFonts.oldStandardTT(textStyle: textTheme?.display3),
      display2: GoogleFonts.oldStandardTT(textStyle: textTheme?.display2),
      display1: GoogleFonts.oldStandardTT(textStyle: textTheme?.display1),
      headline: GoogleFonts.oldStandardTT(textStyle: textTheme?.headline),
      title: GoogleFonts.oldStandardTT(textStyle: textTheme?.title),
      subhead: GoogleFonts.oldStandardTT(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oldStandardTT(textStyle: textTheme?.body2),
      body1: GoogleFonts.oldStandardTT(textStyle: textTheme?.body1),
      caption: GoogleFonts.oldStandardTT(textStyle: textTheme?.caption),
      button: GoogleFonts.oldStandardTT(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oldStandardTT(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oldStandardTT(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oldenburg font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oldenburg
  static TextStyle oldenburg({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f8c67d292b49c2c0beb3655aa66d9ec6090cc7c03dcfd25c4dbc5518bc9c2ba4',
        46200,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oldenburg',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oldenburg font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oldenburg
  static TextTheme oldenburgTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oldenburg(textStyle: textTheme?.display4),
      display3: GoogleFonts.oldenburg(textStyle: textTheme?.display3),
      display2: GoogleFonts.oldenburg(textStyle: textTheme?.display2),
      display1: GoogleFonts.oldenburg(textStyle: textTheme?.display1),
      headline: GoogleFonts.oldenburg(textStyle: textTheme?.headline),
      title: GoogleFonts.oldenburg(textStyle: textTheme?.title),
      subhead: GoogleFonts.oldenburg(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oldenburg(textStyle: textTheme?.body2),
      body1: GoogleFonts.oldenburg(textStyle: textTheme?.body1),
      caption: GoogleFonts.oldenburg(textStyle: textTheme?.caption),
      button: GoogleFonts.oldenburg(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oldenburg(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oldenburg(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oleo Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oleo+Script
  static TextStyle oleoScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e45b8be9acc97bbb496e30675fa48edc79f4cfe2e8c66346914c8264acbe18b3',
        34932,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5742e5a26ecfd414f7f87868d0fb5fefead55b1227f381bfefe5243750279804',
        34580,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OleoScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oleo Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oleo+Script
  static TextTheme oleoScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oleoScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.oleoScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.oleoScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.oleoScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.oleoScript(textStyle: textTheme?.headline),
      title: GoogleFonts.oleoScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.oleoScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oleoScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.oleoScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.oleoScript(textStyle: textTheme?.caption),
      button: GoogleFonts.oleoScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oleoScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oleoScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oleo Script Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oleo+Script+Swash+Caps
  static TextStyle oleoScriptSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9375d47eb832ce8884342c974dccc6d94746d0e57dd79232ee81a5ab8c9d36a5',
        40040,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fefbbb389f88ec3c2fdca446b6cd4543a073c75e48b59a1ca1c1fc03ef8756b1',
        39736,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OleoScriptSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oleo Script Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oleo+Script+Swash+Caps
  static TextTheme oleoScriptSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Open Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Open+Sans
  static TextStyle openSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eacd6dddc04472f7143fcfe208f2e1bcd372f6baa8574529deaa2d5961e4d990',
        187204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '49c8ebe40f102f7ad2dd433e64a028047fc85d52d305404b99d691e7c6de6c84',
        190952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7b37b8abba9dcb01b9474da19527db14307fd9211e34e4d8a3d77dc9a19f2753',
        186620,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4d84c30311be3a86ed8993c8180488f191020fae18ee4ccbd0208384a37e5fcc',
        190900,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bfdb79179948b408b6573789e358547c8b4b589b73a7eaf8781b17c452785032',
        187252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ee3556d7dd065b889a31834e7e604d8501cc86bf4d360e5e2d0291abb30c8a86',
        190272,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '39b0f5fd8bd8495e7ba04ea5bd88e0fa7ed612a5c54b6f83bc77a7715c517d88',
        187976,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6ec2660f3bd03b0f3f097fbc1c23f351f7582dc5c8859eaf84be1fd2a074089a',
        190768,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6b5975e42b3d385f32384d58429336513a51ab0845da7723ee788a0046c844a9',
        187396,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '22818920197a7a95e75e2f91378fcc7e5f802f6067e933050b85732b71e3755e',
        191556,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '04a7cf776cec6c53387f15bd8878b365d22ea65c97dfd605c269b3774e4e7ed2',
        186164,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c5330d8a82169e940228bf53acb980b56a23fb1f640d6bf8b7e18a8681d67eda',
        189912,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9b8228ed1f9d087708d275dcc32be58269ffaf9cd7f8028db765305347303f88',
        229856,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OpenSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Open Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Open+Sans
  static TextTheme openSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.openSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.openSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.openSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.openSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.openSans(textStyle: textTheme?.headline),
      title: GoogleFonts.openSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.openSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.openSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.openSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.openSans(textStyle: textTheme?.caption),
      button: GoogleFonts.openSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.openSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.openSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oranienbaum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oranienbaum
  static TextStyle oranienbaum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ce3ec0eb54fc0cdef2aae64151cb3dc95720f5347739c1c1d19e6d2bb3629d6e',
        88736,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oranienbaum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oranienbaum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oranienbaum
  static TextTheme oranienbaumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oranienbaum(textStyle: textTheme?.display4),
      display3: GoogleFonts.oranienbaum(textStyle: textTheme?.display3),
      display2: GoogleFonts.oranienbaum(textStyle: textTheme?.display2),
      display1: GoogleFonts.oranienbaum(textStyle: textTheme?.display1),
      headline: GoogleFonts.oranienbaum(textStyle: textTheme?.headline),
      title: GoogleFonts.oranienbaum(textStyle: textTheme?.title),
      subhead: GoogleFonts.oranienbaum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oranienbaum(textStyle: textTheme?.body2),
      body1: GoogleFonts.oranienbaum(textStyle: textTheme?.body1),
      caption: GoogleFonts.oranienbaum(textStyle: textTheme?.caption),
      button: GoogleFonts.oranienbaum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oranienbaum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oranienbaum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Orbitron font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Orbitron
  static TextStyle orbitron({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '92d53d02a61d246157ee4ac3e2668206b546a454087e25530c48918b92bfce32',
        39048,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1c174158cbedc3b8323f310b03842e82bc72c5fd2d5327ee80671506188cc6cc',
        39312,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'baf59aa462bae9b1e738270aa2b901810db31788e78774046146f315809bc1a6',
        38148,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3853d940cd873a88dc5e24918311876228ef02a6216677db898c41efccc598f0',
        37192,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Orbitron',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Orbitron font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Orbitron
  static TextTheme orbitronTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.orbitron(textStyle: textTheme?.display4),
      display3: GoogleFonts.orbitron(textStyle: textTheme?.display3),
      display2: GoogleFonts.orbitron(textStyle: textTheme?.display2),
      display1: GoogleFonts.orbitron(textStyle: textTheme?.display1),
      headline: GoogleFonts.orbitron(textStyle: textTheme?.headline),
      title: GoogleFonts.orbitron(textStyle: textTheme?.title),
      subhead: GoogleFonts.orbitron(textStyle: textTheme?.subhead),
      body2: GoogleFonts.orbitron(textStyle: textTheme?.body2),
      body1: GoogleFonts.orbitron(textStyle: textTheme?.body1),
      caption: GoogleFonts.orbitron(textStyle: textTheme?.caption),
      button: GoogleFonts.orbitron(textStyle: textTheme?.button),
      subtitle: GoogleFonts.orbitron(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.orbitron(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oregano font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oregano
  static TextStyle oregano({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e94ad5230aca64ae37dfe726233d5567a0743967af08b68b44f81d2b3da30d36',
        79904,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'afbb45b2855b15596c6f30346e28c0c3cfb2145954f5abfaf9bf3b9f0b8e2f1d',
        86584,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oregano',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oregano font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oregano
  static TextTheme oreganoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oregano(textStyle: textTheme?.display4),
      display3: GoogleFonts.oregano(textStyle: textTheme?.display3),
      display2: GoogleFonts.oregano(textStyle: textTheme?.display2),
      display1: GoogleFonts.oregano(textStyle: textTheme?.display1),
      headline: GoogleFonts.oregano(textStyle: textTheme?.headline),
      title: GoogleFonts.oregano(textStyle: textTheme?.title),
      subhead: GoogleFonts.oregano(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oregano(textStyle: textTheme?.body2),
      body1: GoogleFonts.oregano(textStyle: textTheme?.body1),
      caption: GoogleFonts.oregano(textStyle: textTheme?.caption),
      button: GoogleFonts.oregano(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oregano(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oregano(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Orienta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Orienta
  static TextStyle orienta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6d087fac0635ed6186f7b55f474c1522ed229582419b850a3f77f333d9b0a355',
        25648,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Orienta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Orienta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Orienta
  static TextTheme orientaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.orienta(textStyle: textTheme?.display4),
      display3: GoogleFonts.orienta(textStyle: textTheme?.display3),
      display2: GoogleFonts.orienta(textStyle: textTheme?.display2),
      display1: GoogleFonts.orienta(textStyle: textTheme?.display1),
      headline: GoogleFonts.orienta(textStyle: textTheme?.headline),
      title: GoogleFonts.orienta(textStyle: textTheme?.title),
      subhead: GoogleFonts.orienta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.orienta(textStyle: textTheme?.body2),
      body1: GoogleFonts.orienta(textStyle: textTheme?.body1),
      caption: GoogleFonts.orienta(textStyle: textTheme?.caption),
      button: GoogleFonts.orienta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.orienta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.orienta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Original Surfer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Original+Surfer
  static TextStyle originalSurfer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '433a93a4934c3d3f80f80041f426946c8347e4e210da65e9a8adff9d70180e23',
        57376,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OriginalSurfer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Original Surfer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Original+Surfer
  static TextTheme originalSurferTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.originalSurfer(textStyle: textTheme?.display4),
      display3: GoogleFonts.originalSurfer(textStyle: textTheme?.display3),
      display2: GoogleFonts.originalSurfer(textStyle: textTheme?.display2),
      display1: GoogleFonts.originalSurfer(textStyle: textTheme?.display1),
      headline: GoogleFonts.originalSurfer(textStyle: textTheme?.headline),
      title: GoogleFonts.originalSurfer(textStyle: textTheme?.title),
      subhead: GoogleFonts.originalSurfer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.originalSurfer(textStyle: textTheme?.body2),
      body1: GoogleFonts.originalSurfer(textStyle: textTheme?.body1),
      caption: GoogleFonts.originalSurfer(textStyle: textTheme?.caption),
      button: GoogleFonts.originalSurfer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.originalSurfer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.originalSurfer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oswald font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oswald
  static TextStyle oswald({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '73cf9867fcced84ac0fd26238bf74e4e1f69dcbefc5ff327c2a69f6c5c107e5d',
        65000,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f10d40bae3fb58ed7a554af7cb46beca6d4f2866de12223b8e349f1b30c76968',
        64960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9dc4929f8d8935621ca4717817eb3167fc881d03d496c6dca51ff292f730c873',
        64572,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f59f85cc613954e6acc66c7f89abe9b46c1add1b2236d5bee71f4a71a7769402',
        65536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c0d6ab388b1c3537b78f8976a204a6dc2c5d62b73ae37506d1c93575e52420f2',
        65388,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a11b684909ba0ee2b2c493e89626c6fa9df02e25dec537e42127fa0b1a4e5e92',
        65232,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oswald',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oswald font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oswald
  static TextTheme oswaldTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oswald(textStyle: textTheme?.display4),
      display3: GoogleFonts.oswald(textStyle: textTheme?.display3),
      display2: GoogleFonts.oswald(textStyle: textTheme?.display2),
      display1: GoogleFonts.oswald(textStyle: textTheme?.display1),
      headline: GoogleFonts.oswald(textStyle: textTheme?.headline),
      title: GoogleFonts.oswald(textStyle: textTheme?.title),
      subhead: GoogleFonts.oswald(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oswald(textStyle: textTheme?.body2),
      body1: GoogleFonts.oswald(textStyle: textTheme?.body1),
      caption: GoogleFonts.oswald(textStyle: textTheme?.caption),
      button: GoogleFonts.oswald(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oswald(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oswald(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Over the Rainbow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Over+the+Rainbow
  static TextStyle overtheRainbow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3bbe72603fa8df4b1b63a308cd07fb091054678395faeddc3fc2388f614bbd29',
        45732,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OvertheRainbow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Over the Rainbow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Over+the+Rainbow
  static TextTheme overtheRainbowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overtheRainbow(textStyle: textTheme?.display4),
      display3: GoogleFonts.overtheRainbow(textStyle: textTheme?.display3),
      display2: GoogleFonts.overtheRainbow(textStyle: textTheme?.display2),
      display1: GoogleFonts.overtheRainbow(textStyle: textTheme?.display1),
      headline: GoogleFonts.overtheRainbow(textStyle: textTheme?.headline),
      title: GoogleFonts.overtheRainbow(textStyle: textTheme?.title),
      subhead: GoogleFonts.overtheRainbow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overtheRainbow(textStyle: textTheme?.body2),
      body1: GoogleFonts.overtheRainbow(textStyle: textTheme?.body1),
      caption: GoogleFonts.overtheRainbow(textStyle: textTheme?.caption),
      button: GoogleFonts.overtheRainbow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overtheRainbow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overtheRainbow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Overlock font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overlock
  static TextStyle overlock({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f4eb336168d4c74d8a4795ef601c2c88a8c6e58cc2029bb029abde86dba8de8d',
        49100,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '862e0a21cd810bed2e0c1809a8799cab17a8a9c3a1b24486e797286d12bd47e0',
        43720,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c181ce17a8b786d224bdfb18e0b0fd345243fcdf4fcdd4a301a6b68c6898e1bc',
        41936,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ac1a5a813f6667fe8e4a60d3450a57e9e8dcbb9beaa2619a979bafcf0261698f',
        45416,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2f8bded0796145dd91249b13aecd8e185ea1d9222a3846c3873ad486679f5524',
        42788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'dd19e6be709bf9ee365d90ee333b1766e7714578cd954bb3b5dcb1fae2e2022a',
        43736,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Overlock',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Overlock font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overlock
  static TextTheme overlockTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overlock(textStyle: textTheme?.display4),
      display3: GoogleFonts.overlock(textStyle: textTheme?.display3),
      display2: GoogleFonts.overlock(textStyle: textTheme?.display2),
      display1: GoogleFonts.overlock(textStyle: textTheme?.display1),
      headline: GoogleFonts.overlock(textStyle: textTheme?.headline),
      title: GoogleFonts.overlock(textStyle: textTheme?.title),
      subhead: GoogleFonts.overlock(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overlock(textStyle: textTheme?.body2),
      body1: GoogleFonts.overlock(textStyle: textTheme?.body1),
      caption: GoogleFonts.overlock(textStyle: textTheme?.caption),
      button: GoogleFonts.overlock(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overlock(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overlock(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Overlock SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overlock+SC
  static TextStyle overlockSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3d11bc0fe1ba6d164281473c9b2a0321ffa27975909e1a6ce39c31f5d16b2372',
        36592,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OverlockSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Overlock SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overlock+SC
  static TextTheme overlockSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overlockSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.overlockSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.overlockSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.overlockSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.overlockSC(textStyle: textTheme?.headline),
      title: GoogleFonts.overlockSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.overlockSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overlockSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.overlockSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.overlockSC(textStyle: textTheme?.caption),
      button: GoogleFonts.overlockSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overlockSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overlockSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Overpass font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overpass
  static TextStyle overpass({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c5a2c38a969c611bc238e0242455585ccfc48cf11fc9cd85063641ab4b2d7bb9',
        82300,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8ecef7f4baf8bb9d34f1619e0a9ee510cf744ff855c5d5b856e508d1b2af0b81',
        87368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '54947a66287be19cdb01fbceed60457202e90bdf36580195800894eb70d641ff',
        83236,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4ddb32270da20661fabc6aa1e944e280881d9603059b11da50ca0b655b159bfe',
        87320,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba40f1801228e6e65c3d4a8e7ba94d86c2855de57d4193bf93aaaf65d91138bb',
        82468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b2c69aa4282875efbbd517f89eb8a9a2ff7ff6523948bec58365e27a992e2474',
        87092,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a5d3ea903c065a7e458256aedede6ee1b27ab4b67c6af46c31eee97fcf66108e',
        82184,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '89e039660730531554ae5f96a9ea3faae03107ccb63ca23fff3acebd28ca7dce',
        86832,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c474f4f6c3a2d86f49aadc0cd3d5bfb14968ecdc2509b30baad6c0ce881bddb6',
        78972,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8a01f2c08d4b650cb7c597e094ff0db9cb4ae6b1bfc79ad9af8a20ba275a567d',
        85736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '43a5239e32a28e8d1efbf2a9b8922042b98e6310bb1ebf89af5a86bdfb35d997',
        80524,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '06068d83442ba5f4324460ab2602523f4b89643f8afa4440fa2051e47a16e95f',
        85472,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '894fdd41407a09bc7c4336dc3462d749cd7381ab80e320fa78a0475311e9ac69',
        78216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'aa9e63cded98890be1bc09083dcb64378b7f35f4af84f43e9635e50d404cdb53',
        85280,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '59f5ad4bb5b4469f7c3079f4bd6b3996a5c81d01f9f4311c74d68e9411f66c51',
        80720,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a9e3b080c9a28d813d94e69fea3eb65560b09cefb4e4653b4baa47a7d95be402',
        85204,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Overpass',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Overpass font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overpass
  static TextTheme overpassTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overpass(textStyle: textTheme?.display4),
      display3: GoogleFonts.overpass(textStyle: textTheme?.display3),
      display2: GoogleFonts.overpass(textStyle: textTheme?.display2),
      display1: GoogleFonts.overpass(textStyle: textTheme?.display1),
      headline: GoogleFonts.overpass(textStyle: textTheme?.headline),
      title: GoogleFonts.overpass(textStyle: textTheme?.title),
      subhead: GoogleFonts.overpass(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overpass(textStyle: textTheme?.body2),
      body1: GoogleFonts.overpass(textStyle: textTheme?.body1),
      caption: GoogleFonts.overpass(textStyle: textTheme?.caption),
      button: GoogleFonts.overpass(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overpass(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overpass(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Overpass Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overpass+Mono
  static TextStyle overpassMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a46cc06eb5b5001bdf1404b0e24fb82ee14159aca202af7094984ff4d48896dd',
        118416,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd3a8c0a4613ebae3d21471198e12e57aa70e9f051f7592e3942953e2c36bd190',
        118208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f6b8f8180ef4c0f650402aa53effdd61f2d9771c4973d07f722d14ebd60e59da',
        117696,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd8f645bd2f708d8127ab1d3078ae22195543fbe52abee9362a8ed5a980cb1648',
        117800,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OverpassMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Overpass Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overpass+Mono
  static TextTheme overpassMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overpassMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.overpassMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.overpassMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.overpassMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.overpassMono(textStyle: textTheme?.headline),
      title: GoogleFonts.overpassMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.overpassMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overpassMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.overpassMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.overpassMono(textStyle: textTheme?.caption),
      button: GoogleFonts.overpassMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overpassMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overpassMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ovo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ovo
  static TextStyle ovo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '50e634088f389dcf2f463aa182c8ccb9d19042decdd216fed34fa70b5dfb49fd',
        50840,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ovo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ovo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ovo
  static TextTheme ovoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ovo(textStyle: textTheme?.display4),
      display3: GoogleFonts.ovo(textStyle: textTheme?.display3),
      display2: GoogleFonts.ovo(textStyle: textTheme?.display2),
      display1: GoogleFonts.ovo(textStyle: textTheme?.display1),
      headline: GoogleFonts.ovo(textStyle: textTheme?.headline),
      title: GoogleFonts.ovo(textStyle: textTheme?.title),
      subhead: GoogleFonts.ovo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ovo(textStyle: textTheme?.body2),
      body1: GoogleFonts.ovo(textStyle: textTheme?.body1),
      caption: GoogleFonts.ovo(textStyle: textTheme?.caption),
      button: GoogleFonts.ovo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ovo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ovo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oxygen font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oxygen
  static TextStyle oxygen({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7e1244b4a11ee9f21f86e2f25d7dd963f8e8f93d7b8e411620c959f4cf66fa2',
        27560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f6497c6c0bb7a884669e84095f3e56550bd7c0ccba79656b0af00d8b3200d790',
        29168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4bccf594c248e25c3da7e37b9dc5e9cddfcf3bc405504b7d15f4523358d81f76',
        30052,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oxygen',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oxygen font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oxygen
  static TextTheme oxygenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oxygen(textStyle: textTheme?.display4),
      display3: GoogleFonts.oxygen(textStyle: textTheme?.display3),
      display2: GoogleFonts.oxygen(textStyle: textTheme?.display2),
      display1: GoogleFonts.oxygen(textStyle: textTheme?.display1),
      headline: GoogleFonts.oxygen(textStyle: textTheme?.headline),
      title: GoogleFonts.oxygen(textStyle: textTheme?.title),
      subhead: GoogleFonts.oxygen(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oxygen(textStyle: textTheme?.body2),
      body1: GoogleFonts.oxygen(textStyle: textTheme?.body1),
      caption: GoogleFonts.oxygen(textStyle: textTheme?.caption),
      button: GoogleFonts.oxygen(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oxygen(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oxygen(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oxygen Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oxygen+Mono
  static TextStyle oxygenMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a8f20c04bb875a24603d2f13aa59fa112316075b0d8531e06a1212759450a20',
        28468,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OxygenMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oxygen Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oxygen+Mono
  static TextTheme oxygenMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oxygenMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.oxygenMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.oxygenMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.oxygenMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.oxygenMono(textStyle: textTheme?.headline),
      title: GoogleFonts.oxygenMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.oxygenMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oxygenMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.oxygenMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.oxygenMono(textStyle: textTheme?.caption),
      button: GoogleFonts.oxygenMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oxygenMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oxygenMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Mono
  static TextStyle pTMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '76d11b0f53258fdd742b27fc7e194046840c2fc0cafe1246aa0c27718a5f031a',
        84568,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Mono
  static TextTheme pTMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTMono(textStyle: textTheme?.headline),
      title: GoogleFonts.pTMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTMono(textStyle: textTheme?.caption),
      button: GoogleFonts.pTMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans
  static TextStyle pTSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8a587dc4260abac4008021f8b9302115ee0f9616aee70d95d4d49f447f4df0f9',
        272864,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6de2d3f34e12548006ef800234119a1b1d90bba33fb1d33f5bf41577bc954338',
        276952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2a88a8de5aeccdc3e4febba14c9ade00ec49e16f2718050be6bc3f4f37e8ff0b',
        291536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a37694659d53ae08c11bf532f8871e90b911f61967c3e23f456e59e7c55b33e6',
        270132,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans
  static TextTheme pTSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSans(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSans(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Sans Caption font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans+Caption
  static TextStyle pTSansCaption({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1245ca967adbb79f480b169e92cf44a71ae4cb8571b9847ceb3de43e7235361c',
        260480,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f47afcc4feb502bfa6ca192ad230e0d743be26deb97832412722544b223ed461',
        291560,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSansCaption',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Sans Caption font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans+Caption
  static TextTheme pTSansCaptionTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSansCaption(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSansCaption(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSansCaption(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSansCaption(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSansCaption(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSansCaption(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSansCaption(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSansCaption(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSansCaption(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSansCaption(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSansCaption(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSansCaption(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSansCaption(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Sans Narrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans+Narrow
  static TextStyle pTSansNarrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d184233e6f48f81c6e510a1067d4f632052f899bf2f2bef4a69ab709bfe45a5',
        268240,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a16a62299cf1143c59a4ec676c956c6831a90698fd830de4c85632a83c56d52c',
        278220,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSansNarrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Sans Narrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans+Narrow
  static TextTheme pTSansNarrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSansNarrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSansNarrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSansNarrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSansNarrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSansNarrow(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSansNarrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSansNarrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSansNarrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSansNarrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSansNarrow(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSansNarrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSansNarrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSansNarrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Serif
  static TextStyle pTSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '77cd8f3a9ae2f3546135a48656a468afd4312d1ebf5720bb967ebe3a43291fa8',
        260788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c623ffd63812daa5b0776e75e7a99de63340eb1fa6d3d5692c27a5fe30e21c22',
        263700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8945a761fd4a69fd6eb9b058e025925dd964c9b2cf5cc02b14290746f6aaf356',
        261928,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ab351a82c9e93d363fcb9525df6f6d111fc14e15c3cf0d5e125e77ef0ddf5fd0',
        265096,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Serif
  static TextTheme pTSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Serif Caption font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Serif+Caption
  static TextStyle pTSerifCaption({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fa2de071d21315555c75861f438b09fdfc9205ed9845c49d401903c6db245582',
        255368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0d238ee69704d0810493bff87f27c3236c6c9b81abda84fba39091e70f47eb26',
        259580,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSerifCaption',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Serif Caption font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Serif+Caption
  static TextTheme pTSerifCaptionTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSerifCaption(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSerifCaption(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSerifCaption(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSerifCaption(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSerifCaption(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSerifCaption(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSerifCaption(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSerifCaption(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSerifCaption(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSerifCaption(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSerifCaption(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSerifCaption(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSerifCaption(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pacifico font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pacifico
  static TextStyle pacifico({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '03452c0b90c71f4088222325620904576503c4d5a3a6c563ee22d1e896788d3e',
        143508,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pacifico',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pacifico font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pacifico
  static TextTheme pacificoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pacifico(textStyle: textTheme?.display4),
      display3: GoogleFonts.pacifico(textStyle: textTheme?.display3),
      display2: GoogleFonts.pacifico(textStyle: textTheme?.display2),
      display1: GoogleFonts.pacifico(textStyle: textTheme?.display1),
      headline: GoogleFonts.pacifico(textStyle: textTheme?.headline),
      title: GoogleFonts.pacifico(textStyle: textTheme?.title),
      subhead: GoogleFonts.pacifico(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pacifico(textStyle: textTheme?.body2),
      body1: GoogleFonts.pacifico(textStyle: textTheme?.body1),
      caption: GoogleFonts.pacifico(textStyle: textTheme?.caption),
      button: GoogleFonts.pacifico(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pacifico(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pacifico(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Padauk font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Padauk
  static TextStyle padauk({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5326568d3a2c4690b03acaafdf444cd2e52712e7a16d96a3639b40f17fcfe8b0',
        408956,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a3054832e288beedeba883a9477e908a910c186e002a455277fb4c54e37518f6',
        416804,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Padauk',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Padauk font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Padauk
  static TextTheme padaukTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.padauk(textStyle: textTheme?.display4),
      display3: GoogleFonts.padauk(textStyle: textTheme?.display3),
      display2: GoogleFonts.padauk(textStyle: textTheme?.display2),
      display1: GoogleFonts.padauk(textStyle: textTheme?.display1),
      headline: GoogleFonts.padauk(textStyle: textTheme?.headline),
      title: GoogleFonts.padauk(textStyle: textTheme?.title),
      subhead: GoogleFonts.padauk(textStyle: textTheme?.subhead),
      body2: GoogleFonts.padauk(textStyle: textTheme?.body2),
      body1: GoogleFonts.padauk(textStyle: textTheme?.body1),
      caption: GoogleFonts.padauk(textStyle: textTheme?.caption),
      button: GoogleFonts.padauk(textStyle: textTheme?.button),
      subtitle: GoogleFonts.padauk(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.padauk(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Palanquin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Palanquin
  static TextStyle palanquin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c2f2587b9d7e9715b99bbe03f6115a2dcf52f8cb016c7e31f06e26561f3f13bb',
        273560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e3ae6db39173fbbc643b90005a108980c36ea6111e91516ed3e754cd247f965d',
        275156,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '94dbed29146fdc39c8979eff474e5210368a5276c9c7b55706418b745036a240',
        276496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a3fd79ddbba4270727bcb4649e1015a2726418eef7abd8cb984139bca11f5df5',
        284496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c027a6ee638527b57eed686cb93382141e9da3ad55c331614b735f4b26dfe2f9',
        283708,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e342fbd31bc4d7a837724b2e51ac0c6e4057d44809e8e984d2c72c0b0a3dc48a',
        283824,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a1812757fe429bab601701c1010e05f49540ea857170789a8ee91e0fe1d5e9d2',
        272160,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Palanquin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Palanquin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Palanquin
  static TextTheme palanquinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.palanquin(textStyle: textTheme?.display4),
      display3: GoogleFonts.palanquin(textStyle: textTheme?.display3),
      display2: GoogleFonts.palanquin(textStyle: textTheme?.display2),
      display1: GoogleFonts.palanquin(textStyle: textTheme?.display1),
      headline: GoogleFonts.palanquin(textStyle: textTheme?.headline),
      title: GoogleFonts.palanquin(textStyle: textTheme?.title),
      subhead: GoogleFonts.palanquin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.palanquin(textStyle: textTheme?.body2),
      body1: GoogleFonts.palanquin(textStyle: textTheme?.body1),
      caption: GoogleFonts.palanquin(textStyle: textTheme?.caption),
      button: GoogleFonts.palanquin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.palanquin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.palanquin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Palanquin Dark font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Palanquin+Dark
  static TextStyle palanquinDark({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2a564d738b34f664cbdc4ec631b53907f90205b8dd0e177be158ebc30b67182a',
        265580,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2741c907db3e5853a79489713ec11a8669cff876897076b98d70d302086296c9',
        273044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ee40721d326a2509669e0c3f41d846f48e353b774b15fb78426c4e812aadf4e9',
        274468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3f46195270b56b1dd32d5f48a0bb546a30e424b9d30ff4daabe395c2257a157e',
        265000,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PalanquinDark',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Palanquin Dark font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Palanquin+Dark
  static TextTheme palanquinDarkTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.palanquinDark(textStyle: textTheme?.display4),
      display3: GoogleFonts.palanquinDark(textStyle: textTheme?.display3),
      display2: GoogleFonts.palanquinDark(textStyle: textTheme?.display2),
      display1: GoogleFonts.palanquinDark(textStyle: textTheme?.display1),
      headline: GoogleFonts.palanquinDark(textStyle: textTheme?.headline),
      title: GoogleFonts.palanquinDark(textStyle: textTheme?.title),
      subhead: GoogleFonts.palanquinDark(textStyle: textTheme?.subhead),
      body2: GoogleFonts.palanquinDark(textStyle: textTheme?.body2),
      body1: GoogleFonts.palanquinDark(textStyle: textTheme?.body1),
      caption: GoogleFonts.palanquinDark(textStyle: textTheme?.caption),
      button: GoogleFonts.palanquinDark(textStyle: textTheme?.button),
      subtitle: GoogleFonts.palanquinDark(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.palanquinDark(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pangolin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pangolin
  static TextStyle pangolin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9da3dcb4b5f7ae5a76923e77c68da25e9539a3dcdcad7fd654387974f9ff89f4',
        238600,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pangolin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pangolin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pangolin
  static TextTheme pangolinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pangolin(textStyle: textTheme?.display4),
      display3: GoogleFonts.pangolin(textStyle: textTheme?.display3),
      display2: GoogleFonts.pangolin(textStyle: textTheme?.display2),
      display1: GoogleFonts.pangolin(textStyle: textTheme?.display1),
      headline: GoogleFonts.pangolin(textStyle: textTheme?.headline),
      title: GoogleFonts.pangolin(textStyle: textTheme?.title),
      subhead: GoogleFonts.pangolin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pangolin(textStyle: textTheme?.body2),
      body1: GoogleFonts.pangolin(textStyle: textTheme?.body1),
      caption: GoogleFonts.pangolin(textStyle: textTheme?.caption),
      button: GoogleFonts.pangolin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pangolin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pangolin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Paprika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Paprika
  static TextStyle paprika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3611025b91e6a3a1daf2e78541775555d832ba6b4f010ae8b4553d5d5be2bac6',
        42292,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Paprika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Paprika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Paprika
  static TextTheme paprikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.paprika(textStyle: textTheme?.display4),
      display3: GoogleFonts.paprika(textStyle: textTheme?.display3),
      display2: GoogleFonts.paprika(textStyle: textTheme?.display2),
      display1: GoogleFonts.paprika(textStyle: textTheme?.display1),
      headline: GoogleFonts.paprika(textStyle: textTheme?.headline),
      title: GoogleFonts.paprika(textStyle: textTheme?.title),
      subhead: GoogleFonts.paprika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.paprika(textStyle: textTheme?.body2),
      body1: GoogleFonts.paprika(textStyle: textTheme?.body1),
      caption: GoogleFonts.paprika(textStyle: textTheme?.caption),
      button: GoogleFonts.paprika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.paprika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.paprika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Parisienne font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Parisienne
  static TextStyle parisienne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b6fdb3a0ca128ad6afbc6c8892193cc2a122e6934dc75c4644f8819ca09b7042',
        60832,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Parisienne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Parisienne font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Parisienne
  static TextTheme parisienneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.parisienne(textStyle: textTheme?.display4),
      display3: GoogleFonts.parisienne(textStyle: textTheme?.display3),
      display2: GoogleFonts.parisienne(textStyle: textTheme?.display2),
      display1: GoogleFonts.parisienne(textStyle: textTheme?.display1),
      headline: GoogleFonts.parisienne(textStyle: textTheme?.headline),
      title: GoogleFonts.parisienne(textStyle: textTheme?.title),
      subhead: GoogleFonts.parisienne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.parisienne(textStyle: textTheme?.body2),
      body1: GoogleFonts.parisienne(textStyle: textTheme?.body1),
      caption: GoogleFonts.parisienne(textStyle: textTheme?.caption),
      button: GoogleFonts.parisienne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.parisienne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.parisienne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Passero One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Passero+One
  static TextStyle passeroOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b2d19067da678681f5952e5350d1924a2ac5a8a03eda9d27347e43a3ce35f8ad',
        33600,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PasseroOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Passero One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Passero+One
  static TextTheme passeroOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.passeroOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.passeroOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.passeroOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.passeroOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.passeroOne(textStyle: textTheme?.headline),
      title: GoogleFonts.passeroOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.passeroOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.passeroOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.passeroOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.passeroOne(textStyle: textTheme?.caption),
      button: GoogleFonts.passeroOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.passeroOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.passeroOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Passion One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Passion+One
  static TextStyle passionOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1f9e3f81509fa1087e3a4636d898f6ce048f4953bf6c06a6d79d9cb78115c03d',
        24640,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '567181e9763fb8cb33a51945378a8a2756c423cb05608d37fdc2e0d8ff170fa1',
        24420,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '351dd38c35e67c20b4ae84db1964391fd924cd245611616eacaf6b9e63113442',
        23980,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PassionOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Passion One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Passion+One
  static TextTheme passionOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.passionOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.passionOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.passionOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.passionOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.passionOne(textStyle: textTheme?.headline),
      title: GoogleFonts.passionOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.passionOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.passionOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.passionOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.passionOne(textStyle: textTheme?.caption),
      button: GoogleFonts.passionOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.passionOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.passionOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pathway Gothic One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pathway+Gothic+One
  static TextStyle pathwayGothicOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '39c8099ef615de3477faab7247ffd06193e4c4244406f6a3d888c1e1763a01cd',
        25172,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PathwayGothicOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pathway Gothic One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pathway+Gothic+One
  static TextTheme pathwayGothicOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.headline),
      title: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.caption),
      button: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Patrick Hand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patrick+Hand
  static TextStyle patrickHand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b63c9a7041a5fc7005d8f0580dd04bf71c5eed9b4b6d843857ccb8f2485ebbf6',
        122740,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PatrickHand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Patrick Hand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patrick+Hand
  static TextTheme patrickHandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.patrickHand(textStyle: textTheme?.display4),
      display3: GoogleFonts.patrickHand(textStyle: textTheme?.display3),
      display2: GoogleFonts.patrickHand(textStyle: textTheme?.display2),
      display1: GoogleFonts.patrickHand(textStyle: textTheme?.display1),
      headline: GoogleFonts.patrickHand(textStyle: textTheme?.headline),
      title: GoogleFonts.patrickHand(textStyle: textTheme?.title),
      subhead: GoogleFonts.patrickHand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.patrickHand(textStyle: textTheme?.body2),
      body1: GoogleFonts.patrickHand(textStyle: textTheme?.body1),
      caption: GoogleFonts.patrickHand(textStyle: textTheme?.caption),
      button: GoogleFonts.patrickHand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.patrickHand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.patrickHand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Patrick Hand SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patrick+Hand+SC
  static TextStyle patrickHandSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '73b9443b6806844f52e636b33036ac9bba72136e16d3e10e7fc43d906509238c',
        89760,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PatrickHandSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Patrick Hand SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patrick+Hand+SC
  static TextTheme patrickHandSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.patrickHandSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.patrickHandSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.patrickHandSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.patrickHandSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.patrickHandSC(textStyle: textTheme?.headline),
      title: GoogleFonts.patrickHandSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.patrickHandSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.patrickHandSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.patrickHandSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.patrickHandSC(textStyle: textTheme?.caption),
      button: GoogleFonts.patrickHandSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.patrickHandSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.patrickHandSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pattaya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pattaya
  static TextStyle pattaya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '041d4a84883eccfdd46adb393da062a32f3b3c0deafbd5431c6fb5e6c2669c7c',
        282908,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pattaya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pattaya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pattaya
  static TextTheme pattayaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pattaya(textStyle: textTheme?.display4),
      display3: GoogleFonts.pattaya(textStyle: textTheme?.display3),
      display2: GoogleFonts.pattaya(textStyle: textTheme?.display2),
      display1: GoogleFonts.pattaya(textStyle: textTheme?.display1),
      headline: GoogleFonts.pattaya(textStyle: textTheme?.headline),
      title: GoogleFonts.pattaya(textStyle: textTheme?.title),
      subhead: GoogleFonts.pattaya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pattaya(textStyle: textTheme?.body2),
      body1: GoogleFonts.pattaya(textStyle: textTheme?.body1),
      caption: GoogleFonts.pattaya(textStyle: textTheme?.caption),
      button: GoogleFonts.pattaya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pattaya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pattaya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Patua One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patua+One
  static TextStyle patuaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b23d7030cb223723e1ea6fe64ca5799ae86a5c9c7d7343dfce539e574a5004d0',
        35576,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PatuaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Patua One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patua+One
  static TextTheme patuaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.patuaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.patuaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.patuaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.patuaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.patuaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.patuaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.patuaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.patuaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.patuaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.patuaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.patuaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.patuaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.patuaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pavanam font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pavanam
  static TextStyle pavanam({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '177d645082f388adf4ae3cf8413e270d77cbb5f7b24b7d521cce366a857de30a',
        48596,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pavanam',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pavanam font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pavanam
  static TextTheme pavanamTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pavanam(textStyle: textTheme?.display4),
      display3: GoogleFonts.pavanam(textStyle: textTheme?.display3),
      display2: GoogleFonts.pavanam(textStyle: textTheme?.display2),
      display1: GoogleFonts.pavanam(textStyle: textTheme?.display1),
      headline: GoogleFonts.pavanam(textStyle: textTheme?.headline),
      title: GoogleFonts.pavanam(textStyle: textTheme?.title),
      subhead: GoogleFonts.pavanam(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pavanam(textStyle: textTheme?.body2),
      body1: GoogleFonts.pavanam(textStyle: textTheme?.body1),
      caption: GoogleFonts.pavanam(textStyle: textTheme?.caption),
      button: GoogleFonts.pavanam(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pavanam(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pavanam(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Paytone One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Paytone+One
  static TextStyle paytoneOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8b6fb867bea8e0668b3117749a0c761f24623a872f905f98462fb83791b88b00',
        187580,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PaytoneOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Paytone One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Paytone+One
  static TextTheme paytoneOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.paytoneOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.paytoneOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.paytoneOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.paytoneOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.paytoneOne(textStyle: textTheme?.headline),
      title: GoogleFonts.paytoneOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.paytoneOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.paytoneOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.paytoneOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.paytoneOne(textStyle: textTheme?.caption),
      button: GoogleFonts.paytoneOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.paytoneOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.paytoneOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Peddana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Peddana
  static TextStyle peddana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4c066d855b7652305b1b9d3d0308b0c71161bd1e83a7b4a8bdebadd005f749b6',
        492376,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Peddana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Peddana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Peddana
  static TextTheme peddanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.peddana(textStyle: textTheme?.display4),
      display3: GoogleFonts.peddana(textStyle: textTheme?.display3),
      display2: GoogleFonts.peddana(textStyle: textTheme?.display2),
      display1: GoogleFonts.peddana(textStyle: textTheme?.display1),
      headline: GoogleFonts.peddana(textStyle: textTheme?.headline),
      title: GoogleFonts.peddana(textStyle: textTheme?.title),
      subhead: GoogleFonts.peddana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.peddana(textStyle: textTheme?.body2),
      body1: GoogleFonts.peddana(textStyle: textTheme?.body1),
      caption: GoogleFonts.peddana(textStyle: textTheme?.caption),
      button: GoogleFonts.peddana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.peddana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.peddana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Peralta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Peralta
  static TextStyle peralta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '28a0d3b695c9ecde1fe0ab5e4dceac96b21749fe6a3df062847e363b47af3360',
        59184,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Peralta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Peralta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Peralta
  static TextTheme peraltaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.peralta(textStyle: textTheme?.display4),
      display3: GoogleFonts.peralta(textStyle: textTheme?.display3),
      display2: GoogleFonts.peralta(textStyle: textTheme?.display2),
      display1: GoogleFonts.peralta(textStyle: textTheme?.display1),
      headline: GoogleFonts.peralta(textStyle: textTheme?.headline),
      title: GoogleFonts.peralta(textStyle: textTheme?.title),
      subhead: GoogleFonts.peralta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.peralta(textStyle: textTheme?.body2),
      body1: GoogleFonts.peralta(textStyle: textTheme?.body1),
      caption: GoogleFonts.peralta(textStyle: textTheme?.caption),
      button: GoogleFonts.peralta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.peralta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.peralta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Permanent Marker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Permanent+Marker
  static TextStyle permanentMarker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b256508a46019a9b82045efd1b32fea49660231fc60b1b4bd43585c2808cf128',
        74216,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PermanentMarker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Permanent Marker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Permanent+Marker
  static TextTheme permanentMarkerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.permanentMarker(textStyle: textTheme?.display4),
      display3: GoogleFonts.permanentMarker(textStyle: textTheme?.display3),
      display2: GoogleFonts.permanentMarker(textStyle: textTheme?.display2),
      display1: GoogleFonts.permanentMarker(textStyle: textTheme?.display1),
      headline: GoogleFonts.permanentMarker(textStyle: textTheme?.headline),
      title: GoogleFonts.permanentMarker(textStyle: textTheme?.title),
      subhead: GoogleFonts.permanentMarker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.permanentMarker(textStyle: textTheme?.body2),
      body1: GoogleFonts.permanentMarker(textStyle: textTheme?.body1),
      caption: GoogleFonts.permanentMarker(textStyle: textTheme?.caption),
      button: GoogleFonts.permanentMarker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.permanentMarker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.permanentMarker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Petit Formal Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Petit+Formal+Script
  static TextStyle petitFormalScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '60b5efe480f0bafdd5de13f5786bc9017ffcddab4de13ece1ee542791fe4eba2',
        120832,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PetitFormalScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Petit Formal Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Petit+Formal+Script
  static TextTheme petitFormalScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.petitFormalScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.petitFormalScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.petitFormalScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.petitFormalScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.petitFormalScript(textStyle: textTheme?.headline),
      title: GoogleFonts.petitFormalScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.petitFormalScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.petitFormalScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.petitFormalScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.petitFormalScript(textStyle: textTheme?.caption),
      button: GoogleFonts.petitFormalScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.petitFormalScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.petitFormalScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Petrona font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Petrona
  static TextStyle petrona({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd80f7ebf1277bc91932826582e099143b69fb77dc61f1259d442558087cc2714',
        80736,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Petrona',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Petrona font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Petrona
  static TextTheme petronaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.petrona(textStyle: textTheme?.display4),
      display3: GoogleFonts.petrona(textStyle: textTheme?.display3),
      display2: GoogleFonts.petrona(textStyle: textTheme?.display2),
      display1: GoogleFonts.petrona(textStyle: textTheme?.display1),
      headline: GoogleFonts.petrona(textStyle: textTheme?.headline),
      title: GoogleFonts.petrona(textStyle: textTheme?.title),
      subhead: GoogleFonts.petrona(textStyle: textTheme?.subhead),
      body2: GoogleFonts.petrona(textStyle: textTheme?.body2),
      body1: GoogleFonts.petrona(textStyle: textTheme?.body1),
      caption: GoogleFonts.petrona(textStyle: textTheme?.caption),
      button: GoogleFonts.petrona(textStyle: textTheme?.button),
      subtitle: GoogleFonts.petrona(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.petrona(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Philosopher font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Philosopher
  static TextStyle philosopher({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '51b0e57bc81490c490b7400858499b5823a13926de953476e8d40730ab9fc02f',
        74064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '32aafaf60ca199b7f91291e6aa9e68b91df4b48f53246f454e7eddf8e25ff50c',
        73948,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '174ba5b59df6e5bdec8e23657ecdf679226b3b6f23f5625fa814540e88b30628',
        73580,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'aed7000bdaef8a04be340ee51e9ff7157c538442a3fda8daeee40a849eaf33cb',
        74272,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Philosopher',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Philosopher font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Philosopher
  static TextTheme philosopherTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.philosopher(textStyle: textTheme?.display4),
      display3: GoogleFonts.philosopher(textStyle: textTheme?.display3),
      display2: GoogleFonts.philosopher(textStyle: textTheme?.display2),
      display1: GoogleFonts.philosopher(textStyle: textTheme?.display1),
      headline: GoogleFonts.philosopher(textStyle: textTheme?.headline),
      title: GoogleFonts.philosopher(textStyle: textTheme?.title),
      subhead: GoogleFonts.philosopher(textStyle: textTheme?.subhead),
      body2: GoogleFonts.philosopher(textStyle: textTheme?.body2),
      body1: GoogleFonts.philosopher(textStyle: textTheme?.body1),
      caption: GoogleFonts.philosopher(textStyle: textTheme?.caption),
      button: GoogleFonts.philosopher(textStyle: textTheme?.button),
      subtitle: GoogleFonts.philosopher(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.philosopher(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Piedra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Piedra
  static TextStyle piedra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '44d0853d7548f46be84298314d45874783d3dfd1459f5286f1426fb025483348',
        75936,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Piedra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Piedra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Piedra
  static TextTheme piedraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.piedra(textStyle: textTheme?.display4),
      display3: GoogleFonts.piedra(textStyle: textTheme?.display3),
      display2: GoogleFonts.piedra(textStyle: textTheme?.display2),
      display1: GoogleFonts.piedra(textStyle: textTheme?.display1),
      headline: GoogleFonts.piedra(textStyle: textTheme?.headline),
      title: GoogleFonts.piedra(textStyle: textTheme?.title),
      subhead: GoogleFonts.piedra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.piedra(textStyle: textTheme?.body2),
      body1: GoogleFonts.piedra(textStyle: textTheme?.body1),
      caption: GoogleFonts.piedra(textStyle: textTheme?.caption),
      button: GoogleFonts.piedra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.piedra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.piedra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pinyon Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pinyon+Script
  static TextStyle pinyonScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '76a6132a59fff29721156baa5452296b0cf50a435c5bdba96e8bda980999341b',
        62100,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PinyonScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pinyon Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pinyon+Script
  static TextTheme pinyonScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pinyonScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.pinyonScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.pinyonScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.pinyonScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.pinyonScript(textStyle: textTheme?.headline),
      title: GoogleFonts.pinyonScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.pinyonScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pinyonScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.pinyonScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.pinyonScript(textStyle: textTheme?.caption),
      button: GoogleFonts.pinyonScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pinyonScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pinyonScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pirata One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pirata+One
  static TextStyle pirataOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5fb40958eab064bad8294b018f0eff54a3deb5dcb3717eecc9dd41e8db217618',
        56268,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PirataOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pirata One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pirata+One
  static TextTheme pirataOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pirataOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.pirataOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.pirataOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.pirataOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.pirataOne(textStyle: textTheme?.headline),
      title: GoogleFonts.pirataOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.pirataOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pirataOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.pirataOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.pirataOne(textStyle: textTheme?.caption),
      button: GoogleFonts.pirataOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pirataOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pirataOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Plaster font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Plaster
  static TextStyle plaster({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '075c37d102ea4665ad52b444dd9ccf8c06ebd6d7125c8cf59644c1b1653abe6d',
        30672,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Plaster',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Plaster font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Plaster
  static TextTheme plasterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.plaster(textStyle: textTheme?.display4),
      display3: GoogleFonts.plaster(textStyle: textTheme?.display3),
      display2: GoogleFonts.plaster(textStyle: textTheme?.display2),
      display1: GoogleFonts.plaster(textStyle: textTheme?.display1),
      headline: GoogleFonts.plaster(textStyle: textTheme?.headline),
      title: GoogleFonts.plaster(textStyle: textTheme?.title),
      subhead: GoogleFonts.plaster(textStyle: textTheme?.subhead),
      body2: GoogleFonts.plaster(textStyle: textTheme?.body2),
      body1: GoogleFonts.plaster(textStyle: textTheme?.body1),
      caption: GoogleFonts.plaster(textStyle: textTheme?.caption),
      button: GoogleFonts.plaster(textStyle: textTheme?.button),
      subtitle: GoogleFonts.plaster(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.plaster(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Play font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Play
  static TextStyle play({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e198eae88b87f9891da54cbb4e5b631b4f8e8af961970b14082506c5c1bd3183',
        123764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '46b28c6395256a72fe1900fc5218c9ef0c78153157532b0ebc6b6859696d717d',
        125468,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Play',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Play font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Play
  static TextTheme playTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.play(textStyle: textTheme?.display4),
      display3: GoogleFonts.play(textStyle: textTheme?.display3),
      display2: GoogleFonts.play(textStyle: textTheme?.display2),
      display1: GoogleFonts.play(textStyle: textTheme?.display1),
      headline: GoogleFonts.play(textStyle: textTheme?.headline),
      title: GoogleFonts.play(textStyle: textTheme?.title),
      subhead: GoogleFonts.play(textStyle: textTheme?.subhead),
      body2: GoogleFonts.play(textStyle: textTheme?.body2),
      body1: GoogleFonts.play(textStyle: textTheme?.body1),
      caption: GoogleFonts.play(textStyle: textTheme?.caption),
      button: GoogleFonts.play(textStyle: textTheme?.button),
      subtitle: GoogleFonts.play(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.play(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Playball font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playball
  static TextStyle playball({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '73b95f0b1cd341f32c0f20d1fda10e035733b1906538a749d3fc06d9402c8f2f',
        42772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Playball',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Playball font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playball
  static TextTheme playballTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.playball(textStyle: textTheme?.display4),
      display3: GoogleFonts.playball(textStyle: textTheme?.display3),
      display2: GoogleFonts.playball(textStyle: textTheme?.display2),
      display1: GoogleFonts.playball(textStyle: textTheme?.display1),
      headline: GoogleFonts.playball(textStyle: textTheme?.headline),
      title: GoogleFonts.playball(textStyle: textTheme?.title),
      subhead: GoogleFonts.playball(textStyle: textTheme?.subhead),
      body2: GoogleFonts.playball(textStyle: textTheme?.body2),
      body1: GoogleFonts.playball(textStyle: textTheme?.body1),
      caption: GoogleFonts.playball(textStyle: textTheme?.caption),
      button: GoogleFonts.playball(textStyle: textTheme?.button),
      subtitle: GoogleFonts.playball(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.playball(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Playfair Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playfair+Display
  static TextStyle playfairDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '924bc8e9d64e8b2f2cb789375461b2d504e9975b6f77da5ffc252ddc8a3aac57',
        157252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '548814592545ef5a92d9c32a90d369cc51da8a75c2a9397c3f8b64550d64f723',
        144588,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e5f443f351dd32a170af092c9d5509a205b292561fff1cc93c7a775be1508529',
        162776,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b30290eb18fd60330cbcf52d5f3cfdb174100195152ee6c527c286b01155a193',
        151536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b6c0ff8733004f8c2f6cf42f45af14fbd569ba824fb2843b3db4f3e15616cedd',
        159648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '19e0ceccbc574b8a28fe94bd62388dc4dd8dbb00da8fda92003d293ff75bf9ed',
        146708,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PlayfairDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Playfair Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playfair+Display
  static TextTheme playfairDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.playfairDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.playfairDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.playfairDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.playfairDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.playfairDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.playfairDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.playfairDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.playfairDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.playfairDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.playfairDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.playfairDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.playfairDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.playfairDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Playfair Display SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playfair+Display+SC
  static TextStyle playfairDisplaySC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b4e28ec5aef07315383b9ec24d14cafd9f9e82652f0907ffa96bc78936a2bcf3',
        108552,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fdba2100fec23dad94f0b77ea42bd7fe1e70cb13c977ff4097bee8f4a5d3deb2',
        102356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6e248f16fb366b22ece90b547726b0fa0844647d39802ca9bf4509e2c994973e',
        112728,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '40348910c72e109930f4b7b7beac71da6dbd2154ab6e19342f6403cfb39799b8',
        106904,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '76b7867b75532041e0acff80523482c84138383984e6e03047bbcdf82664edaf',
        110508,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2bd6dd3db89e38a5d8e179e638978bc19492a6891d5a77a39f9391d18b2d35d7',
        108044,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PlayfairDisplaySC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Playfair Display SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playfair+Display+SC
  static TextTheme playfairDisplaySCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.display4),
      display3: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.display3),
      display2: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.display2),
      display1: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.display1),
      headline: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.headline),
      title: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.title),
      subhead: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.body2),
      body1: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.body1),
      caption: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.caption),
      button: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Podkova font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Podkova
  static TextStyle podkova({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0add25e02638273bd9b4fcf35c8b76256a3a4e03952c161c48592fae22c5fc34',
        107676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3f02b4ccaed0ce6f2b29a1a9a6a7d4277651708435bc6f85466d43b1f7946980',
        107876,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0cc312c8ebd6612b3c99e662d435f1299506dd87fe2eda68b3a99a77910ff84b',
        107768,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '18a450ac10399ddda8864f93d96f61b5d636d2d450b6ce5b67ed4247c24b8fb4',
        107696,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f608ec4d8cd807e20ea8e24c392d1d2a7480b32148f5ad72b5c133b6f630b8f6',
        106876,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Podkova',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Podkova font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Podkova
  static TextTheme podkovaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.podkova(textStyle: textTheme?.display4),
      display3: GoogleFonts.podkova(textStyle: textTheme?.display3),
      display2: GoogleFonts.podkova(textStyle: textTheme?.display2),
      display1: GoogleFonts.podkova(textStyle: textTheme?.display1),
      headline: GoogleFonts.podkova(textStyle: textTheme?.headline),
      title: GoogleFonts.podkova(textStyle: textTheme?.title),
      subhead: GoogleFonts.podkova(textStyle: textTheme?.subhead),
      body2: GoogleFonts.podkova(textStyle: textTheme?.body2),
      body1: GoogleFonts.podkova(textStyle: textTheme?.body1),
      caption: GoogleFonts.podkova(textStyle: textTheme?.caption),
      button: GoogleFonts.podkova(textStyle: textTheme?.button),
      subtitle: GoogleFonts.podkova(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.podkova(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poiret One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poiret+One
  static TextStyle poiretOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '67bb327af0416e138d92e1fea7c569a19a5c981b0997edee4464ad15cd4ce9f7',
        47660,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PoiretOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poiret One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poiret+One
  static TextTheme poiretOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.poiretOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.poiretOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.poiretOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.poiretOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.poiretOne(textStyle: textTheme?.headline),
      title: GoogleFonts.poiretOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.poiretOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.poiretOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.poiretOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.poiretOne(textStyle: textTheme?.caption),
      button: GoogleFonts.poiretOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.poiretOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.poiretOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poller One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poller+One
  static TextStyle pollerOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8000b5517c4c1c62df73fa743687dad6e25276b2caea09a6ff237f0c19f9128d',
        31540,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PollerOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poller One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poller+One
  static TextTheme pollerOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pollerOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.pollerOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.pollerOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.pollerOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.pollerOne(textStyle: textTheme?.headline),
      title: GoogleFonts.pollerOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.pollerOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pollerOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.pollerOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.pollerOne(textStyle: textTheme?.caption),
      button: GoogleFonts.pollerOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pollerOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pollerOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poly font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poly
  static TextStyle poly({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '25d6b0314754bfa56533ecd2bf390f3f2108e60043db13b206cca5e0a900f857',
        76776,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'cc94a04fc599f53d7e32be6f932b998f8229d4e0462ebb808d61554abb4f0dbc',
        74188,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Poly',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poly font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poly
  static TextTheme polyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.poly(textStyle: textTheme?.display4),
      display3: GoogleFonts.poly(textStyle: textTheme?.display3),
      display2: GoogleFonts.poly(textStyle: textTheme?.display2),
      display1: GoogleFonts.poly(textStyle: textTheme?.display1),
      headline: GoogleFonts.poly(textStyle: textTheme?.headline),
      title: GoogleFonts.poly(textStyle: textTheme?.title),
      subhead: GoogleFonts.poly(textStyle: textTheme?.subhead),
      body2: GoogleFonts.poly(textStyle: textTheme?.body2),
      body1: GoogleFonts.poly(textStyle: textTheme?.body1),
      caption: GoogleFonts.poly(textStyle: textTheme?.caption),
      button: GoogleFonts.poly(textStyle: textTheme?.button),
      subtitle: GoogleFonts.poly(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.poly(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pompiere font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pompiere
  static TextStyle pompiere({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '938a73a33e8b01f6bd94758995b7e75a9f06dd9d7cc1977ef653cb5f0368004c',
        36692,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pompiere',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pompiere font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pompiere
  static TextTheme pompiereTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pompiere(textStyle: textTheme?.display4),
      display3: GoogleFonts.pompiere(textStyle: textTheme?.display3),
      display2: GoogleFonts.pompiere(textStyle: textTheme?.display2),
      display1: GoogleFonts.pompiere(textStyle: textTheme?.display1),
      headline: GoogleFonts.pompiere(textStyle: textTheme?.headline),
      title: GoogleFonts.pompiere(textStyle: textTheme?.title),
      subhead: GoogleFonts.pompiere(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pompiere(textStyle: textTheme?.body2),
      body1: GoogleFonts.pompiere(textStyle: textTheme?.body1),
      caption: GoogleFonts.pompiere(textStyle: textTheme?.caption),
      button: GoogleFonts.pompiere(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pompiere(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pompiere(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pontano Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pontano+Sans
  static TextStyle pontanoSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5642e38228ac272d77222d1b2150dd461c55d090beba64bbb9f11d169e573589',
        28232,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PontanoSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pontano Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pontano+Sans
  static TextTheme pontanoSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pontanoSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.pontanoSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.pontanoSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.pontanoSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.pontanoSans(textStyle: textTheme?.headline),
      title: GoogleFonts.pontanoSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.pontanoSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pontanoSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.pontanoSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.pontanoSans(textStyle: textTheme?.caption),
      button: GoogleFonts.pontanoSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pontanoSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pontanoSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poor Story font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poor+Story
  static TextStyle poorStory({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a915416edf6eea5c6eb16e098a45ee910564e4d15dfba8a3136e293e2f2d8a67',
        1802972,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PoorStory',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poor Story font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poor+Story
  static TextTheme poorStoryTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.poorStory(textStyle: textTheme?.display4),
      display3: GoogleFonts.poorStory(textStyle: textTheme?.display3),
      display2: GoogleFonts.poorStory(textStyle: textTheme?.display2),
      display1: GoogleFonts.poorStory(textStyle: textTheme?.display1),
      headline: GoogleFonts.poorStory(textStyle: textTheme?.headline),
      title: GoogleFonts.poorStory(textStyle: textTheme?.title),
      subhead: GoogleFonts.poorStory(textStyle: textTheme?.subhead),
      body2: GoogleFonts.poorStory(textStyle: textTheme?.body2),
      body1: GoogleFonts.poorStory(textStyle: textTheme?.body1),
      caption: GoogleFonts.poorStory(textStyle: textTheme?.caption),
      button: GoogleFonts.poorStory(textStyle: textTheme?.button),
      subtitle: GoogleFonts.poorStory(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.poorStory(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poppins font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poppins
  static TextStyle poppins({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '609ae3f057d392507fed90188cf6f9d5f85bb59f613c0decb2ecc9f51312a5cd',
        148976,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4a2e8bca7b027b0f8cc0218b80ec9823ca3b98d4a06f17651337b01fb85f8ede',
        172308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2a489fff366883b0e5df107f6f4d5af2554723b61495c5509d4c3f62e038bc47',
        147952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e331f856e52ddab916a83bea449fda91561fab22bef776c8a817bcd9871ce0c9',
        170912,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7f15d9a49bc6ca8b49ac995bbc36065b4bab0ed9f6d394a4c49d8f9ac85672c2',
        146472,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2d4fb2fa8e59703eaf3fd748fdba32ff276e881015912154d7ffd5c24ba0afd6',
        168944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2425ebbc021bfdd18fe55edbeeb1539d22a217212c14430a7d4d75266a333bbc',
        145312,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f058c785d855d5a6020eee6962eba4a653a871e6f07cabe930504e857b76ccb7',
        167140,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '45870260a29fa7d3e0eff8cdd91993fb4a9ce4cced3d7b72c3ef7d24380bfc2d',
        143516,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '231c5c16820cd2507d24716e41bce0bafafe7175410e6197b5621c9cedaf84ff',
        165512,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1d665d5b75a9500040b2cc201c2b07af5faca7228372dc6f4572d2d5b2291097',
        142148,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'cb112397951c33d64e908cec5cf9f34d1ecc2c13f047f98061f834fc4a96e490',
        161896,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '210933fb1bb4e846d37ef00c92cae636ac35633132cf2157c7ac879f27f82068',
        141260,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '478ff165d4f208b41963f9774fda29358a902ad29026d486a94a50bb2e9b7a05',
        160224,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9599edf36a7c40e752cd1fbc308f5351c59aae0b3bd6fa5bfbdaa61c16f8cee1',
        140220,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '230e076f3eaab8aa5b295152336dd453ac731569b1f72b4aa836f0edd6cdfe74',
        158708,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2535406edd2aa55242329705ca9418a07d3a51ae28cadca3ee5becae61aa8987',
        139056,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '82eaa315798c980852cb782b3dc81adeb39c16903a1a46d96e5917f79266929d',
        155956,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Poppins',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poppins font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poppins
  static TextTheme poppinsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.poppins(textStyle: textTheme?.display4),
      display3: GoogleFonts.poppins(textStyle: textTheme?.display3),
      display2: GoogleFonts.poppins(textStyle: textTheme?.display2),
      display1: GoogleFonts.poppins(textStyle: textTheme?.display1),
      headline: GoogleFonts.poppins(textStyle: textTheme?.headline),
      title: GoogleFonts.poppins(textStyle: textTheme?.title),
      subhead: GoogleFonts.poppins(textStyle: textTheme?.subhead),
      body2: GoogleFonts.poppins(textStyle: textTheme?.body2),
      body1: GoogleFonts.poppins(textStyle: textTheme?.body1),
      caption: GoogleFonts.poppins(textStyle: textTheme?.caption),
      button: GoogleFonts.poppins(textStyle: textTheme?.button),
      subtitle: GoogleFonts.poppins(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.poppins(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Port Lligat Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Port+Lligat+Sans
  static TextStyle portLligatSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '84c1f23904d96ac1b51af7e38d0892c88f5a84b7bdd1c30685b9cb4d2213706d',
        34340,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PortLligatSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Port Lligat Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Port+Lligat+Sans
  static TextTheme portLligatSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.portLligatSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.portLligatSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.portLligatSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.portLligatSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.portLligatSans(textStyle: textTheme?.headline),
      title: GoogleFonts.portLligatSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.portLligatSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.portLligatSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.portLligatSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.portLligatSans(textStyle: textTheme?.caption),
      button: GoogleFonts.portLligatSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.portLligatSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.portLligatSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Port Lligat Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Port+Lligat+Slab
  static TextStyle portLligatSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '14a5e5dd29e0381386f5b0417b504bb1aadd724682e7f07cd5d09f95b4c9cc99',
        38112,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PortLligatSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Port Lligat Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Port+Lligat+Slab
  static TextTheme portLligatSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.portLligatSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.portLligatSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.portLligatSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.portLligatSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.portLligatSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.portLligatSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.portLligatSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.portLligatSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.portLligatSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.portLligatSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.portLligatSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.portLligatSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.portLligatSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pragati Narrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pragati+Narrow
  static TextStyle pragatiNarrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1778fbb91f3825af5daf5dfe6d44737ee48e6c63a95f25348b39ccb9fcda8fb6',
        229548,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9e7b8eb47eaef49ea50a19115bddfaf35aebf2f4577f8a3b9cab531595bc97ef',
        228640,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PragatiNarrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pragati Narrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pragati+Narrow
  static TextTheme pragatiNarrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pragatiNarrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.pragatiNarrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.pragatiNarrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.pragatiNarrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.pragatiNarrow(textStyle: textTheme?.headline),
      title: GoogleFonts.pragatiNarrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.pragatiNarrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pragatiNarrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.pragatiNarrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.pragatiNarrow(textStyle: textTheme?.caption),
      button: GoogleFonts.pragatiNarrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pragatiNarrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pragatiNarrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Prata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prata
  static TextStyle prata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dae0ecee4b97ae6292786b6e9e7efc1c63cf85f8beaef215151813c08fd2aa02',
        65088,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Prata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Prata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prata
  static TextTheme prataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prata(textStyle: textTheme?.display4),
      display3: GoogleFonts.prata(textStyle: textTheme?.display3),
      display2: GoogleFonts.prata(textStyle: textTheme?.display2),
      display1: GoogleFonts.prata(textStyle: textTheme?.display1),
      headline: GoogleFonts.prata(textStyle: textTheme?.headline),
      title: GoogleFonts.prata(textStyle: textTheme?.title),
      subhead: GoogleFonts.prata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prata(textStyle: textTheme?.body2),
      body1: GoogleFonts.prata(textStyle: textTheme?.body1),
      caption: GoogleFonts.prata(textStyle: textTheme?.caption),
      button: GoogleFonts.prata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Press Start 2P font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Press+Start+2P
  static TextStyle pressStart2P({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba4683bc76380100a5f8e7fae42dd03216a17bd62025a4f24d933df65845a9ac',
        57416,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PressStart2P',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Press Start 2P font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Press+Start+2P
  static TextTheme pressStart2PTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pressStart2P(textStyle: textTheme?.display4),
      display3: GoogleFonts.pressStart2P(textStyle: textTheme?.display3),
      display2: GoogleFonts.pressStart2P(textStyle: textTheme?.display2),
      display1: GoogleFonts.pressStart2P(textStyle: textTheme?.display1),
      headline: GoogleFonts.pressStart2P(textStyle: textTheme?.headline),
      title: GoogleFonts.pressStart2P(textStyle: textTheme?.title),
      subhead: GoogleFonts.pressStart2P(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pressStart2P(textStyle: textTheme?.body2),
      body1: GoogleFonts.pressStart2P(textStyle: textTheme?.body1),
      caption: GoogleFonts.pressStart2P(textStyle: textTheme?.caption),
      button: GoogleFonts.pressStart2P(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pressStart2P(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pressStart2P(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pridi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pridi
  static TextStyle pridi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '25767951345549f712ecc99e7f7e0ed309d7e3b707e8f82ac578dea2843ee338',
        120664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '418f1e97f68102aa823ef64c5f96fbcec3fb67597331f6b65bbff28c82031fed',
        141312,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '33f3b1e354916fe8ce1a179c631238fdc60f52a959f39a02efbd3f8023bfbbda',
        141904,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b57f641bac735f6cd44057a11cbabb787cbc33d1c8270040dc7d1cb6c4563858',
        137940,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8847f26d3d388eb8a757c857d14058773c4f265b29fe5ef2da5da9132fb2924a',
        118788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '26c0c1d38bb9f9387d48474dd1abf32af18563e40fa1067abcfa242e8870cf6b',
        117864,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pridi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pridi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pridi
  static TextTheme pridiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pridi(textStyle: textTheme?.display4),
      display3: GoogleFonts.pridi(textStyle: textTheme?.display3),
      display2: GoogleFonts.pridi(textStyle: textTheme?.display2),
      display1: GoogleFonts.pridi(textStyle: textTheme?.display1),
      headline: GoogleFonts.pridi(textStyle: textTheme?.headline),
      title: GoogleFonts.pridi(textStyle: textTheme?.title),
      subhead: GoogleFonts.pridi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pridi(textStyle: textTheme?.body2),
      body1: GoogleFonts.pridi(textStyle: textTheme?.body1),
      caption: GoogleFonts.pridi(textStyle: textTheme?.caption),
      button: GoogleFonts.pridi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pridi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pridi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Princess Sofia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Princess+Sofia
  static TextStyle princessSofia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9f20c793c38b666148e6b2cb5b5303d48501b0f54d45aac73f3b59a495c7cdc0',
        272212,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PrincessSofia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Princess Sofia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Princess+Sofia
  static TextTheme princessSofiaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.princessSofia(textStyle: textTheme?.display4),
      display3: GoogleFonts.princessSofia(textStyle: textTheme?.display3),
      display2: GoogleFonts.princessSofia(textStyle: textTheme?.display2),
      display1: GoogleFonts.princessSofia(textStyle: textTheme?.display1),
      headline: GoogleFonts.princessSofia(textStyle: textTheme?.headline),
      title: GoogleFonts.princessSofia(textStyle: textTheme?.title),
      subhead: GoogleFonts.princessSofia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.princessSofia(textStyle: textTheme?.body2),
      body1: GoogleFonts.princessSofia(textStyle: textTheme?.body1),
      caption: GoogleFonts.princessSofia(textStyle: textTheme?.caption),
      button: GoogleFonts.princessSofia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.princessSofia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.princessSofia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Prociono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prociono
  static TextStyle prociono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '61f885124a2a2bbcb15f757f4ac96bf9509c0c1869f1efaa3c4cc6ce99d01f16',
        31088,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Prociono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Prociono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prociono
  static TextTheme procionoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prociono(textStyle: textTheme?.display4),
      display3: GoogleFonts.prociono(textStyle: textTheme?.display3),
      display2: GoogleFonts.prociono(textStyle: textTheme?.display2),
      display1: GoogleFonts.prociono(textStyle: textTheme?.display1),
      headline: GoogleFonts.prociono(textStyle: textTheme?.headline),
      title: GoogleFonts.prociono(textStyle: textTheme?.title),
      subhead: GoogleFonts.prociono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prociono(textStyle: textTheme?.body2),
      body1: GoogleFonts.prociono(textStyle: textTheme?.body1),
      caption: GoogleFonts.prociono(textStyle: textTheme?.caption),
      button: GoogleFonts.prociono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prociono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prociono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Prompt font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prompt
  static TextStyle prompt({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '48988c00dff9e5346bafb0230e233cc244d06d53de9a8c7b1c5ae95b508878d9',
        106868,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fa017c19d47d8c1de3c967302dc49e99d37de71795dfb971c06ce63c31a2b230',
        116584,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'be13887c30cb0eb82b46627a8d18c34490049df205c234b3d27d8c3efbfeacec',
        106872,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2ac60a88dbbd5f9ae43c89ce90966920480aa263c9c157da76a8f51c68efebc6',
        116628,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3e355dba756f556f47a7a9d99fe46cfa2d2676c6937bb2af9f39e84bf13ba0a8',
        106216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'cdbdb3675fcbe7c22771818e356aaca5f5bfbd59635b7223dff98a1ef9843b4b',
        115964,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a26fa613f518a56e8d6ab2da471f1a74fde4a5fd95552a539694b777832f2627',
        106060,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2ac0428ddf82e1d43425e6afb249d0000b0f3eed6e8583cd6712f53f585f33fa',
        114924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '627e26dc44fbd7d87a3300a5ddb700b5d169b5cee2c915f78085ced694f0ef98',
        106100,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c455330873fbc77aaf5958ea7fe12fc7af2325446a34440ebaf090775b7a2f4f',
        114748,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5be3aa9ccbda532fccad8b87b6e554f0403860f32b4499ea56228ecc81246e5d',
        104076,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '692795800d326358c0dfeb443453d36353284ee31c283cfde37df17258f6f2bc',
        114500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a3f1635714fe8861ed1027027e0e34183db3b1197ebfba3c2283739950e1fc7',
        105580,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '46317d49f08a684dff0cd9a335124eba5f1feebc850ab74ab6a023096f224c4f',
        114080,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '79977c86dc67cc15e7cce3392fd9a3b9bfcaf261c5bf48de9820fb6b9cf8dd5a',
        105156,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1bd02cc605f0e4ec0c90fa33ee5726bd1679d6a36c64f1779de4aee232e8a88a',
        113996,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5f0519c649be920aec99489ffcd76b23ec686b254b28fe9cffdd6e5690280c41',
        104892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9390dbb38f163bec75f6d6682ae93a821e776cd9bed89bf402c7104d295dca25',
        127800,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Prompt',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Prompt font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prompt
  static TextTheme promptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prompt(textStyle: textTheme?.display4),
      display3: GoogleFonts.prompt(textStyle: textTheme?.display3),
      display2: GoogleFonts.prompt(textStyle: textTheme?.display2),
      display1: GoogleFonts.prompt(textStyle: textTheme?.display1),
      headline: GoogleFonts.prompt(textStyle: textTheme?.headline),
      title: GoogleFonts.prompt(textStyle: textTheme?.title),
      subhead: GoogleFonts.prompt(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prompt(textStyle: textTheme?.body2),
      body1: GoogleFonts.prompt(textStyle: textTheme?.body1),
      caption: GoogleFonts.prompt(textStyle: textTheme?.caption),
      button: GoogleFonts.prompt(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prompt(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prompt(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Prosto One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prosto+One
  static TextStyle prostoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '48e9abcc05d19f1dfd678d55c8747ed931282ea5b332f232e7fe90254af60f9a',
        69248,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ProstoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Prosto One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prosto+One
  static TextTheme prostoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prostoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.prostoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.prostoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.prostoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.prostoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.prostoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.prostoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prostoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.prostoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.prostoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.prostoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prostoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prostoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Proza Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Proza+Libre
  static TextStyle prozaLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9b6195e0fb14a5155dc5f1e836d174961876e69e0c471b7ab8357696acb1d404',
        77600,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '79a33a14fa8f5bd86b8bd985de9a92647b0d6b62085299ae05b0c4f2cbf98bc8',
        77756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ac113922a0dc8f8533dcac9f1f9ec44f777502e94608291bd50da0fa981083d6',
        77960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a6506ab9342408e2f16f5991f7f13117f9c080dfb34c268e4378f507d01fe3b8',
        78168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1e1b5cd4d00344b8bbbb015679e9bd7cc5e99a2fa3d6eb18b4f1303c90c3e68e',
        96824,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '522e6755ed4fd909ed6968fa89460d7eb69e6b90fb0124f5fec6dfadb7dd5dac',
        78188,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '14701643695bd3fb18b0e9f16049cd1caa35acee12446ecf10b0a179697f7748',
        77756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '176582be0d8f918514d1f30bb1cfea4729cbd968974eced79e977378653c62c9',
        77952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6d37a997a436ffd489943e8d33d8917c4eac47e1c20959ae0cd68f6470e932bb',
        91092,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e5a8cfe2f4e6f80f7a40d647e5ca78ffe1df63c22c413d962ce2f937a8ce34e2',
        90644,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ProzaLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Proza Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Proza+Libre
  static TextTheme prozaLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prozaLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.prozaLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.prozaLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.prozaLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.prozaLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.prozaLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.prozaLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prozaLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.prozaLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.prozaLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.prozaLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prozaLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prozaLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Puritan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Puritan
  static TextStyle puritan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '53c4e62f0ae59849064a30afb5f388987e173b8699d99efa7364a1b99c16385d',
        36476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '28385ca71871b908d353e761320647ac350dc310f04d767c54ffa33c5bb0e846',
        37752,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a044a29b77d5907eb6eb71d1e7955016b52b63e928f6a1381bda726cb81317a',
        36232,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '792b0deaf812e2c13a119b6c56f14b2c25e985edc90ba79c34dfe61c0d28db06',
        37656,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Puritan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Puritan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Puritan
  static TextTheme puritanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.puritan(textStyle: textTheme?.display4),
      display3: GoogleFonts.puritan(textStyle: textTheme?.display3),
      display2: GoogleFonts.puritan(textStyle: textTheme?.display2),
      display1: GoogleFonts.puritan(textStyle: textTheme?.display1),
      headline: GoogleFonts.puritan(textStyle: textTheme?.headline),
      title: GoogleFonts.puritan(textStyle: textTheme?.title),
      subhead: GoogleFonts.puritan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.puritan(textStyle: textTheme?.body2),
      body1: GoogleFonts.puritan(textStyle: textTheme?.body1),
      caption: GoogleFonts.puritan(textStyle: textTheme?.caption),
      button: GoogleFonts.puritan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.puritan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.puritan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Purple Purse font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Purple+Purse
  static TextStyle purplePurse({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5653d111577461c5bb526447a3f51696f803a7e41f0e5d379ae3a558f69927e0',
        62452,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PurplePurse',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Purple Purse font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Purple+Purse
  static TextTheme purplePurseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.purplePurse(textStyle: textTheme?.display4),
      display3: GoogleFonts.purplePurse(textStyle: textTheme?.display3),
      display2: GoogleFonts.purplePurse(textStyle: textTheme?.display2),
      display1: GoogleFonts.purplePurse(textStyle: textTheme?.display1),
      headline: GoogleFonts.purplePurse(textStyle: textTheme?.headline),
      title: GoogleFonts.purplePurse(textStyle: textTheme?.title),
      subhead: GoogleFonts.purplePurse(textStyle: textTheme?.subhead),
      body2: GoogleFonts.purplePurse(textStyle: textTheme?.body2),
      body1: GoogleFonts.purplePurse(textStyle: textTheme?.body1),
      caption: GoogleFonts.purplePurse(textStyle: textTheme?.caption),
      button: GoogleFonts.purplePurse(textStyle: textTheme?.button),
      subtitle: GoogleFonts.purplePurse(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.purplePurse(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quando font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quando
  static TextStyle quando({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2a8053aa17f88c09896da7eb7b6ee5d1652eaec863ae13d59efd1a763afcdb2a',
        49748,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quando',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quando font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quando
  static TextTheme quandoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quando(textStyle: textTheme?.display4),
      display3: GoogleFonts.quando(textStyle: textTheme?.display3),
      display2: GoogleFonts.quando(textStyle: textTheme?.display2),
      display1: GoogleFonts.quando(textStyle: textTheme?.display1),
      headline: GoogleFonts.quando(textStyle: textTheme?.headline),
      title: GoogleFonts.quando(textStyle: textTheme?.title),
      subhead: GoogleFonts.quando(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quando(textStyle: textTheme?.body2),
      body1: GoogleFonts.quando(textStyle: textTheme?.body1),
      caption: GoogleFonts.quando(textStyle: textTheme?.caption),
      button: GoogleFonts.quando(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quando(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quando(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quantico font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quantico
  static TextStyle quantico({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c0e68a0bf4434bcaf5078482638325be95f9ff8d23e161320e71396c3bac24db',
        20892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8dc51f4e759adff1e4ef04d9489decee6534f253a8c586119e29e6ac5d4ba3e8',
        22120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '893455159a698723c49ac3c7b21b2eab8d58a8ae07a566c4b1aa1d49d301b100',
        20872,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1021a5020ebf627e4f792a27cf1af37913a9f7f26454ac4cc914f0f78b08df22',
        20636,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quantico',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quantico font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quantico
  static TextTheme quanticoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quantico(textStyle: textTheme?.display4),
      display3: GoogleFonts.quantico(textStyle: textTheme?.display3),
      display2: GoogleFonts.quantico(textStyle: textTheme?.display2),
      display1: GoogleFonts.quantico(textStyle: textTheme?.display1),
      headline: GoogleFonts.quantico(textStyle: textTheme?.headline),
      title: GoogleFonts.quantico(textStyle: textTheme?.title),
      subhead: GoogleFonts.quantico(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quantico(textStyle: textTheme?.body2),
      body1: GoogleFonts.quantico(textStyle: textTheme?.body1),
      caption: GoogleFonts.quantico(textStyle: textTheme?.caption),
      button: GoogleFonts.quantico(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quantico(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quantico(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quattrocento font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quattrocento
  static TextStyle quattrocento({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5889732ed96c5175bebb886a2f99f90cbf93d54ad643f7cf5376b4532c385aaa',
        79000,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '72919cef5349b9fa016e032e20becd479cf50e5b1a159f0b68747631e333ae6c',
        80100,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quattrocento',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quattrocento font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quattrocento
  static TextTheme quattrocentoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quattrocento(textStyle: textTheme?.display4),
      display3: GoogleFonts.quattrocento(textStyle: textTheme?.display3),
      display2: GoogleFonts.quattrocento(textStyle: textTheme?.display2),
      display1: GoogleFonts.quattrocento(textStyle: textTheme?.display1),
      headline: GoogleFonts.quattrocento(textStyle: textTheme?.headline),
      title: GoogleFonts.quattrocento(textStyle: textTheme?.title),
      subhead: GoogleFonts.quattrocento(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quattrocento(textStyle: textTheme?.body2),
      body1: GoogleFonts.quattrocento(textStyle: textTheme?.body1),
      caption: GoogleFonts.quattrocento(textStyle: textTheme?.caption),
      button: GoogleFonts.quattrocento(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quattrocento(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quattrocento(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quattrocento Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quattrocento+Sans
  static TextStyle quattrocentoSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '114280821a2f8698d737c5c9bcbc986cf36a4dbd9fa7c58e448b35520a6053ec',
        48788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c933f0ba971f5573109a7674a40f980252c7f3c810a75f9ff29c016102118e85',
        61236,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a542b5aa650f5ce3fa5e6b692feef037c10962d8ae63545c47fdf964e5b3e26',
        48324,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'edadcb4799c44215ae17124bc3eac621aef5a4348743df4d74ff83fd09a601a4',
        49520,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'QuattrocentoSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quattrocento Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quattrocento+Sans
  static TextTheme quattrocentoSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quattrocentoSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.quattrocentoSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.quattrocentoSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.quattrocentoSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.quattrocentoSans(textStyle: textTheme?.headline),
      title: GoogleFonts.quattrocentoSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.quattrocentoSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quattrocentoSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.quattrocentoSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.quattrocentoSans(textStyle: textTheme?.caption),
      button: GoogleFonts.quattrocentoSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quattrocentoSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quattrocentoSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Questrial font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Questrial
  static TextStyle questrial({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ad815e7b1e7fe3c135b94c7241340918c62215027afaf848638e71f9ba75125a',
        64528,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Questrial',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Questrial font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Questrial
  static TextTheme questrialTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.questrial(textStyle: textTheme?.display4),
      display3: GoogleFonts.questrial(textStyle: textTheme?.display3),
      display2: GoogleFonts.questrial(textStyle: textTheme?.display2),
      display1: GoogleFonts.questrial(textStyle: textTheme?.display1),
      headline: GoogleFonts.questrial(textStyle: textTheme?.headline),
      title: GoogleFonts.questrial(textStyle: textTheme?.title),
      subhead: GoogleFonts.questrial(textStyle: textTheme?.subhead),
      body2: GoogleFonts.questrial(textStyle: textTheme?.body2),
      body1: GoogleFonts.questrial(textStyle: textTheme?.body1),
      caption: GoogleFonts.questrial(textStyle: textTheme?.caption),
      button: GoogleFonts.questrial(textStyle: textTheme?.button),
      subtitle: GoogleFonts.questrial(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.questrial(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quicksand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quicksand
  static TextStyle quicksand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1d9cb44be0f4a238981aae2eb07e9157e00c48fae09163bea0866e136d1c3f1f',
        82640,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0f408f35c3679417b5580701f3ac08830ce36535af5a643a2ef5b59e91c3c6b7',
        81668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '76d743f0975259e38b62a1b671044d0a6584e7ae0a8389a9dca5d6d7e5e24031',
        81400,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6bb475d143c61221c4ea174d3c51728268e58b12dbc14600d59020ef8deaaead',
        82168,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quicksand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quicksand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quicksand
  static TextTheme quicksandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quicksand(textStyle: textTheme?.display4),
      display3: GoogleFonts.quicksand(textStyle: textTheme?.display3),
      display2: GoogleFonts.quicksand(textStyle: textTheme?.display2),
      display1: GoogleFonts.quicksand(textStyle: textTheme?.display1),
      headline: GoogleFonts.quicksand(textStyle: textTheme?.headline),
      title: GoogleFonts.quicksand(textStyle: textTheme?.title),
      subhead: GoogleFonts.quicksand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quicksand(textStyle: textTheme?.body2),
      body1: GoogleFonts.quicksand(textStyle: textTheme?.body1),
      caption: GoogleFonts.quicksand(textStyle: textTheme?.caption),
      button: GoogleFonts.quicksand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quicksand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quicksand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quintessential font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quintessential
  static TextStyle quintessential({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '030ff82f2f4a02d56504ed9191c94412439e0fc2bb5ea13d563ecc793620de06',
        73476,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quintessential',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quintessential font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quintessential
  static TextTheme quintessentialTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quintessential(textStyle: textTheme?.display4),
      display3: GoogleFonts.quintessential(textStyle: textTheme?.display3),
      display2: GoogleFonts.quintessential(textStyle: textTheme?.display2),
      display1: GoogleFonts.quintessential(textStyle: textTheme?.display1),
      headline: GoogleFonts.quintessential(textStyle: textTheme?.headline),
      title: GoogleFonts.quintessential(textStyle: textTheme?.title),
      subhead: GoogleFonts.quintessential(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quintessential(textStyle: textTheme?.body2),
      body1: GoogleFonts.quintessential(textStyle: textTheme?.body1),
      caption: GoogleFonts.quintessential(textStyle: textTheme?.caption),
      button: GoogleFonts.quintessential(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quintessential(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quintessential(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Qwigley font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Qwigley
  static TextStyle qwigley({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9e8fd5b41b64bfc84fd94dd67445892d8149c004a0054984f37eb95effb71095',
        40404,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Qwigley',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Qwigley font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Qwigley
  static TextTheme qwigleyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.qwigley(textStyle: textTheme?.display4),
      display3: GoogleFonts.qwigley(textStyle: textTheme?.display3),
      display2: GoogleFonts.qwigley(textStyle: textTheme?.display2),
      display1: GoogleFonts.qwigley(textStyle: textTheme?.display1),
      headline: GoogleFonts.qwigley(textStyle: textTheme?.headline),
      title: GoogleFonts.qwigley(textStyle: textTheme?.title),
      subhead: GoogleFonts.qwigley(textStyle: textTheme?.subhead),
      body2: GoogleFonts.qwigley(textStyle: textTheme?.body2),
      body1: GoogleFonts.qwigley(textStyle: textTheme?.body1),
      caption: GoogleFonts.qwigley(textStyle: textTheme?.caption),
      button: GoogleFonts.qwigley(textStyle: textTheme?.button),
      subtitle: GoogleFonts.qwigley(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.qwigley(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Racing Sans One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Racing+Sans+One
  static TextStyle racingSansOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd832218eb9f68c818398e21dff506b95b27cf9a0830a3866a204eb2d2044027a',
        96960,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RacingSansOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Racing Sans One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Racing+Sans+One
  static TextTheme racingSansOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.racingSansOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.racingSansOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.racingSansOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.racingSansOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.racingSansOne(textStyle: textTheme?.headline),
      title: GoogleFonts.racingSansOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.racingSansOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.racingSansOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.racingSansOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.racingSansOne(textStyle: textTheme?.caption),
      button: GoogleFonts.racingSansOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.racingSansOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.racingSansOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Radley font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Radley
  static TextStyle radley({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6793fc8150706eb473a493107e09c2e519147ccf8d28dea89f49427c0dca0481',
        47660,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd01dd3f7b9c28e1f719a10c2a9dc88cd2827fcc64c09173e01e8b397f7615442',
        40760,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Radley',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Radley font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Radley
  static TextTheme radleyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.radley(textStyle: textTheme?.display4),
      display3: GoogleFonts.radley(textStyle: textTheme?.display3),
      display2: GoogleFonts.radley(textStyle: textTheme?.display2),
      display1: GoogleFonts.radley(textStyle: textTheme?.display1),
      headline: GoogleFonts.radley(textStyle: textTheme?.headline),
      title: GoogleFonts.radley(textStyle: textTheme?.title),
      subhead: GoogleFonts.radley(textStyle: textTheme?.subhead),
      body2: GoogleFonts.radley(textStyle: textTheme?.body2),
      body1: GoogleFonts.radley(textStyle: textTheme?.body1),
      caption: GoogleFonts.radley(textStyle: textTheme?.caption),
      button: GoogleFonts.radley(textStyle: textTheme?.button),
      subtitle: GoogleFonts.radley(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.radley(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rajdhani font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rajdhani
  static TextStyle rajdhani({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5d3e322fc971c11dc62d2cb01d49ffb76c16b801c7811493250d84aa8f12fa3f',
        235652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '28d153f34f1ea3bd1abf9d6639f49ee9ee3b8b01badde2e32892146d8196b19a',
        234648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd0e11c0858bfd9226f322293328602ca2c5a89cec03fd80c333f933e0b26e653',
        232788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2ab7a240fa08011c00222b91e955d71588ccf8d82ed43833580bf8a20082c836',
        232244,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '01025724bc7898c86c82d19ae1779cb44ca7492a947094eb0249653e3d26850a',
        234596,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rajdhani',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rajdhani font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rajdhani
  static TextTheme rajdhaniTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rajdhani(textStyle: textTheme?.display4),
      display3: GoogleFonts.rajdhani(textStyle: textTheme?.display3),
      display2: GoogleFonts.rajdhani(textStyle: textTheme?.display2),
      display1: GoogleFonts.rajdhani(textStyle: textTheme?.display1),
      headline: GoogleFonts.rajdhani(textStyle: textTheme?.headline),
      title: GoogleFonts.rajdhani(textStyle: textTheme?.title),
      subhead: GoogleFonts.rajdhani(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rajdhani(textStyle: textTheme?.body2),
      body1: GoogleFonts.rajdhani(textStyle: textTheme?.body1),
      caption: GoogleFonts.rajdhani(textStyle: textTheme?.caption),
      button: GoogleFonts.rajdhani(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rajdhani(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rajdhani(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rakkas font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rakkas
  static TextStyle rakkas({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b55368f62b7541a21f5f2e81100067268567c036b1f9f1b1435d7f856475a9f5',
        91160,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rakkas',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rakkas font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rakkas
  static TextTheme rakkasTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rakkas(textStyle: textTheme?.display4),
      display3: GoogleFonts.rakkas(textStyle: textTheme?.display3),
      display2: GoogleFonts.rakkas(textStyle: textTheme?.display2),
      display1: GoogleFonts.rakkas(textStyle: textTheme?.display1),
      headline: GoogleFonts.rakkas(textStyle: textTheme?.headline),
      title: GoogleFonts.rakkas(textStyle: textTheme?.title),
      subhead: GoogleFonts.rakkas(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rakkas(textStyle: textTheme?.body2),
      body1: GoogleFonts.rakkas(textStyle: textTheme?.body1),
      caption: GoogleFonts.rakkas(textStyle: textTheme?.caption),
      button: GoogleFonts.rakkas(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rakkas(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rakkas(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Raleway font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Raleway
  static TextStyle raleway({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8df4e8d960459bd5865f3570b57e6df699c766519716eef5e7875dfc55f60f8',
        132996,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9593117176336e51cd9d5e6beece2916b11b6dd91127af0ec0e8c61360e1825d',
        105072,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9fd54bfbbfe5b0f9225c616bfaf9b554e22453bccec74ff721bfa2e156349515',
        133284,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '020054507630a95da95e3be3a49fc214dbcfaf24390608c7a2b3d7f50f92d5d1',
        104972,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7404c4efdcd985236d209c5c0c5e33de959f635b2c6e360941ba22f8753d88dc',
        133000,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '66dc7bf66966029a73a06e1220a824348a0d1fced869b33b94384866a907b404',
        104376,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1aec65f5e5dca3ec9f8719936af31f54336bb5d99f25bf343ff25e009d5e569d',
        132488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7f67d86f99756ac80abbf4a03a41535ed9d8b077f56460fb30a9cd45ca561a22',
        103996,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4c263e938d69d7fcfb458613f3f273780c02bda6d38090fc8cb2244c06d0b0a3',
        133172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f794d63e5851c970d1f8527131022b8779e7f1aa8b8a974dcd0fdb49cd74270a',
        104476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '626bb691bbecebb8a239831c605068f546cdb97ae010463f2da45417e1741d82',
        131884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2884ba45cbb9cb0d03e03d9ff7ddaa586469062b6a0c7d9eedce5c300a8874b7',
        103200,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0d65094ca3a50e3e3078a2e46a4229f4552983b5f75ca1375acc7e5846dc40fb',
        131004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0d7f50973be9d011396bc034d6db727bd7c8bd04c394b691aae038666b286658',
        102236,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8051619be163d93f0ff326ee63a4aed4a38042fb23c4b565f5e87408bb6948f5',
        130004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7da482be71166cee8c0006906b0e930f45a5c8d6e5324b479edde0024dee23bd',
        101848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5302665d52f11188ff3c3008199ce8ca17835eb68c7c7bbbff6175e39879178a',
        131992,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8a5faa87c4f12461b775bf2c6693db562a932328b199affc9c16ea56206f534d',
        101876,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Raleway',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Raleway font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Raleway
  static TextTheme ralewayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.raleway(textStyle: textTheme?.display4),
      display3: GoogleFonts.raleway(textStyle: textTheme?.display3),
      display2: GoogleFonts.raleway(textStyle: textTheme?.display2),
      display1: GoogleFonts.raleway(textStyle: textTheme?.display1),
      headline: GoogleFonts.raleway(textStyle: textTheme?.headline),
      title: GoogleFonts.raleway(textStyle: textTheme?.title),
      subhead: GoogleFonts.raleway(textStyle: textTheme?.subhead),
      body2: GoogleFonts.raleway(textStyle: textTheme?.body2),
      body1: GoogleFonts.raleway(textStyle: textTheme?.body1),
      caption: GoogleFonts.raleway(textStyle: textTheme?.caption),
      button: GoogleFonts.raleway(textStyle: textTheme?.button),
      subtitle: GoogleFonts.raleway(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.raleway(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Raleway Dots font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Raleway+Dots
  static TextStyle ralewayDots({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4b4b8ff2afb81e87d73fd84bb88f05e768029ed7d4f839078f82d515111ba83b',
        254512,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RalewayDots',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Raleway Dots font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Raleway+Dots
  static TextTheme ralewayDotsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ralewayDots(textStyle: textTheme?.display4),
      display3: GoogleFonts.ralewayDots(textStyle: textTheme?.display3),
      display2: GoogleFonts.ralewayDots(textStyle: textTheme?.display2),
      display1: GoogleFonts.ralewayDots(textStyle: textTheme?.display1),
      headline: GoogleFonts.ralewayDots(textStyle: textTheme?.headline),
      title: GoogleFonts.ralewayDots(textStyle: textTheme?.title),
      subhead: GoogleFonts.ralewayDots(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ralewayDots(textStyle: textTheme?.body2),
      body1: GoogleFonts.ralewayDots(textStyle: textTheme?.body1),
      caption: GoogleFonts.ralewayDots(textStyle: textTheme?.caption),
      button: GoogleFonts.ralewayDots(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ralewayDots(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ralewayDots(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ramabhadra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ramabhadra
  static TextStyle ramabhadra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f8ceda8c345cda5342d5ed25537f3c2a16bf4548f447746c5d7553cff470362c',
        329608,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ramabhadra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ramabhadra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ramabhadra
  static TextTheme ramabhadraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ramabhadra(textStyle: textTheme?.display4),
      display3: GoogleFonts.ramabhadra(textStyle: textTheme?.display3),
      display2: GoogleFonts.ramabhadra(textStyle: textTheme?.display2),
      display1: GoogleFonts.ramabhadra(textStyle: textTheme?.display1),
      headline: GoogleFonts.ramabhadra(textStyle: textTheme?.headline),
      title: GoogleFonts.ramabhadra(textStyle: textTheme?.title),
      subhead: GoogleFonts.ramabhadra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ramabhadra(textStyle: textTheme?.body2),
      body1: GoogleFonts.ramabhadra(textStyle: textTheme?.body1),
      caption: GoogleFonts.ramabhadra(textStyle: textTheme?.caption),
      button: GoogleFonts.ramabhadra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ramabhadra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ramabhadra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ramaraja font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ramaraja
  static TextStyle ramaraja({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2d2ad7c6159f41c62bfca6dcad8df09173bd8915c107915bc3f035cedc1d00a6',
        496892,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ramaraja',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ramaraja font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ramaraja
  static TextTheme ramarajaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ramaraja(textStyle: textTheme?.display4),
      display3: GoogleFonts.ramaraja(textStyle: textTheme?.display3),
      display2: GoogleFonts.ramaraja(textStyle: textTheme?.display2),
      display1: GoogleFonts.ramaraja(textStyle: textTheme?.display1),
      headline: GoogleFonts.ramaraja(textStyle: textTheme?.headline),
      title: GoogleFonts.ramaraja(textStyle: textTheme?.title),
      subhead: GoogleFonts.ramaraja(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ramaraja(textStyle: textTheme?.body2),
      body1: GoogleFonts.ramaraja(textStyle: textTheme?.body1),
      caption: GoogleFonts.ramaraja(textStyle: textTheme?.caption),
      button: GoogleFonts.ramaraja(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ramaraja(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ramaraja(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rambla font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rambla
  static TextStyle rambla({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8cc56fcd2e3777d5c3699b8db651965ee39a057e20813adb1a07b181a8511e65',
        34284,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6486467dd0269443e3b474df8d13f8a02e42791674f0fcf5964b9ee8419cdbae',
        37096,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3c855f5e3c26200aeb6e55a7d0bbf80b16fceb67ab65b97d50a788c68d315379',
        34640,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f20b77570105aff68e4179538c4243221228d9f13bc6eb988847fdf6800b97b4',
        37324,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rambla',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rambla font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rambla
  static TextTheme ramblaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rambla(textStyle: textTheme?.display4),
      display3: GoogleFonts.rambla(textStyle: textTheme?.display3),
      display2: GoogleFonts.rambla(textStyle: textTheme?.display2),
      display1: GoogleFonts.rambla(textStyle: textTheme?.display1),
      headline: GoogleFonts.rambla(textStyle: textTheme?.headline),
      title: GoogleFonts.rambla(textStyle: textTheme?.title),
      subhead: GoogleFonts.rambla(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rambla(textStyle: textTheme?.body2),
      body1: GoogleFonts.rambla(textStyle: textTheme?.body1),
      caption: GoogleFonts.rambla(textStyle: textTheme?.caption),
      button: GoogleFonts.rambla(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rambla(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rambla(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rammetto One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rammetto+One
  static TextStyle rammettoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c98688de086da1f823bad61e527562aacacdd41a5cf8072e7c7d6c4fe3718dc6',
        30372,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RammettoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rammetto One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rammetto+One
  static TextTheme rammettoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rammettoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.rammettoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.rammettoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.rammettoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.rammettoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.rammettoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.rammettoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rammettoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.rammettoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.rammettoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.rammettoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rammettoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rammettoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ranchers font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ranchers
  static TextStyle ranchers({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ee03833b1756509c106b58261df85478f7bd82ff2fd7ca6b4d5890de33cae655',
        121636,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ranchers',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ranchers font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ranchers
  static TextTheme ranchersTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ranchers(textStyle: textTheme?.display4),
      display3: GoogleFonts.ranchers(textStyle: textTheme?.display3),
      display2: GoogleFonts.ranchers(textStyle: textTheme?.display2),
      display1: GoogleFonts.ranchers(textStyle: textTheme?.display1),
      headline: GoogleFonts.ranchers(textStyle: textTheme?.headline),
      title: GoogleFonts.ranchers(textStyle: textTheme?.title),
      subhead: GoogleFonts.ranchers(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ranchers(textStyle: textTheme?.body2),
      body1: GoogleFonts.ranchers(textStyle: textTheme?.body1),
      caption: GoogleFonts.ranchers(textStyle: textTheme?.caption),
      button: GoogleFonts.ranchers(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ranchers(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ranchers(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rancho font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rancho
  static TextStyle rancho({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2691ae7a785afc3443c02c1383179f3e510bbcbe3015a78c6b04b9a2ce719ea2',
        44424,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rancho',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rancho font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rancho
  static TextTheme ranchoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rancho(textStyle: textTheme?.display4),
      display3: GoogleFonts.rancho(textStyle: textTheme?.display3),
      display2: GoogleFonts.rancho(textStyle: textTheme?.display2),
      display1: GoogleFonts.rancho(textStyle: textTheme?.display1),
      headline: GoogleFonts.rancho(textStyle: textTheme?.headline),
      title: GoogleFonts.rancho(textStyle: textTheme?.title),
      subhead: GoogleFonts.rancho(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rancho(textStyle: textTheme?.body2),
      body1: GoogleFonts.rancho(textStyle: textTheme?.body1),
      caption: GoogleFonts.rancho(textStyle: textTheme?.caption),
      button: GoogleFonts.rancho(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rancho(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rancho(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ranga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ranga
  static TextStyle ranga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e51a6898e34d12bd9b9057002e645f176d30f5e821bfaa1ccc4e56294af7099a',
        119128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c5c763628e805a2af3c9deb68abd0b70227a98911f7ba56f4f8c2a3e8c286b96',
        127288,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ranga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ranga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ranga
  static TextTheme rangaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ranga(textStyle: textTheme?.display4),
      display3: GoogleFonts.ranga(textStyle: textTheme?.display3),
      display2: GoogleFonts.ranga(textStyle: textTheme?.display2),
      display1: GoogleFonts.ranga(textStyle: textTheme?.display1),
      headline: GoogleFonts.ranga(textStyle: textTheme?.headline),
      title: GoogleFonts.ranga(textStyle: textTheme?.title),
      subhead: GoogleFonts.ranga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ranga(textStyle: textTheme?.body2),
      body1: GoogleFonts.ranga(textStyle: textTheme?.body1),
      caption: GoogleFonts.ranga(textStyle: textTheme?.caption),
      button: GoogleFonts.ranga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ranga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ranga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rasa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rasa
  static TextStyle rasa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6d1458902052379a4c442fe3c08dfb90a878e6187abc480b52afc11943431dd3',
        192536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd5a933545a7d1e9a3ce0493c853f75c27dc067506d4c32398c0f724f726435cb',
        194280,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f5a6e10ca22dc5d39cb49a70330bb3f3b7dc5361feb0b59693284816acf3dc6d',
        193900,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0ce2031b3cd5dd01a2d4c96225c44fa6813df124cbf2f4f078c859e4e0abdd6d',
        194140,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f756b8a84bfdccc709dbc00ba23c8852f077e23210d148b4a158e4feb7c1901e',
        193644,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rasa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rasa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rasa
  static TextTheme rasaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rasa(textStyle: textTheme?.display4),
      display3: GoogleFonts.rasa(textStyle: textTheme?.display3),
      display2: GoogleFonts.rasa(textStyle: textTheme?.display2),
      display1: GoogleFonts.rasa(textStyle: textTheme?.display1),
      headline: GoogleFonts.rasa(textStyle: textTheme?.headline),
      title: GoogleFonts.rasa(textStyle: textTheme?.title),
      subhead: GoogleFonts.rasa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rasa(textStyle: textTheme?.body2),
      body1: GoogleFonts.rasa(textStyle: textTheme?.body1),
      caption: GoogleFonts.rasa(textStyle: textTheme?.caption),
      button: GoogleFonts.rasa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rasa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rasa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rationale font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rationale
  static TextStyle rationale({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'be5538f847ecbac23916ea02bdabf914bbcb6d6d35c8ad538b227d6ab3efffee',
        44712,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rationale',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rationale font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rationale
  static TextTheme rationaleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rationale(textStyle: textTheme?.display4),
      display3: GoogleFonts.rationale(textStyle: textTheme?.display3),
      display2: GoogleFonts.rationale(textStyle: textTheme?.display2),
      display1: GoogleFonts.rationale(textStyle: textTheme?.display1),
      headline: GoogleFonts.rationale(textStyle: textTheme?.headline),
      title: GoogleFonts.rationale(textStyle: textTheme?.title),
      subhead: GoogleFonts.rationale(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rationale(textStyle: textTheme?.body2),
      body1: GoogleFonts.rationale(textStyle: textTheme?.body1),
      caption: GoogleFonts.rationale(textStyle: textTheme?.caption),
      button: GoogleFonts.rationale(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rationale(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rationale(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ravi Prakash font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ravi+Prakash
  static TextStyle raviPrakash({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e1c97910a94c8297b0463611bff91a4178d5e555acd6915846dc0d34b7da5221',
        231772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RaviPrakash',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ravi Prakash font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ravi+Prakash
  static TextTheme raviPrakashTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.raviPrakash(textStyle: textTheme?.display4),
      display3: GoogleFonts.raviPrakash(textStyle: textTheme?.display3),
      display2: GoogleFonts.raviPrakash(textStyle: textTheme?.display2),
      display1: GoogleFonts.raviPrakash(textStyle: textTheme?.display1),
      headline: GoogleFonts.raviPrakash(textStyle: textTheme?.headline),
      title: GoogleFonts.raviPrakash(textStyle: textTheme?.title),
      subhead: GoogleFonts.raviPrakash(textStyle: textTheme?.subhead),
      body2: GoogleFonts.raviPrakash(textStyle: textTheme?.body2),
      body1: GoogleFonts.raviPrakash(textStyle: textTheme?.body1),
      caption: GoogleFonts.raviPrakash(textStyle: textTheme?.caption),
      button: GoogleFonts.raviPrakash(textStyle: textTheme?.button),
      subtitle: GoogleFonts.raviPrakash(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.raviPrakash(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Red Hat Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Red+Hat+Display
  static TextStyle redHatDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '675f7abfa369dc6992d9baf79751a6887711f613b7b4783502dbc42d135ad755',
        36544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2e8b90fd9cbce501f652d35b743083be439853e2ee98669ec4885ca518c7fb30',
        36960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '93f27cfcf7823481e7194e5feb84bb5724ae4d872ae2d45469fe2732eb1ffbba',
        36388,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'fde77be04a3ff0a0162557ffb4a34ea35bfc2b6d6221ea52f4784ee861d23115',
        37004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7897d54780c1af5e3be81c46c850d6cf5cab921a6d3b9b6f01bc53832a8fba74',
        36436,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7d663aae94b1599f6acc3c66f68bd11753c1f0065a6dfd808229663939991c88',
        36884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f3fa64617097c3954eacdd21e4502eb79d00053e29ca37b5e0047cf0e3d49aaa',
        36364,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ea4b150dc2f0ba9a550b1a93217bc8dd275a6534aca092096abff10a4751dab1',
        36832,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RedHatDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Red Hat Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Red+Hat+Display
  static TextTheme redHatDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.redHatDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.redHatDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.redHatDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.redHatDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.redHatDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.redHatDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.redHatDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.redHatDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.redHatDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.redHatDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.redHatDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.redHatDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.redHatDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Red Hat Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Red+Hat+Text
  static TextStyle redHatText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0d9ffb6cd7ed3ba3a171dc3f14fc4f0ee80d0bcc276de998f2d1856e2e4c46bc',
        36580,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c25033ec3d2ae9b4a79da58b3a841070303dba586f0797ab0d60afcd8d5e6708',
        37152,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8e6613e0c2b79e3e7adfce20e339e92aa65b3b932d8daed7102603d8a7e05352',
        36568,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '492f537d5c3ba80c637f66cd970d7ab47e7cdf85b3daa0783ae5b96ea8a95770',
        37092,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0ed0cf791ad1be4c2b900b22803db61988f37e96e044682319e45bce7a859b91',
        36524,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'be2de719ea5a677cf21fed0bf32ac84f816db39db4d91e04de07bd8bfcf2d8d7',
        36912,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RedHatText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Red Hat Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Red+Hat+Text
  static TextTheme redHatTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.redHatText(textStyle: textTheme?.display4),
      display3: GoogleFonts.redHatText(textStyle: textTheme?.display3),
      display2: GoogleFonts.redHatText(textStyle: textTheme?.display2),
      display1: GoogleFonts.redHatText(textStyle: textTheme?.display1),
      headline: GoogleFonts.redHatText(textStyle: textTheme?.headline),
      title: GoogleFonts.redHatText(textStyle: textTheme?.title),
      subhead: GoogleFonts.redHatText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.redHatText(textStyle: textTheme?.body2),
      body1: GoogleFonts.redHatText(textStyle: textTheme?.body1),
      caption: GoogleFonts.redHatText(textStyle: textTheme?.caption),
      button: GoogleFonts.redHatText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.redHatText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.redHatText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Redressed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Redressed
  static TextStyle redressed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b7da182df7a86a14b448d200c3efd866dca0885111c28fce6449cf8aef103e77',
        78804,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Redressed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Redressed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Redressed
  static TextTheme redressedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.redressed(textStyle: textTheme?.display4),
      display3: GoogleFonts.redressed(textStyle: textTheme?.display3),
      display2: GoogleFonts.redressed(textStyle: textTheme?.display2),
      display1: GoogleFonts.redressed(textStyle: textTheme?.display1),
      headline: GoogleFonts.redressed(textStyle: textTheme?.headline),
      title: GoogleFonts.redressed(textStyle: textTheme?.title),
      subhead: GoogleFonts.redressed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.redressed(textStyle: textTheme?.body2),
      body1: GoogleFonts.redressed(textStyle: textTheme?.body1),
      caption: GoogleFonts.redressed(textStyle: textTheme?.caption),
      button: GoogleFonts.redressed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.redressed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.redressed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Reem Kufi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Reem+Kufi
  static TextStyle reemKufi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ea139970598b2fe720c5ddab2a0e2483460759bc626931104aa1adb9c4ef6b9a',
        58312,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ReemKufi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Reem Kufi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Reem+Kufi
  static TextTheme reemKufiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.reemKufi(textStyle: textTheme?.display4),
      display3: GoogleFonts.reemKufi(textStyle: textTheme?.display3),
      display2: GoogleFonts.reemKufi(textStyle: textTheme?.display2),
      display1: GoogleFonts.reemKufi(textStyle: textTheme?.display1),
      headline: GoogleFonts.reemKufi(textStyle: textTheme?.headline),
      title: GoogleFonts.reemKufi(textStyle: textTheme?.title),
      subhead: GoogleFonts.reemKufi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.reemKufi(textStyle: textTheme?.body2),
      body1: GoogleFonts.reemKufi(textStyle: textTheme?.body1),
      caption: GoogleFonts.reemKufi(textStyle: textTheme?.caption),
      button: GoogleFonts.reemKufi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.reemKufi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.reemKufi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Reenie Beanie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Reenie+Beanie
  static TextStyle reenieBeanie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3bc036be5570dcb23bf8f01f888f56bc55c5e3606875bdd2bb8afd3ebb48d2a6',
        88956,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ReenieBeanie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Reenie Beanie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Reenie+Beanie
  static TextTheme reenieBeanieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.reenieBeanie(textStyle: textTheme?.display4),
      display3: GoogleFonts.reenieBeanie(textStyle: textTheme?.display3),
      display2: GoogleFonts.reenieBeanie(textStyle: textTheme?.display2),
      display1: GoogleFonts.reenieBeanie(textStyle: textTheme?.display1),
      headline: GoogleFonts.reenieBeanie(textStyle: textTheme?.headline),
      title: GoogleFonts.reenieBeanie(textStyle: textTheme?.title),
      subhead: GoogleFonts.reenieBeanie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.reenieBeanie(textStyle: textTheme?.body2),
      body1: GoogleFonts.reenieBeanie(textStyle: textTheme?.body1),
      caption: GoogleFonts.reenieBeanie(textStyle: textTheme?.caption),
      button: GoogleFonts.reenieBeanie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.reenieBeanie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.reenieBeanie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Revalia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Revalia
  static TextStyle revalia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b093f6aebb81a6ee15d476875815645a7d5544b359370f2565d91a77dfa8d3e6',
        34108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Revalia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Revalia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Revalia
  static TextTheme revaliaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.revalia(textStyle: textTheme?.display4),
      display3: GoogleFonts.revalia(textStyle: textTheme?.display3),
      display2: GoogleFonts.revalia(textStyle: textTheme?.display2),
      display1: GoogleFonts.revalia(textStyle: textTheme?.display1),
      headline: GoogleFonts.revalia(textStyle: textTheme?.headline),
      title: GoogleFonts.revalia(textStyle: textTheme?.title),
      subhead: GoogleFonts.revalia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.revalia(textStyle: textTheme?.body2),
      body1: GoogleFonts.revalia(textStyle: textTheme?.body1),
      caption: GoogleFonts.revalia(textStyle: textTheme?.caption),
      button: GoogleFonts.revalia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.revalia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.revalia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rhodium Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rhodium+Libre
  static TextStyle rhodiumLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9c5b10db8b1e6bcf720d3a76cdf51a5dc63ec9f1a7115e777e07921fa2b738e6',
        154452,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RhodiumLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rhodium Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rhodium+Libre
  static TextTheme rhodiumLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rhodiumLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.rhodiumLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.rhodiumLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.rhodiumLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.rhodiumLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.rhodiumLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.rhodiumLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rhodiumLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.rhodiumLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.rhodiumLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.rhodiumLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rhodiumLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rhodiumLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ribeye font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ribeye
  static TextStyle ribeye({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9fe858f86a4e9a56b2a520c8f615ee7dd682f4a2fed5b8033405258755e1105e',
        78076,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ribeye',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ribeye font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ribeye
  static TextTheme ribeyeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ribeye(textStyle: textTheme?.display4),
      display3: GoogleFonts.ribeye(textStyle: textTheme?.display3),
      display2: GoogleFonts.ribeye(textStyle: textTheme?.display2),
      display1: GoogleFonts.ribeye(textStyle: textTheme?.display1),
      headline: GoogleFonts.ribeye(textStyle: textTheme?.headline),
      title: GoogleFonts.ribeye(textStyle: textTheme?.title),
      subhead: GoogleFonts.ribeye(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ribeye(textStyle: textTheme?.body2),
      body1: GoogleFonts.ribeye(textStyle: textTheme?.body1),
      caption: GoogleFonts.ribeye(textStyle: textTheme?.caption),
      button: GoogleFonts.ribeye(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ribeye(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ribeye(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ribeye Marrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ribeye+Marrow
  static TextStyle ribeyeMarrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c246f9f2e382d8da82319762b401df8a1426fa767b74d168f0d1abca33fdd43d',
        84848,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RibeyeMarrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ribeye Marrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ribeye+Marrow
  static TextTheme ribeyeMarrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.headline),
      title: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.caption),
      button: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Righteous font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Righteous
  static TextStyle righteous({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b40fb221f7d3d9f9d2681d60785245f09112b91485a2380235241e647b852428',
        43104,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Righteous',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Righteous font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Righteous
  static TextTheme righteousTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.righteous(textStyle: textTheme?.display4),
      display3: GoogleFonts.righteous(textStyle: textTheme?.display3),
      display2: GoogleFonts.righteous(textStyle: textTheme?.display2),
      display1: GoogleFonts.righteous(textStyle: textTheme?.display1),
      headline: GoogleFonts.righteous(textStyle: textTheme?.headline),
      title: GoogleFonts.righteous(textStyle: textTheme?.title),
      subhead: GoogleFonts.righteous(textStyle: textTheme?.subhead),
      body2: GoogleFonts.righteous(textStyle: textTheme?.body2),
      body1: GoogleFonts.righteous(textStyle: textTheme?.body1),
      caption: GoogleFonts.righteous(textStyle: textTheme?.caption),
      button: GoogleFonts.righteous(textStyle: textTheme?.button),
      subtitle: GoogleFonts.righteous(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.righteous(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Risque font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Risque
  static TextStyle risque({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5f8b847245100d0b265af4b51f5155b82e072ba6124a272762a8868071c2e9a8',
        58976,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Risque',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Risque font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Risque
  static TextTheme risqueTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.risque(textStyle: textTheme?.display4),
      display3: GoogleFonts.risque(textStyle: textTheme?.display3),
      display2: GoogleFonts.risque(textStyle: textTheme?.display2),
      display1: GoogleFonts.risque(textStyle: textTheme?.display1),
      headline: GoogleFonts.risque(textStyle: textTheme?.headline),
      title: GoogleFonts.risque(textStyle: textTheme?.title),
      subhead: GoogleFonts.risque(textStyle: textTheme?.subhead),
      body2: GoogleFonts.risque(textStyle: textTheme?.body2),
      body1: GoogleFonts.risque(textStyle: textTheme?.body1),
      caption: GoogleFonts.risque(textStyle: textTheme?.caption),
      button: GoogleFonts.risque(textStyle: textTheme?.button),
      subtitle: GoogleFonts.risque(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.risque(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Roboto font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto
  static TextStyle roboto({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e735762739638d19335103f8e7a343545560f4b2265fd35a4f0f516f512a7760',
        109484,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'aece4c53901fff188a2cb1aab1024ea53b459e2181d47d9b3700c13d33ade89e',
        116036,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d1bd6e2cc14a33517018f1bbfdc878cb18e7894f39fc7c36436ae18440621e7',
        108652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0810007c837dfd034071c166e5f3ed111b0180b2f6af17a5c14e006a8e05784f',
        115656,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '030868028bda24a27a45e0be44c8ae15544762b94f80da746c8b8a1c05f8e952',
        107800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6a79346603274d80f27fb4de32a0e7a60f62c53c8069df2750e79b8f10e30649',
        114644,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '388ace661d10e5756d4de58035d6687cf35c0b11c8185b098468741ca2e8a6d4',
        109344,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '257c7750d0c1570dc2324571f2998d43e18649848595361a6b136bb0d3d2efb2',
        116372,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba3855457bdc103784c39219f0ce666683084df07dbd7eb7d8c35a40cf8f1c8b',
        109712,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8c9936227e9fe936594819bbf4aa9a26d9b044f0b440800a4ade3e3e749f54aa',
        116424,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a1ba74d13db1b16771b1d8e705e4c9282ef1d09492783304ebc025adb6ba1914',
        109832,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a4c423dcbda812fa36cb0325f3aad0fd9847e8a5b0a26f31094db0666e721c8c',
        116668,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '779b7e4fc31ca5d743e125a1799e9c79dc6ac4ec6e87ca8668ddbe5a157114d7',
        107676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f3f74b2f03d3c52f24982b0c06b087165cebeeff210f3db18314a3cede24d9c5',
        115124,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a0e62c76df9173512c94484b3994d83d2b4648dadb8ea6104f3656a3b60f25bc',
        106992,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '271bd0834c4b4fdb5c9c023bbb4067bb29b29e248cd45f845be792f649d30934',
        114324,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '75a8116fe33c85a153cc824951286cc88ea5c5278e72f1ad56bf94693e9302e7',
        108832,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6aeda8628b19ddf4671e2e3710998ea138a2cd845f54640bb82f89acad0bbaf6',
        115668,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Roboto',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Roboto font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto
  static TextTheme robotoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.roboto(textStyle: textTheme?.display4),
      display3: GoogleFonts.roboto(textStyle: textTheme?.display3),
      display2: GoogleFonts.roboto(textStyle: textTheme?.display2),
      display1: GoogleFonts.roboto(textStyle: textTheme?.display1),
      headline: GoogleFonts.roboto(textStyle: textTheme?.headline),
      title: GoogleFonts.roboto(textStyle: textTheme?.title),
      subhead: GoogleFonts.roboto(textStyle: textTheme?.subhead),
      body2: GoogleFonts.roboto(textStyle: textTheme?.body2),
      body1: GoogleFonts.roboto(textStyle: textTheme?.body1),
      caption: GoogleFonts.roboto(textStyle: textTheme?.caption),
      button: GoogleFonts.roboto(textStyle: textTheme?.button),
      subtitle: GoogleFonts.roboto(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.roboto(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Roboto Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Mono
  static TextStyle robotoMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e54b0e2606a8e454e92c100a791d8b71811e052d42fe4b32896466b8f0be270e',
        85128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3eb07be624d5ec7a80bcb5820f19fe80008142212ee07cfa2bf9a5b70f94a6a2',
        87936,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1c9d3d466aab107a76ff737ac20edaf327476dbcc6c6dbd77a00094bc79727bf',
        82784,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0f72866d63d772ac722b847dfc2d8ae72d00e74b69f1b95374f6f71677a4cb05',
        87832,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e3284818a33743fb9474240557d229c111ec2b584d14913e5d32af7b74487458',
        80684,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3d8daba697d824c67c2e385af80a546763d80262785e6adb2e681c714782fb22',
        86816,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c451bd3c919883e57c526d2c2bfa3e98dfd63411a8b872828891908ba78ad63b',
        80120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e78535fb7ee0b0f96d74454e5c73e28c62d48423449a97f0d749ec7c920fa921',
        86724,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '107b5dac259223182470928048382c0cef0d4b668d0775ac03c0a44c847ea2c7',
        80304,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6551cac967c818689406cd0ca591d8a251a88cbff6790b5ea3c0e3aa2f541668',
        86788,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RobotoMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Roboto Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Mono
  static TextTheme robotoMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.robotoMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.robotoMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.robotoMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.robotoMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.robotoMono(textStyle: textTheme?.headline),
      title: GoogleFonts.robotoMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.robotoMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.robotoMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.robotoMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.robotoMono(textStyle: textTheme?.caption),
      button: GoogleFonts.robotoMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.robotoMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.robotoMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Roboto Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Slab
  static TextStyle robotoSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '39d17021e49dab28b629d9c337f6d659da0a8b37bbfb8ae5ccfe9ee8f8d16878',
        109020,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5b6bad2cf6f07f140e117c46893165483ad9dd034a75a4a090f1d9825992210e',
        109636,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '89c16ab4d99ac752daea2ecf31af3aae669305b909e558170bafd48dc9b8b9aa',
        107180,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e87e906df2d8d66b24a131bef23415760d6d2afee657275eb91f1a3a5e5dcb5e',
        108520,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RobotoSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Roboto Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Slab
  static TextTheme robotoSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.robotoSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.robotoSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.robotoSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.robotoSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.robotoSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.robotoSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.robotoSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.robotoSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.robotoSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.robotoSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.robotoSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.robotoSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.robotoSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rochester font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rochester
  static TextStyle rochester({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3497dd76e37f779c2ea2d2d0ae96b0cbf2170cec9ad27c806d0b3b31c859ee13',
        37824,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rochester',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rochester font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rochester
  static TextTheme rochesterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rochester(textStyle: textTheme?.display4),
      display3: GoogleFonts.rochester(textStyle: textTheme?.display3),
      display2: GoogleFonts.rochester(textStyle: textTheme?.display2),
      display1: GoogleFonts.rochester(textStyle: textTheme?.display1),
      headline: GoogleFonts.rochester(textStyle: textTheme?.headline),
      title: GoogleFonts.rochester(textStyle: textTheme?.title),
      subhead: GoogleFonts.rochester(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rochester(textStyle: textTheme?.body2),
      body1: GoogleFonts.rochester(textStyle: textTheme?.body1),
      caption: GoogleFonts.rochester(textStyle: textTheme?.caption),
      button: GoogleFonts.rochester(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rochester(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rochester(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rock Salt font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rock+Salt
  static TextStyle rockSalt({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f806681f8229dcdbd4eecfbadbbba02c5db0e98796d6996917c01a006376910f',
        117412,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RockSalt',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rock Salt font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rock+Salt
  static TextTheme rockSaltTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rockSalt(textStyle: textTheme?.display4),
      display3: GoogleFonts.rockSalt(textStyle: textTheme?.display3),
      display2: GoogleFonts.rockSalt(textStyle: textTheme?.display2),
      display1: GoogleFonts.rockSalt(textStyle: textTheme?.display1),
      headline: GoogleFonts.rockSalt(textStyle: textTheme?.headline),
      title: GoogleFonts.rockSalt(textStyle: textTheme?.title),
      subhead: GoogleFonts.rockSalt(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rockSalt(textStyle: textTheme?.body2),
      body1: GoogleFonts.rockSalt(textStyle: textTheme?.body1),
      caption: GoogleFonts.rockSalt(textStyle: textTheme?.caption),
      button: GoogleFonts.rockSalt(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rockSalt(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rockSalt(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rokkitt font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rokkitt
  static TextStyle rokkitt({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9a0a1b138370aa3841a848edde26bd7045ac2a5a0f13a513b247417c3489811c',
        59248,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '840d357a7d06133d859000a071917c4ea92f02d0f001f247137046392166ff1b',
        59120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '19b250411cba0e1bc39378cf1e47ecbd217b7b52e845159655611f9cce3f016f',
        58996,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd605b424de78054bd585518d8a4e136ab863ab5f3110ee43cb0745bca0f94eb3',
        59040,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c3ce457383a5f17f5736ecff7d423f0d5e1f10ba000e7a78145fef0d293439c7',
        58848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '710018ab00f1b7534021eb425d0afa5cd1ccc82a3d91a174d7f359afac93f384',
        58800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '76808b96844704a6d75bee1943315ea236557fc6fb1a239ec5fcee6f9c5fcd58',
        58648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1e99689267ca0778d003215820f88badff6b9986410c8b9d07d2c857c6e04beb',
        58464,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a8cf419d654432575866170e1d718f434f7f5cfa52673194ae8fc3d08cbefe92',
        58212,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rokkitt',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rokkitt font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rokkitt
  static TextTheme rokkittTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rokkitt(textStyle: textTheme?.display4),
      display3: GoogleFonts.rokkitt(textStyle: textTheme?.display3),
      display2: GoogleFonts.rokkitt(textStyle: textTheme?.display2),
      display1: GoogleFonts.rokkitt(textStyle: textTheme?.display1),
      headline: GoogleFonts.rokkitt(textStyle: textTheme?.headline),
      title: GoogleFonts.rokkitt(textStyle: textTheme?.title),
      subhead: GoogleFonts.rokkitt(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rokkitt(textStyle: textTheme?.body2),
      body1: GoogleFonts.rokkitt(textStyle: textTheme?.body1),
      caption: GoogleFonts.rokkitt(textStyle: textTheme?.caption),
      button: GoogleFonts.rokkitt(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rokkitt(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rokkitt(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Romanesco font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Romanesco
  static TextStyle romanesco({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8d69cd23e2f9e72bfe24b40e81d3301f35d942aa11864ee86d116da929e93a27',
        52112,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Romanesco',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Romanesco font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Romanesco
  static TextTheme romanescoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.romanesco(textStyle: textTheme?.display4),
      display3: GoogleFonts.romanesco(textStyle: textTheme?.display3),
      display2: GoogleFonts.romanesco(textStyle: textTheme?.display2),
      display1: GoogleFonts.romanesco(textStyle: textTheme?.display1),
      headline: GoogleFonts.romanesco(textStyle: textTheme?.headline),
      title: GoogleFonts.romanesco(textStyle: textTheme?.title),
      subhead: GoogleFonts.romanesco(textStyle: textTheme?.subhead),
      body2: GoogleFonts.romanesco(textStyle: textTheme?.body2),
      body1: GoogleFonts.romanesco(textStyle: textTheme?.body1),
      caption: GoogleFonts.romanesco(textStyle: textTheme?.caption),
      button: GoogleFonts.romanesco(textStyle: textTheme?.button),
      subtitle: GoogleFonts.romanesco(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.romanesco(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ropa Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ropa+Sans
  static TextStyle ropaSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ded2bcc06059fc1d86ad77aedff4ca5827287da7e5d969867d190f24ce2c5916',
        39140,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0fc33e982fa4003ec3947ef040bddfed3e33ad447086af587ee5ed6cc4ef4fac',
        41796,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RopaSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ropa Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ropa+Sans
  static TextTheme ropaSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ropaSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.ropaSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.ropaSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.ropaSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.ropaSans(textStyle: textTheme?.headline),
      title: GoogleFonts.ropaSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.ropaSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ropaSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.ropaSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.ropaSans(textStyle: textTheme?.caption),
      button: GoogleFonts.ropaSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ropaSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ropaSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rosario font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rosario
  static TextStyle rosario({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dc6413573a989dcba9ee4d0b7670f9eb53c458ddefc205ef6e0bd1e1c0be395e',
        44412,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f099b91c7f453830c2471e0be3a576f1f58943f343e98b2d994a8f195364e51f',
        44488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eba2172f0e05afe4e99a14d3a265d3f334e6110105c10842f43387dc99341df6',
        25204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2fde400ab1655e1710a53bca2ab413a1504a54748fcac3b8ffea6135f4b8aabb',
        45640,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rosario',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rosario font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rosario
  static TextTheme rosarioTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rosario(textStyle: textTheme?.display4),
      display3: GoogleFonts.rosario(textStyle: textTheme?.display3),
      display2: GoogleFonts.rosario(textStyle: textTheme?.display2),
      display1: GoogleFonts.rosario(textStyle: textTheme?.display1),
      headline: GoogleFonts.rosario(textStyle: textTheme?.headline),
      title: GoogleFonts.rosario(textStyle: textTheme?.title),
      subhead: GoogleFonts.rosario(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rosario(textStyle: textTheme?.body2),
      body1: GoogleFonts.rosario(textStyle: textTheme?.body1),
      caption: GoogleFonts.rosario(textStyle: textTheme?.caption),
      button: GoogleFonts.rosario(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rosario(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rosario(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rosarivo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rosarivo
  static TextStyle rosarivo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd5878b2fc902263df1fa49b327526cf9d20d935600e9d19b05ed00453639dd2e',
        41296,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0decb12337d01f7da972a8999c759b44d150a6b4da6f78459c1fc7732df0e5ea',
        39196,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rosarivo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rosarivo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rosarivo
  static TextTheme rosarivoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rosarivo(textStyle: textTheme?.display4),
      display3: GoogleFonts.rosarivo(textStyle: textTheme?.display3),
      display2: GoogleFonts.rosarivo(textStyle: textTheme?.display2),
      display1: GoogleFonts.rosarivo(textStyle: textTheme?.display1),
      headline: GoogleFonts.rosarivo(textStyle: textTheme?.headline),
      title: GoogleFonts.rosarivo(textStyle: textTheme?.title),
      subhead: GoogleFonts.rosarivo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rosarivo(textStyle: textTheme?.body2),
      body1: GoogleFonts.rosarivo(textStyle: textTheme?.body1),
      caption: GoogleFonts.rosarivo(textStyle: textTheme?.caption),
      button: GoogleFonts.rosarivo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rosarivo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rosarivo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rouge Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rouge+Script
  static TextStyle rougeScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fda390dca3b917e1245ea6c06da950ec2a4d3ee0f5b6d3c128c0049f2a6bc5bd',
        46704,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RougeScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rouge Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rouge+Script
  static TextTheme rougeScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rougeScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.rougeScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.rougeScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.rougeScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.rougeScript(textStyle: textTheme?.headline),
      title: GoogleFonts.rougeScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.rougeScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rougeScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.rougeScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.rougeScript(textStyle: textTheme?.caption),
      button: GoogleFonts.rougeScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rougeScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rougeScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rozha One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rozha+One
  static TextStyle rozhaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f19c35bdc6cdb6ad7f6251e42e4bd0c4e43757cb71b9ecd26421f1fac039d1ef',
        197988,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RozhaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rozha One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rozha+One
  static TextTheme rozhaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rozhaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.rozhaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.rozhaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.rozhaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.rozhaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.rozhaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.rozhaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rozhaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.rozhaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.rozhaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.rozhaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rozhaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rozhaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rubik font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rubik
  static TextStyle rubik({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd06ee1ddd9a38ecea7c204c94d69e670e155c7e5f6b9ca5bdbbc851871397569',
        106476,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '39eb0e8cc0f4f0f949cd7ab1192004ad43fa616ab0ba09ba2f1c5e975b6ed29f',
        109452,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1441b864d5f661c6ad072120b1ee340e6c799fab34f7d408ec3fbf11f41f3ea0',
        110876,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1daca2e29940a75b3f1d4f3d7bb0356f63332d3013133093e3a75295dcdaf781',
        113204,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '334711470701a9df2e7c93bcc418d6d16e8844ed0bf4ae4411f588cdb913869a',
        110968,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '131d5d182158888dbccfcf0de7726b6a878bdb7eb60bbc96fb8a42561abc6b8c',
        113252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '395804d64aff5eda80de3c9e8fc2ffe482af2f6483707546f9fb8c3b14e747d9',
        110580,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7dc9a621668992ae25fd33cb83bc658c0bd8e2068c92524544164c3ba79737b6',
        113060,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f660cd5e361c3f00ea913d713f53325c9248887d961ee7a130335fc796750fff',
        108720,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1e373f9418d94e2ae6e4b31972520bf13c7b93e0811f8621d0ce8d72e0576c9b',
        111512,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rubik',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rubik font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rubik
  static TextTheme rubikTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rubik(textStyle: textTheme?.display4),
      display3: GoogleFonts.rubik(textStyle: textTheme?.display3),
      display2: GoogleFonts.rubik(textStyle: textTheme?.display2),
      display1: GoogleFonts.rubik(textStyle: textTheme?.display1),
      headline: GoogleFonts.rubik(textStyle: textTheme?.headline),
      title: GoogleFonts.rubik(textStyle: textTheme?.title),
      subhead: GoogleFonts.rubik(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rubik(textStyle: textTheme?.body2),
      body1: GoogleFonts.rubik(textStyle: textTheme?.body1),
      caption: GoogleFonts.rubik(textStyle: textTheme?.caption),
      button: GoogleFonts.rubik(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rubik(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rubik(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rubik Mono One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rubik+Mono+One
  static TextStyle rubikMonoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e7309c62b1b75116a4ed60639db8643e8bf50f3f4ed2f798823b2eb3b1f2a225',
        76472,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RubikMonoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rubik Mono One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rubik+Mono+One
  static TextTheme rubikMonoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rubikMonoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.rubikMonoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.rubikMonoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.rubikMonoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.rubikMonoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.rubikMonoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.rubikMonoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rubikMonoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.rubikMonoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.rubikMonoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.rubikMonoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rubikMonoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rubikMonoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruda
  static TextStyle ruda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a254aa475c3646075b11d4e1a7db06d96c2f16a001e31943133c66d6bbe7558d',
        24500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'af38ec0bb3b6d599d8ad3f56b0f6f3fb81bd7dfd3234fd8f9dbaaf5029c0b2ab',
        24336,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0a25461d4ccbfb0f3a77a33f66143f8474a3eccfbee06850f5e778bf29216894',
        24284,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ruda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruda
  static TextTheme rudaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ruda(textStyle: textTheme?.display4),
      display3: GoogleFonts.ruda(textStyle: textTheme?.display3),
      display2: GoogleFonts.ruda(textStyle: textTheme?.display2),
      display1: GoogleFonts.ruda(textStyle: textTheme?.display1),
      headline: GoogleFonts.ruda(textStyle: textTheme?.headline),
      title: GoogleFonts.ruda(textStyle: textTheme?.title),
      subhead: GoogleFonts.ruda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ruda(textStyle: textTheme?.body2),
      body1: GoogleFonts.ruda(textStyle: textTheme?.body1),
      caption: GoogleFonts.ruda(textStyle: textTheme?.caption),
      button: GoogleFonts.ruda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ruda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ruda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rufina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rufina
  static TextStyle rufina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '13bca1c6fdd801a76033b1400e39b72e91e0afb66bbfe9c7949ba573a2fef8dd',
        39992,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dde1bdffc799ca56ee0f9a9f0386b734acc2abff4459d9ac91da48b589078fb6',
        40008,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rufina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rufina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rufina
  static TextTheme rufinaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rufina(textStyle: textTheme?.display4),
      display3: GoogleFonts.rufina(textStyle: textTheme?.display3),
      display2: GoogleFonts.rufina(textStyle: textTheme?.display2),
      display1: GoogleFonts.rufina(textStyle: textTheme?.display1),
      headline: GoogleFonts.rufina(textStyle: textTheme?.headline),
      title: GoogleFonts.rufina(textStyle: textTheme?.title),
      subhead: GoogleFonts.rufina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rufina(textStyle: textTheme?.body2),
      body1: GoogleFonts.rufina(textStyle: textTheme?.body1),
      caption: GoogleFonts.rufina(textStyle: textTheme?.caption),
      button: GoogleFonts.rufina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rufina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rufina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruge Boogie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruge+Boogie
  static TextStyle rugeBoogie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '91717da896d2b742035d5a0b0ba8e6e4eb616fa3040d3ba55be14c2e92b1aa8f',
        63488,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RugeBoogie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruge Boogie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruge+Boogie
  static TextTheme rugeBoogieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rugeBoogie(textStyle: textTheme?.display4),
      display3: GoogleFonts.rugeBoogie(textStyle: textTheme?.display3),
      display2: GoogleFonts.rugeBoogie(textStyle: textTheme?.display2),
      display1: GoogleFonts.rugeBoogie(textStyle: textTheme?.display1),
      headline: GoogleFonts.rugeBoogie(textStyle: textTheme?.headline),
      title: GoogleFonts.rugeBoogie(textStyle: textTheme?.title),
      subhead: GoogleFonts.rugeBoogie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rugeBoogie(textStyle: textTheme?.body2),
      body1: GoogleFonts.rugeBoogie(textStyle: textTheme?.body1),
      caption: GoogleFonts.rugeBoogie(textStyle: textTheme?.caption),
      button: GoogleFonts.rugeBoogie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rugeBoogie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rugeBoogie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruluko font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruluko
  static TextStyle ruluko({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '518872494d9916ac67c11f0d33a4e68e70201fcd2c5edc6925985bfb1a22a9c4',
        27388,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ruluko',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruluko font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruluko
  static TextTheme rulukoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ruluko(textStyle: textTheme?.display4),
      display3: GoogleFonts.ruluko(textStyle: textTheme?.display3),
      display2: GoogleFonts.ruluko(textStyle: textTheme?.display2),
      display1: GoogleFonts.ruluko(textStyle: textTheme?.display1),
      headline: GoogleFonts.ruluko(textStyle: textTheme?.headline),
      title: GoogleFonts.ruluko(textStyle: textTheme?.title),
      subhead: GoogleFonts.ruluko(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ruluko(textStyle: textTheme?.body2),
      body1: GoogleFonts.ruluko(textStyle: textTheme?.body1),
      caption: GoogleFonts.ruluko(textStyle: textTheme?.caption),
      button: GoogleFonts.ruluko(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ruluko(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ruluko(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rum Raisin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rum+Raisin
  static TextStyle rumRaisin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '15dd5f0a1c1162127387747b68fb4d16c6eebbc6ee30b8af755f7898ea9494fa',
        61396,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RumRaisin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rum Raisin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rum+Raisin
  static TextTheme rumRaisinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rumRaisin(textStyle: textTheme?.display4),
      display3: GoogleFonts.rumRaisin(textStyle: textTheme?.display3),
      display2: GoogleFonts.rumRaisin(textStyle: textTheme?.display2),
      display1: GoogleFonts.rumRaisin(textStyle: textTheme?.display1),
      headline: GoogleFonts.rumRaisin(textStyle: textTheme?.headline),
      title: GoogleFonts.rumRaisin(textStyle: textTheme?.title),
      subhead: GoogleFonts.rumRaisin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rumRaisin(textStyle: textTheme?.body2),
      body1: GoogleFonts.rumRaisin(textStyle: textTheme?.body1),
      caption: GoogleFonts.rumRaisin(textStyle: textTheme?.caption),
      button: GoogleFonts.rumRaisin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rumRaisin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rumRaisin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruslan Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruslan+Display
  static TextStyle ruslanDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ed18797941421375fffab1522b84e81a16d399abe36964f4f3278683b1dc29f',
        57264,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RuslanDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruslan Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruslan+Display
  static TextTheme ruslanDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ruslanDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.ruslanDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.ruslanDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.ruslanDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.ruslanDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.ruslanDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.ruslanDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ruslanDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.ruslanDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.ruslanDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.ruslanDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ruslanDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ruslanDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Russo One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Russo+One
  static TextStyle russoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '42938246c94ba396145f46606ca60fd6409d6626953609dbd587a50757963337',
        38636,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RussoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Russo One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Russo+One
  static TextTheme russoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.russoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.russoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.russoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.russoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.russoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.russoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.russoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.russoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.russoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.russoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.russoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.russoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.russoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruthie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruthie
  static TextStyle ruthie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '07b0c223b1890d96133629bd33f84988e27371098aac4a68a738cb05f15ce183',
        57160,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ruthie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruthie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruthie
  static TextTheme ruthieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ruthie(textStyle: textTheme?.display4),
      display3: GoogleFonts.ruthie(textStyle: textTheme?.display3),
      display2: GoogleFonts.ruthie(textStyle: textTheme?.display2),
      display1: GoogleFonts.ruthie(textStyle: textTheme?.display1),
      headline: GoogleFonts.ruthie(textStyle: textTheme?.headline),
      title: GoogleFonts.ruthie(textStyle: textTheme?.title),
      subhead: GoogleFonts.ruthie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ruthie(textStyle: textTheme?.body2),
      body1: GoogleFonts.ruthie(textStyle: textTheme?.body1),
      caption: GoogleFonts.ruthie(textStyle: textTheme?.caption),
      button: GoogleFonts.ruthie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ruthie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ruthie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rye font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rye
  static TextStyle rye({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '925017b50d3328d30961faf597e0912d32371e48a76c36b3d89fa06e538003bc',
        86244,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rye',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rye font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rye
  static TextTheme ryeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rye(textStyle: textTheme?.display4),
      display3: GoogleFonts.rye(textStyle: textTheme?.display3),
      display2: GoogleFonts.rye(textStyle: textTheme?.display2),
      display1: GoogleFonts.rye(textStyle: textTheme?.display1),
      headline: GoogleFonts.rye(textStyle: textTheme?.headline),
      title: GoogleFonts.rye(textStyle: textTheme?.title),
      subhead: GoogleFonts.rye(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rye(textStyle: textTheme?.body2),
      body1: GoogleFonts.rye(textStyle: textTheme?.body1),
      caption: GoogleFonts.rye(textStyle: textTheme?.caption),
      button: GoogleFonts.rye(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rye(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rye(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sacramento font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sacramento
  static TextStyle sacramento({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3063956ef6275e1b23cf8ab5ce022e853414c069af3d200d3cdad4924c5f6eb5',
        79268,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sacramento',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sacramento font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sacramento
  static TextTheme sacramentoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sacramento(textStyle: textTheme?.display4),
      display3: GoogleFonts.sacramento(textStyle: textTheme?.display3),
      display2: GoogleFonts.sacramento(textStyle: textTheme?.display2),
      display1: GoogleFonts.sacramento(textStyle: textTheme?.display1),
      headline: GoogleFonts.sacramento(textStyle: textTheme?.headline),
      title: GoogleFonts.sacramento(textStyle: textTheme?.title),
      subhead: GoogleFonts.sacramento(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sacramento(textStyle: textTheme?.body2),
      body1: GoogleFonts.sacramento(textStyle: textTheme?.body1),
      caption: GoogleFonts.sacramento(textStyle: textTheme?.caption),
      button: GoogleFonts.sacramento(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sacramento(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sacramento(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sahitya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sahitya
  static TextStyle sahitya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '54146b1b18bccc5173c7f1cc478fd450cfb721e1b3d40df0ebd3dcf6711c6c48',
        186736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '14383134c508c525e61d88a045189d98b08191a7cadfada9c90a82eea5d88ee6',
        186312,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sahitya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sahitya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sahitya
  static TextTheme sahityaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sahitya(textStyle: textTheme?.display4),
      display3: GoogleFonts.sahitya(textStyle: textTheme?.display3),
      display2: GoogleFonts.sahitya(textStyle: textTheme?.display2),
      display1: GoogleFonts.sahitya(textStyle: textTheme?.display1),
      headline: GoogleFonts.sahitya(textStyle: textTheme?.headline),
      title: GoogleFonts.sahitya(textStyle: textTheme?.title),
      subhead: GoogleFonts.sahitya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sahitya(textStyle: textTheme?.body2),
      body1: GoogleFonts.sahitya(textStyle: textTheme?.body1),
      caption: GoogleFonts.sahitya(textStyle: textTheme?.caption),
      button: GoogleFonts.sahitya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sahitya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sahitya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sail font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sail
  static TextStyle sail({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '448cb365963b156da5ce3bb2b69bd8c6837dfd0a2beb5f00d831143b1910ec6e',
        32436,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sail',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sail font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sail
  static TextTheme sailTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sail(textStyle: textTheme?.display4),
      display3: GoogleFonts.sail(textStyle: textTheme?.display3),
      display2: GoogleFonts.sail(textStyle: textTheme?.display2),
      display1: GoogleFonts.sail(textStyle: textTheme?.display1),
      headline: GoogleFonts.sail(textStyle: textTheme?.headline),
      title: GoogleFonts.sail(textStyle: textTheme?.title),
      subhead: GoogleFonts.sail(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sail(textStyle: textTheme?.body2),
      body1: GoogleFonts.sail(textStyle: textTheme?.body1),
      caption: GoogleFonts.sail(textStyle: textTheme?.caption),
      button: GoogleFonts.sail(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sail(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sail(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Saira font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira
  static TextStyle saira({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b6d764b20e47ac3d6764acfa56dcca309c570f72779558c6c85b227d3d52c1a9',
        74292,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2b401181dcedd7b5ce954c3110d4a358e96333124e6afb4335cf4ce5a9612a21',
        80648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9bc2a7efb47daf648f831278c1e7d476dc527592af052be0f1b56d14e3b4e333',
        74772,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '52c681d7513af192559d2240ada8f9fa22b3643bdb673ee7e21e6eb5684435f9',
        74492,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2ca26aa1deaa72e2d0a3578ee8e0308aeeabd47a10628833efad904d84f252ba',
        74924,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd9b40c01b3303786bc3fffeff6a6d3a756acf2bd892721e8d28e640b1269900f',
        75408,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6f648ffbf75c94be4a3f3bdce9ed055f5ca4c76cea8df354c32deecf172d4bc3',
        75764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e7ef6f260e896a02dd09b2e149372bffaf3c2fc81e6a3eaba79751a2f84bc498',
        81492,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '784cb5c4c9a4355b55b1f819414b962800d401a312f0874e035e90ba2d1ebeb8',
        74768,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8220c0c8f2f9288ded38da89babb11b6da4163ebaf504f877d22fb4ee43a5418',
        74008,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '589e794e8c485b04766db461cee8244dec0abc305e90f5cffd6dc37917ace3e4',
        74504,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6aeb3495feb7c7ed8e87afce584590944e61b1a581d26f494de054b8a430dca7',
        74344,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b0c1ee3c73539fe0da52806bb378267b315d3ebd7ffd40f7c435dd3dfef91baa',
        74884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c78b83e91201287296ae34c6159727fed972526b1dd8aefae5b922dd4196e687',
        74876,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f1b084d4812e81b0cdfa9eed1b7256d043f5d4d8a00a81ab67440f9354549fc9',
        75652,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ca3926b06ade51157b1ce932574cac89a6f16dfbdd601a345701da25b7aa8dc',
        75188,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '17caf4ad92a39b0d9333a8f668c1582d993748126b1a8ebbd4b26bca25c66a00',
        75336,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3235689af1f16e3535c26922c2fb739dd02adef166d3e761175b3af89f72240b',
        75076,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6b2e6d1dd40d36454cc2926dcb4a1a5561eefd558ed4335da50334fe382ae95e',
        74456,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ce22147c0af87efa1aecbc39ff8b87923aee3cf2f49375403f5f34979223e610',
        75020,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ef45b03e2a6a021a7b398dc695d9fe949857b4defe4cd062b0d2be306f51ef4e',
        74892,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '80d72d164a187ce7476240396003c4b453c0f3b4565db50583a99ec1485cb6dc',
        74776,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '77903b1b3697f92cb3c1338d2bbd5de692eb31244fc785e5224c5e32faae51e4',
        74988,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '10bc52c72bdddd14cf11a9a428d2dd3348861b4c6106cd154406562cf41b7e66',
        75212,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'daba4551f3f2e9c9a6720e74d136524da54d3946352c47f4df6e3acb9a315ca9',
        75536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a742dc6740800e28cf269ffb74084610ab7590779de6185e12259b99ca780d21',
        75728,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '127a359a67e8fa386310e298528a130878d4284d08e3c7c34872f38bedbe6be5',
        75328,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '322d3973d59827b2504723abf3285c2d1e85181532fd146fdbabae00398ccbb1',
        73676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd52785c9322fca08c09dbab7952bdc038ce7ef5f58298a5252ccc2a9bacfc316',
        74496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aa5dedf23086451deef347c47898e8c5153ee408af19c44b9e780c1d559c7ce3',
        74168,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7c5c7b4ab19710c4557e47580d437ed2eb1add2fc90a641088ef31539197d16f',
        75172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '36d4ceb6924f219a43b1ef0abcf228bb570891d5c6360bcfd359afccb20b87fa',
        75268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a69037b3e5411f785d7b05bb682b957613e8105cae22044518c630107b4504b2',
        75560,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3b08c582f603d1d8ae1944b4362aa3f7db533be5b7ba1c0f4971b93188a903d4',
        75436,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3d5b2328322a4ecff567415a1417dff7b0659414c992b7e2b88ca399d456df3c',
        75340,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2f9e1ef084cecc66c6306c5618a464b6f6557c0fab6b20f4061378300d83e090',
        74940,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Saira',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Saira font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira
  static TextTheme sairaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.saira(textStyle: textTheme?.display4),
      display3: GoogleFonts.saira(textStyle: textTheme?.display3),
      display2: GoogleFonts.saira(textStyle: textTheme?.display2),
      display1: GoogleFonts.saira(textStyle: textTheme?.display1),
      headline: GoogleFonts.saira(textStyle: textTheme?.headline),
      title: GoogleFonts.saira(textStyle: textTheme?.title),
      subhead: GoogleFonts.saira(textStyle: textTheme?.subhead),
      body2: GoogleFonts.saira(textStyle: textTheme?.body2),
      body1: GoogleFonts.saira(textStyle: textTheme?.body1),
      caption: GoogleFonts.saira(textStyle: textTheme?.caption),
      button: GoogleFonts.saira(textStyle: textTheme?.button),
      subtitle: GoogleFonts.saira(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.saira(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Saira Stencil One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Stencil+One
  static TextStyle sairaStencilOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8932ea7e84bb7b374ef9df790d899402addcdd8028ad4d444096d4ae658c1030',
        66688,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SairaStencilOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Saira Stencil One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Stencil+One
  static TextTheme sairaStencilOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sairaStencilOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.sairaStencilOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.sairaStencilOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.sairaStencilOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.sairaStencilOne(textStyle: textTheme?.headline),
      title: GoogleFonts.sairaStencilOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.sairaStencilOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sairaStencilOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.sairaStencilOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.sairaStencilOne(textStyle: textTheme?.caption),
      button: GoogleFonts.sairaStencilOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sairaStencilOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sairaStencilOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Salsa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Salsa
  static TextStyle salsa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f7150b0f04dbec851c854504d5f97adf34024d4260449086de5fbdc791ab89ac',
        56632,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Salsa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Salsa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Salsa
  static TextTheme salsaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.salsa(textStyle: textTheme?.display4),
      display3: GoogleFonts.salsa(textStyle: textTheme?.display3),
      display2: GoogleFonts.salsa(textStyle: textTheme?.display2),
      display1: GoogleFonts.salsa(textStyle: textTheme?.display1),
      headline: GoogleFonts.salsa(textStyle: textTheme?.headline),
      title: GoogleFonts.salsa(textStyle: textTheme?.title),
      subhead: GoogleFonts.salsa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.salsa(textStyle: textTheme?.body2),
      body1: GoogleFonts.salsa(textStyle: textTheme?.body1),
      caption: GoogleFonts.salsa(textStyle: textTheme?.caption),
      button: GoogleFonts.salsa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.salsa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.salsa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sanchez font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sanchez
  static TextStyle sanchez({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd4353709b92c21bf0606f2e6c956fddf56ee0fdea20110524ed03052efcc2bbe',
        72504,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '62da09506355ddb13a8f3a0b9829d9420e5a0dc10a04fe9d6bd314501b513c93',
        75164,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sanchez',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sanchez font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sanchez
  static TextTheme sanchezTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sanchez(textStyle: textTheme?.display4),
      display3: GoogleFonts.sanchez(textStyle: textTheme?.display3),
      display2: GoogleFonts.sanchez(textStyle: textTheme?.display2),
      display1: GoogleFonts.sanchez(textStyle: textTheme?.display1),
      headline: GoogleFonts.sanchez(textStyle: textTheme?.headline),
      title: GoogleFonts.sanchez(textStyle: textTheme?.title),
      subhead: GoogleFonts.sanchez(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sanchez(textStyle: textTheme?.body2),
      body1: GoogleFonts.sanchez(textStyle: textTheme?.body1),
      caption: GoogleFonts.sanchez(textStyle: textTheme?.caption),
      button: GoogleFonts.sanchez(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sanchez(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sanchez(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sancreek font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sancreek
  static TextStyle sancreek({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ed5c3c851564b594f1e46baf486678ec23c42381e0439cdb2c79c04ca159563e',
        49604,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sancreek',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sancreek font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sancreek
  static TextTheme sancreekTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sancreek(textStyle: textTheme?.display4),
      display3: GoogleFonts.sancreek(textStyle: textTheme?.display3),
      display2: GoogleFonts.sancreek(textStyle: textTheme?.display2),
      display1: GoogleFonts.sancreek(textStyle: textTheme?.display1),
      headline: GoogleFonts.sancreek(textStyle: textTheme?.headline),
      title: GoogleFonts.sancreek(textStyle: textTheme?.title),
      subhead: GoogleFonts.sancreek(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sancreek(textStyle: textTheme?.body2),
      body1: GoogleFonts.sancreek(textStyle: textTheme?.body1),
      caption: GoogleFonts.sancreek(textStyle: textTheme?.caption),
      button: GoogleFonts.sancreek(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sancreek(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sancreek(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sansita font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sansita
  static TextStyle sansita({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7e365aa3bbe93b56d5d0182d955c0e71da391d8d6a95479cab79fa24ced4e21e',
        47676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5aadd2db25ea4fcdeb76680b8b44761b6914ed6b874b5861a9e8c52412b66918',
        52676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b4828652c6bf26cd36ad5741e616104c91b8c4023c6a891b4460029e6642a4cb',
        47984,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '50757fb78ba6b455ca114555fcedffe03432f6fd4eb385544018c427a43c0430',
        52732,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '45499f61b5c2d545e14c3d78cc4a76d906ae3a15bacbf4b5479233e04c979cad',
        48108,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6639d72f7bea1c80dcce732810166ac07da8ae78f5bb5cc798d11f97ce256a0b',
        52764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '21bb47cdb40ec87c2ddbbfcb8b02a2af52cab2e20147315381b65d54d1ae0e5f',
        48696,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2d3308301f6e427d108e0dab0cd6ed936a27d83cfd3dbfbc8693b260574b7cd3',
        53640,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sansita',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sansita font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sansita
  static TextTheme sansitaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sansita(textStyle: textTheme?.display4),
      display3: GoogleFonts.sansita(textStyle: textTheme?.display3),
      display2: GoogleFonts.sansita(textStyle: textTheme?.display2),
      display1: GoogleFonts.sansita(textStyle: textTheme?.display1),
      headline: GoogleFonts.sansita(textStyle: textTheme?.headline),
      title: GoogleFonts.sansita(textStyle: textTheme?.title),
      subhead: GoogleFonts.sansita(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sansita(textStyle: textTheme?.body2),
      body1: GoogleFonts.sansita(textStyle: textTheme?.body1),
      caption: GoogleFonts.sansita(textStyle: textTheme?.caption),
      button: GoogleFonts.sansita(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sansita(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sansita(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sarala font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarala
  static TextStyle sarala({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a9d80ed2e5dae04bd639f269f2f43d7fa0b65ef816a0abb64bbcae03db7a59bb',
        207268,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2b0699ce4a9bd9eb0f091d571c8992f4ff81d558ef3b60edd81a71a081a6420f',
        207396,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sarala',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sarala font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarala
  static TextTheme saralaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sarala(textStyle: textTheme?.display4),
      display3: GoogleFonts.sarala(textStyle: textTheme?.display3),
      display2: GoogleFonts.sarala(textStyle: textTheme?.display2),
      display1: GoogleFonts.sarala(textStyle: textTheme?.display1),
      headline: GoogleFonts.sarala(textStyle: textTheme?.headline),
      title: GoogleFonts.sarala(textStyle: textTheme?.title),
      subhead: GoogleFonts.sarala(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sarala(textStyle: textTheme?.body2),
      body1: GoogleFonts.sarala(textStyle: textTheme?.body1),
      caption: GoogleFonts.sarala(textStyle: textTheme?.caption),
      button: GoogleFonts.sarala(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sarala(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sarala(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sarina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarina
  static TextStyle sarina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8cf41d2055d00dcd843e227fa52df85c9770e93179c0cec39909e4fccfc2dbf',
        96080,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sarina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sarina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarina
  static TextTheme sarinaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sarina(textStyle: textTheme?.display4),
      display3: GoogleFonts.sarina(textStyle: textTheme?.display3),
      display2: GoogleFonts.sarina(textStyle: textTheme?.display2),
      display1: GoogleFonts.sarina(textStyle: textTheme?.display1),
      headline: GoogleFonts.sarina(textStyle: textTheme?.headline),
      title: GoogleFonts.sarina(textStyle: textTheme?.title),
      subhead: GoogleFonts.sarina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sarina(textStyle: textTheme?.body2),
      body1: GoogleFonts.sarina(textStyle: textTheme?.body1),
      caption: GoogleFonts.sarina(textStyle: textTheme?.caption),
      button: GoogleFonts.sarina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sarina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sarina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sarpanch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarpanch
  static TextStyle sarpanch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a694e1d94a3cd59dead878c6ef1da8eb55274eb3b10e6f667a4506f4d2bf6a36',
        178940,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c7dedb13d24392e5c3e796641d50cce4643a03762ea0df2936f01cbdf94976bd',
        178348,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6bf8e038e00a3b7997da00d55f7715433a7c61351b1434e3659fb806f0c25a0e',
        176504,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5e1a7afd37c3b896e4eeb5de1bd8a3414b6966b45f7a9652b041ae80cb3b1855',
        178680,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a9575bc7bbbe80afa882bd838018d60f95a70408b16be48f2ce3f32eefebc620',
        185716,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '353bbda31bbbf4d1b499d676bded12b04e4aabafae78f929c4e5e875ecd09a19',
        187296,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sarpanch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sarpanch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarpanch
  static TextTheme sarpanchTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sarpanch(textStyle: textTheme?.display4),
      display3: GoogleFonts.sarpanch(textStyle: textTheme?.display3),
      display2: GoogleFonts.sarpanch(textStyle: textTheme?.display2),
      display1: GoogleFonts.sarpanch(textStyle: textTheme?.display1),
      headline: GoogleFonts.sarpanch(textStyle: textTheme?.headline),
      title: GoogleFonts.sarpanch(textStyle: textTheme?.title),
      subhead: GoogleFonts.sarpanch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sarpanch(textStyle: textTheme?.body2),
      body1: GoogleFonts.sarpanch(textStyle: textTheme?.body1),
      caption: GoogleFonts.sarpanch(textStyle: textTheme?.caption),
      button: GoogleFonts.sarpanch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sarpanch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sarpanch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Satisfy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Satisfy
  static TextStyle satisfy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4d3c18800d0d83b916c8d564ef9d72f9c23fd58cb7650edd14153251d25ffffc',
        47512,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Satisfy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Satisfy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Satisfy
  static TextTheme satisfyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.satisfy(textStyle: textTheme?.display4),
      display3: GoogleFonts.satisfy(textStyle: textTheme?.display3),
      display2: GoogleFonts.satisfy(textStyle: textTheme?.display2),
      display1: GoogleFonts.satisfy(textStyle: textTheme?.display1),
      headline: GoogleFonts.satisfy(textStyle: textTheme?.headline),
      title: GoogleFonts.satisfy(textStyle: textTheme?.title),
      subhead: GoogleFonts.satisfy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.satisfy(textStyle: textTheme?.body2),
      body1: GoogleFonts.satisfy(textStyle: textTheme?.body1),
      caption: GoogleFonts.satisfy(textStyle: textTheme?.caption),
      button: GoogleFonts.satisfy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.satisfy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.satisfy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sawarabi Gothic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sawarabi+Gothic
  static TextStyle sawarabiGothic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'da6058a80d658ffc7eaa1acdae31b56f86f9f59fcae94417efa5205b8c2a9c3e',
        1895880,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SawarabiGothic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sawarabi Gothic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sawarabi+Gothic
  static TextTheme sawarabiGothicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sawarabiGothic(textStyle: textTheme?.display4),
      display3: GoogleFonts.sawarabiGothic(textStyle: textTheme?.display3),
      display2: GoogleFonts.sawarabiGothic(textStyle: textTheme?.display2),
      display1: GoogleFonts.sawarabiGothic(textStyle: textTheme?.display1),
      headline: GoogleFonts.sawarabiGothic(textStyle: textTheme?.headline),
      title: GoogleFonts.sawarabiGothic(textStyle: textTheme?.title),
      subhead: GoogleFonts.sawarabiGothic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sawarabiGothic(textStyle: textTheme?.body2),
      body1: GoogleFonts.sawarabiGothic(textStyle: textTheme?.body1),
      caption: GoogleFonts.sawarabiGothic(textStyle: textTheme?.caption),
      button: GoogleFonts.sawarabiGothic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sawarabiGothic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sawarabiGothic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sawarabi Mincho font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sawarabi+Mincho
  static TextStyle sawarabiMincho({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f3beec4e12191867fb2f0f6f9b79f2367eab607cb6a1f28f445a8ae4b13f6c15',
        1081468,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SawarabiMincho',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sawarabi Mincho font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sawarabi+Mincho
  static TextTheme sawarabiMinchoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sawarabiMincho(textStyle: textTheme?.display4),
      display3: GoogleFonts.sawarabiMincho(textStyle: textTheme?.display3),
      display2: GoogleFonts.sawarabiMincho(textStyle: textTheme?.display2),
      display1: GoogleFonts.sawarabiMincho(textStyle: textTheme?.display1),
      headline: GoogleFonts.sawarabiMincho(textStyle: textTheme?.headline),
      title: GoogleFonts.sawarabiMincho(textStyle: textTheme?.title),
      subhead: GoogleFonts.sawarabiMincho(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sawarabiMincho(textStyle: textTheme?.body2),
      body1: GoogleFonts.sawarabiMincho(textStyle: textTheme?.body1),
      caption: GoogleFonts.sawarabiMincho(textStyle: textTheme?.caption),
      button: GoogleFonts.sawarabiMincho(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sawarabiMincho(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sawarabiMincho(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Scada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scada
  static TextStyle scada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b50d4e47b78665f29007e923c626d8127c7c9793f60cc8b94e55fe65a9e1b156',
        62708,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '19e3630deea1d0d7694e73dfb85c5a97e8fc332031fc27897d4b5b14fb6f62b3',
        66088,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9a106a75900b9cafa514e2c814b45cabcd61c5f50ceac1772ce6a12386cfa505',
        62808,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c61947a93ece6ef8f4f35e6f1f51f2d2eae7d27d8c1e103b8a0792818925421e',
        66148,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Scada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Scada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scada
  static TextTheme scadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.scada(textStyle: textTheme?.display4),
      display3: GoogleFonts.scada(textStyle: textTheme?.display3),
      display2: GoogleFonts.scada(textStyle: textTheme?.display2),
      display1: GoogleFonts.scada(textStyle: textTheme?.display1),
      headline: GoogleFonts.scada(textStyle: textTheme?.headline),
      title: GoogleFonts.scada(textStyle: textTheme?.title),
      subhead: GoogleFonts.scada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.scada(textStyle: textTheme?.body2),
      body1: GoogleFonts.scada(textStyle: textTheme?.body1),
      caption: GoogleFonts.scada(textStyle: textTheme?.caption),
      button: GoogleFonts.scada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.scada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.scada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Scheherazade font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scheherazade
  static TextStyle scheherazade({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '19195e141f9f7a6781f93d0ee49ef46a8784c28c28047b0b821b639546c9d562',
        406552,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a5d40a2e35f3920327fbc1d576a3a1f7aadda38089f736dad6eda793e74a225',
        421884,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Scheherazade',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Scheherazade font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scheherazade
  static TextTheme scheherazadeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.scheherazade(textStyle: textTheme?.display4),
      display3: GoogleFonts.scheherazade(textStyle: textTheme?.display3),
      display2: GoogleFonts.scheherazade(textStyle: textTheme?.display2),
      display1: GoogleFonts.scheherazade(textStyle: textTheme?.display1),
      headline: GoogleFonts.scheherazade(textStyle: textTheme?.headline),
      title: GoogleFonts.scheherazade(textStyle: textTheme?.title),
      subhead: GoogleFonts.scheherazade(textStyle: textTheme?.subhead),
      body2: GoogleFonts.scheherazade(textStyle: textTheme?.body2),
      body1: GoogleFonts.scheherazade(textStyle: textTheme?.body1),
      caption: GoogleFonts.scheherazade(textStyle: textTheme?.caption),
      button: GoogleFonts.scheherazade(textStyle: textTheme?.button),
      subtitle: GoogleFonts.scheherazade(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.scheherazade(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Schoolbell font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Schoolbell
  static TextStyle schoolbell({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6746cbf7f7065953ffdd505057d2aafca2c4c38989ab1a2bb37f953e3692c7c9',
        48472,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Schoolbell',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Schoolbell font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Schoolbell
  static TextTheme schoolbellTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.schoolbell(textStyle: textTheme?.display4),
      display3: GoogleFonts.schoolbell(textStyle: textTheme?.display3),
      display2: GoogleFonts.schoolbell(textStyle: textTheme?.display2),
      display1: GoogleFonts.schoolbell(textStyle: textTheme?.display1),
      headline: GoogleFonts.schoolbell(textStyle: textTheme?.headline),
      title: GoogleFonts.schoolbell(textStyle: textTheme?.title),
      subhead: GoogleFonts.schoolbell(textStyle: textTheme?.subhead),
      body2: GoogleFonts.schoolbell(textStyle: textTheme?.body2),
      body1: GoogleFonts.schoolbell(textStyle: textTheme?.body1),
      caption: GoogleFonts.schoolbell(textStyle: textTheme?.caption),
      button: GoogleFonts.schoolbell(textStyle: textTheme?.button),
      subtitle: GoogleFonts.schoolbell(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.schoolbell(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Scope One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scope+One
  static TextStyle scopeOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4731e0b7f73e41e5dbd3b6282d39a0c36cdb8455e36b71e9b60319540c088c3d',
        69828,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ScopeOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Scope One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scope+One
  static TextTheme scopeOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.scopeOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.scopeOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.scopeOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.scopeOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.scopeOne(textStyle: textTheme?.headline),
      title: GoogleFonts.scopeOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.scopeOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.scopeOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.scopeOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.scopeOne(textStyle: textTheme?.caption),
      button: GoogleFonts.scopeOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.scopeOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.scopeOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Seaweed Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Seaweed+Script
  static TextStyle seaweedScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6a7c62dc8a68c25b3dda440a08e1f3087e28832110098b91b4c412a906ebafa2',
        116656,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SeaweedScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Seaweed Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Seaweed+Script
  static TextTheme seaweedScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.seaweedScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.seaweedScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.seaweedScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.seaweedScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.seaweedScript(textStyle: textTheme?.headline),
      title: GoogleFonts.seaweedScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.seaweedScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.seaweedScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.seaweedScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.seaweedScript(textStyle: textTheme?.caption),
      button: GoogleFonts.seaweedScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.seaweedScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.seaweedScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Secular One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Secular+One
  static TextStyle secularOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dd6c129ece769b38daf0095b6545ec239fb57e4a2747ec848b6a49958ff0ffff',
        58488,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SecularOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Secular One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Secular+One
  static TextTheme secularOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.secularOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.secularOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.secularOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.secularOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.secularOne(textStyle: textTheme?.headline),
      title: GoogleFonts.secularOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.secularOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.secularOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.secularOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.secularOne(textStyle: textTheme?.caption),
      button: GoogleFonts.secularOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.secularOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.secularOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sedgwick Ave font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sedgwick+Ave
  static TextStyle sedgwickAve({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '75c5db2b35fc38825c6bb8e5b7950fcedcfd03dec14b735dc12648a9b601d9f8',
        92948,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SedgwickAve',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sedgwick Ave font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sedgwick+Ave
  static TextTheme sedgwickAveTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sedgwickAve(textStyle: textTheme?.display4),
      display3: GoogleFonts.sedgwickAve(textStyle: textTheme?.display3),
      display2: GoogleFonts.sedgwickAve(textStyle: textTheme?.display2),
      display1: GoogleFonts.sedgwickAve(textStyle: textTheme?.display1),
      headline: GoogleFonts.sedgwickAve(textStyle: textTheme?.headline),
      title: GoogleFonts.sedgwickAve(textStyle: textTheme?.title),
      subhead: GoogleFonts.sedgwickAve(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sedgwickAve(textStyle: textTheme?.body2),
      body1: GoogleFonts.sedgwickAve(textStyle: textTheme?.body1),
      caption: GoogleFonts.sedgwickAve(textStyle: textTheme?.caption),
      button: GoogleFonts.sedgwickAve(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sedgwickAve(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sedgwickAve(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sedgwick Ave Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sedgwick+Ave+Display
  static TextStyle sedgwickAveDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c1aa82570f810f79198c969d9475cd420e45b9de6957e8dcdedd71ecbaf755c4',
        88964,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SedgwickAveDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sedgwick Ave Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sedgwick+Ave+Display
  static TextTheme sedgwickAveDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sevillana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sevillana
  static TextStyle sevillana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1932da733380cee1525fb66845203d6b91ab799d20f9836d43b021d247101c76',
        65004,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sevillana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sevillana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sevillana
  static TextTheme sevillanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sevillana(textStyle: textTheme?.display4),
      display3: GoogleFonts.sevillana(textStyle: textTheme?.display3),
      display2: GoogleFonts.sevillana(textStyle: textTheme?.display2),
      display1: GoogleFonts.sevillana(textStyle: textTheme?.display1),
      headline: GoogleFonts.sevillana(textStyle: textTheme?.headline),
      title: GoogleFonts.sevillana(textStyle: textTheme?.title),
      subhead: GoogleFonts.sevillana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sevillana(textStyle: textTheme?.body2),
      body1: GoogleFonts.sevillana(textStyle: textTheme?.body1),
      caption: GoogleFonts.sevillana(textStyle: textTheme?.caption),
      button: GoogleFonts.sevillana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sevillana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sevillana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Seymour One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Seymour+One
  static TextStyle seymourOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e7cbd22ce54883fd2ac35ed6713f3fe1d70045e47934b033a6d51357e4d097f2',
        42796,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SeymourOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Seymour One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Seymour+One
  static TextTheme seymourOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.seymourOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.seymourOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.seymourOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.seymourOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.seymourOne(textStyle: textTheme?.headline),
      title: GoogleFonts.seymourOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.seymourOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.seymourOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.seymourOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.seymourOne(textStyle: textTheme?.caption),
      button: GoogleFonts.seymourOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.seymourOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.seymourOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shadows Into Light font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shadows+Into+Light
  static TextStyle shadowsIntoLight({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd737d913f418f2f8e85744c94be63b75e1af421856c3a203104a211dc7f337fa',
        53856,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShadowsIntoLight',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shadows Into Light font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shadows+Into+Light
  static TextTheme shadowsIntoLightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.display4),
      display3: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.display3),
      display2: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.display2),
      display1: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.display1),
      headline: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.headline),
      title: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.title),
      subhead: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.body2),
      body1: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.body1),
      caption: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.caption),
      button: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shadows Into Light Two font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shadows+Into+Light+Two
  static TextStyle shadowsIntoLightTwo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '893c145feef9217e5c35f97bb6d74c1068a802587acc2f5f3c35f2c2ebf8730f',
        39372,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShadowsIntoLightTwo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shadows Into Light Two font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shadows+Into+Light+Two
  static TextTheme shadowsIntoLightTwoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.display4),
      display3: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.display3),
      display2: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.display2),
      display1: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.display1),
      headline: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.headline),
      title: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.title),
      subhead: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.body2),
      body1: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.body1),
      caption: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.caption),
      button: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shanti font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shanti
  static TextStyle shanti({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a3182c815ff6755fb8f9b08ac951b5735b102c05b851eac2b1f6fd50a623cd82',
        65976,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Shanti',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shanti font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shanti
  static TextTheme shantiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shanti(textStyle: textTheme?.display4),
      display3: GoogleFonts.shanti(textStyle: textTheme?.display3),
      display2: GoogleFonts.shanti(textStyle: textTheme?.display2),
      display1: GoogleFonts.shanti(textStyle: textTheme?.display1),
      headline: GoogleFonts.shanti(textStyle: textTheme?.headline),
      title: GoogleFonts.shanti(textStyle: textTheme?.title),
      subhead: GoogleFonts.shanti(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shanti(textStyle: textTheme?.body2),
      body1: GoogleFonts.shanti(textStyle: textTheme?.body1),
      caption: GoogleFonts.shanti(textStyle: textTheme?.caption),
      button: GoogleFonts.shanti(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shanti(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shanti(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Share font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share
  static TextStyle share({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c1621fb56fac35ccedec411f3ee0e726ca8c3b6c1e5616fcaec194d0e26c1207',
        52788,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e7c900b0cd2cdfb860519a4df3b0242ad6ae849a1fcb892760fbf78e93214626',
        54944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '283b89ac6d01b1444d546b1992f9ce7ab0f1ecda06b9d33769bbbf3ee979a76c',
        52808,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a8f8a01adf843c6551142bd88a1f437fa3b739e7dbaaef798f80a5500afae4d3',
        54996,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Share',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Share font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share
  static TextTheme shareTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.share(textStyle: textTheme?.display4),
      display3: GoogleFonts.share(textStyle: textTheme?.display3),
      display2: GoogleFonts.share(textStyle: textTheme?.display2),
      display1: GoogleFonts.share(textStyle: textTheme?.display1),
      headline: GoogleFonts.share(textStyle: textTheme?.headline),
      title: GoogleFonts.share(textStyle: textTheme?.title),
      subhead: GoogleFonts.share(textStyle: textTheme?.subhead),
      body2: GoogleFonts.share(textStyle: textTheme?.body2),
      body1: GoogleFonts.share(textStyle: textTheme?.body1),
      caption: GoogleFonts.share(textStyle: textTheme?.caption),
      button: GoogleFonts.share(textStyle: textTheme?.button),
      subtitle: GoogleFonts.share(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.share(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Share Tech font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share+Tech
  static TextStyle shareTech({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e1804d3fb7ab822590fa14a41b103a7d679b4d284079cee4c7c5ebef0c940510',
        34888,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShareTech',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Share Tech font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share+Tech
  static TextTheme shareTechTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shareTech(textStyle: textTheme?.display4),
      display3: GoogleFonts.shareTech(textStyle: textTheme?.display3),
      display2: GoogleFonts.shareTech(textStyle: textTheme?.display2),
      display1: GoogleFonts.shareTech(textStyle: textTheme?.display1),
      headline: GoogleFonts.shareTech(textStyle: textTheme?.headline),
      title: GoogleFonts.shareTech(textStyle: textTheme?.title),
      subhead: GoogleFonts.shareTech(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shareTech(textStyle: textTheme?.body2),
      body1: GoogleFonts.shareTech(textStyle: textTheme?.body1),
      caption: GoogleFonts.shareTech(textStyle: textTheme?.caption),
      button: GoogleFonts.shareTech(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shareTech(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shareTech(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Share Tech Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share+Tech+Mono
  static TextStyle shareTechMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d8191f3a7dbbc940a83fb98e35db9faed0904879a2d5fd1d1c4443b1c3e9057',
        25776,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShareTechMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Share Tech Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share+Tech+Mono
  static TextTheme shareTechMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shareTechMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.shareTechMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.shareTechMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.shareTechMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.shareTechMono(textStyle: textTheme?.headline),
      title: GoogleFonts.shareTechMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.shareTechMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shareTechMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.shareTechMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.shareTechMono(textStyle: textTheme?.caption),
      button: GoogleFonts.shareTechMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shareTechMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shareTechMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shojumaru font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shojumaru
  static TextStyle shojumaru({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fb8c1c2c57d08ed6f7529a7edaa63995da1703823a076877d46c77f0b984d3f5',
        71256,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Shojumaru',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shojumaru font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shojumaru
  static TextTheme shojumaruTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shojumaru(textStyle: textTheme?.display4),
      display3: GoogleFonts.shojumaru(textStyle: textTheme?.display3),
      display2: GoogleFonts.shojumaru(textStyle: textTheme?.display2),
      display1: GoogleFonts.shojumaru(textStyle: textTheme?.display1),
      headline: GoogleFonts.shojumaru(textStyle: textTheme?.headline),
      title: GoogleFonts.shojumaru(textStyle: textTheme?.title),
      subhead: GoogleFonts.shojumaru(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shojumaru(textStyle: textTheme?.body2),
      body1: GoogleFonts.shojumaru(textStyle: textTheme?.body1),
      caption: GoogleFonts.shojumaru(textStyle: textTheme?.caption),
      button: GoogleFonts.shojumaru(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shojumaru(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shojumaru(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Short Stack font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Short+Stack
  static TextStyle shortStack({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '558333b2d2edb0db150ab52358a8d983ea83d194559c81b99d0defac9ef6ea5c',
        68128,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShortStack',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Short Stack font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Short+Stack
  static TextTheme shortStackTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shortStack(textStyle: textTheme?.display4),
      display3: GoogleFonts.shortStack(textStyle: textTheme?.display3),
      display2: GoogleFonts.shortStack(textStyle: textTheme?.display2),
      display1: GoogleFonts.shortStack(textStyle: textTheme?.display1),
      headline: GoogleFonts.shortStack(textStyle: textTheme?.headline),
      title: GoogleFonts.shortStack(textStyle: textTheme?.title),
      subhead: GoogleFonts.shortStack(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shortStack(textStyle: textTheme?.body2),
      body1: GoogleFonts.shortStack(textStyle: textTheme?.body1),
      caption: GoogleFonts.shortStack(textStyle: textTheme?.caption),
      button: GoogleFonts.shortStack(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shortStack(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shortStack(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shrikhand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shrikhand
  static TextStyle shrikhand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aacb9e67a15ab34c2c3cc3a314bd696f3ef409963bd74b25e61727a3b1414ffc',
        219252,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Shrikhand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shrikhand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shrikhand
  static TextTheme shrikhandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shrikhand(textStyle: textTheme?.display4),
      display3: GoogleFonts.shrikhand(textStyle: textTheme?.display3),
      display2: GoogleFonts.shrikhand(textStyle: textTheme?.display2),
      display1: GoogleFonts.shrikhand(textStyle: textTheme?.display1),
      headline: GoogleFonts.shrikhand(textStyle: textTheme?.headline),
      title: GoogleFonts.shrikhand(textStyle: textTheme?.title),
      subhead: GoogleFonts.shrikhand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shrikhand(textStyle: textTheme?.body2),
      body1: GoogleFonts.shrikhand(textStyle: textTheme?.body1),
      caption: GoogleFonts.shrikhand(textStyle: textTheme?.caption),
      button: GoogleFonts.shrikhand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shrikhand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shrikhand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sigmar One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sigmar+One
  static TextStyle sigmarOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a26bc79f6d548004cb3a749091e43721c48faa5e364f6729ca4ba11bc29f7672',
        110044,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SigmarOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sigmar One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sigmar+One
  static TextTheme sigmarOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sigmarOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.sigmarOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.sigmarOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.sigmarOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.sigmarOne(textStyle: textTheme?.headline),
      title: GoogleFonts.sigmarOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.sigmarOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sigmarOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.sigmarOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.sigmarOne(textStyle: textTheme?.caption),
      button: GoogleFonts.sigmarOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sigmarOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sigmarOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Signika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Signika
  static TextStyle signika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '57a28a3623e1ad46bb9a9d87d09811b72a87364aeb2d326a4df99bf0e23c0874',
        74672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '028c027c049948e0a67c1a20b73992c9449bec50376131d3a57d3f98ad790c63',
        75492,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2d6ed6b2f09f8f763304a07135b4a8dca9de0b7e1aea586a5f033133ae2e83cd',
        75484,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ffc0cf7832a52fdacc4833c2d951e529281b9eb803b1eeac14f4e69a0b5d1f7',
        74932,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Signika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Signika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Signika
  static TextTheme signikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.signika(textStyle: textTheme?.display4),
      display3: GoogleFonts.signika(textStyle: textTheme?.display3),
      display2: GoogleFonts.signika(textStyle: textTheme?.display2),
      display1: GoogleFonts.signika(textStyle: textTheme?.display1),
      headline: GoogleFonts.signika(textStyle: textTheme?.headline),
      title: GoogleFonts.signika(textStyle: textTheme?.title),
      subhead: GoogleFonts.signika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.signika(textStyle: textTheme?.body2),
      body1: GoogleFonts.signika(textStyle: textTheme?.body1),
      caption: GoogleFonts.signika(textStyle: textTheme?.caption),
      button: GoogleFonts.signika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.signika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.signika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Signika Negative font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Signika+Negative
  static TextStyle signikaNegative({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8a98587d6b5889382e0756db0404bae7fab53cd05d1ed3acfe5d2e92ce054710',
        54576,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4dafecef4dffed68c6467a6368c16342c151a400ebf2e1d10c208843e0f7f4f2',
        53324,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '00703f7e2d564d97ed7ae01055939e32779956267e52d2c91697d4c58571d0a3',
        52908,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '49c7f19df1afc9e1068c8860087405401cf9a4d406cfc46b15013bbb95ecb2e4',
        53108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SignikaNegative',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Signika Negative font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Signika+Negative
  static TextTheme signikaNegativeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.signikaNegative(textStyle: textTheme?.display4),
      display3: GoogleFonts.signikaNegative(textStyle: textTheme?.display3),
      display2: GoogleFonts.signikaNegative(textStyle: textTheme?.display2),
      display1: GoogleFonts.signikaNegative(textStyle: textTheme?.display1),
      headline: GoogleFonts.signikaNegative(textStyle: textTheme?.headline),
      title: GoogleFonts.signikaNegative(textStyle: textTheme?.title),
      subhead: GoogleFonts.signikaNegative(textStyle: textTheme?.subhead),
      body2: GoogleFonts.signikaNegative(textStyle: textTheme?.body2),
      body1: GoogleFonts.signikaNegative(textStyle: textTheme?.body1),
      caption: GoogleFonts.signikaNegative(textStyle: textTheme?.caption),
      button: GoogleFonts.signikaNegative(textStyle: textTheme?.button),
      subtitle: GoogleFonts.signikaNegative(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.signikaNegative(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Simonetta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Simonetta
  static TextStyle simonetta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd055b6397968d2e7b9a9c70b4e5d12a390ae937fbb2c140c5a2ca2bcb019501f',
        46244,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'dbbbd6a2dedbac1c09bf69696a69adec943f3ac81e9a4b6cedf0fab0beee274e',
        42592,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2f9dab867c54e03c7203dae54a40e8233843e6ed0c74e9f1c939a0c3ff6e48ef',
        56952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'b59c51c3445243e941c14dbc3663f87d2ffaa11e037d4eca6d8cc9103048d478',
        61084,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Simonetta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Simonetta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Simonetta
  static TextTheme simonettaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.simonetta(textStyle: textTheme?.display4),
      display3: GoogleFonts.simonetta(textStyle: textTheme?.display3),
      display2: GoogleFonts.simonetta(textStyle: textTheme?.display2),
      display1: GoogleFonts.simonetta(textStyle: textTheme?.display1),
      headline: GoogleFonts.simonetta(textStyle: textTheme?.headline),
      title: GoogleFonts.simonetta(textStyle: textTheme?.title),
      subhead: GoogleFonts.simonetta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.simonetta(textStyle: textTheme?.body2),
      body1: GoogleFonts.simonetta(textStyle: textTheme?.body1),
      caption: GoogleFonts.simonetta(textStyle: textTheme?.caption),
      button: GoogleFonts.simonetta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.simonetta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.simonetta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sintony font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sintony
  static TextStyle sintony({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '69767c8fec4cb9cf66b8022ffc9f15e99f1b4f6a15c1412ba8974fd55969ffa1',
        25664,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9c0d2538023d9d221278dc34698930aa90cd23ba0e8b8516986c6c7d88e03a3b',
        25968,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sintony',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sintony font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sintony
  static TextTheme sintonyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sintony(textStyle: textTheme?.display4),
      display3: GoogleFonts.sintony(textStyle: textTheme?.display3),
      display2: GoogleFonts.sintony(textStyle: textTheme?.display2),
      display1: GoogleFonts.sintony(textStyle: textTheme?.display1),
      headline: GoogleFonts.sintony(textStyle: textTheme?.headline),
      title: GoogleFonts.sintony(textStyle: textTheme?.title),
      subhead: GoogleFonts.sintony(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sintony(textStyle: textTheme?.body2),
      body1: GoogleFonts.sintony(textStyle: textTheme?.body1),
      caption: GoogleFonts.sintony(textStyle: textTheme?.caption),
      button: GoogleFonts.sintony(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sintony(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sintony(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sirin Stencil font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sirin+Stencil
  static TextStyle sirinStencil({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '49b8495ba38ff41cb2fe6ffa19be0105173e6318d239a91687520ba2ed2b5cbc',
        45740,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SirinStencil',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sirin Stencil font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sirin+Stencil
  static TextTheme sirinStencilTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sirinStencil(textStyle: textTheme?.display4),
      display3: GoogleFonts.sirinStencil(textStyle: textTheme?.display3),
      display2: GoogleFonts.sirinStencil(textStyle: textTheme?.display2),
      display1: GoogleFonts.sirinStencil(textStyle: textTheme?.display1),
      headline: GoogleFonts.sirinStencil(textStyle: textTheme?.headline),
      title: GoogleFonts.sirinStencil(textStyle: textTheme?.title),
      subhead: GoogleFonts.sirinStencil(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sirinStencil(textStyle: textTheme?.body2),
      body1: GoogleFonts.sirinStencil(textStyle: textTheme?.body1),
      caption: GoogleFonts.sirinStencil(textStyle: textTheme?.caption),
      button: GoogleFonts.sirinStencil(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sirinStencil(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sirinStencil(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Six Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Six+Caps
  static TextStyle sixCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ecba544210f8553e76664f6e55b95afb42c005696628af22f50b59b88678debd',
        28656,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SixCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Six Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Six+Caps
  static TextTheme sixCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sixCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.sixCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.sixCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.sixCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.sixCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.sixCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.sixCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sixCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.sixCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.sixCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.sixCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sixCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sixCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Skranji font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Skranji
  static TextStyle skranji({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9ee2c9312ee6ae5db2fdf49b0a797da03bd5ae1df447d051b081612b3db1d2fd',
        207480,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7dd8ded95fc8d9be6c80296a989eb3057929d548770081d17653c90dc11d8248',
        206848,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Skranji',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Skranji font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Skranji
  static TextTheme skranjiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.skranji(textStyle: textTheme?.display4),
      display3: GoogleFonts.skranji(textStyle: textTheme?.display3),
      display2: GoogleFonts.skranji(textStyle: textTheme?.display2),
      display1: GoogleFonts.skranji(textStyle: textTheme?.display1),
      headline: GoogleFonts.skranji(textStyle: textTheme?.headline),
      title: GoogleFonts.skranji(textStyle: textTheme?.title),
      subhead: GoogleFonts.skranji(textStyle: textTheme?.subhead),
      body2: GoogleFonts.skranji(textStyle: textTheme?.body2),
      body1: GoogleFonts.skranji(textStyle: textTheme?.body1),
      caption: GoogleFonts.skranji(textStyle: textTheme?.caption),
      button: GoogleFonts.skranji(textStyle: textTheme?.button),
      subtitle: GoogleFonts.skranji(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.skranji(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Slabo 13px font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slabo+13px
  static TextStyle slabo13px({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '55c7ef45e832252817233d906300e1087c565a52b4cedecffcf03d7edb86f694',
        32100,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Slabo13px',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Slabo 13px font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slabo+13px
  static TextTheme slabo13pxTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.slabo13px(textStyle: textTheme?.display4),
      display3: GoogleFonts.slabo13px(textStyle: textTheme?.display3),
      display2: GoogleFonts.slabo13px(textStyle: textTheme?.display2),
      display1: GoogleFonts.slabo13px(textStyle: textTheme?.display1),
      headline: GoogleFonts.slabo13px(textStyle: textTheme?.headline),
      title: GoogleFonts.slabo13px(textStyle: textTheme?.title),
      subhead: GoogleFonts.slabo13px(textStyle: textTheme?.subhead),
      body2: GoogleFonts.slabo13px(textStyle: textTheme?.body2),
      body1: GoogleFonts.slabo13px(textStyle: textTheme?.body1),
      caption: GoogleFonts.slabo13px(textStyle: textTheme?.caption),
      button: GoogleFonts.slabo13px(textStyle: textTheme?.button),
      subtitle: GoogleFonts.slabo13px(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.slabo13px(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Slabo 27px font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slabo+27px
  static TextStyle slabo27px({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e451771d704b04c776176b6033f4c66aaab3edf2422d0811687a7f9b53c03486',
        33960,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Slabo27px',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Slabo 27px font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slabo+27px
  static TextTheme slabo27pxTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.slabo27px(textStyle: textTheme?.display4),
      display3: GoogleFonts.slabo27px(textStyle: textTheme?.display3),
      display2: GoogleFonts.slabo27px(textStyle: textTheme?.display2),
      display1: GoogleFonts.slabo27px(textStyle: textTheme?.display1),
      headline: GoogleFonts.slabo27px(textStyle: textTheme?.headline),
      title: GoogleFonts.slabo27px(textStyle: textTheme?.title),
      subhead: GoogleFonts.slabo27px(textStyle: textTheme?.subhead),
      body2: GoogleFonts.slabo27px(textStyle: textTheme?.body2),
      body1: GoogleFonts.slabo27px(textStyle: textTheme?.body1),
      caption: GoogleFonts.slabo27px(textStyle: textTheme?.caption),
      button: GoogleFonts.slabo27px(textStyle: textTheme?.button),
      subtitle: GoogleFonts.slabo27px(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.slabo27px(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Slackey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slackey
  static TextStyle slackey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bceb941e47abbef80f27aebbdcb657e241b5ea1f17923b61537b6f64ff87af62',
        37516,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Slackey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Slackey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slackey
  static TextTheme slackeyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.slackey(textStyle: textTheme?.display4),
      display3: GoogleFonts.slackey(textStyle: textTheme?.display3),
      display2: GoogleFonts.slackey(textStyle: textTheme?.display2),
      display1: GoogleFonts.slackey(textStyle: textTheme?.display1),
      headline: GoogleFonts.slackey(textStyle: textTheme?.headline),
      title: GoogleFonts.slackey(textStyle: textTheme?.title),
      subhead: GoogleFonts.slackey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.slackey(textStyle: textTheme?.body2),
      body1: GoogleFonts.slackey(textStyle: textTheme?.body1),
      caption: GoogleFonts.slackey(textStyle: textTheme?.caption),
      button: GoogleFonts.slackey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.slackey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.slackey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Smokum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Smokum
  static TextStyle smokum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2c700a4722b34ec677fb0c4c7ae242886cead014ec06aef3e02dc311def9ccbb',
        63924,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Smokum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Smokum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Smokum
  static TextTheme smokumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.smokum(textStyle: textTheme?.display4),
      display3: GoogleFonts.smokum(textStyle: textTheme?.display3),
      display2: GoogleFonts.smokum(textStyle: textTheme?.display2),
      display1: GoogleFonts.smokum(textStyle: textTheme?.display1),
      headline: GoogleFonts.smokum(textStyle: textTheme?.headline),
      title: GoogleFonts.smokum(textStyle: textTheme?.title),
      subhead: GoogleFonts.smokum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.smokum(textStyle: textTheme?.body2),
      body1: GoogleFonts.smokum(textStyle: textTheme?.body1),
      caption: GoogleFonts.smokum(textStyle: textTheme?.caption),
      button: GoogleFonts.smokum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.smokum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.smokum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Smythe font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Smythe
  static TextStyle smythe({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1f1e3d2a79f5bdab563797693fd14a8c6e868b0778cf746e4a4d22aedc216dbc',
        64160,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Smythe',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Smythe font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Smythe
  static TextTheme smytheTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.smythe(textStyle: textTheme?.display4),
      display3: GoogleFonts.smythe(textStyle: textTheme?.display3),
      display2: GoogleFonts.smythe(textStyle: textTheme?.display2),
      display1: GoogleFonts.smythe(textStyle: textTheme?.display1),
      headline: GoogleFonts.smythe(textStyle: textTheme?.headline),
      title: GoogleFonts.smythe(textStyle: textTheme?.title),
      subhead: GoogleFonts.smythe(textStyle: textTheme?.subhead),
      body2: GoogleFonts.smythe(textStyle: textTheme?.body2),
      body1: GoogleFonts.smythe(textStyle: textTheme?.body1),
      caption: GoogleFonts.smythe(textStyle: textTheme?.caption),
      button: GoogleFonts.smythe(textStyle: textTheme?.button),
      subtitle: GoogleFonts.smythe(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.smythe(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sniglet font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sniglet
  static TextStyle sniglet({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '106613b6566b3b9a696c095879b31e220c39d60c508dae033b5f3680aaa48732',
        51356,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '439b0ab4a7a1d2a1328cc8eb52d10167325643f9c15a187d3d7650cdd15cf896',
        54768,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sniglet',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sniglet font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sniglet
  static TextTheme snigletTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sniglet(textStyle: textTheme?.display4),
      display3: GoogleFonts.sniglet(textStyle: textTheme?.display3),
      display2: GoogleFonts.sniglet(textStyle: textTheme?.display2),
      display1: GoogleFonts.sniglet(textStyle: textTheme?.display1),
      headline: GoogleFonts.sniglet(textStyle: textTheme?.headline),
      title: GoogleFonts.sniglet(textStyle: textTheme?.title),
      subhead: GoogleFonts.sniglet(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sniglet(textStyle: textTheme?.body2),
      body1: GoogleFonts.sniglet(textStyle: textTheme?.body1),
      caption: GoogleFonts.sniglet(textStyle: textTheme?.caption),
      button: GoogleFonts.sniglet(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sniglet(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sniglet(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Snippet font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Snippet
  static TextStyle snippet({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8cc4ae1951b9917cd740fe17346eee27c893d200ad251063c1aa3c48b6e02682',
        39260,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Snippet',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Snippet font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Snippet
  static TextTheme snippetTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.snippet(textStyle: textTheme?.display4),
      display3: GoogleFonts.snippet(textStyle: textTheme?.display3),
      display2: GoogleFonts.snippet(textStyle: textTheme?.display2),
      display1: GoogleFonts.snippet(textStyle: textTheme?.display1),
      headline: GoogleFonts.snippet(textStyle: textTheme?.headline),
      title: GoogleFonts.snippet(textStyle: textTheme?.title),
      subhead: GoogleFonts.snippet(textStyle: textTheme?.subhead),
      body2: GoogleFonts.snippet(textStyle: textTheme?.body2),
      body1: GoogleFonts.snippet(textStyle: textTheme?.body1),
      caption: GoogleFonts.snippet(textStyle: textTheme?.caption),
      button: GoogleFonts.snippet(textStyle: textTheme?.button),
      subtitle: GoogleFonts.snippet(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.snippet(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Snowburst One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Snowburst+One
  static TextStyle snowburstOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f0b3d75c3024cdb3e14b5006a726dacaa747fd5b1436d7123f63ed83d1d60e28',
        54060,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SnowburstOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Snowburst One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Snowburst+One
  static TextTheme snowburstOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.snowburstOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.snowburstOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.snowburstOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.snowburstOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.snowburstOne(textStyle: textTheme?.headline),
      title: GoogleFonts.snowburstOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.snowburstOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.snowburstOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.snowburstOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.snowburstOne(textStyle: textTheme?.caption),
      button: GoogleFonts.snowburstOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.snowburstOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.snowburstOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sofadi One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sofadi+One
  static TextStyle sofadiOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bd2ee7258a722de3e36e84a9aadf3edfe4b91221f382e3e5bbe75b786119526f',
        34584,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SofadiOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sofadi One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sofadi+One
  static TextTheme sofadiOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sofadiOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.sofadiOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.sofadiOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.sofadiOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.sofadiOne(textStyle: textTheme?.headline),
      title: GoogleFonts.sofadiOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.sofadiOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sofadiOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.sofadiOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.sofadiOne(textStyle: textTheme?.caption),
      button: GoogleFonts.sofadiOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sofadiOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sofadiOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sofia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sofia
  static TextStyle sofia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ca5d81d1b4b38fae521b80e8ab25a7632893d98285e79fa51e53975b807afcb1',
        29748,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sofia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sofia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sofia
  static TextTheme sofiaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sofia(textStyle: textTheme?.display4),
      display3: GoogleFonts.sofia(textStyle: textTheme?.display3),
      display2: GoogleFonts.sofia(textStyle: textTheme?.display2),
      display1: GoogleFonts.sofia(textStyle: textTheme?.display1),
      headline: GoogleFonts.sofia(textStyle: textTheme?.headline),
      title: GoogleFonts.sofia(textStyle: textTheme?.title),
      subhead: GoogleFonts.sofia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sofia(textStyle: textTheme?.body2),
      body1: GoogleFonts.sofia(textStyle: textTheme?.body1),
      caption: GoogleFonts.sofia(textStyle: textTheme?.caption),
      button: GoogleFonts.sofia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sofia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sofia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Song Myung font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Song+Myung
  static TextStyle songMyung({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '45407348eb54e83212eddfa7ad22cd18d0f75783316406f08beb532a835bc3f4',
        1202620,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SongMyung',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Song Myung font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Song+Myung
  static TextTheme songMyungTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.songMyung(textStyle: textTheme?.display4),
      display3: GoogleFonts.songMyung(textStyle: textTheme?.display3),
      display2: GoogleFonts.songMyung(textStyle: textTheme?.display2),
      display1: GoogleFonts.songMyung(textStyle: textTheme?.display1),
      headline: GoogleFonts.songMyung(textStyle: textTheme?.headline),
      title: GoogleFonts.songMyung(textStyle: textTheme?.title),
      subhead: GoogleFonts.songMyung(textStyle: textTheme?.subhead),
      body2: GoogleFonts.songMyung(textStyle: textTheme?.body2),
      body1: GoogleFonts.songMyung(textStyle: textTheme?.body1),
      caption: GoogleFonts.songMyung(textStyle: textTheme?.caption),
      button: GoogleFonts.songMyung(textStyle: textTheme?.button),
      subtitle: GoogleFonts.songMyung(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.songMyung(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sonsie One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sonsie+One
  static TextStyle sonsieOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a621714ea4d59e0ead90246169593f8487db34752634db76b12ab329e9cf4e1',
        75992,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SonsieOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sonsie One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sonsie+One
  static TextTheme sonsieOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sonsieOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.sonsieOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.sonsieOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.sonsieOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.sonsieOne(textStyle: textTheme?.headline),
      title: GoogleFonts.sonsieOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.sonsieOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sonsieOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.sonsieOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.sonsieOne(textStyle: textTheme?.caption),
      button: GoogleFonts.sonsieOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sonsieOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sonsieOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sorts Mill Goudy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sorts+Mill+Goudy
  static TextStyle sortsMillGoudy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '70d3ad626ef92c3b9eeaff7e3694af6d64f477a31ab242d11f98704e9903a065',
        121324,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd8d1d17c5bffaec08a5c129dfdbd62c0a538de036da120d20edef29019f0b5bf',
        105636,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SortsMillGoudy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sorts Mill Goudy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sorts+Mill+Goudy
  static TextTheme sortsMillGoudyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.display4),
      display3: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.display3),
      display2: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.display2),
      display1: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.display1),
      headline: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.headline),
      title: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.title),
      subhead: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.body2),
      body1: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.body1),
      caption: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.caption),
      button: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Source Code Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Code+Pro
  static TextStyle sourceCodePro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5a618360951a8134d26923216c53da2cee51d55e6e2ca0003ecfe111b701bae5',
        87468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e0184502d4eb4b41dcd3d65fecad4fcf8b6b46f13967b60ac98eedcc43aacb30',
        87064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2d1bcd5038af1287746b7b1d1a4db65f091b3e9811428076d43a73121893922d',
        86408,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '18daf5f11e4f1462c2a5b5f8e439dfce5a846e27eff21a622f9031f58d257aa2',
        85948,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '807061463bc4cdacd2299a10cc0b7862e4a925cb984fec0016307fea9df6aa78',
        85956,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '51b4ad25947aa6ab4e72faea203ad4b74e4de08b9bbc4d254cdd9dc26dfc2d19',
        86076,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '677bde76eea8889e4ec713ec738f7fadd150aee2ffca36efb65946a45e6b93cc',
        86280,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SourceCodePro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Source Code Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Code+Pro
  static TextTheme sourceCodeProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sourceCodePro(textStyle: textTheme?.display4),
      display3: GoogleFonts.sourceCodePro(textStyle: textTheme?.display3),
      display2: GoogleFonts.sourceCodePro(textStyle: textTheme?.display2),
      display1: GoogleFonts.sourceCodePro(textStyle: textTheme?.display1),
      headline: GoogleFonts.sourceCodePro(textStyle: textTheme?.headline),
      title: GoogleFonts.sourceCodePro(textStyle: textTheme?.title),
      subhead: GoogleFonts.sourceCodePro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sourceCodePro(textStyle: textTheme?.body2),
      body1: GoogleFonts.sourceCodePro(textStyle: textTheme?.body1),
      caption: GoogleFonts.sourceCodePro(textStyle: textTheme?.caption),
      button: GoogleFonts.sourceCodePro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sourceCodePro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sourceCodePro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Source Sans Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Sans+Pro
  static TextStyle sourceSansPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '069aaad5d271d9417c8b97f8312f686cf5a9a41a8e3644b572c60c8e176ed7e0',
        233472,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1538944579d3bc333bfe34ed45c1db572897fcf695af75f4e45ef5ac42c3aa12',
        84024,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bb276921895494650544883e21f7d2bc91ec918522ac3d355582b0cd472592cc',
        234308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c068f601e24f3e8ced3014cb3dc4a32022c06af8e27ca870d6c76432d280e75a',
        83820,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6ed615e8d0355256e2d6d907b3addb929879c90c8383dd566b2208c79ffd16f7',
        234740,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e35d7fde727174172e9689f4584ff9e4559a37ca0b39b096fa72f0f657b31bc9',
        83244,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5629ccf5ed16fa41c51a964b882a8e1e1e395a714906a90567278bd0c439ecc1',
        233912,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e8bcda13818deef42d6e19f3009f6e18a595746c5dcc1d35c56280c5dea32b21',
        83064,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6b9e7872867a9a0fca2083e62b2c39727a93c81b736fb1e21cc1c29ba89008ff',
        233516,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f417993b734490d591dd2a3f10022f8ff1a376876eeca00098baf25759b2522b',
        82856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1d969d176ba4ea2075fe69e5b9799e9dbc146889092823d49453241c80e93a2a',
        231580,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '954080abe4fffebb675bea9c34eb0d873cf25f8674e9d55cde4c9c962f44a421',
        83000,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SourceSansPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Source Sans Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Sans+Pro
  static TextTheme sourceSansProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sourceSansPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.sourceSansPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.sourceSansPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.sourceSansPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.sourceSansPro(textStyle: textTheme?.headline),
      title: GoogleFonts.sourceSansPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.sourceSansPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sourceSansPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.sourceSansPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.sourceSansPro(textStyle: textTheme?.caption),
      button: GoogleFonts.sourceSansPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sourceSansPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sourceSansPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Source Serif Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Serif+Pro
  static TextStyle sourceSerifPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f87f7b82ba7f18f5fc9e92b9a88f9da0c847cee069182948fc67c6440c888949',
        87572,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '21ba3c9624cb12920db48bb25f0e1db9398acab0031d2ae8f13b8628f4d02740',
        88436,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eb04de6aca072d01a88545fa409c6264d93f9b38f86a0ecd3a00708917085bd8',
        87152,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SourceSerifPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Source Serif Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Serif+Pro
  static TextTheme sourceSerifProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sourceSerifPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.sourceSerifPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.sourceSerifPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.sourceSerifPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.sourceSerifPro(textStyle: textTheme?.headline),
      title: GoogleFonts.sourceSerifPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.sourceSerifPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sourceSerifPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.sourceSerifPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.sourceSerifPro(textStyle: textTheme?.caption),
      button: GoogleFonts.sourceSerifPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sourceSerifPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sourceSerifPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Space Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Space+Mono
  static TextStyle spaceMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1308fd8bd0f79e0517319bf0429226dfce5ae67beb495577737524f29b537527',
        62960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '461bb1d5b84d057c522eedf582e3704890be96aed239020438b09168f8ef296b',
        69728,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d1e9fe7ab3138b3f1465d1b1afc457934abae86c1803611dbbcfd28f5f97e2b',
        61696,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ec50d2d9cc5bbed72fae03e2bc8a720e2cca1324f8bc99b30089d51896917f0e',
        66880,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SpaceMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Space Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Space+Mono
  static TextTheme spaceMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spaceMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.spaceMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.spaceMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.spaceMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.spaceMono(textStyle: textTheme?.headline),
      title: GoogleFonts.spaceMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.spaceMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spaceMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.spaceMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.spaceMono(textStyle: textTheme?.caption),
      button: GoogleFonts.spaceMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spaceMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spaceMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Special Elite font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Special+Elite
  static TextStyle specialElite({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1a1b32a7d4f38d2ebfa68de6ead2295ba312231237e0088e5d4fc3e1c66a516d',
        165808,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SpecialElite',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Special Elite font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Special+Elite
  static TextTheme specialEliteTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.specialElite(textStyle: textTheme?.display4),
      display3: GoogleFonts.specialElite(textStyle: textTheme?.display3),
      display2: GoogleFonts.specialElite(textStyle: textTheme?.display2),
      display1: GoogleFonts.specialElite(textStyle: textTheme?.display1),
      headline: GoogleFonts.specialElite(textStyle: textTheme?.headline),
      title: GoogleFonts.specialElite(textStyle: textTheme?.title),
      subhead: GoogleFonts.specialElite(textStyle: textTheme?.subhead),
      body2: GoogleFonts.specialElite(textStyle: textTheme?.body2),
      body1: GoogleFonts.specialElite(textStyle: textTheme?.body1),
      caption: GoogleFonts.specialElite(textStyle: textTheme?.caption),
      button: GoogleFonts.specialElite(textStyle: textTheme?.button),
      subtitle: GoogleFonts.specialElite(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.specialElite(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spectral font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spectral
  static TextStyle spectral({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '38faebd2b01ddd2e497f09028eb10210de56ffadde5c5842c2f70a195865e869',
        199076,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3ee03dc791594673ce8b752c95ef9d29d66d2afb3777a862edd4e9886ceff42a',
        220088,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '877b7e52c3c9951be21132edc23e99f7b227c3cf6a6189a349ea4195a5ca645d',
        227408,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3fceb0d465d8e2d6c3b28408281c75b8a55b5228875d262f65cafbf9f89aa1b5',
        240880,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cf0966737e7520da7784b9dfadc8744a34d7d90ab9d90ee290f28a8b29b868ea',
        221072,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9ba9b61cb4417f86b861d19cadc70e612a8e32596f88e9eaf7f65a33ac37e363',
        230908,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '91b2985ae69deaca521a82b390a544247f735dfd48b0338fa92a1ab42a0a6414',
        233368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '47041fa850a2c3190804212d1ffe2e590aef6306201b9cff1c6bc798da3ea255',
        241960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '04a313e8c2f5ac831e7298c25c6075b9660a810569519797c226baede971cda1',
        233468,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '85a9ddd0720f69c9da803991658683f387f75a2d200989f17e4c84f03353a73f',
        241720,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '49302f1176eef815c75aec07833e13b9758532914b49c1993e9b619638ebcfd8',
        233260,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '8f82f95515722a631616d0b69effe11da9717cf7eea641359596c20dbe87a7ca',
        242076,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8a965c3cce6911f473a1523ad68029f95071a6aaabe726bf72ff4f9ed5455f0e',
        221968,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '528018df6d31607eec08ae87cd710edd29678dd7b9a2946b21fe5c2f725d95e5',
        230424,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Spectral',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spectral font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spectral
  static TextTheme spectralTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spectral(textStyle: textTheme?.display4),
      display3: GoogleFonts.spectral(textStyle: textTheme?.display3),
      display2: GoogleFonts.spectral(textStyle: textTheme?.display2),
      display1: GoogleFonts.spectral(textStyle: textTheme?.display1),
      headline: GoogleFonts.spectral(textStyle: textTheme?.headline),
      title: GoogleFonts.spectral(textStyle: textTheme?.title),
      subhead: GoogleFonts.spectral(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spectral(textStyle: textTheme?.body2),
      body1: GoogleFonts.spectral(textStyle: textTheme?.body1),
      caption: GoogleFonts.spectral(textStyle: textTheme?.caption),
      button: GoogleFonts.spectral(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spectral(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spectral(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spectral SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spectral+SC
  static TextStyle spectralSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '63d4dd9a1b6ca94347d9be458d3d3f27437804fcdcf96de19115ce63eab80e09',
        199108,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1940514dc53b85d4d87e4f9ea64470eb98c107c053377538d63a88cd7f3c90e5',
        220128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '891b1d15d1fd0adffff4ab8a71237e846a7facbe29b6fa94e95a2e2125a162b0',
        227440,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4a35ca51d42122c0e214b00754e3aabd760891dd4fe8f23e3211970b66fccde5',
        240920,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '992f8c6dff2fd1f14725272931fc3336a540546fa7846b3e278bd85836fb7545',
        221108,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0517c9389a7f90b8ee1d792ac8572855f7ec302e33658d957763f50fa551141f',
        230944,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ffddde35929f7228c85cec1b5c3e93f839d845a8f751a7aef1b27a53f7ed7d87',
        233400,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'da37956c506e2a8bb47a1cefda935cc60a00a1735c34ec2727db59fd9f5c8f72',
        242000,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f7bfc53ad029c821a35bea359076f8a826719e43c0491aee00359e7acdf6d2fc',
        233500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1fb487f3103ff60bc6f5f01b422f906549ece9883a49e5b87c3be0dd78428e36',
        241760,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cb2b064297cc41a5df572410b58a26772056bf765768fc1a1510374bf5dea8e9',
        233296,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '380b7badc0bd105618648f3c7b9681a5e2c6a3b65569037a3c589e4a028aa6b3',
        242108,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cb4ff7e22c08a17af3b239331337982b0c9f8cad6207546a955a1ea2dadddf16',
        222000,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '379b67f997439e4df148b4cd426dd5ebe6ec642bcf4d4a74f192d664f97306f4',
        230464,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SpectralSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spectral SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spectral+SC
  static TextTheme spectralSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spectralSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.spectralSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.spectralSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.spectralSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.spectralSC(textStyle: textTheme?.headline),
      title: GoogleFonts.spectralSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.spectralSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spectralSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.spectralSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.spectralSC(textStyle: textTheme?.caption),
      button: GoogleFonts.spectralSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spectralSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spectralSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spicy Rice font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spicy+Rice
  static TextStyle spicyRice({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e097f53ad6ba5f9e022be6b68002e3d8ccd021b1b340e077113c6d537de3ab75',
        66828,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SpicyRice',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spicy Rice font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spicy+Rice
  static TextTheme spicyRiceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spicyRice(textStyle: textTheme?.display4),
      display3: GoogleFonts.spicyRice(textStyle: textTheme?.display3),
      display2: GoogleFonts.spicyRice(textStyle: textTheme?.display2),
      display1: GoogleFonts.spicyRice(textStyle: textTheme?.display1),
      headline: GoogleFonts.spicyRice(textStyle: textTheme?.headline),
      title: GoogleFonts.spicyRice(textStyle: textTheme?.title),
      subhead: GoogleFonts.spicyRice(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spicyRice(textStyle: textTheme?.body2),
      body1: GoogleFonts.spicyRice(textStyle: textTheme?.body1),
      caption: GoogleFonts.spicyRice(textStyle: textTheme?.caption),
      button: GoogleFonts.spicyRice(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spicyRice(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spicyRice(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spinnaker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spinnaker
  static TextStyle spinnaker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '086026fa129fbdfec07fc9736f5f1a5577d7c1a6f4cf1daa40f5a524db14db1d',
        22408,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Spinnaker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spinnaker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spinnaker
  static TextTheme spinnakerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spinnaker(textStyle: textTheme?.display4),
      display3: GoogleFonts.spinnaker(textStyle: textTheme?.display3),
      display2: GoogleFonts.spinnaker(textStyle: textTheme?.display2),
      display1: GoogleFonts.spinnaker(textStyle: textTheme?.display1),
      headline: GoogleFonts.spinnaker(textStyle: textTheme?.headline),
      title: GoogleFonts.spinnaker(textStyle: textTheme?.title),
      subhead: GoogleFonts.spinnaker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spinnaker(textStyle: textTheme?.body2),
      body1: GoogleFonts.spinnaker(textStyle: textTheme?.body1),
      caption: GoogleFonts.spinnaker(textStyle: textTheme?.caption),
      button: GoogleFonts.spinnaker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spinnaker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spinnaker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spirax font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spirax
  static TextStyle spirax({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '165b0a7ca4871b5440455c3c991428f478c37eee5f78637905aceaa58275feda',
        49016,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Spirax',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spirax font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spirax
  static TextTheme spiraxTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spirax(textStyle: textTheme?.display4),
      display3: GoogleFonts.spirax(textStyle: textTheme?.display3),
      display2: GoogleFonts.spirax(textStyle: textTheme?.display2),
      display1: GoogleFonts.spirax(textStyle: textTheme?.display1),
      headline: GoogleFonts.spirax(textStyle: textTheme?.headline),
      title: GoogleFonts.spirax(textStyle: textTheme?.title),
      subhead: GoogleFonts.spirax(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spirax(textStyle: textTheme?.body2),
      body1: GoogleFonts.spirax(textStyle: textTheme?.body1),
      caption: GoogleFonts.spirax(textStyle: textTheme?.caption),
      button: GoogleFonts.spirax(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spirax(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spirax(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Squada One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Squada+One
  static TextStyle squadaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd162c6edeab12c48ff421bd0de5d144ae2c1f762b16d00e4efb07d42b4847cbe',
        19024,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SquadaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Squada One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Squada+One
  static TextTheme squadaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.squadaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.squadaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.squadaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.squadaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.squadaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.squadaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.squadaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.squadaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.squadaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.squadaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.squadaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.squadaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.squadaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sree Krushnadevaraya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sree+Krushnadevaraya
  static TextStyle sreeKrushnadevaraya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '380fee09dc7039f216c5208086c2919b9b332d06de401d60f4b57d8cba7e080e',
        410260,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SreeKrushnadevaraya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sree Krushnadevaraya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sree+Krushnadevaraya
  static TextTheme sreeKrushnadevarayaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.display4),
      display3: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.display3),
      display2: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.display2),
      display1: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.display1),
      headline: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.headline),
      title: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.title),
      subhead: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.body2),
      body1: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.body1),
      caption: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.caption),
      button: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sriracha font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sriracha
  static TextStyle sriracha({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9b5c54ea181b3d73d0d289e4182c26d2a6cca9e06c00edd861a65a36f6b559e7',
        207108,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sriracha',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sriracha font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sriracha
  static TextTheme srirachaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sriracha(textStyle: textTheme?.display4),
      display3: GoogleFonts.sriracha(textStyle: textTheme?.display3),
      display2: GoogleFonts.sriracha(textStyle: textTheme?.display2),
      display1: GoogleFonts.sriracha(textStyle: textTheme?.display1),
      headline: GoogleFonts.sriracha(textStyle: textTheme?.headline),
      title: GoogleFonts.sriracha(textStyle: textTheme?.title),
      subhead: GoogleFonts.sriracha(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sriracha(textStyle: textTheme?.body2),
      body1: GoogleFonts.sriracha(textStyle: textTheme?.body1),
      caption: GoogleFonts.sriracha(textStyle: textTheme?.caption),
      button: GoogleFonts.sriracha(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sriracha(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sriracha(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Srisakdi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Srisakdi
  static TextStyle srisakdi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5b078682ce7a5aa20cc137b975bd70e97752800f9ba9fc1761c050ef3bffc84a',
        96252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a3084b442fdea4ccce8907fe71e60006e0bcd2b686cd8c5d2c572d0483a1e27a',
        96120,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Srisakdi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Srisakdi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Srisakdi
  static TextTheme srisakdiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.srisakdi(textStyle: textTheme?.display4),
      display3: GoogleFonts.srisakdi(textStyle: textTheme?.display3),
      display2: GoogleFonts.srisakdi(textStyle: textTheme?.display2),
      display1: GoogleFonts.srisakdi(textStyle: textTheme?.display1),
      headline: GoogleFonts.srisakdi(textStyle: textTheme?.headline),
      title: GoogleFonts.srisakdi(textStyle: textTheme?.title),
      subhead: GoogleFonts.srisakdi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.srisakdi(textStyle: textTheme?.body2),
      body1: GoogleFonts.srisakdi(textStyle: textTheme?.body1),
      caption: GoogleFonts.srisakdi(textStyle: textTheme?.caption),
      button: GoogleFonts.srisakdi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.srisakdi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.srisakdi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Staatliches font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Staatliches
  static TextStyle staatliches({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2ae636039aa5e081cbad2b79ad512682296ab9af1a36078372db12f68f540ab8',
        42160,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Staatliches',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Staatliches font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Staatliches
  static TextTheme staatlichesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.staatliches(textStyle: textTheme?.display4),
      display3: GoogleFonts.staatliches(textStyle: textTheme?.display3),
      display2: GoogleFonts.staatliches(textStyle: textTheme?.display2),
      display1: GoogleFonts.staatliches(textStyle: textTheme?.display1),
      headline: GoogleFonts.staatliches(textStyle: textTheme?.headline),
      title: GoogleFonts.staatliches(textStyle: textTheme?.title),
      subhead: GoogleFonts.staatliches(textStyle: textTheme?.subhead),
      body2: GoogleFonts.staatliches(textStyle: textTheme?.body2),
      body1: GoogleFonts.staatliches(textStyle: textTheme?.body1),
      caption: GoogleFonts.staatliches(textStyle: textTheme?.caption),
      button: GoogleFonts.staatliches(textStyle: textTheme?.button),
      subtitle: GoogleFonts.staatliches(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.staatliches(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stalemate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stalemate
  static TextStyle stalemate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c98986a49a80ea3130e9eb7c16b9470c6295a26b0207da72e59c4c01ab9c369b',
        74940,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Stalemate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stalemate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stalemate
  static TextTheme stalemateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stalemate(textStyle: textTheme?.display4),
      display3: GoogleFonts.stalemate(textStyle: textTheme?.display3),
      display2: GoogleFonts.stalemate(textStyle: textTheme?.display2),
      display1: GoogleFonts.stalemate(textStyle: textTheme?.display1),
      headline: GoogleFonts.stalemate(textStyle: textTheme?.headline),
      title: GoogleFonts.stalemate(textStyle: textTheme?.title),
      subhead: GoogleFonts.stalemate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stalemate(textStyle: textTheme?.body2),
      body1: GoogleFonts.stalemate(textStyle: textTheme?.body1),
      caption: GoogleFonts.stalemate(textStyle: textTheme?.caption),
      button: GoogleFonts.stalemate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stalemate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stalemate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stalinist One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stalinist+One
  static TextStyle stalinistOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '87936ca01db4621bdb144a35bb1e89bc7e9b769a899d90ea618736467886c01d',
        30808,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'StalinistOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stalinist One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stalinist+One
  static TextTheme stalinistOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stalinistOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.stalinistOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.stalinistOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.stalinistOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.stalinistOne(textStyle: textTheme?.headline),
      title: GoogleFonts.stalinistOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.stalinistOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stalinistOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.stalinistOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.stalinistOne(textStyle: textTheme?.caption),
      button: GoogleFonts.stalinistOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stalinistOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stalinistOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stardos Stencil font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stardos+Stencil
  static TextStyle stardosStencil({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b677e9855e2ae2d05e70f39ac58d82bfe1f9ea6ecb62fcf63cc3c0f10c456ba9',
        44164,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b5b4ccf1291484af094cadfcd7fa357b84b8c25db613f74330c32b39a270fda1',
        34796,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'StardosStencil',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stardos Stencil font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stardos+Stencil
  static TextTheme stardosStencilTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stardosStencil(textStyle: textTheme?.display4),
      display3: GoogleFonts.stardosStencil(textStyle: textTheme?.display3),
      display2: GoogleFonts.stardosStencil(textStyle: textTheme?.display2),
      display1: GoogleFonts.stardosStencil(textStyle: textTheme?.display1),
      headline: GoogleFonts.stardosStencil(textStyle: textTheme?.headline),
      title: GoogleFonts.stardosStencil(textStyle: textTheme?.title),
      subhead: GoogleFonts.stardosStencil(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stardosStencil(textStyle: textTheme?.body2),
      body1: GoogleFonts.stardosStencil(textStyle: textTheme?.body1),
      caption: GoogleFonts.stardosStencil(textStyle: textTheme?.caption),
      button: GoogleFonts.stardosStencil(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stardosStencil(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stardosStencil(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stint Ultra Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stint+Ultra+Condensed
  static TextStyle stintUltraCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'feefd36d93b983bb86af74847749eae8e80b528fd8e91dd95e3ec89419bacb1b',
        39832,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'StintUltraCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stint Ultra Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stint+Ultra+Condensed
  static TextTheme stintUltraCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stint Ultra Expanded font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stint+Ultra+Expanded
  static TextStyle stintUltraExpanded({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e2e52b99f99f593fd768d038a499b7217a4852adceb02fa177857827ecd46921',
        42348,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'StintUltraExpanded',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stint Ultra Expanded font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stint+Ultra+Expanded
  static TextTheme stintUltraExpandedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.display4),
      display3: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.display3),
      display2: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.display2),
      display1: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.display1),
      headline: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.headline),
      title: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.title),
      subhead: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.body2),
      body1: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.body1),
      caption: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.caption),
      button: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stoke font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stoke
  static TextStyle stoke({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd452122746813947edb624edec6a876538c722d14e0fe96ba0524f09e515f3b6',
        50796,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fcfdfb02835f6966c5279db21b784abc2cfe9e1ec03d8c4452852483fb8f17c1',
        52516,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Stoke',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stoke font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stoke
  static TextTheme stokeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stoke(textStyle: textTheme?.display4),
      display3: GoogleFonts.stoke(textStyle: textTheme?.display3),
      display2: GoogleFonts.stoke(textStyle: textTheme?.display2),
      display1: GoogleFonts.stoke(textStyle: textTheme?.display1),
      headline: GoogleFonts.stoke(textStyle: textTheme?.headline),
      title: GoogleFonts.stoke(textStyle: textTheme?.title),
      subhead: GoogleFonts.stoke(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stoke(textStyle: textTheme?.body2),
      body1: GoogleFonts.stoke(textStyle: textTheme?.body1),
      caption: GoogleFonts.stoke(textStyle: textTheme?.caption),
      button: GoogleFonts.stoke(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stoke(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stoke(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Strait font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Strait
  static TextStyle strait({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '878aae72e6ee31acbf6951998be893d7fb71a57b07974d83623e60b6ccc8d671',
        33040,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Strait',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Strait font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Strait
  static TextTheme straitTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.strait(textStyle: textTheme?.display4),
      display3: GoogleFonts.strait(textStyle: textTheme?.display3),
      display2: GoogleFonts.strait(textStyle: textTheme?.display2),
      display1: GoogleFonts.strait(textStyle: textTheme?.display1),
      headline: GoogleFonts.strait(textStyle: textTheme?.headline),
      title: GoogleFonts.strait(textStyle: textTheme?.title),
      subhead: GoogleFonts.strait(textStyle: textTheme?.subhead),
      body2: GoogleFonts.strait(textStyle: textTheme?.body2),
      body1: GoogleFonts.strait(textStyle: textTheme?.body1),
      caption: GoogleFonts.strait(textStyle: textTheme?.caption),
      button: GoogleFonts.strait(textStyle: textTheme?.button),
      subtitle: GoogleFonts.strait(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.strait(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stylish font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stylish
  static TextStyle stylish({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '489ff10987ec4798768e532c108dbfb20bf68e1e122df1f77b9f35568d34a103',
        6162676,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Stylish',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stylish font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stylish
  static TextTheme stylishTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stylish(textStyle: textTheme?.display4),
      display3: GoogleFonts.stylish(textStyle: textTheme?.display3),
      display2: GoogleFonts.stylish(textStyle: textTheme?.display2),
      display1: GoogleFonts.stylish(textStyle: textTheme?.display1),
      headline: GoogleFonts.stylish(textStyle: textTheme?.headline),
      title: GoogleFonts.stylish(textStyle: textTheme?.title),
      subhead: GoogleFonts.stylish(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stylish(textStyle: textTheme?.body2),
      body1: GoogleFonts.stylish(textStyle: textTheme?.body1),
      caption: GoogleFonts.stylish(textStyle: textTheme?.caption),
      button: GoogleFonts.stylish(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stylish(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stylish(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sue Ellen Francisco font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sue+Ellen+Francisco
  static TextStyle sueEllenFrancisco({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd72aa0c7340b64bd3fc70457dd03d38b35b8cb3fd30f3f1af4a5f9b4bfd870aa',
        55840,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SueEllenFrancisco',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sue Ellen Francisco font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sue+Ellen+Francisco
  static TextTheme sueEllenFranciscoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.display4),
      display3: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.display3),
      display2: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.display2),
      display1: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.display1),
      headline: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.headline),
      title: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.title),
      subhead: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.body2),
      body1: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.body1),
      caption: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.caption),
      button: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Suez One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suez+One
  static TextStyle suezOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7e2e07a8ef35ea21aa3b0630f261b07ce1e992cf94e2161128376c440c9ed2df',
        69424,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SuezOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Suez One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suez+One
  static TextTheme suezOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.suezOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.suezOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.suezOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.suezOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.suezOne(textStyle: textTheme?.headline),
      title: GoogleFonts.suezOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.suezOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.suezOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.suezOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.suezOne(textStyle: textTheme?.caption),
      button: GoogleFonts.suezOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.suezOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.suezOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sumana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sumana
  static TextStyle sumana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9fc4eb110fb834ab65fd4f7af149d8ca3402dde810677f1f6dc84f2b08194c7c',
        144712,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b035af08a910c59c4baf4941cca6a95cdea0a5c22c5d2615f77267f808f82c28',
        143064,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sumana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sumana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sumana
  static TextTheme sumanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sumana(textStyle: textTheme?.display4),
      display3: GoogleFonts.sumana(textStyle: textTheme?.display3),
      display2: GoogleFonts.sumana(textStyle: textTheme?.display2),
      display1: GoogleFonts.sumana(textStyle: textTheme?.display1),
      headline: GoogleFonts.sumana(textStyle: textTheme?.headline),
      title: GoogleFonts.sumana(textStyle: textTheme?.title),
      subhead: GoogleFonts.sumana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sumana(textStyle: textTheme?.body2),
      body1: GoogleFonts.sumana(textStyle: textTheme?.body1),
      caption: GoogleFonts.sumana(textStyle: textTheme?.caption),
      button: GoogleFonts.sumana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sumana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sumana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sunflower font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sunflower
  static TextStyle sunflower({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e60ce84d8ac799e771211c4fa34de99812b730e86342f32f94fbccfa79461bd0',
        352904,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cf53d978b098c900279393bfdf56611a8003d688b2b16b7bd767182e1b0c58e8',
        341128,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f3b680ac8a8f4a8a9ede88bf72084ae45ddd8dd7a8a87e826b9ce8946a7b0536',
        347780,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sunflower',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sunflower font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sunflower
  static TextTheme sunflowerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sunflower(textStyle: textTheme?.display4),
      display3: GoogleFonts.sunflower(textStyle: textTheme?.display3),
      display2: GoogleFonts.sunflower(textStyle: textTheme?.display2),
      display1: GoogleFonts.sunflower(textStyle: textTheme?.display1),
      headline: GoogleFonts.sunflower(textStyle: textTheme?.headline),
      title: GoogleFonts.sunflower(textStyle: textTheme?.title),
      subhead: GoogleFonts.sunflower(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sunflower(textStyle: textTheme?.body2),
      body1: GoogleFonts.sunflower(textStyle: textTheme?.body1),
      caption: GoogleFonts.sunflower(textStyle: textTheme?.caption),
      button: GoogleFonts.sunflower(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sunflower(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sunflower(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sunshiney font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sunshiney
  static TextStyle sunshiney({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7ec73237e0e7d1a4339d0381c584067becd402e92eb382bcff00860e277d2ca',
        159812,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sunshiney',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sunshiney font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sunshiney
  static TextTheme sunshineyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sunshiney(textStyle: textTheme?.display4),
      display3: GoogleFonts.sunshiney(textStyle: textTheme?.display3),
      display2: GoogleFonts.sunshiney(textStyle: textTheme?.display2),
      display1: GoogleFonts.sunshiney(textStyle: textTheme?.display1),
      headline: GoogleFonts.sunshiney(textStyle: textTheme?.headline),
      title: GoogleFonts.sunshiney(textStyle: textTheme?.title),
      subhead: GoogleFonts.sunshiney(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sunshiney(textStyle: textTheme?.body2),
      body1: GoogleFonts.sunshiney(textStyle: textTheme?.body1),
      caption: GoogleFonts.sunshiney(textStyle: textTheme?.caption),
      button: GoogleFonts.sunshiney(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sunshiney(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sunshiney(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Supermercado One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Supermercado+One
  static TextStyle supermercadoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ea1b33f9fdd9d3df950419909fa184a44918ab451c8e9e3fc175b440d0938a9f',
        79764,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SupermercadoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Supermercado One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Supermercado+One
  static TextTheme supermercadoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.supermercadoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.supermercadoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.supermercadoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.supermercadoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.supermercadoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.supermercadoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.supermercadoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.supermercadoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.supermercadoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.supermercadoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.supermercadoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.supermercadoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.supermercadoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sura font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sura
  static TextStyle sura({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '701cc1c8fa22221123e6045f90d0db8d42edadf3b831862ce801b57bb14ac1b1',
        121816,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a88482ddb9067b01125775fc0f780c4b615bc72ad86cbec920ee03b2756d8d90',
        122316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sura',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sura font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sura
  static TextTheme suraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sura(textStyle: textTheme?.display4),
      display3: GoogleFonts.sura(textStyle: textTheme?.display3),
      display2: GoogleFonts.sura(textStyle: textTheme?.display2),
      display1: GoogleFonts.sura(textStyle: textTheme?.display1),
      headline: GoogleFonts.sura(textStyle: textTheme?.headline),
      title: GoogleFonts.sura(textStyle: textTheme?.title),
      subhead: GoogleFonts.sura(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sura(textStyle: textTheme?.body2),
      body1: GoogleFonts.sura(textStyle: textTheme?.body1),
      caption: GoogleFonts.sura(textStyle: textTheme?.caption),
      button: GoogleFonts.sura(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sura(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sura(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Suranna font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suranna
  static TextStyle suranna({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5737d88c714925c169afd72de230a6a9feb3a2d7a026b33b5ccfa42e60cef970',
        387684,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Suranna',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Suranna font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suranna
  static TextTheme surannaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.suranna(textStyle: textTheme?.display4),
      display3: GoogleFonts.suranna(textStyle: textTheme?.display3),
      display2: GoogleFonts.suranna(textStyle: textTheme?.display2),
      display1: GoogleFonts.suranna(textStyle: textTheme?.display1),
      headline: GoogleFonts.suranna(textStyle: textTheme?.headline),
      title: GoogleFonts.suranna(textStyle: textTheme?.title),
      subhead: GoogleFonts.suranna(textStyle: textTheme?.subhead),
      body2: GoogleFonts.suranna(textStyle: textTheme?.body2),
      body1: GoogleFonts.suranna(textStyle: textTheme?.body1),
      caption: GoogleFonts.suranna(textStyle: textTheme?.caption),
      button: GoogleFonts.suranna(textStyle: textTheme?.button),
      subtitle: GoogleFonts.suranna(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.suranna(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Suravaram font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suravaram
  static TextStyle suravaram({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f9de796b7b600961688891106b7bc5efe1090a6ab181d91cc08b19a88e999360',
        189524,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Suravaram',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Suravaram font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suravaram
  static TextTheme suravaramTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.suravaram(textStyle: textTheme?.display4),
      display3: GoogleFonts.suravaram(textStyle: textTheme?.display3),
      display2: GoogleFonts.suravaram(textStyle: textTheme?.display2),
      display1: GoogleFonts.suravaram(textStyle: textTheme?.display1),
      headline: GoogleFonts.suravaram(textStyle: textTheme?.headline),
      title: GoogleFonts.suravaram(textStyle: textTheme?.title),
      subhead: GoogleFonts.suravaram(textStyle: textTheme?.subhead),
      body2: GoogleFonts.suravaram(textStyle: textTheme?.body2),
      body1: GoogleFonts.suravaram(textStyle: textTheme?.body1),
      caption: GoogleFonts.suravaram(textStyle: textTheme?.caption),
      button: GoogleFonts.suravaram(textStyle: textTheme?.button),
      subtitle: GoogleFonts.suravaram(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.suravaram(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Swanky and Moo Moo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Swanky+and+Moo+Moo
  static TextStyle swankyandMooMoo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5d97fafd655154f9469db4b981793373b837c26023dd266164ebd62c6320aa39',
        58868,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SwankyandMooMoo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Swanky and Moo Moo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Swanky+and+Moo+Moo
  static TextTheme swankyandMooMooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.display4),
      display3: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.display3),
      display2: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.display2),
      display1: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.display1),
      headline: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.headline),
      title: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.title),
      subhead: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.body2),
      body1: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.body1),
      caption: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.caption),
      button: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Syncopate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Syncopate
  static TextStyle syncopate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8f40fe696b566662712524f9cf3f5c4aff3afa640f0bd4ec0e527c22369561a9',
        67800,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0c6b8fb391ff34b292bb2091302fb45fcc3b16eefc6bf4e67b9f1fe38f4ab3fe',
        36484,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Syncopate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Syncopate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Syncopate
  static TextTheme syncopateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.syncopate(textStyle: textTheme?.display4),
      display3: GoogleFonts.syncopate(textStyle: textTheme?.display3),
      display2: GoogleFonts.syncopate(textStyle: textTheme?.display2),
      display1: GoogleFonts.syncopate(textStyle: textTheme?.display1),
      headline: GoogleFonts.syncopate(textStyle: textTheme?.headline),
      title: GoogleFonts.syncopate(textStyle: textTheme?.title),
      subhead: GoogleFonts.syncopate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.syncopate(textStyle: textTheme?.body2),
      body1: GoogleFonts.syncopate(textStyle: textTheme?.body1),
      caption: GoogleFonts.syncopate(textStyle: textTheme?.caption),
      button: GoogleFonts.syncopate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.syncopate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.syncopate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tajawal font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tajawal
  static TextStyle tajawal({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1591b1d4b425865ad56f27769d7904f608af3a947ce4a365c5e6f1a66ed36c5c',
        51368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '96516512d599f345601934621e5ddc2b61c7967d59e4ee3bea24cb11c9f720d8',
        56216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6008a589c04e1cca5b78ecd73eb5f54a525670df2d3627fcddac202dac0b8db5',
        55044,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'efce394f1ebd252328bf21261a39ead5a083741b090a73e22bec34acbd910611',
        56256,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '647958c651db7515a77fab543f70f06386720821399060f8b1791b1dc23a845b',
        55492,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '354e92ab2c7c9b84b1e80ee6431ea8e8bc0fe58113d4afa3fbf186b193168ca5',
        55216,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9953e51150483dc38b632c494f68d39e59b6c474716bc0ac3e9d997c4ec0df52',
        54644,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tajawal',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tajawal font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tajawal
  static TextTheme tajawalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tajawal(textStyle: textTheme?.display4),
      display3: GoogleFonts.tajawal(textStyle: textTheme?.display3),
      display2: GoogleFonts.tajawal(textStyle: textTheme?.display2),
      display1: GoogleFonts.tajawal(textStyle: textTheme?.display1),
      headline: GoogleFonts.tajawal(textStyle: textTheme?.headline),
      title: GoogleFonts.tajawal(textStyle: textTheme?.title),
      subhead: GoogleFonts.tajawal(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tajawal(textStyle: textTheme?.body2),
      body1: GoogleFonts.tajawal(textStyle: textTheme?.body1),
      caption: GoogleFonts.tajawal(textStyle: textTheme?.caption),
      button: GoogleFonts.tajawal(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tajawal(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tajawal(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tangerine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tangerine
  static TextStyle tangerine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd57c4cf7ce5cace0ff51506a942305cb2a8342c0d13badf47b74d8b7ccd6a976',
        39584,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '99be610fa0d0acc2de30af936f07ac82bda5378a98b867c55dc1d8ae1a763c72',
        39460,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tangerine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tangerine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tangerine
  static TextTheme tangerineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tangerine(textStyle: textTheme?.display4),
      display3: GoogleFonts.tangerine(textStyle: textTheme?.display3),
      display2: GoogleFonts.tangerine(textStyle: textTheme?.display2),
      display1: GoogleFonts.tangerine(textStyle: textTheme?.display1),
      headline: GoogleFonts.tangerine(textStyle: textTheme?.headline),
      title: GoogleFonts.tangerine(textStyle: textTheme?.title),
      subhead: GoogleFonts.tangerine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tangerine(textStyle: textTheme?.body2),
      body1: GoogleFonts.tangerine(textStyle: textTheme?.body1),
      caption: GoogleFonts.tangerine(textStyle: textTheme?.caption),
      button: GoogleFonts.tangerine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tangerine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tangerine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tauri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tauri
  static TextStyle tauri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '364639e2343951f5f67f35cd32dddd5050f5a7d4b5170fd1f4b9bcdcfd3b70a5',
        25452,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tauri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tauri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tauri
  static TextTheme tauriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tauri(textStyle: textTheme?.display4),
      display3: GoogleFonts.tauri(textStyle: textTheme?.display3),
      display2: GoogleFonts.tauri(textStyle: textTheme?.display2),
      display1: GoogleFonts.tauri(textStyle: textTheme?.display1),
      headline: GoogleFonts.tauri(textStyle: textTheme?.headline),
      title: GoogleFonts.tauri(textStyle: textTheme?.title),
      subhead: GoogleFonts.tauri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tauri(textStyle: textTheme?.body2),
      body1: GoogleFonts.tauri(textStyle: textTheme?.body1),
      caption: GoogleFonts.tauri(textStyle: textTheme?.caption),
      button: GoogleFonts.tauri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tauri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tauri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Taviraj font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Taviraj
  static TextStyle taviraj({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '52fbea14874ede87677741ccb667e42f7f7032e15c8b1a97be9fb092777027f3',
        137276,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd637ee5b1965213b2d0a0e00861b1be03c91e65b536d89344ca8311230055a55',
        151012,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0f7c36cf8282e0201e715b76951dfdbbb3cbfd0205738f51c9ecf4317214ac1d',
        137232,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '595da34fe677c807a56dbef57b36441f4cd9de4747ca13a95bc88dd802565032',
        151740,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b164693b28772a83e0ba3ea3b0795121a18396d1d22e4896f1f49fc90acc48b0',
        136700,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4835b3444e501b13a94cc6e04b4b19278bf42fae51e45998c0b41de8111b0727',
        138660,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cc53748aefd7d7a100dafa7ee826dbe17e7e14c04500e79b83a7960d0e379305',
        137464,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '9dd995b1166e87570dc10d6a2afb2e5bdc5a0a8897063971ff30f8be824cbdb0',
        151440,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8088b428c6a34c587047b747ef8b7e12084beb84bd154855e5c2d5038047e712',
        136676,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f38fc8738bdc33986e0ef3c36e4c1af93939c40aee8d6db38f93edcefac57482',
        152500,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '60262effd08d123f96e4ab6a7b67e4bdf366592724ab6211ea76e298b32de956',
        123836,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'c32503bb0fe3a7c346743b68f48dba5c7de00074f0b33e16f2e1e34686a75575',
        138496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'df6e4ecf9639e7dc02de4f99c5c63ebf641345e361470a40c48179c0dc47de55',
        135496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e3ea04696627c46a58fa5ef27becd6ba6de21760fbeda60718e5ea072290165b',
        150784,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aff20cbaad70c21cda602d83dcf1df3e91122111271040a17451c90f91c0bc44',
        135488,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ce78de38f72b4be9e1af07713b59f4497cc2677898bd647e19679c6b10bd16d7',
        149960,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '75383093cb1afbe41275d2188c2d57c958f8fb94eff2dc57382eb5c77ca82138',
        134912,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '181f5aa6c3cfc77afd3dbcbc58dd4a621984f78739969774a7f939caee61b936',
        145500,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Taviraj',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Taviraj font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Taviraj
  static TextTheme tavirajTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.taviraj(textStyle: textTheme?.display4),
      display3: GoogleFonts.taviraj(textStyle: textTheme?.display3),
      display2: GoogleFonts.taviraj(textStyle: textTheme?.display2),
      display1: GoogleFonts.taviraj(textStyle: textTheme?.display1),
      headline: GoogleFonts.taviraj(textStyle: textTheme?.headline),
      title: GoogleFonts.taviraj(textStyle: textTheme?.title),
      subhead: GoogleFonts.taviraj(textStyle: textTheme?.subhead),
      body2: GoogleFonts.taviraj(textStyle: textTheme?.body2),
      body1: GoogleFonts.taviraj(textStyle: textTheme?.body1),
      caption: GoogleFonts.taviraj(textStyle: textTheme?.caption),
      button: GoogleFonts.taviraj(textStyle: textTheme?.button),
      subtitle: GoogleFonts.taviraj(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.taviraj(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Teko font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Teko
  static TextStyle teko({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b31400af25afcb1ea24b0a3b59e18957132c4df53084ec09f2978ddfd1e67fc5',
        183236,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd796b7d93c33a941a6521bb31d3ce37f381b87f97447077405c1cf841c4cb586',
        188060,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '88b2962aecc7ff0d4a09258f8eff7210ff6c72abd16a8229f30da45d3c428b44',
        189536,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '93c13926efeae26ea7017e3777dd33149524c7eb3907c791e4b8c8edc57848f6',
        188860,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8c33b42189d0afc837f06ec5fd8b20cc431d75823356156ab00af8dcb949fa69',
        178052,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Teko',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Teko font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Teko
  static TextTheme tekoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.teko(textStyle: textTheme?.display4),
      display3: GoogleFonts.teko(textStyle: textTheme?.display3),
      display2: GoogleFonts.teko(textStyle: textTheme?.display2),
      display1: GoogleFonts.teko(textStyle: textTheme?.display1),
      headline: GoogleFonts.teko(textStyle: textTheme?.headline),
      title: GoogleFonts.teko(textStyle: textTheme?.title),
      subhead: GoogleFonts.teko(textStyle: textTheme?.subhead),
      body2: GoogleFonts.teko(textStyle: textTheme?.body2),
      body1: GoogleFonts.teko(textStyle: textTheme?.body1),
      caption: GoogleFonts.teko(textStyle: textTheme?.caption),
      button: GoogleFonts.teko(textStyle: textTheme?.button),
      subtitle: GoogleFonts.teko(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.teko(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Telex font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Telex
  static TextStyle telex({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '75d35766aa0cce57bcd40915972194111fc782787321d3eed8813c7c8d1e9e39',
        25416,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Telex',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Telex font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Telex
  static TextTheme telexTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.telex(textStyle: textTheme?.display4),
      display3: GoogleFonts.telex(textStyle: textTheme?.display3),
      display2: GoogleFonts.telex(textStyle: textTheme?.display2),
      display1: GoogleFonts.telex(textStyle: textTheme?.display1),
      headline: GoogleFonts.telex(textStyle: textTheme?.headline),
      title: GoogleFonts.telex(textStyle: textTheme?.title),
      subhead: GoogleFonts.telex(textStyle: textTheme?.subhead),
      body2: GoogleFonts.telex(textStyle: textTheme?.body2),
      body1: GoogleFonts.telex(textStyle: textTheme?.body1),
      caption: GoogleFonts.telex(textStyle: textTheme?.caption),
      button: GoogleFonts.telex(textStyle: textTheme?.button),
      subtitle: GoogleFonts.telex(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.telex(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tenali Ramakrishna font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tenali+Ramakrishna
  static TextStyle tenaliRamakrishna({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b6f6e7bc4fab4b63722a7970012462fc4dd196307fcab934cabb392e9b45b437',
        484616,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TenaliRamakrishna',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tenali Ramakrishna font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tenali+Ramakrishna
  static TextTheme tenaliRamakrishnaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.display4),
      display3: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.display3),
      display2: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.display2),
      display1: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.display1),
      headline: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.headline),
      title: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.title),
      subhead: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.body2),
      body1: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.body1),
      caption: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.caption),
      button: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tenor Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tenor+Sans
  static TextStyle tenorSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8282a828e14c73c12ba9034180b4a4840baca4c02a86359f63143806dcc81f23',
        76800,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TenorSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tenor Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tenor+Sans
  static TextTheme tenorSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tenorSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.tenorSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.tenorSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.tenorSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.tenorSans(textStyle: textTheme?.headline),
      title: GoogleFonts.tenorSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.tenorSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tenorSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.tenorSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.tenorSans(textStyle: textTheme?.caption),
      button: GoogleFonts.tenorSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tenorSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tenorSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Text Me One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Text+Me+One
  static TextStyle textMeOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '804cbe1e9c5d9e08155e548789f8b5f53ff150c0785dbeae1c9361e8749b4e52',
        37304,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TextMeOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Text Me One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Text+Me+One
  static TextTheme textMeOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.textMeOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.textMeOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.textMeOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.textMeOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.textMeOne(textStyle: textTheme?.headline),
      title: GoogleFonts.textMeOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.textMeOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.textMeOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.textMeOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.textMeOne(textStyle: textTheme?.caption),
      button: GoogleFonts.textMeOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.textMeOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.textMeOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Thasadith font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Thasadith
  static TextStyle thasadith({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b9b28f00da26a27f2be523c47e0404d6bad035dead548d2418197cd755cc3ac5',
        86212,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6c61662859aba973376a911040a9d141a67b1fa741ad54150e2bca1ec179e824',
        89192,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '45b2059a66559645a04c064051f3e3d8f18c0e883aab89bae7fff6d05ad0043b',
        86580,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '758c9bca5f80c1e919aa4821259cd1a773692ab770622c36f688ea4c8524b0ae',
        89588,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Thasadith',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Thasadith font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Thasadith
  static TextTheme thasadithTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.thasadith(textStyle: textTheme?.display4),
      display3: GoogleFonts.thasadith(textStyle: textTheme?.display3),
      display2: GoogleFonts.thasadith(textStyle: textTheme?.display2),
      display1: GoogleFonts.thasadith(textStyle: textTheme?.display1),
      headline: GoogleFonts.thasadith(textStyle: textTheme?.headline),
      title: GoogleFonts.thasadith(textStyle: textTheme?.title),
      subhead: GoogleFonts.thasadith(textStyle: textTheme?.subhead),
      body2: GoogleFonts.thasadith(textStyle: textTheme?.body2),
      body1: GoogleFonts.thasadith(textStyle: textTheme?.body1),
      caption: GoogleFonts.thasadith(textStyle: textTheme?.caption),
      button: GoogleFonts.thasadith(textStyle: textTheme?.button),
      subtitle: GoogleFonts.thasadith(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.thasadith(textStyle: textTheme?.overline),
    );
  }

  /// Applies the The Girl Next Door font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/The+Girl+Next+Door
  static TextStyle theGirlNextDoor({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '51c93d3ab1885507b024f2ed61854dbb865696dcb5dbdfd1b135cefd74150fef',
        45248,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TheGirlNextDoor',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the The Girl Next Door font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/The+Girl+Next+Door
  static TextTheme theGirlNextDoorTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.display4),
      display3: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.display3),
      display2: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.display2),
      display1: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.display1),
      headline: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.headline),
      title: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.title),
      subhead: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.subhead),
      body2: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.body2),
      body1: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.body1),
      caption: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.caption),
      button: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.button),
      subtitle: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tienne font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tienne
  static TextStyle tienne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e11280c2a4284740a646bbace5bf0a018fa38ead3ba5b33b7d6a55a646342b17',
        40772,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '62ae315531bcb85150dfefb27cbccbb30f331e0c091470a03aca49e6b1842e5f',
        38824,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7882a99c925a597867e27f064c12db77d2185f452bd9b0bc83862549c886331c',
        36220,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tienne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tienne font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tienne
  static TextTheme tienneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tienne(textStyle: textTheme?.display4),
      display3: GoogleFonts.tienne(textStyle: textTheme?.display3),
      display2: GoogleFonts.tienne(textStyle: textTheme?.display2),
      display1: GoogleFonts.tienne(textStyle: textTheme?.display1),
      headline: GoogleFonts.tienne(textStyle: textTheme?.headline),
      title: GoogleFonts.tienne(textStyle: textTheme?.title),
      subhead: GoogleFonts.tienne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tienne(textStyle: textTheme?.body2),
      body1: GoogleFonts.tienne(textStyle: textTheme?.body1),
      caption: GoogleFonts.tienne(textStyle: textTheme?.caption),
      button: GoogleFonts.tienne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tienne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tienne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tillana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tillana
  static TextStyle tillana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f767b3a50e7fbd85244228fd72776e996704c5b833256c5fa56b782821e015af',
        217680,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5aecdf23e36ca11770901c226daf192765931a12afd290bbf684884f9bbf1c7c',
        222092,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a5f11d010b5bd339931701e1853b2788fccf7cb07bbf503ff03f027a3086f3f3',
        222844,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aed658fc70549eb112a013dc7ce6145b1f2719ee7d6179a5c4fd7be399a68511',
        222308,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'df261f8eeab47304d5e83ee3d77bba8193f51bd098bab3370180417296143318',
        222568,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tillana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tillana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tillana
  static TextTheme tillanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tillana(textStyle: textTheme?.display4),
      display3: GoogleFonts.tillana(textStyle: textTheme?.display3),
      display2: GoogleFonts.tillana(textStyle: textTheme?.display2),
      display1: GoogleFonts.tillana(textStyle: textTheme?.display1),
      headline: GoogleFonts.tillana(textStyle: textTheme?.headline),
      title: GoogleFonts.tillana(textStyle: textTheme?.title),
      subhead: GoogleFonts.tillana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tillana(textStyle: textTheme?.body2),
      body1: GoogleFonts.tillana(textStyle: textTheme?.body1),
      caption: GoogleFonts.tillana(textStyle: textTheme?.caption),
      button: GoogleFonts.tillana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tillana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tillana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Timmana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Timmana
  static TextStyle timmana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6cf943319390cff3797ae7f9cf411dc8a14a739df02bdb952ae54284aaf15b01',
        469544,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Timmana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Timmana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Timmana
  static TextTheme timmanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.timmana(textStyle: textTheme?.display4),
      display3: GoogleFonts.timmana(textStyle: textTheme?.display3),
      display2: GoogleFonts.timmana(textStyle: textTheme?.display2),
      display1: GoogleFonts.timmana(textStyle: textTheme?.display1),
      headline: GoogleFonts.timmana(textStyle: textTheme?.headline),
      title: GoogleFonts.timmana(textStyle: textTheme?.title),
      subhead: GoogleFonts.timmana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.timmana(textStyle: textTheme?.body2),
      body1: GoogleFonts.timmana(textStyle: textTheme?.body1),
      caption: GoogleFonts.timmana(textStyle: textTheme?.caption),
      button: GoogleFonts.timmana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.timmana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.timmana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tinos font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tinos
  static TextStyle tinos({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e3fb073d6d034814d7825107e1eae4eee8c1f169d87607f2df536bb4e4093ddf',
        262544,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '27dde2d7c4a3b5edc81ddca48874ffcb63a893df81e508e07a3565f70323fdaf',
        263828,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dc658c10271c22ff1ad12fc220c05dadf678b1fa42443b874fd100f68afa117c',
        256496,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '839f50ca06adbf9bc25feef137791fcd9983139a76881789a290e71d685feab5',
        261992,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tinos',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tinos font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tinos
  static TextTheme tinosTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tinos(textStyle: textTheme?.display4),
      display3: GoogleFonts.tinos(textStyle: textTheme?.display3),
      display2: GoogleFonts.tinos(textStyle: textTheme?.display2),
      display1: GoogleFonts.tinos(textStyle: textTheme?.display1),
      headline: GoogleFonts.tinos(textStyle: textTheme?.headline),
      title: GoogleFonts.tinos(textStyle: textTheme?.title),
      subhead: GoogleFonts.tinos(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tinos(textStyle: textTheme?.body2),
      body1: GoogleFonts.tinos(textStyle: textTheme?.body1),
      caption: GoogleFonts.tinos(textStyle: textTheme?.caption),
      button: GoogleFonts.tinos(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tinos(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tinos(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Titan One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Titan+One
  static TextStyle titanOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '065d13ba1ab0e715e15feed24b86ff9a58a8df624d74923e1a1c710b36e08e99',
        55664,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TitanOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Titan One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Titan+One
  static TextTheme titanOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.titanOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.titanOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.titanOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.titanOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.titanOne(textStyle: textTheme?.headline),
      title: GoogleFonts.titanOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.titanOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.titanOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.titanOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.titanOne(textStyle: textTheme?.caption),
      button: GoogleFonts.titanOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.titanOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.titanOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Titillium Web font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Titillium+Web
  static TextStyle titilliumWeb({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '19772d85bad94abc7a76fc4a64849db9638e9c00e7e0dadd3872a583b74adbe3',
        62712,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'a39917b8e97b8433f10dae6821885f087662f1062a48a366f2f2f287c74ecb6c',
        67404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7da8c41b9e519ca322471fc0bdcc15a795423fb09cbf094a6787142218ec1c9e',
        63520,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f0ff528b94c980870d32757c89817e790c119bea9de817d49334ba1a3f04ef9a',
        71232,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ba6d03922294b498b3e57ace654a9ee6715c33081cd24c1df56004ca64ba6e66',
        63188,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd785f9b4efc2d7f91a854d36930d269122091296e25a46cc7931e2cd717567d5',
        71912,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8c9b215a8e543b09a087afec74223fb41a74378deb5b83c8457630d03f0b5fc3',
        62524,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e43b57298b99f0da6d3bfa3de072e88a539bf01332c5232e8e29dfee09cb859c',
        71340,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '10e8c4207611b16691202b4204f5fbd4e27aa240a45dbb2ca91f63f341056539',
        59388,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'dd23a74d333a9694f51ccb193efddc8d38e892053eca374882e2fe4043181559',
        69256,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '742f14f17526638a90f24974f5222008c89acabe2c636deb378ba287cf381bc6',
        48836,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TitilliumWeb',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Titillium Web font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Titillium+Web
  static TextTheme titilliumWebTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.titilliumWeb(textStyle: textTheme?.display4),
      display3: GoogleFonts.titilliumWeb(textStyle: textTheme?.display3),
      display2: GoogleFonts.titilliumWeb(textStyle: textTheme?.display2),
      display1: GoogleFonts.titilliumWeb(textStyle: textTheme?.display1),
      headline: GoogleFonts.titilliumWeb(textStyle: textTheme?.headline),
      title: GoogleFonts.titilliumWeb(textStyle: textTheme?.title),
      subhead: GoogleFonts.titilliumWeb(textStyle: textTheme?.subhead),
      body2: GoogleFonts.titilliumWeb(textStyle: textTheme?.body2),
      body1: GoogleFonts.titilliumWeb(textStyle: textTheme?.body1),
      caption: GoogleFonts.titilliumWeb(textStyle: textTheme?.caption),
      button: GoogleFonts.titilliumWeb(textStyle: textTheme?.button),
      subtitle: GoogleFonts.titilliumWeb(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.titilliumWeb(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trade Winds font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trade+Winds
  static TextStyle tradeWinds({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3700d4f7d8215f29936d00b52a4b5bf1b2c28b9df395be53d179282b32834cdb',
        85328,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TradeWinds',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trade Winds font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trade+Winds
  static TextTheme tradeWindsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tradeWinds(textStyle: textTheme?.display4),
      display3: GoogleFonts.tradeWinds(textStyle: textTheme?.display3),
      display2: GoogleFonts.tradeWinds(textStyle: textTheme?.display2),
      display1: GoogleFonts.tradeWinds(textStyle: textTheme?.display1),
      headline: GoogleFonts.tradeWinds(textStyle: textTheme?.headline),
      title: GoogleFonts.tradeWinds(textStyle: textTheme?.title),
      subhead: GoogleFonts.tradeWinds(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tradeWinds(textStyle: textTheme?.body2),
      body1: GoogleFonts.tradeWinds(textStyle: textTheme?.body1),
      caption: GoogleFonts.tradeWinds(textStyle: textTheme?.caption),
      button: GoogleFonts.tradeWinds(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tradeWinds(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tradeWinds(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trirong font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trirong
  static TextStyle trirong({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ebda10c096f251b0f84ce8b6fad4468a087d944c5c45081c09f9b355ed9c2757',
        130884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7a42cfb5ac38b434d94f2da531cd684023ef0223664c7a1dcc27c1abbb1da60a',
        145452,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c24e38979d00ca5cc7b8263089200c8047ff2589fdccff637c44dd6e0ab1f408',
        130952,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '273025dcd85321fcb1f102724944a7150fea25d03ff9ed2bb7386973e88b9e50',
        146848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5f63c33f4190aa7884d7b64f11279c4507d7317e5624d0bfc1b05eca2ff418e7',
        132208,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '1784836440ffdf31286b0df9584970579b1af1952ac75dfd022bf9d7e0984fe1',
        146876,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '83969f4046620c10445d07b6cec90f9d567b3cb5ae9f8a0d216568cc2d15654c',
        132240,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '841e812a25eb28ca4e21cb658d8366c9bb981105dd1d7aa88ca994bb54894ea3',
        135792,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '43bcfe3403429145f5c7fb7b1c235b3f7c6ec53c0eb74c60aacf204b951b5401',
        132568,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5e3cacecc05b4c5ec441b805e2a762128058bec1d536af471ba5e41bdc4aeab6',
        145648,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1bcf42948a6cb24de06e4672a41d7be5d5a78f8666cb01af47465ae500a71d3f',
        119756,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '33b42029fe9f85e3aca1571116b8931e01d2c0532a8686fa4d4c1a9a6002d4c7',
        133248,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f44ac39f4897c03dc6b971c1150fb6931ae23244de24ad8b7e7786cf80d05bdf',
        132408,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '253f1ffccc8aef2bd32268020b2c2043f73135a8ae452a59da8a0392eb550f15',
        149368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '91503f7fd8f6427f0f52f59b2eb579609644a895bbc23cf120d005ca661664a3',
        132344,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '4bfb31e96b8c31946d7ad03ee00d18bbe83bb6f3259286bfcf595eb3a58f0d0c',
        148940,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '68b6c54a09143e5a61f93d87711cea8b55c71178340aa29d7900f345a39d6fec',
        132288,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3065ef76d27a4859bed714e0ff5f472bd1675a0fc4b103a5b365fb7e367acbdc',
        149148,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Trirong',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trirong font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trirong
  static TextTheme trirongTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.trirong(textStyle: textTheme?.display4),
      display3: GoogleFonts.trirong(textStyle: textTheme?.display3),
      display2: GoogleFonts.trirong(textStyle: textTheme?.display2),
      display1: GoogleFonts.trirong(textStyle: textTheme?.display1),
      headline: GoogleFonts.trirong(textStyle: textTheme?.headline),
      title: GoogleFonts.trirong(textStyle: textTheme?.title),
      subhead: GoogleFonts.trirong(textStyle: textTheme?.subhead),
      body2: GoogleFonts.trirong(textStyle: textTheme?.body2),
      body1: GoogleFonts.trirong(textStyle: textTheme?.body1),
      caption: GoogleFonts.trirong(textStyle: textTheme?.caption),
      button: GoogleFonts.trirong(textStyle: textTheme?.button),
      subtitle: GoogleFonts.trirong(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.trirong(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trocchi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trocchi
  static TextStyle trocchi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'eb00e832bf4003425484645b8e897ee2762c5ef155286eb4647745a9992d91e5',
        43796,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Trocchi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trocchi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trocchi
  static TextTheme trocchiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.trocchi(textStyle: textTheme?.display4),
      display3: GoogleFonts.trocchi(textStyle: textTheme?.display3),
      display2: GoogleFonts.trocchi(textStyle: textTheme?.display2),
      display1: GoogleFonts.trocchi(textStyle: textTheme?.display1),
      headline: GoogleFonts.trocchi(textStyle: textTheme?.headline),
      title: GoogleFonts.trocchi(textStyle: textTheme?.title),
      subhead: GoogleFonts.trocchi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.trocchi(textStyle: textTheme?.body2),
      body1: GoogleFonts.trocchi(textStyle: textTheme?.body1),
      caption: GoogleFonts.trocchi(textStyle: textTheme?.caption),
      button: GoogleFonts.trocchi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.trocchi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.trocchi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trochut font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trochut
  static TextStyle trochut({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'fb7ad314480eec04c8ff53ad7a24690495145d924a92be149c75ccd5fe144215',
        25252,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '05e2d11e0d53984525926d1c86d71eab21194ae2664a3696175f68fb9e8969de',
        27860,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '82633b54306a8a1649b8590f40a509a2808ff33ef157f6cc3f98d52130752914',
        25364,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Trochut',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trochut font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trochut
  static TextTheme trochutTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.trochut(textStyle: textTheme?.display4),
      display3: GoogleFonts.trochut(textStyle: textTheme?.display3),
      display2: GoogleFonts.trochut(textStyle: textTheme?.display2),
      display1: GoogleFonts.trochut(textStyle: textTheme?.display1),
      headline: GoogleFonts.trochut(textStyle: textTheme?.headline),
      title: GoogleFonts.trochut(textStyle: textTheme?.title),
      subhead: GoogleFonts.trochut(textStyle: textTheme?.subhead),
      body2: GoogleFonts.trochut(textStyle: textTheme?.body2),
      body1: GoogleFonts.trochut(textStyle: textTheme?.body1),
      caption: GoogleFonts.trochut(textStyle: textTheme?.caption),
      button: GoogleFonts.trochut(textStyle: textTheme?.button),
      subtitle: GoogleFonts.trochut(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.trochut(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trykker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trykker
  static TextStyle trykker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a90a15371d777f248a91bd42582cdab700d67f8d3ca9b191fa8f32923f781e02',
        38116,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Trykker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trykker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trykker
  static TextTheme trykkerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.trykker(textStyle: textTheme?.display4),
      display3: GoogleFonts.trykker(textStyle: textTheme?.display3),
      display2: GoogleFonts.trykker(textStyle: textTheme?.display2),
      display1: GoogleFonts.trykker(textStyle: textTheme?.display1),
      headline: GoogleFonts.trykker(textStyle: textTheme?.headline),
      title: GoogleFonts.trykker(textStyle: textTheme?.title),
      subhead: GoogleFonts.trykker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.trykker(textStyle: textTheme?.body2),
      body1: GoogleFonts.trykker(textStyle: textTheme?.body1),
      caption: GoogleFonts.trykker(textStyle: textTheme?.caption),
      button: GoogleFonts.trykker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.trykker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.trykker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tulpen One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tulpen+One
  static TextStyle tulpenOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7952e8a169708673ce2f03a77306fa166fa25d0f8475c26ea3cf055d955577c',
        35220,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TulpenOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tulpen One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tulpen+One
  static TextTheme tulpenOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tulpenOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.tulpenOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.tulpenOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.tulpenOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.tulpenOne(textStyle: textTheme?.headline),
      title: GoogleFonts.tulpenOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.tulpenOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tulpenOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.tulpenOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.tulpenOne(textStyle: textTheme?.caption),
      button: GoogleFonts.tulpenOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tulpenOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tulpenOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ubuntu font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu
  static TextStyle ubuntu({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'af68436b9e6b56275cecbabf026fbfa760095b5fc054f802c17ae15dcb4cbf18',
        209640,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f1fc680395fdc7b33c4b64324bb4e34779fb8acfbb6d18b837932e0b8d1a69ee',
        235432,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '69538c1ee708ba76c975ea534b5ea8bd65054114da93581ed279bdedde98986c',
        222172,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '191ec3d947057bfaa61cf55e8133a8dfa252400009e628a2141f7aafd3047ca9',
        231260,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c1964f6ef40fc1fdf7599700b74b4446f181c52a6547cac09a325565ad55e639',
        224556,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '02b8cbdca4e9916efc303be2f40666b27aa1928896d3f783fec01f97e23f7f64',
        228072,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd897d5edfc8d1b9f611f1936d05ea7f52b66071ab5f3fa3dbc357cee0e02f204',
        231472,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '5c1ea5c0feab209d1204650845041e13ed77ef6451d9f081711e7d698ba20b52',
        245888,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d1044be5c621b9779245f7324c08c3991b0a609d3de1eae6b7f914cd54de315',
        253684,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ubuntu',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ubuntu font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu
  static TextTheme ubuntuTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ubuntu(textStyle: textTheme?.display4),
      display3: GoogleFonts.ubuntu(textStyle: textTheme?.display3),
      display2: GoogleFonts.ubuntu(textStyle: textTheme?.display2),
      display1: GoogleFonts.ubuntu(textStyle: textTheme?.display1),
      headline: GoogleFonts.ubuntu(textStyle: textTheme?.headline),
      title: GoogleFonts.ubuntu(textStyle: textTheme?.title),
      subhead: GoogleFonts.ubuntu(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ubuntu(textStyle: textTheme?.body2),
      body1: GoogleFonts.ubuntu(textStyle: textTheme?.body1),
      caption: GoogleFonts.ubuntu(textStyle: textTheme?.caption),
      button: GoogleFonts.ubuntu(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ubuntu(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ubuntu(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ubuntu Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu+Mono
  static TextStyle ubuntuMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cd1f8cec4767686edcf755dcde43ac58d83cef21ee96f0e6d850aaf359edd22c',
        115764,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f9935197a4379e2812e72644ce77c4d8bd3f108ff3b23ed5fccb7032f08d6626',
        120736,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7f6a2a5a1eeef3fd539d7cb59119e2a720c33fb75347a47de6c1b4daef4ab63c',
        114936,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '91873d66153347506011f860ea9c87fc36c2ee4ef726bd95cc88c86e0b1ec5f2',
        118912,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UbuntuMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ubuntu Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu+Mono
  static TextTheme ubuntuMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ubuntuMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.ubuntuMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.ubuntuMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.ubuntuMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.ubuntuMono(textStyle: textTheme?.headline),
      title: GoogleFonts.ubuntuMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.ubuntuMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ubuntuMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.ubuntuMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.ubuntuMono(textStyle: textTheme?.caption),
      button: GoogleFonts.ubuntuMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ubuntuMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ubuntuMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ultra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ultra
  static TextStyle ultra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b8f140ef86bd070e1a1d30fffe3069a30b84663f4dbdb628765d5813caa50003',
        52776,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ultra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ultra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ultra
  static TextTheme ultraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ultra(textStyle: textTheme?.display4),
      display3: GoogleFonts.ultra(textStyle: textTheme?.display3),
      display2: GoogleFonts.ultra(textStyle: textTheme?.display2),
      display1: GoogleFonts.ultra(textStyle: textTheme?.display1),
      headline: GoogleFonts.ultra(textStyle: textTheme?.headline),
      title: GoogleFonts.ultra(textStyle: textTheme?.title),
      subhead: GoogleFonts.ultra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ultra(textStyle: textTheme?.body2),
      body1: GoogleFonts.ultra(textStyle: textTheme?.body1),
      caption: GoogleFonts.ultra(textStyle: textTheme?.caption),
      button: GoogleFonts.ultra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ultra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ultra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Uncial Antiqua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Uncial+Antiqua
  static TextStyle uncialAntiqua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '88158802093284fa91900c03a6d4ad980decb35d9f668fb97ae46095f6669770',
        62988,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UncialAntiqua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Uncial Antiqua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Uncial+Antiqua
  static TextTheme uncialAntiquaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.uncialAntiqua(textStyle: textTheme?.display4),
      display3: GoogleFonts.uncialAntiqua(textStyle: textTheme?.display3),
      display2: GoogleFonts.uncialAntiqua(textStyle: textTheme?.display2),
      display1: GoogleFonts.uncialAntiqua(textStyle: textTheme?.display1),
      headline: GoogleFonts.uncialAntiqua(textStyle: textTheme?.headline),
      title: GoogleFonts.uncialAntiqua(textStyle: textTheme?.title),
      subhead: GoogleFonts.uncialAntiqua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.uncialAntiqua(textStyle: textTheme?.body2),
      body1: GoogleFonts.uncialAntiqua(textStyle: textTheme?.body1),
      caption: GoogleFonts.uncialAntiqua(textStyle: textTheme?.caption),
      button: GoogleFonts.uncialAntiqua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.uncialAntiqua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.uncialAntiqua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Underdog font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Underdog
  static TextStyle underdog({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '02f2cb9d97d94732f703fb34d2332cacf667304208fd69704a5e2ff904dcccff',
        70256,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Underdog',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Underdog font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Underdog
  static TextTheme underdogTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.underdog(textStyle: textTheme?.display4),
      display3: GoogleFonts.underdog(textStyle: textTheme?.display3),
      display2: GoogleFonts.underdog(textStyle: textTheme?.display2),
      display1: GoogleFonts.underdog(textStyle: textTheme?.display1),
      headline: GoogleFonts.underdog(textStyle: textTheme?.headline),
      title: GoogleFonts.underdog(textStyle: textTheme?.title),
      subhead: GoogleFonts.underdog(textStyle: textTheme?.subhead),
      body2: GoogleFonts.underdog(textStyle: textTheme?.body2),
      body1: GoogleFonts.underdog(textStyle: textTheme?.body1),
      caption: GoogleFonts.underdog(textStyle: textTheme?.caption),
      button: GoogleFonts.underdog(textStyle: textTheme?.button),
      subtitle: GoogleFonts.underdog(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.underdog(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Unica One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unica+One
  static TextStyle unicaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5616e05bc01af9a3a0c6ab46088658b8dfa74ac2b709df893baaefaa711889ed',
        39876,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UnicaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Unica One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unica+One
  static TextTheme unicaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unicaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.unicaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.unicaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.unicaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.unicaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.unicaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.unicaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unicaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.unicaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.unicaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.unicaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unicaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unicaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the UnifrakturCook font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/UnifrakturCook
  static TextStyle unifrakturCook({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '36511c1da21b02a70a6926e12d439ba9c9dba3d5ff0a282c31fa85c4ca96a121',
        41860,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UnifrakturCook',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the UnifrakturCook font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/UnifrakturCook
  static TextTheme unifrakturCookTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unifrakturCook(textStyle: textTheme?.display4),
      display3: GoogleFonts.unifrakturCook(textStyle: textTheme?.display3),
      display2: GoogleFonts.unifrakturCook(textStyle: textTheme?.display2),
      display1: GoogleFonts.unifrakturCook(textStyle: textTheme?.display1),
      headline: GoogleFonts.unifrakturCook(textStyle: textTheme?.headline),
      title: GoogleFonts.unifrakturCook(textStyle: textTheme?.title),
      subhead: GoogleFonts.unifrakturCook(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unifrakturCook(textStyle: textTheme?.body2),
      body1: GoogleFonts.unifrakturCook(textStyle: textTheme?.body1),
      caption: GoogleFonts.unifrakturCook(textStyle: textTheme?.caption),
      button: GoogleFonts.unifrakturCook(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unifrakturCook(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unifrakturCook(textStyle: textTheme?.overline),
    );
  }

  /// Applies the UnifrakturMaguntia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/UnifrakturMaguntia
  static TextStyle unifrakturMaguntia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '760d5515a6a9a134ae422f5944056967d7e7d59e1e22b09f4c37caa548229534',
        71824,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UnifrakturMaguntia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the UnifrakturMaguntia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/UnifrakturMaguntia
  static TextTheme unifrakturMaguntiaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.display4),
      display3: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.display3),
      display2: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.display2),
      display1: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.display1),
      headline: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.headline),
      title: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.title),
      subhead: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.body2),
      body1: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.body1),
      caption: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.caption),
      button: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Unkempt font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unkempt
  static TextStyle unkempt({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd4f6b7d5ae22a39c55f20fa7871901f21fd6c60c5a788fcf578cf326216a1052',
        191984,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7fd27119b105972e2538d19f5b9fc686ccaf1e10de3d8c7ab7c7d3e0111700dd',
        190680,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Unkempt',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Unkempt font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unkempt
  static TextTheme unkemptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unkempt(textStyle: textTheme?.display4),
      display3: GoogleFonts.unkempt(textStyle: textTheme?.display3),
      display2: GoogleFonts.unkempt(textStyle: textTheme?.display2),
      display1: GoogleFonts.unkempt(textStyle: textTheme?.display1),
      headline: GoogleFonts.unkempt(textStyle: textTheme?.headline),
      title: GoogleFonts.unkempt(textStyle: textTheme?.title),
      subhead: GoogleFonts.unkempt(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unkempt(textStyle: textTheme?.body2),
      body1: GoogleFonts.unkempt(textStyle: textTheme?.body1),
      caption: GoogleFonts.unkempt(textStyle: textTheme?.caption),
      button: GoogleFonts.unkempt(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unkempt(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unkempt(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Unlock font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unlock
  static TextStyle unlock({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e9ad989b6ef86cedca3ed0f4a06cc4bb6fbf6dce9c2d5ccd288512d49e861de4',
        27032,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Unlock',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Unlock font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unlock
  static TextTheme unlockTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unlock(textStyle: textTheme?.display4),
      display3: GoogleFonts.unlock(textStyle: textTheme?.display3),
      display2: GoogleFonts.unlock(textStyle: textTheme?.display2),
      display1: GoogleFonts.unlock(textStyle: textTheme?.display1),
      headline: GoogleFonts.unlock(textStyle: textTheme?.headline),
      title: GoogleFonts.unlock(textStyle: textTheme?.title),
      subhead: GoogleFonts.unlock(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unlock(textStyle: textTheme?.body2),
      body1: GoogleFonts.unlock(textStyle: textTheme?.body1),
      caption: GoogleFonts.unlock(textStyle: textTheme?.caption),
      button: GoogleFonts.unlock(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unlock(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unlock(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Unna font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unna
  static TextStyle unna({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'aa20b27f175098965dc2897d6bb836199b5df9ae3a2e04ce93c359976f4ad15b',
        40900,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'adf583a9103ab9e6d88d247e15e1b9eee56b751099e349c84f7c344391ba5365',
        47428,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ea1c7e13a6450b0389fe43811640a115ceff510dce477813d552533bb8c2a1d',
        41572,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '2c998279cfb60a24fb17f126e193378afe16e6056a7b57ac4cd78b2047759fd8',
        48440,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Unna',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Unna font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unna
  static TextTheme unnaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unna(textStyle: textTheme?.display4),
      display3: GoogleFonts.unna(textStyle: textTheme?.display3),
      display2: GoogleFonts.unna(textStyle: textTheme?.display2),
      display1: GoogleFonts.unna(textStyle: textTheme?.display1),
      headline: GoogleFonts.unna(textStyle: textTheme?.headline),
      title: GoogleFonts.unna(textStyle: textTheme?.title),
      subhead: GoogleFonts.unna(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unna(textStyle: textTheme?.body2),
      body1: GoogleFonts.unna(textStyle: textTheme?.body1),
      caption: GoogleFonts.unna(textStyle: textTheme?.caption),
      button: GoogleFonts.unna(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unna(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unna(textStyle: textTheme?.overline),
    );
  }

  /// Applies the VT323 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/VT323
  static TextStyle vT323({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bb4e9d2d01d2cd1a001d4822ed239ffd38df2ee07a6a1f581288f34dbd2f4060',
        107768,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VT323',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the VT323 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/VT323
  static TextTheme vT323TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vT323(textStyle: textTheme?.display4),
      display3: GoogleFonts.vT323(textStyle: textTheme?.display3),
      display2: GoogleFonts.vT323(textStyle: textTheme?.display2),
      display1: GoogleFonts.vT323(textStyle: textTheme?.display1),
      headline: GoogleFonts.vT323(textStyle: textTheme?.headline),
      title: GoogleFonts.vT323(textStyle: textTheme?.title),
      subhead: GoogleFonts.vT323(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vT323(textStyle: textTheme?.body2),
      body1: GoogleFonts.vT323(textStyle: textTheme?.body1),
      caption: GoogleFonts.vT323(textStyle: textTheme?.caption),
      button: GoogleFonts.vT323(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vT323(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vT323(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vampiro One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vampiro+One
  static TextStyle vampiroOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'da13d8511c4c84999202a24524c1d204e28aa4fc7d38266b472306622f383317',
        21848,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VampiroOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vampiro One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vampiro+One
  static TextTheme vampiroOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vampiroOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.vampiroOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.vampiroOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.vampiroOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.vampiroOne(textStyle: textTheme?.headline),
      title: GoogleFonts.vampiroOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.vampiroOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vampiroOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.vampiroOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.vampiroOne(textStyle: textTheme?.caption),
      button: GoogleFonts.vampiroOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vampiroOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vampiroOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Varela font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Varela
  static TextStyle varela({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '96887ebd8375ca5af98d18cb1de4dbf2999792851119cd372a33470d59245222',
        103004,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Varela',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Varela font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Varela
  static TextTheme varelaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.varela(textStyle: textTheme?.display4),
      display3: GoogleFonts.varela(textStyle: textTheme?.display3),
      display2: GoogleFonts.varela(textStyle: textTheme?.display2),
      display1: GoogleFonts.varela(textStyle: textTheme?.display1),
      headline: GoogleFonts.varela(textStyle: textTheme?.headline),
      title: GoogleFonts.varela(textStyle: textTheme?.title),
      subhead: GoogleFonts.varela(textStyle: textTheme?.subhead),
      body2: GoogleFonts.varela(textStyle: textTheme?.body2),
      body1: GoogleFonts.varela(textStyle: textTheme?.body1),
      caption: GoogleFonts.varela(textStyle: textTheme?.caption),
      button: GoogleFonts.varela(textStyle: textTheme?.button),
      subtitle: GoogleFonts.varela(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.varela(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Varela Round font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Varela+Round
  static TextStyle varelaRound({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '23459f7eed93ae80137b9ac0c3c1ab000743c9c983fb7c14b6d5f3ceb8e4eb15',
        105652,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VarelaRound',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Varela Round font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Varela+Round
  static TextTheme varelaRoundTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.varelaRound(textStyle: textTheme?.display4),
      display3: GoogleFonts.varelaRound(textStyle: textTheme?.display3),
      display2: GoogleFonts.varelaRound(textStyle: textTheme?.display2),
      display1: GoogleFonts.varelaRound(textStyle: textTheme?.display1),
      headline: GoogleFonts.varelaRound(textStyle: textTheme?.headline),
      title: GoogleFonts.varelaRound(textStyle: textTheme?.title),
      subhead: GoogleFonts.varelaRound(textStyle: textTheme?.subhead),
      body2: GoogleFonts.varelaRound(textStyle: textTheme?.body2),
      body1: GoogleFonts.varelaRound(textStyle: textTheme?.body1),
      caption: GoogleFonts.varelaRound(textStyle: textTheme?.caption),
      button: GoogleFonts.varelaRound(textStyle: textTheme?.button),
      subtitle: GoogleFonts.varelaRound(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.varelaRound(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vast Shadow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vast+Shadow
  static TextStyle vastShadow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c7455e059437040326c4daa3043261ce959c3f096f26dbe670dec65d1a611705',
        62316,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VastShadow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vast Shadow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vast+Shadow
  static TextTheme vastShadowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vastShadow(textStyle: textTheme?.display4),
      display3: GoogleFonts.vastShadow(textStyle: textTheme?.display3),
      display2: GoogleFonts.vastShadow(textStyle: textTheme?.display2),
      display1: GoogleFonts.vastShadow(textStyle: textTheme?.display1),
      headline: GoogleFonts.vastShadow(textStyle: textTheme?.headline),
      title: GoogleFonts.vastShadow(textStyle: textTheme?.title),
      subhead: GoogleFonts.vastShadow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vastShadow(textStyle: textTheme?.body2),
      body1: GoogleFonts.vastShadow(textStyle: textTheme?.body1),
      caption: GoogleFonts.vastShadow(textStyle: textTheme?.caption),
      button: GoogleFonts.vastShadow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vastShadow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vastShadow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vesper Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vesper+Libre
  static TextStyle vesperLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '23ebf9650e07e0d9fc46ae2eba26ac2ec4ce96fb1c5dfe8d1e68697caa450075',
        165640,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0d1943717826e25f00193643ca5cef6a8e84d9949f43eea2e7fcbbcf7eac6472',
        167888,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c45aa4f922411d07c89ae4f96d05177e84e280aecdda0fdee999b1a617b4c1ce',
        167692,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0f6179f3446d68f20aa486aed461cc68f86028fd02217a13559a2bf5c3e60702',
        165240,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VesperLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vesper Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vesper+Libre
  static TextTheme vesperLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vesperLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.vesperLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.vesperLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.vesperLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.vesperLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.vesperLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.vesperLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vesperLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.vesperLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.vesperLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.vesperLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vesperLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vesperLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vibes font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vibes
  static TextStyle vibes({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '270c48b74a5e6a356c51d4c42ec0a6889691ba3d2ec03f0bbec16078d2ac9093',
        49952,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Vibes',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vibes font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vibes
  static TextTheme vibesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vibes(textStyle: textTheme?.display4),
      display3: GoogleFonts.vibes(textStyle: textTheme?.display3),
      display2: GoogleFonts.vibes(textStyle: textTheme?.display2),
      display1: GoogleFonts.vibes(textStyle: textTheme?.display1),
      headline: GoogleFonts.vibes(textStyle: textTheme?.headline),
      title: GoogleFonts.vibes(textStyle: textTheme?.title),
      subhead: GoogleFonts.vibes(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vibes(textStyle: textTheme?.body2),
      body1: GoogleFonts.vibes(textStyle: textTheme?.body1),
      caption: GoogleFonts.vibes(textStyle: textTheme?.caption),
      button: GoogleFonts.vibes(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vibes(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vibes(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vibur font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vibur
  static TextStyle vibur({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4a341a2553f7bac9bf3d756c88bdb1a67934839f2a343ef00268f04d641803f8',
        143772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Vibur',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vibur font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vibur
  static TextTheme viburTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vibur(textStyle: textTheme?.display4),
      display3: GoogleFonts.vibur(textStyle: textTheme?.display3),
      display2: GoogleFonts.vibur(textStyle: textTheme?.display2),
      display1: GoogleFonts.vibur(textStyle: textTheme?.display1),
      headline: GoogleFonts.vibur(textStyle: textTheme?.headline),
      title: GoogleFonts.vibur(textStyle: textTheme?.title),
      subhead: GoogleFonts.vibur(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vibur(textStyle: textTheme?.body2),
      body1: GoogleFonts.vibur(textStyle: textTheme?.body1),
      caption: GoogleFonts.vibur(textStyle: textTheme?.caption),
      button: GoogleFonts.vibur(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vibur(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vibur(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vidaloka font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vidaloka
  static TextStyle vidaloka({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '222cf887f6f4ef0661c73aee6ad041d0d4e6630c7d2bff7e851025a024b44cfd',
        104304,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Vidaloka',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vidaloka font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vidaloka
  static TextTheme vidalokaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vidaloka(textStyle: textTheme?.display4),
      display3: GoogleFonts.vidaloka(textStyle: textTheme?.display3),
      display2: GoogleFonts.vidaloka(textStyle: textTheme?.display2),
      display1: GoogleFonts.vidaloka(textStyle: textTheme?.display1),
      headline: GoogleFonts.vidaloka(textStyle: textTheme?.headline),
      title: GoogleFonts.vidaloka(textStyle: textTheme?.title),
      subhead: GoogleFonts.vidaloka(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vidaloka(textStyle: textTheme?.body2),
      body1: GoogleFonts.vidaloka(textStyle: textTheme?.body1),
      caption: GoogleFonts.vidaloka(textStyle: textTheme?.caption),
      button: GoogleFonts.vidaloka(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vidaloka(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vidaloka(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Viga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Viga
  static TextStyle viga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd85fc50295193b5956d4737878484d6ec2b1681053e75a2c986238285e1ac681',
        28388,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Viga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Viga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Viga
  static TextTheme vigaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.viga(textStyle: textTheme?.display4),
      display3: GoogleFonts.viga(textStyle: textTheme?.display3),
      display2: GoogleFonts.viga(textStyle: textTheme?.display2),
      display1: GoogleFonts.viga(textStyle: textTheme?.display1),
      headline: GoogleFonts.viga(textStyle: textTheme?.headline),
      title: GoogleFonts.viga(textStyle: textTheme?.title),
      subhead: GoogleFonts.viga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.viga(textStyle: textTheme?.body2),
      body1: GoogleFonts.viga(textStyle: textTheme?.body1),
      caption: GoogleFonts.viga(textStyle: textTheme?.caption),
      button: GoogleFonts.viga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.viga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.viga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Voces font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Voces
  static TextStyle voces({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0be995322d0fd8e055fc6d3cb9352a0c551e91531d41946d20c450fe3e4c20d8',
        65956,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Voces',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Voces font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Voces
  static TextTheme vocesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.voces(textStyle: textTheme?.display4),
      display3: GoogleFonts.voces(textStyle: textTheme?.display3),
      display2: GoogleFonts.voces(textStyle: textTheme?.display2),
      display1: GoogleFonts.voces(textStyle: textTheme?.display1),
      headline: GoogleFonts.voces(textStyle: textTheme?.headline),
      title: GoogleFonts.voces(textStyle: textTheme?.title),
      subhead: GoogleFonts.voces(textStyle: textTheme?.subhead),
      body2: GoogleFonts.voces(textStyle: textTheme?.body2),
      body1: GoogleFonts.voces(textStyle: textTheme?.body1),
      caption: GoogleFonts.voces(textStyle: textTheme?.caption),
      button: GoogleFonts.voces(textStyle: textTheme?.button),
      subtitle: GoogleFonts.voces(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.voces(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Volkhov font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Volkhov
  static TextStyle volkhov({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a3fa059553ab62381a8974ef60376b4bad0e91f2d72092094e74fb1c2fcca886',
        84908,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '7d27f866b8f11b00603bcc07b2e7ae49e4405fde4b3db227065ad57f92b8953c',
        84532,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f24fe6c57bdf816d9c6e09602548002ca61aca7eec23b40635c4a46f84347d47',
        84288,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '0db6f541c0e1a1f792feaacd69708e50b99aabf1ada6028e80fca14cfafe030c',
        85744,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Volkhov',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Volkhov font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Volkhov
  static TextTheme volkhovTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.volkhov(textStyle: textTheme?.display4),
      display3: GoogleFonts.volkhov(textStyle: textTheme?.display3),
      display2: GoogleFonts.volkhov(textStyle: textTheme?.display2),
      display1: GoogleFonts.volkhov(textStyle: textTheme?.display1),
      headline: GoogleFonts.volkhov(textStyle: textTheme?.headline),
      title: GoogleFonts.volkhov(textStyle: textTheme?.title),
      subhead: GoogleFonts.volkhov(textStyle: textTheme?.subhead),
      body2: GoogleFonts.volkhov(textStyle: textTheme?.body2),
      body1: GoogleFonts.volkhov(textStyle: textTheme?.body1),
      caption: GoogleFonts.volkhov(textStyle: textTheme?.caption),
      button: GoogleFonts.volkhov(textStyle: textTheme?.button),
      subtitle: GoogleFonts.volkhov(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.volkhov(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vollkorn font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vollkorn
  static TextStyle vollkorn({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9fd84335b1beb10505c201815682f7b543aa429a5a909e8b2126f15d36a0705a',
        262424,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '784ba33f30493ef78ca0217d7f6c243c8bf7bec2cd1b9c4d813af99941bf730e',
        271752,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d702c22f1d2ea4a1521efff825d5c362adca54b6fbe2343ab2ed6b7e2119610',
        276280,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '6cd6efd288ac8587690f7a7f5788bea147c0c5432224a04874dc4494a8691955',
        279348,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '14aa1fb5f42a8088a0d91ca54dbc7d6eea615db621929c7bdc35ae4a6c64fcb5',
        276384,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'ef717b899e1af61e2a62cfed23623b0d5c844e2745616be4a949bf84f6e7457e',
        279732,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '14e5d20d80ab9df765ef117415850050320fa766eb246296c67924737f88c2d1',
        272880,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '3953dfef7c1118f089612462105779d89da8f9df1aa11b74a8b2a58bb8359a44',
        272552,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Vollkorn',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vollkorn font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vollkorn
  static TextTheme vollkornTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vollkorn(textStyle: textTheme?.display4),
      display3: GoogleFonts.vollkorn(textStyle: textTheme?.display3),
      display2: GoogleFonts.vollkorn(textStyle: textTheme?.display2),
      display1: GoogleFonts.vollkorn(textStyle: textTheme?.display1),
      headline: GoogleFonts.vollkorn(textStyle: textTheme?.headline),
      title: GoogleFonts.vollkorn(textStyle: textTheme?.title),
      subhead: GoogleFonts.vollkorn(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vollkorn(textStyle: textTheme?.body2),
      body1: GoogleFonts.vollkorn(textStyle: textTheme?.body1),
      caption: GoogleFonts.vollkorn(textStyle: textTheme?.caption),
      button: GoogleFonts.vollkorn(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vollkorn(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vollkorn(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vollkorn SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vollkorn+SC
  static TextStyle vollkornSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '3a204e8e6e256d182887114991a86b3853bd7b370eb298c5c5358a4924e94326',
        145820,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c3f8bc857ab58e19ba62ee008373ba5b707f586065cc0a59e68cf3781b1075f5',
        150112,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0281449b729b1b8cb680dbcd00fd7d2e9d40ff24c858a834e3670997a561aea3',
        150144,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b95dc90d6b58551cd5cadf844986de95a70432ebf303eaf23270184113144a67',
        149088,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VollkornSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vollkorn SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vollkorn+SC
  static TextTheme vollkornSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vollkornSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.vollkornSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.vollkornSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.vollkornSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.vollkornSC(textStyle: textTheme?.headline),
      title: GoogleFonts.vollkornSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.vollkornSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vollkornSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.vollkornSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.vollkornSC(textStyle: textTheme?.caption),
      button: GoogleFonts.vollkornSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vollkornSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vollkornSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Voltaire font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Voltaire
  static TextStyle voltaire({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '8e446b1dcde5e45745bd6e82bfacf76b313042b232e4fceaa22d745f13e176d3',
        28800,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Voltaire',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Voltaire font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Voltaire
  static TextTheme voltaireTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.voltaire(textStyle: textTheme?.display4),
      display3: GoogleFonts.voltaire(textStyle: textTheme?.display3),
      display2: GoogleFonts.voltaire(textStyle: textTheme?.display2),
      display1: GoogleFonts.voltaire(textStyle: textTheme?.display1),
      headline: GoogleFonts.voltaire(textStyle: textTheme?.headline),
      title: GoogleFonts.voltaire(textStyle: textTheme?.title),
      subhead: GoogleFonts.voltaire(textStyle: textTheme?.subhead),
      body2: GoogleFonts.voltaire(textStyle: textTheme?.body2),
      body1: GoogleFonts.voltaire(textStyle: textTheme?.body1),
      caption: GoogleFonts.voltaire(textStyle: textTheme?.caption),
      button: GoogleFonts.voltaire(textStyle: textTheme?.button),
      subtitle: GoogleFonts.voltaire(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.voltaire(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Waiting for the Sunrise font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Waiting+for+the+Sunrise
  static TextStyle waitingfortheSunrise({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5d952514968d1ce922a541f2099d884967f1970682676c3f1cca1b4668f07ff1',
        57412,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WaitingfortheSunrise',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Waiting for the Sunrise font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Waiting+for+the+Sunrise
  static TextTheme waitingfortheSunriseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.headline),
      title: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.title),
      subhead: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.subhead),
      body2: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.body2),
      body1: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.body1),
      caption: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.caption),
      button: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Wallpoet font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wallpoet
  static TextStyle wallpoet({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9989a07c4d82441ed4366747a76f537b925a6d9f691e7b0cd97713bcac160b20',
        22488,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Wallpoet',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Wallpoet font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wallpoet
  static TextTheme wallpoetTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.wallpoet(textStyle: textTheme?.display4),
      display3: GoogleFonts.wallpoet(textStyle: textTheme?.display3),
      display2: GoogleFonts.wallpoet(textStyle: textTheme?.display2),
      display1: GoogleFonts.wallpoet(textStyle: textTheme?.display1),
      headline: GoogleFonts.wallpoet(textStyle: textTheme?.headline),
      title: GoogleFonts.wallpoet(textStyle: textTheme?.title),
      subhead: GoogleFonts.wallpoet(textStyle: textTheme?.subhead),
      body2: GoogleFonts.wallpoet(textStyle: textTheme?.body2),
      body1: GoogleFonts.wallpoet(textStyle: textTheme?.body1),
      caption: GoogleFonts.wallpoet(textStyle: textTheme?.caption),
      button: GoogleFonts.wallpoet(textStyle: textTheme?.button),
      subtitle: GoogleFonts.wallpoet(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.wallpoet(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Walter Turncoat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Walter+Turncoat
  static TextStyle walterTurncoat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ea002cd3a82b6686a400f26ba3da2fa47721b8300266adcc80cc3fbd52a86a3',
        153452,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WalterTurncoat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Walter Turncoat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Walter+Turncoat
  static TextTheme walterTurncoatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.walterTurncoat(textStyle: textTheme?.display4),
      display3: GoogleFonts.walterTurncoat(textStyle: textTheme?.display3),
      display2: GoogleFonts.walterTurncoat(textStyle: textTheme?.display2),
      display1: GoogleFonts.walterTurncoat(textStyle: textTheme?.display1),
      headline: GoogleFonts.walterTurncoat(textStyle: textTheme?.headline),
      title: GoogleFonts.walterTurncoat(textStyle: textTheme?.title),
      subhead: GoogleFonts.walterTurncoat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.walterTurncoat(textStyle: textTheme?.body2),
      body1: GoogleFonts.walterTurncoat(textStyle: textTheme?.body1),
      caption: GoogleFonts.walterTurncoat(textStyle: textTheme?.caption),
      button: GoogleFonts.walterTurncoat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.walterTurncoat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.walterTurncoat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Warnes font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Warnes
  static TextStyle warnes({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '509079dd5c127782c43242772c6a327f4e16ede0d28f7d18b01e7092b4e902c8',
        41620,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Warnes',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Warnes font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Warnes
  static TextTheme warnesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.warnes(textStyle: textTheme?.display4),
      display3: GoogleFonts.warnes(textStyle: textTheme?.display3),
      display2: GoogleFonts.warnes(textStyle: textTheme?.display2),
      display1: GoogleFonts.warnes(textStyle: textTheme?.display1),
      headline: GoogleFonts.warnes(textStyle: textTheme?.headline),
      title: GoogleFonts.warnes(textStyle: textTheme?.title),
      subhead: GoogleFonts.warnes(textStyle: textTheme?.subhead),
      body2: GoogleFonts.warnes(textStyle: textTheme?.body2),
      body1: GoogleFonts.warnes(textStyle: textTheme?.body1),
      caption: GoogleFonts.warnes(textStyle: textTheme?.caption),
      button: GoogleFonts.warnes(textStyle: textTheme?.button),
      subtitle: GoogleFonts.warnes(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.warnes(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Wellfleet font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wellfleet
  static TextStyle wellfleet({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9bdc76fbcd0c8aa30aa62c892008d4e6cf4a7df66502008137949866fc091693',
        81992,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Wellfleet',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Wellfleet font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wellfleet
  static TextTheme wellfleetTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.wellfleet(textStyle: textTheme?.display4),
      display3: GoogleFonts.wellfleet(textStyle: textTheme?.display3),
      display2: GoogleFonts.wellfleet(textStyle: textTheme?.display2),
      display1: GoogleFonts.wellfleet(textStyle: textTheme?.display1),
      headline: GoogleFonts.wellfleet(textStyle: textTheme?.headline),
      title: GoogleFonts.wellfleet(textStyle: textTheme?.title),
      subhead: GoogleFonts.wellfleet(textStyle: textTheme?.subhead),
      body2: GoogleFonts.wellfleet(textStyle: textTheme?.body2),
      body1: GoogleFonts.wellfleet(textStyle: textTheme?.body1),
      caption: GoogleFonts.wellfleet(textStyle: textTheme?.caption),
      button: GoogleFonts.wellfleet(textStyle: textTheme?.button),
      subtitle: GoogleFonts.wellfleet(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.wellfleet(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Wendy One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wendy+One
  static TextStyle wendyOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dea9bd8409f75210fc0600c72f08d7b21019e5e663c7dcff913dc8f003587379',
        22724,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WendyOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Wendy One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wendy+One
  static TextTheme wendyOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.wendyOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.wendyOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.wendyOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.wendyOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.wendyOne(textStyle: textTheme?.headline),
      title: GoogleFonts.wendyOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.wendyOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.wendyOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.wendyOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.wendyOne(textStyle: textTheme?.caption),
      button: GoogleFonts.wendyOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.wendyOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.wendyOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Wire One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wire+One
  static TextStyle wireOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6d9ba7749b319a53d24a41f6cbfd1b376305caee6bb226d4fb76fa6c9ccb2737',
        44392,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WireOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Wire One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wire+One
  static TextTheme wireOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.wireOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.wireOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.wireOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.wireOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.wireOne(textStyle: textTheme?.headline),
      title: GoogleFonts.wireOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.wireOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.wireOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.wireOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.wireOne(textStyle: textTheme?.caption),
      button: GoogleFonts.wireOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.wireOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.wireOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Work Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Work+Sans
  static TextStyle workSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '54ff7c3cb9bfd181e1d18d089ab9bba3059dd6f49d35bfde19c23e0920ec6f2c',
        101768,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1fa02ec2601b669a35f4c2d946f2e52353bcf619ad2a080c8786f607f013359c',
        103092,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '63d2d7d98c9844e182c80865616936a3c0e95d9c9b7097e09401ccc07723afa7',
        102672,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cf9e214b6a140d6d260a7a91283acecf80168bd0b46628222447e9b5e01300a2',
        99188,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '1ca28e13541a38be971563ecc74ed68ad07134d3ea3afe92a9c120783868b69d',
        104640,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a7415d89db9339059ee631263f3cd47af702c172d1b020fa359df0e5a4930e6b',
        104368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd41209fc541bdf9f9bac4659e46565edc93459f6c6f7213015af82b7d3e7e00b',
        103884,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c9cca774aabfe453b9c2759953dedeb20f16d6eb28c0ba7690a170580c338d72',
        104120,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '7cdc1c327ea835b192ef17b0f0bff1a16fc58f8ab00bc318b41912f4758b2905',
        97388,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WorkSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Work Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Work+Sans
  static TextTheme workSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.workSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.workSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.workSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.workSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.workSans(textStyle: textTheme?.headline),
      title: GoogleFonts.workSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.workSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.workSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.workSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.workSans(textStyle: textTheme?.caption),
      button: GoogleFonts.workSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.workSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.workSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yanone Kaffeesatz font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yanone+Kaffeesatz
  static TextStyle yanoneKaffeesatz({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w200,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9805245cc2de9c8da9ae786c7e17ac2da9f93c7b2ba3cc8f481e28eb05146193',
        73564,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd9ed8432723bd4d507a98d52dc50b9852ac3d6456e0fbcf9bf639b19982af563',
        83844,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'c590a52e12f62af4fec495eae613bff7aa7763fb2c5bec48e1db96503ba91c1b',
        84008,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '5245342d46c5e01aaa2e808a7962687a57c7ffaad83ff05db327e9fbf28d79c0',
        84004,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YanoneKaffeesatz',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yanone Kaffeesatz font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yanone+Kaffeesatz
  static TextTheme yanoneKaffeesatzTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.display4),
      display3: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.display3),
      display2: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.display2),
      display1: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.display1),
      headline: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.headline),
      title: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.title),
      subhead: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.body2),
      body1: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.body1),
      caption: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.caption),
      button: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yantramanav font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yantramanav
  static TextStyle yantramanav({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w100,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '86689d7a0f2e854d67499f3b138d736bbc906760e4ce2965a494ede2bd7bebca',
        101432,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '4ab0f6ae96b7ee1e64385a964c2e10db696f46e64a3c7e9966131d0a0e2d4584',
        99760,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '41c02d7da7c104c3ea5207122b178f4cbcf308b4911dbc4e4a460b23ba64f09e',
        99620,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '14362b0efe1ebbde59b45ed4e1f345c1a41e777d03fce97684b6bd8b67ecc385',
        98608,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6036c39566fdfe4d7a96f8959775282729df41c691b5791efb80a530d96732e6',
        99004,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '117b18180127afc0bb9a28d0aa5d5aa9bcd8090b84d34a9adf571661c1896578',
        98880,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Yantramanav',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yantramanav font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yantramanav
  static TextTheme yantramanavTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yantramanav(textStyle: textTheme?.display4),
      display3: GoogleFonts.yantramanav(textStyle: textTheme?.display3),
      display2: GoogleFonts.yantramanav(textStyle: textTheme?.display2),
      display1: GoogleFonts.yantramanav(textStyle: textTheme?.display1),
      headline: GoogleFonts.yantramanav(textStyle: textTheme?.headline),
      title: GoogleFonts.yantramanav(textStyle: textTheme?.title),
      subhead: GoogleFonts.yantramanav(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yantramanav(textStyle: textTheme?.body2),
      body1: GoogleFonts.yantramanav(textStyle: textTheme?.body1),
      caption: GoogleFonts.yantramanav(textStyle: textTheme?.caption),
      button: GoogleFonts.yantramanav(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yantramanav(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yantramanav(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yatra One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yatra+One
  static TextStyle yatraOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '91d2a8a128a89559c899d8149591b1704546ba00b04c2d0f50dd252f57a00bfb',
        204892,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YatraOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yatra One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yatra+One
  static TextTheme yatraOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yatraOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.yatraOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.yatraOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.yatraOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.yatraOne(textStyle: textTheme?.headline),
      title: GoogleFonts.yatraOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.yatraOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yatraOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.yatraOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.yatraOne(textStyle: textTheme?.caption),
      button: GoogleFonts.yatraOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yatraOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yatraOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yellowtail font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yellowtail
  static TextStyle yellowtail({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f5afc3345b05f159df8c09f953eacbf365a0d81f5cecccb4fa7b7407284baca9',
        62400,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Yellowtail',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yellowtail font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yellowtail
  static TextTheme yellowtailTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yellowtail(textStyle: textTheme?.display4),
      display3: GoogleFonts.yellowtail(textStyle: textTheme?.display3),
      display2: GoogleFonts.yellowtail(textStyle: textTheme?.display2),
      display1: GoogleFonts.yellowtail(textStyle: textTheme?.display1),
      headline: GoogleFonts.yellowtail(textStyle: textTheme?.headline),
      title: GoogleFonts.yellowtail(textStyle: textTheme?.title),
      subhead: GoogleFonts.yellowtail(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yellowtail(textStyle: textTheme?.body2),
      body1: GoogleFonts.yellowtail(textStyle: textTheme?.body1),
      caption: GoogleFonts.yellowtail(textStyle: textTheme?.caption),
      button: GoogleFonts.yellowtail(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yellowtail(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yellowtail(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yeon Sung font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yeon+Sung
  static TextStyle yeonSung({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'cc6d366c352d7d897155bde07516cd01c0fcd308ff28d0d6545d6634046cecec',
        1698768,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YeonSung',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yeon Sung font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yeon+Sung
  static TextTheme yeonSungTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yeonSung(textStyle: textTheme?.display4),
      display3: GoogleFonts.yeonSung(textStyle: textTheme?.display3),
      display2: GoogleFonts.yeonSung(textStyle: textTheme?.display2),
      display1: GoogleFonts.yeonSung(textStyle: textTheme?.display1),
      headline: GoogleFonts.yeonSung(textStyle: textTheme?.headline),
      title: GoogleFonts.yeonSung(textStyle: textTheme?.title),
      subhead: GoogleFonts.yeonSung(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yeonSung(textStyle: textTheme?.body2),
      body1: GoogleFonts.yeonSung(textStyle: textTheme?.body1),
      caption: GoogleFonts.yeonSung(textStyle: textTheme?.caption),
      button: GoogleFonts.yeonSung(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yeonSung(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yeonSung(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yeseva One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yeseva+One
  static TextStyle yesevaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '326eec1af27e3634bbf470c04d8127d985571a07b5b79696eb6424489e27e106',
        74612,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YesevaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yeseva One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yeseva+One
  static TextTheme yesevaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yesevaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.yesevaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.yesevaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.yesevaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.yesevaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.yesevaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.yesevaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yesevaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.yesevaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.yesevaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.yesevaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yesevaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yesevaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yesteryear font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yesteryear
  static TextStyle yesteryear({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'de930d7a2b4adea15c08668114a1672322e74ae93b6b134e78a953c6789ea86d',
        64440,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Yesteryear',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yesteryear font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yesteryear
  static TextTheme yesteryearTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yesteryear(textStyle: textTheme?.display4),
      display3: GoogleFonts.yesteryear(textStyle: textTheme?.display3),
      display2: GoogleFonts.yesteryear(textStyle: textTheme?.display2),
      display1: GoogleFonts.yesteryear(textStyle: textTheme?.display1),
      headline: GoogleFonts.yesteryear(textStyle: textTheme?.headline),
      title: GoogleFonts.yesteryear(textStyle: textTheme?.title),
      subhead: GoogleFonts.yesteryear(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yesteryear(textStyle: textTheme?.body2),
      body1: GoogleFonts.yesteryear(textStyle: textTheme?.body1),
      caption: GoogleFonts.yesteryear(textStyle: textTheme?.caption),
      button: GoogleFonts.yesteryear(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yesteryear(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yesteryear(textStyle: textTheme?.overline),
    );
  }

  /// Applies the YouTube Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/YouTube+Sans
  static TextStyle youTubeSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '30587ecdfa49b615fb90b795bf7fe1f33f74878d31148df133cc6c5991fcee9d',
        89096,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'ce15e23d7d5e1f3f06ac106c4b8808826b3394af47478cab1f29781ad0d6aef9',
        90240,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e8d2c4f413e4310c6dce6fa2c905d72273c9280d52254e351f20d7d3cf4927f3',
        90160,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '2820f771c0b841157fe653c73673f2799d42fb1c4afe41fd17920ee2253af139',
        90000,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f4c3b06aadc4767c94802502555eeadf4791746252dee142cb705282cac859d6',
        89768,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '684e166e76ee9798a5a9f5475f86603c3f3820d0f0315e5f601e43afae6ae21f',
        89980,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '31ac6ee3d11c108ae08600387c9afa34d4ccf7d0e4394d6f609b3a1255222658',
        89392,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YouTubeSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the YouTube Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/YouTube+Sans
  static TextTheme youTubeSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.youTubeSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.youTubeSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.youTubeSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.youTubeSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.youTubeSans(textStyle: textTheme?.headline),
      title: GoogleFonts.youTubeSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.youTubeSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.youTubeSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.youTubeSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.youTubeSans(textStyle: textTheme?.caption),
      button: GoogleFonts.youTubeSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.youTubeSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.youTubeSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the YouTube Sans Dark font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/YouTube+Sans+Dark
  static TextStyle youTubeSansDark({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'a1db48b4890e68f0f8c76f7c7ca5a68d4be0056d0aad70390f3d5ecea394f10d',
        90068,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '501a88ff51134889a4fb2aee3c3370cec72ae69050b181ea176c92a67a1fb142',
        90444,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '271a0143c77b32bb607f5fad53068a92bdef162fb6a7ba6ce166ede3a620634e',
        90284,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'd067938078413914bdf0a47becb29a11981a2e1ff713e871831c9296cdac0b71',
        90456,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '65b3bea036acd46a06cfa8dd368448da7747e4cffc0e7322b97633f14f385709',
        90180,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w800,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9d15087fb12ec414770509d22cc039bb7fdc0b798e775b94861469d3a7302ebc',
        90184,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w900,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '815dd9f60a79aa938e5b34d31f733ead19f20aa2c6a1b351fd22704394c08132',
        89772,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YouTubeSansDark',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the YouTube Sans Dark font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/YouTube+Sans+Dark
  static TextTheme youTubeSansDarkTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.youTubeSansDark(textStyle: textTheme?.display4),
      display3: GoogleFonts.youTubeSansDark(textStyle: textTheme?.display3),
      display2: GoogleFonts.youTubeSansDark(textStyle: textTheme?.display2),
      display1: GoogleFonts.youTubeSansDark(textStyle: textTheme?.display1),
      headline: GoogleFonts.youTubeSansDark(textStyle: textTheme?.headline),
      title: GoogleFonts.youTubeSansDark(textStyle: textTheme?.title),
      subhead: GoogleFonts.youTubeSansDark(textStyle: textTheme?.subhead),
      body2: GoogleFonts.youTubeSansDark(textStyle: textTheme?.body2),
      body1: GoogleFonts.youTubeSansDark(textStyle: textTheme?.body1),
      caption: GoogleFonts.youTubeSansDark(textStyle: textTheme?.caption),
      button: GoogleFonts.youTubeSansDark(textStyle: textTheme?.button),
      subtitle: GoogleFonts.youTubeSansDark(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.youTubeSansDark(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yrsa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yrsa
  static TextStyle yrsa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'b942444580e24561d6008f08b6b3145662d902d140408e9f6c92ee7cd5affa00',
        57928,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '9782370d37625db345595b8f48ae5156b4c8256cd4867b119af3114faa566686',
        58404,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '61c4e4c03498db5ec4f926576603b2102fac9f90b73b7aafe7e6ebadc30444b0',
        58364,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dd8f96acf795a40fc16730d309bc4a64f1f21d96ac4e93763611cee5539b77f9',
        58352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '94de8af1023c6dab0ffcb86966c85582afca7392a0c3377cd0f1cb536c9d095c',
        58252,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Yrsa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yrsa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yrsa
  static TextTheme yrsaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yrsa(textStyle: textTheme?.display4),
      display3: GoogleFonts.yrsa(textStyle: textTheme?.display3),
      display2: GoogleFonts.yrsa(textStyle: textTheme?.display2),
      display1: GoogleFonts.yrsa(textStyle: textTheme?.display1),
      headline: GoogleFonts.yrsa(textStyle: textTheme?.headline),
      title: GoogleFonts.yrsa(textStyle: textTheme?.title),
      subhead: GoogleFonts.yrsa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yrsa(textStyle: textTheme?.body2),
      body1: GoogleFonts.yrsa(textStyle: textTheme?.body1),
      caption: GoogleFonts.yrsa(textStyle: textTheme?.caption),
      button: GoogleFonts.yrsa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yrsa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yrsa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the ZCOOL KuaiLe font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+KuaiLe
  static TextStyle zCOOLKuaiLe({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0809b4605f58fdd321743ae7e5b76d4ac6c2153fe0b5b7185dd12c1974659c00',
        1509564,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZCOOLKuaiLe',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the ZCOOL KuaiLe font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+KuaiLe
  static TextTheme zCOOLKuaiLeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.display4),
      display3: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.display3),
      display2: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.display2),
      display1: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.display1),
      headline: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.headline),
      title: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.title),
      subhead: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.body2),
      body1: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.body1),
      caption: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.caption),
      button: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.overline),
    );
  }

  /// Applies the ZCOOL QingKe HuangYou font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+QingKe+HuangYou
  static TextStyle zCOOLQingKeHuangYou({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dca9156773f9e058aafeaded91d3d5e64e41a67187907e37a66210e708d3dc73',
        5827424,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZCOOLQingKeHuangYou',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the ZCOOL QingKe HuangYou font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+QingKe+HuangYou
  static TextTheme zCOOLQingKeHuangYouTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.display4),
      display3: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.display3),
      display2: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.display2),
      display1: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.display1),
      headline: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.headline),
      title: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.title),
      subhead: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.body2),
      body1: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.body1),
      caption: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.caption),
      button: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.overline),
    );
  }

  /// Applies the ZCOOL XiaoWei font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+XiaoWei
  static TextStyle zCOOLXiaoWei({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'e00b956bf9846285496c54d15ad3e2d6302a4c7d6f7a09c4afd4827744d626e9',
        3917592,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZCOOLXiaoWei',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the ZCOOL XiaoWei font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+XiaoWei
  static TextTheme zCOOLXiaoWeiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.display4),
      display3: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.display3),
      display2: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.display2),
      display1: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.display1),
      headline: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.headline),
      title: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.title),
      subhead: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.body2),
      body1: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.body1),
      caption: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.caption),
      button: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Zeyada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zeyada
  static TextStyle zeyada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '06ad6445bf0014c963d0b72e3dcd1defc66132033878f2b1cee5be9bdb807c93',
        63040,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Zeyada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Zeyada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zeyada
  static TextTheme zeyadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zeyada(textStyle: textTheme?.display4),
      display3: GoogleFonts.zeyada(textStyle: textTheme?.display3),
      display2: GoogleFonts.zeyada(textStyle: textTheme?.display2),
      display1: GoogleFonts.zeyada(textStyle: textTheme?.display1),
      headline: GoogleFonts.zeyada(textStyle: textTheme?.headline),
      title: GoogleFonts.zeyada(textStyle: textTheme?.title),
      subhead: GoogleFonts.zeyada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zeyada(textStyle: textTheme?.body2),
      body1: GoogleFonts.zeyada(textStyle: textTheme?.body1),
      caption: GoogleFonts.zeyada(textStyle: textTheme?.caption),
      button: GoogleFonts.zeyada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zeyada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zeyada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Zhi Mang Xing font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zhi+Mang+Xing
  static TextStyle zhiMangXing({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f1191a3228f8532e0c3269311dad5b9b1fcdc6dbcfe7f9e3cc506a30fda24d1b',
        4051716,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZhiMangXing',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Zhi Mang Xing font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zhi+Mang+Xing
  static TextTheme zhiMangXingTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zhiMangXing(textStyle: textTheme?.display4),
      display3: GoogleFonts.zhiMangXing(textStyle: textTheme?.display3),
      display2: GoogleFonts.zhiMangXing(textStyle: textTheme?.display2),
      display1: GoogleFonts.zhiMangXing(textStyle: textTheme?.display1),
      headline: GoogleFonts.zhiMangXing(textStyle: textTheme?.headline),
      title: GoogleFonts.zhiMangXing(textStyle: textTheme?.title),
      subhead: GoogleFonts.zhiMangXing(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zhiMangXing(textStyle: textTheme?.body2),
      body1: GoogleFonts.zhiMangXing(textStyle: textTheme?.body1),
      caption: GoogleFonts.zhiMangXing(textStyle: textTheme?.caption),
      button: GoogleFonts.zhiMangXing(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zhiMangXing(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zhiMangXing(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Zilla Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zilla+Slab
  static TextStyle zillaSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '37849ab854bf1dfd4a6d1cf5fe02365f214a0b5230a2473ddba5beea422d42c1',
        177352,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w300,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'f805ebf60f65467cf901f63c9e81742e68857ccd9321f154a664dc86e4f74d04',
        183780,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '6800e794aef26166782eccbaea44836363524c049b943e1ff5e7f3c662ee15db',
        177856,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '877668221b5887330f20b0c49f66807696026ce3edcc2930f86a6681f8bb0b66',
        185116,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'f84370da8e3c9d4ff36363df373f16bd9dff9bc4fec9d1bd98c58e5450fe7a94',
        177808,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w500,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        '382cc00753755b73c9b5c3c729fc28e639a7f0ec05d7f4f1eb078bed8b053e2c',
        185368,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        '0f65abeeaa62b1131fa31eb90d1ac6630bc73de55414482fd373559e7c8b56d2',
        177848,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w600,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'e893fedd56d416197cd6fb662dee7a611d5a5fc4216d271fa075316524ea4ff4',
        185160,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'bc0bb0d6f2a2f1edd4520a1e0e6fc779921dd929b7343dc03450a80ca514bb03',
        178644,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.italic,
      ): GoogleFontsFile(
        'd65ad541dbb872b4bd977f2dbfdf396a44ac0ec063b7921aba6e76dda85a4b05',
        185704,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZillaSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Zilla Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zilla+Slab
  static TextTheme zillaSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zillaSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.zillaSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.zillaSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.zillaSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.zillaSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.zillaSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.zillaSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zillaSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.zillaSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.zillaSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.zillaSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zillaSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zillaSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Zilla Slab Highlight font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zilla+Slab+Highlight
  static TextStyle zillaSlabHighlight({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, GoogleFontsFile>{
      GoogleFontsVariant(
        fontWeight: FontWeight.w400,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'dbd546264c0d549b6c3cd17c1acf40b35bbe910885e09b5e2a270aa090b6ee53',
        71996,
      ),
      GoogleFontsVariant(
        fontWeight: FontWeight.w700,
        fontStyle: FontStyle.normal,
      ): GoogleFontsFile(
        'be3605b5e26a2439fde6293b4159f4c401273e65483cab10505e6c4010523ece',
        71064,
      ),
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZillaSlabHighlight',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Zilla Slab Highlight font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zilla+Slab+Highlight
  static TextTheme zillaSlabHighlightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.display4),
      display3: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.display3),
      display2: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.display2),
      display1: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.display1),
      headline: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.headline),
      title: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.title),
      subhead: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.body2),
      body1: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.body1),
      caption: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.caption),
      button: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.overline),
    );
  }
}

// GENERATED CODE - DO NOT EDIT

// Copyright 2019 The Flutter team. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// WARNING: This package is experimental and should not be used in production.

import 'dart:ui' as ui;
import 'package:flutter/material.dart';
import 'src/google_fonts_base.dart';
import 'src/google_fonts_variant.dart';

class GoogleFonts {
  /// Applies the ABeeZee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ABeeZee
  static TextStyle aBeeZee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/abeezee/v13/esDR31xSG-6AGleN6tKukbcHCpE.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/abeezee/v13/esDT31xSG-6AGleN2tCklZUCGpG-GQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ABeeZee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the ABeeZee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ABeeZee
  static TextTheme aBeeZeeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aBeeZee(textStyle: textTheme?.display4),
      display3: GoogleFonts.aBeeZee(textStyle: textTheme?.display3),
      display2: GoogleFonts.aBeeZee(textStyle: textTheme?.display2),
      display1: GoogleFonts.aBeeZee(textStyle: textTheme?.display1),
      headline: GoogleFonts.aBeeZee(textStyle: textTheme?.headline),
      title: GoogleFonts.aBeeZee(textStyle: textTheme?.title),
      subhead: GoogleFonts.aBeeZee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aBeeZee(textStyle: textTheme?.body2),
      body1: GoogleFonts.aBeeZee(textStyle: textTheme?.body1),
      caption: GoogleFonts.aBeeZee(textStyle: textTheme?.caption),
      button: GoogleFonts.aBeeZee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aBeeZee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aBeeZee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Abel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abel
  static TextStyle abel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/abel/v10/MwQ5bhbm2POE6VhLPJp6qGI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Abel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Abel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abel
  static TextTheme abelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.abel(textStyle: textTheme?.display4),
      display3: GoogleFonts.abel(textStyle: textTheme?.display3),
      display2: GoogleFonts.abel(textStyle: textTheme?.display2),
      display1: GoogleFonts.abel(textStyle: textTheme?.display1),
      headline: GoogleFonts.abel(textStyle: textTheme?.headline),
      title: GoogleFonts.abel(textStyle: textTheme?.title),
      subhead: GoogleFonts.abel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.abel(textStyle: textTheme?.body2),
      body1: GoogleFonts.abel(textStyle: textTheme?.body1),
      caption: GoogleFonts.abel(textStyle: textTheme?.caption),
      button: GoogleFonts.abel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.abel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.abel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Abhaya Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abhaya+Libre
  static TextStyle abhayaLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/abhayalibre/v5/e3tmeuGtX-Co5MNzeAOqinEge0PWovdU4w.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/abhayalibre/v5/e3t5euGtX-Co5MNzeAOqinEYj2ryqtxI6oYtBA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/abhayalibre/v5/e3t5euGtX-Co5MNzeAOqinEYo23yqtxI6oYtBA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/abhayalibre/v5/e3t5euGtX-Co5MNzeAOqinEYx2zyqtxI6oYtBA.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/abhayalibre/v5/e3t5euGtX-Co5MNzeAOqinEY22_yqtxI6oYtBA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AbhayaLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Abhaya Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abhaya+Libre
  static TextTheme abhayaLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.abhayaLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.abhayaLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.abhayaLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.abhayaLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.abhayaLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.abhayaLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.abhayaLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.abhayaLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.abhayaLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.abhayaLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.abhayaLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.abhayaLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.abhayaLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Abril Fatface font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abril+Fatface
  static TextStyle abrilFatface({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/abrilfatface/v11/zOL64pLDlL1D99S8g8PtiKchm-BsjOLhZBY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AbrilFatface',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Abril Fatface font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Abril+Fatface
  static TextTheme abrilFatfaceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.abrilFatface(textStyle: textTheme?.display4),
      display3: GoogleFonts.abrilFatface(textStyle: textTheme?.display3),
      display2: GoogleFonts.abrilFatface(textStyle: textTheme?.display2),
      display1: GoogleFonts.abrilFatface(textStyle: textTheme?.display1),
      headline: GoogleFonts.abrilFatface(textStyle: textTheme?.headline),
      title: GoogleFonts.abrilFatface(textStyle: textTheme?.title),
      subhead: GoogleFonts.abrilFatface(textStyle: textTheme?.subhead),
      body2: GoogleFonts.abrilFatface(textStyle: textTheme?.body2),
      body1: GoogleFonts.abrilFatface(textStyle: textTheme?.body1),
      caption: GoogleFonts.abrilFatface(textStyle: textTheme?.caption),
      button: GoogleFonts.abrilFatface(textStyle: textTheme?.button),
      subtitle: GoogleFonts.abrilFatface(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.abrilFatface(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aclonica font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aclonica
  static TextStyle aclonica({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/aclonica/v10/K2FyfZJVlfNNSEBXGb7TCI6oBjLz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aclonica',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aclonica font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aclonica
  static TextTheme aclonicaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aclonica(textStyle: textTheme?.display4),
      display3: GoogleFonts.aclonica(textStyle: textTheme?.display3),
      display2: GoogleFonts.aclonica(textStyle: textTheme?.display2),
      display1: GoogleFonts.aclonica(textStyle: textTheme?.display1),
      headline: GoogleFonts.aclonica(textStyle: textTheme?.headline),
      title: GoogleFonts.aclonica(textStyle: textTheme?.title),
      subhead: GoogleFonts.aclonica(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aclonica(textStyle: textTheme?.body2),
      body1: GoogleFonts.aclonica(textStyle: textTheme?.body1),
      caption: GoogleFonts.aclonica(textStyle: textTheme?.caption),
      button: GoogleFonts.aclonica(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aclonica(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aclonica(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Acme font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Acme
  static TextStyle acme({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/acme/v9/RrQfboBx-C5_bx3Lb23lzLk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Acme',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Acme font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Acme
  static TextTheme acmeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.acme(textStyle: textTheme?.display4),
      display3: GoogleFonts.acme(textStyle: textTheme?.display3),
      display2: GoogleFonts.acme(textStyle: textTheme?.display2),
      display1: GoogleFonts.acme(textStyle: textTheme?.display1),
      headline: GoogleFonts.acme(textStyle: textTheme?.headline),
      title: GoogleFonts.acme(textStyle: textTheme?.title),
      subhead: GoogleFonts.acme(textStyle: textTheme?.subhead),
      body2: GoogleFonts.acme(textStyle: textTheme?.body2),
      body1: GoogleFonts.acme(textStyle: textTheme?.body1),
      caption: GoogleFonts.acme(textStyle: textTheme?.caption),
      button: GoogleFonts.acme(textStyle: textTheme?.button),
      subtitle: GoogleFonts.acme(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.acme(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Actor font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Actor
  static TextStyle actor({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/actor/v9/wEOzEBbCkc5cO3ekXygtUMIO.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Actor',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Actor font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Actor
  static TextTheme actorTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.actor(textStyle: textTheme?.display4),
      display3: GoogleFonts.actor(textStyle: textTheme?.display3),
      display2: GoogleFonts.actor(textStyle: textTheme?.display2),
      display1: GoogleFonts.actor(textStyle: textTheme?.display1),
      headline: GoogleFonts.actor(textStyle: textTheme?.headline),
      title: GoogleFonts.actor(textStyle: textTheme?.title),
      subhead: GoogleFonts.actor(textStyle: textTheme?.subhead),
      body2: GoogleFonts.actor(textStyle: textTheme?.body2),
      body1: GoogleFonts.actor(textStyle: textTheme?.body1),
      caption: GoogleFonts.actor(textStyle: textTheme?.caption),
      button: GoogleFonts.actor(textStyle: textTheme?.button),
      subtitle: GoogleFonts.actor(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.actor(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Adamina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Adamina
  static TextStyle adamina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/adamina/v13/j8_r6-DH1bjoc-dwu-reETl4Bno.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Adamina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Adamina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Adamina
  static TextTheme adaminaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.adamina(textStyle: textTheme?.display4),
      display3: GoogleFonts.adamina(textStyle: textTheme?.display3),
      display2: GoogleFonts.adamina(textStyle: textTheme?.display2),
      display1: GoogleFonts.adamina(textStyle: textTheme?.display1),
      headline: GoogleFonts.adamina(textStyle: textTheme?.headline),
      title: GoogleFonts.adamina(textStyle: textTheme?.title),
      subhead: GoogleFonts.adamina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.adamina(textStyle: textTheme?.body2),
      body1: GoogleFonts.adamina(textStyle: textTheme?.body1),
      caption: GoogleFonts.adamina(textStyle: textTheme?.caption),
      button: GoogleFonts.adamina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.adamina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.adamina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Advent Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Advent+Pro
  static TextStyle adventPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/adventpro/v10/V8mCoQfxVT4Dvddr_yOwjVmtLZxcBtItFw.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/adventpro/v10/V8mDoQfxVT4Dvddr_yOwjfWMDbZyCts0DqQ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/adventpro/v10/V8mDoQfxVT4Dvddr_yOwjZGPDbZyCts0DqQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/adventpro/v10/V8mAoQfxVT4Dvddr_yOwtT2nKb5ZFtI.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/adventpro/v10/V8mDoQfxVT4Dvddr_yOwjcmODbZyCts0DqQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/adventpro/v10/V8mDoQfxVT4Dvddr_yOwjeWJDbZyCts0DqQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/adventpro/v10/V8mDoQfxVT4Dvddr_yOwjYGIDbZyCts0DqQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AdventPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Advent Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Advent+Pro
  static TextTheme adventProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.adventPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.adventPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.adventPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.adventPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.adventPro(textStyle: textTheme?.headline),
      title: GoogleFonts.adventPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.adventPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.adventPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.adventPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.adventPro(textStyle: textTheme?.caption),
      button: GoogleFonts.adventPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.adventPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.adventPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aguafina Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aguafina+Script
  static TextStyle aguafinaScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/aguafinascript/v8/If2QXTv_ZzSxGIO30LemWEOmt1bHqs4pgicOrg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AguafinaScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aguafina Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aguafina+Script
  static TextTheme aguafinaScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aguafinaScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.aguafinaScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.aguafinaScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.aguafinaScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.aguafinaScript(textStyle: textTheme?.headline),
      title: GoogleFonts.aguafinaScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.aguafinaScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aguafinaScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.aguafinaScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.aguafinaScript(textStyle: textTheme?.caption),
      button: GoogleFonts.aguafinaScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aguafinaScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aguafinaScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Akronim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Akronim
  static TextStyle akronim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/akronim/v9/fdN-9sqWtWZZlHRp-gBxkFYN-a8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Akronim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Akronim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Akronim
  static TextTheme akronimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.akronim(textStyle: textTheme?.display4),
      display3: GoogleFonts.akronim(textStyle: textTheme?.display3),
      display2: GoogleFonts.akronim(textStyle: textTheme?.display2),
      display1: GoogleFonts.akronim(textStyle: textTheme?.display1),
      headline: GoogleFonts.akronim(textStyle: textTheme?.headline),
      title: GoogleFonts.akronim(textStyle: textTheme?.title),
      subhead: GoogleFonts.akronim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.akronim(textStyle: textTheme?.body2),
      body1: GoogleFonts.akronim(textStyle: textTheme?.body1),
      caption: GoogleFonts.akronim(textStyle: textTheme?.caption),
      button: GoogleFonts.akronim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.akronim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.akronim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aladin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aladin
  static TextStyle aladin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/aladin/v8/ZgNSjPJFPrvJV5f16Sf4pGT2Ng.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aladin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aladin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aladin
  static TextTheme aladinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aladin(textStyle: textTheme?.display4),
      display3: GoogleFonts.aladin(textStyle: textTheme?.display3),
      display2: GoogleFonts.aladin(textStyle: textTheme?.display2),
      display1: GoogleFonts.aladin(textStyle: textTheme?.display1),
      headline: GoogleFonts.aladin(textStyle: textTheme?.headline),
      title: GoogleFonts.aladin(textStyle: textTheme?.title),
      subhead: GoogleFonts.aladin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aladin(textStyle: textTheme?.body2),
      body1: GoogleFonts.aladin(textStyle: textTheme?.body1),
      caption: GoogleFonts.aladin(textStyle: textTheme?.caption),
      button: GoogleFonts.aladin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aladin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aladin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alata
  static TextStyle alata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alata/v1/PbytFmztEwbIofe6xKcRQEOX.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alata
  static TextTheme alataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alata(textStyle: textTheme?.display4),
      display3: GoogleFonts.alata(textStyle: textTheme?.display3),
      display2: GoogleFonts.alata(textStyle: textTheme?.display2),
      display1: GoogleFonts.alata(textStyle: textTheme?.display1),
      headline: GoogleFonts.alata(textStyle: textTheme?.headline),
      title: GoogleFonts.alata(textStyle: textTheme?.title),
      subhead: GoogleFonts.alata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alata(textStyle: textTheme?.body2),
      body1: GoogleFonts.alata(textStyle: textTheme?.body1),
      caption: GoogleFonts.alata(textStyle: textTheme?.caption),
      button: GoogleFonts.alata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alatsi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alatsi
  static TextStyle alatsi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alatsi/v1/TK3iWkUJAxQ2nLNGHjUHte5fKg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alatsi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alatsi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alatsi
  static TextTheme alatsiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alatsi(textStyle: textTheme?.display4),
      display3: GoogleFonts.alatsi(textStyle: textTheme?.display3),
      display2: GoogleFonts.alatsi(textStyle: textTheme?.display2),
      display1: GoogleFonts.alatsi(textStyle: textTheme?.display1),
      headline: GoogleFonts.alatsi(textStyle: textTheme?.headline),
      title: GoogleFonts.alatsi(textStyle: textTheme?.title),
      subhead: GoogleFonts.alatsi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alatsi(textStyle: textTheme?.body2),
      body1: GoogleFonts.alatsi(textStyle: textTheme?.body1),
      caption: GoogleFonts.alatsi(textStyle: textTheme?.caption),
      button: GoogleFonts.alatsi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alatsi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alatsi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aldrich font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aldrich
  static TextStyle aldrich({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/aldrich/v10/MCoTzAn-1s3IGyJMZaAS3pP5H_E.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aldrich',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aldrich font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aldrich
  static TextTheme aldrichTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aldrich(textStyle: textTheme?.display4),
      display3: GoogleFonts.aldrich(textStyle: textTheme?.display3),
      display2: GoogleFonts.aldrich(textStyle: textTheme?.display2),
      display1: GoogleFonts.aldrich(textStyle: textTheme?.display1),
      headline: GoogleFonts.aldrich(textStyle: textTheme?.headline),
      title: GoogleFonts.aldrich(textStyle: textTheme?.title),
      subhead: GoogleFonts.aldrich(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aldrich(textStyle: textTheme?.body2),
      body1: GoogleFonts.aldrich(textStyle: textTheme?.body1),
      caption: GoogleFonts.aldrich(textStyle: textTheme?.caption),
      button: GoogleFonts.aldrich(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aldrich(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aldrich(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alef font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alef
  static TextStyle alef({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alef/v11/FeVfS0NQpLYgrjJbC5FxxbU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/alef/v11/FeVQS0NQpLYglo50L5la2bxii28.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alef',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alef font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alef
  static TextTheme alefTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alef(textStyle: textTheme?.display4),
      display3: GoogleFonts.alef(textStyle: textTheme?.display3),
      display2: GoogleFonts.alef(textStyle: textTheme?.display2),
      display1: GoogleFonts.alef(textStyle: textTheme?.display1),
      headline: GoogleFonts.alef(textStyle: textTheme?.headline),
      title: GoogleFonts.alef(textStyle: textTheme?.title),
      subhead: GoogleFonts.alef(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alef(textStyle: textTheme?.body2),
      body1: GoogleFonts.alef(textStyle: textTheme?.body1),
      caption: GoogleFonts.alef(textStyle: textTheme?.caption),
      button: GoogleFonts.alef(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alef(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alef(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alegreya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya
  static TextStyle alegreya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaBrEBBsBhlBjvfkRLmzanB44N1.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaHrEBBsBhlBjvfkSLkx63j5pN1MwI.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaGrEBBsBhlBjvfkSoS5I3JyJ98KhtH.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaErEBBsBhlBjvfkSLk_1nKwpteLwtHJlc.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaGrEBBsBhlBjvfkSpa4o3JyJ98KhtH.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaErEBBsBhlBjvfkSLk_xHMwpteLwtHJlc.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaGrEBBsBhlBjvfkSpG4Y3JyJ98KhtH.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaErEBBsBhlBjvfkSLk_w3PwpteLwtHJlc.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaGrEBBsBhlBjvfkSpi4I3JyJ98KhtH.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/alegreya/v13/4UaErEBBsBhlBjvfkSLk_ynOwpteLwtHJlc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alegreya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alegreya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya
  static TextTheme alegreyaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alegreya(textStyle: textTheme?.display4),
      display3: GoogleFonts.alegreya(textStyle: textTheme?.display3),
      display2: GoogleFonts.alegreya(textStyle: textTheme?.display2),
      display1: GoogleFonts.alegreya(textStyle: textTheme?.display1),
      headline: GoogleFonts.alegreya(textStyle: textTheme?.headline),
      title: GoogleFonts.alegreya(textStyle: textTheme?.title),
      subhead: GoogleFonts.alegreya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alegreya(textStyle: textTheme?.body2),
      body1: GoogleFonts.alegreya(textStyle: textTheme?.body1),
      caption: GoogleFonts.alegreya(textStyle: textTheme?.caption),
      button: GoogleFonts.alegreya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alegreya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alegreya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alegreya SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+SC
  static TextStyle alegreyaSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiOGmRtCJ62-O0HhNEa-a6o05E5abe_.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiMGmRtCJ62-O0HhNEa-Z6q2ZUbbKe_DGs.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiTGmRtCJ62-O0HhNEa-ZZc-rUxQqu2FXKD.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiRGmRtCJ62-O0HhNEa-Z6q4WEySK-UEGKDBz4.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiTGmRtCJ62-O0HhNEa-ZYU_LUxQqu2FXKD.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiRGmRtCJ62-O0HhNEa-Z6q4Sk0SK-UEGKDBz4.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiTGmRtCJ62-O0HhNEa-ZYI_7UxQqu2FXKD.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiRGmRtCJ62-O0HhNEa-Z6q4TU3SK-UEGKDBz4.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiTGmRtCJ62-O0HhNEa-ZYs_rUxQqu2FXKD.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/alegreyasc/v11/taiRGmRtCJ62-O0HhNEa-Z6q4RE2SK-UEGKDBz4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlegreyaSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alegreya SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+SC
  static TextTheme alegreyaSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alegreyaSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.alegreyaSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.alegreyaSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.alegreyaSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.alegreyaSC(textStyle: textTheme?.headline),
      title: GoogleFonts.alegreyaSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.alegreyaSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alegreyaSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.alegreyaSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.alegreyaSC(textStyle: textTheme?.caption),
      button: GoogleFonts.alegreyaSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alegreyaSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alegreyaSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alegreya Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+Sans
  static TextStyle alegreyaSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUt9_-1phKLFgshYDvh6Vwt5TltuGdShm5bsg.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUv9_-1phKLFgshYDvh6Vwt7V9V3G1WpGtLsgu7.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUu9_-1phKLFgshYDvh6Vwt5fFPmE18imdCqxI.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUo9_-1phKLFgshYDvh6Vwt7V9VFE92jkVHuxKiBA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUz9_-1phKLFgshYDvh6Vwt3V1nvEVXlm4.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUt9_-1phKLFgshYDvh6Vwt7V9tuGdShm5bsg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUu9_-1phKLFgshYDvh6Vwt5alOmE18imdCqxI.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUo9_-1phKLFgshYDvh6Vwt7V9VTE52jkVHuxKiBA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUu9_-1phKLFgshYDvh6Vwt5eFImE18imdCqxI.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUo9_-1phKLFgshYDvh6Vwt7V9VBEh2jkVHuxKiBA.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUu9_-1phKLFgshYDvh6Vwt5f1LmE18imdCqxI.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUo9_-1phKLFgshYDvh6Vwt7V9VGEt2jkVHuxKiBA.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUu9_-1phKLFgshYDvh6Vwt5dlKmE18imdCqxI.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/alegreyasans/v10/5aUo9_-1phKLFgshYDvh6Vwt7V9VPEp2jkVHuxKiBA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlegreyaSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alegreya Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+Sans
  static TextTheme alegreyaSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alegreyaSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.alegreyaSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.alegreyaSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.alegreyaSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.alegreyaSans(textStyle: textTheme?.headline),
      title: GoogleFonts.alegreyaSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.alegreyaSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alegreyaSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.alegreyaSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.alegreyaSans(textStyle: textTheme?.caption),
      button: GoogleFonts.alegreyaSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alegreyaSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alegreyaSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alegreya Sans SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+Sans+SC
  static TextStyle alegreyaSansSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGn4-RGJqfMvt7P8FUr0Q1j-Hf1Dipl8g5FPYtmMg.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGl4-RGJqfMvt7P8FUr0Q1j-Hf1BkxdlgRBH452Mvds.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGm4-RGJqfMvt7P8FUr0Q1j-Hf1DuJH0iRrMYJ_K-4.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGk4-RGJqfMvt7P8FUr0Q1j-Hf1BkxdXiZhNaB6O-51OA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGh4-RGJqfMvt7P8FUr0Q1j-Hf1Nk5v9ixALYs.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGn4-RGJqfMvt7P8FUr0Q1j-Hf1Bkxl8g5FPYtmMg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGm4-RGJqfMvt7P8FUr0Q1j-Hf1DrpG0iRrMYJ_K-4.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGk4-RGJqfMvt7P8FUr0Q1j-Hf1BkxdBidhNaB6O-51OA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGm4-RGJqfMvt7P8FUr0Q1j-Hf1DvJA0iRrMYJ_K-4.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGk4-RGJqfMvt7P8FUr0Q1j-Hf1BkxdTiFhNaB6O-51OA.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGm4-RGJqfMvt7P8FUr0Q1j-Hf1Du5D0iRrMYJ_K-4.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGk4-RGJqfMvt7P8FUr0Q1j-Hf1BkxdUiJhNaB6O-51OA.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGm4-RGJqfMvt7P8FUr0Q1j-Hf1DspC0iRrMYJ_K-4.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/alegreyasanssc/v9/mtGk4-RGJqfMvt7P8FUr0Q1j-Hf1BkxddiNhNaB6O-51OA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlegreyaSansSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alegreya Sans SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alegreya+Sans+SC
  static TextTheme alegreyaSansSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.headline),
      title: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.caption),
      button: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alegreyaSansSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aleo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aleo
  static TextStyle aleo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/aleo/v3/c4mg1nF8G8_syKbr9DVDno985KM.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/aleo/v3/c4mi1nF8G8_swAjxeDdJmq159KOnWA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/aleo/v3/c4mv1nF8G8_s8ArD0D1ogoY.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/aleo/v3/c4mh1nF8G8_swAjJ1B9tkoZl_Q.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/aleo/v3/c4mg1nF8G8_syLbs9DVDno985KM.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/aleo/v3/c4mi1nF8G8_swAjxaDBJmq159KOnWA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aleo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aleo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aleo
  static TextTheme aleoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aleo(textStyle: textTheme?.display4),
      display3: GoogleFonts.aleo(textStyle: textTheme?.display3),
      display2: GoogleFonts.aleo(textStyle: textTheme?.display2),
      display1: GoogleFonts.aleo(textStyle: textTheme?.display1),
      headline: GoogleFonts.aleo(textStyle: textTheme?.headline),
      title: GoogleFonts.aleo(textStyle: textTheme?.title),
      subhead: GoogleFonts.aleo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aleo(textStyle: textTheme?.body2),
      body1: GoogleFonts.aleo(textStyle: textTheme?.body1),
      caption: GoogleFonts.aleo(textStyle: textTheme?.caption),
      button: GoogleFonts.aleo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aleo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aleo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alex Brush font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alex+Brush
  static TextStyle alexBrush({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alexbrush/v11/SZc83FzrJKuqFbwMKk6EtUL57DtOmCc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlexBrush',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alex Brush font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alex+Brush
  static TextTheme alexBrushTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alexBrush(textStyle: textTheme?.display4),
      display3: GoogleFonts.alexBrush(textStyle: textTheme?.display3),
      display2: GoogleFonts.alexBrush(textStyle: textTheme?.display2),
      display1: GoogleFonts.alexBrush(textStyle: textTheme?.display1),
      headline: GoogleFonts.alexBrush(textStyle: textTheme?.headline),
      title: GoogleFonts.alexBrush(textStyle: textTheme?.title),
      subhead: GoogleFonts.alexBrush(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alexBrush(textStyle: textTheme?.body2),
      body1: GoogleFonts.alexBrush(textStyle: textTheme?.body1),
      caption: GoogleFonts.alexBrush(textStyle: textTheme?.caption),
      button: GoogleFonts.alexBrush(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alexBrush(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alexBrush(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alfa Slab One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alfa+Slab+One
  static TextStyle alfaSlabOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alfaslabone/v9/6NUQ8FmMKwSEKjnm5-4v-4Jh6dVretWvYmE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlfaSlabOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alfa Slab One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alfa+Slab+One
  static TextTheme alfaSlabOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alfaSlabOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.alfaSlabOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.alfaSlabOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.alfaSlabOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.alfaSlabOne(textStyle: textTheme?.headline),
      title: GoogleFonts.alfaSlabOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.alfaSlabOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alfaSlabOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.alfaSlabOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.alfaSlabOne(textStyle: textTheme?.caption),
      button: GoogleFonts.alfaSlabOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alfaSlabOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alfaSlabOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alice font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alice
  static TextStyle alice({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alice/v11/OpNCnoEEmtHa6FcJpA_chzJ0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alice',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alice font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alice
  static TextTheme aliceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alice(textStyle: textTheme?.display4),
      display3: GoogleFonts.alice(textStyle: textTheme?.display3),
      display2: GoogleFonts.alice(textStyle: textTheme?.display2),
      display1: GoogleFonts.alice(textStyle: textTheme?.display1),
      headline: GoogleFonts.alice(textStyle: textTheme?.headline),
      title: GoogleFonts.alice(textStyle: textTheme?.title),
      subhead: GoogleFonts.alice(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alice(textStyle: textTheme?.body2),
      body1: GoogleFonts.alice(textStyle: textTheme?.body1),
      caption: GoogleFonts.alice(textStyle: textTheme?.caption),
      button: GoogleFonts.alice(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alice(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alice(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alike font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alike
  static TextStyle alike({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alike/v12/HI_EiYEYI6BIoEjBSZXAQ4-d.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Alike',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alike font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alike
  static TextTheme alikeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alike(textStyle: textTheme?.display4),
      display3: GoogleFonts.alike(textStyle: textTheme?.display3),
      display2: GoogleFonts.alike(textStyle: textTheme?.display2),
      display1: GoogleFonts.alike(textStyle: textTheme?.display1),
      headline: GoogleFonts.alike(textStyle: textTheme?.headline),
      title: GoogleFonts.alike(textStyle: textTheme?.title),
      subhead: GoogleFonts.alike(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alike(textStyle: textTheme?.body2),
      body1: GoogleFonts.alike(textStyle: textTheme?.body1),
      caption: GoogleFonts.alike(textStyle: textTheme?.caption),
      button: GoogleFonts.alike(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alike(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alike(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Alike Angular font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alike+Angular
  static TextStyle alikeAngular({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/alikeangular/v10/3qTrojWunjGQtEBlIcwMbSoI3kM6bB7FKjE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlikeAngular',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Alike Angular font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Alike+Angular
  static TextTheme alikeAngularTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.alikeAngular(textStyle: textTheme?.display4),
      display3: GoogleFonts.alikeAngular(textStyle: textTheme?.display3),
      display2: GoogleFonts.alikeAngular(textStyle: textTheme?.display2),
      display1: GoogleFonts.alikeAngular(textStyle: textTheme?.display1),
      headline: GoogleFonts.alikeAngular(textStyle: textTheme?.headline),
      title: GoogleFonts.alikeAngular(textStyle: textTheme?.title),
      subhead: GoogleFonts.alikeAngular(textStyle: textTheme?.subhead),
      body2: GoogleFonts.alikeAngular(textStyle: textTheme?.body2),
      body1: GoogleFonts.alikeAngular(textStyle: textTheme?.body1),
      caption: GoogleFonts.alikeAngular(textStyle: textTheme?.caption),
      button: GoogleFonts.alikeAngular(textStyle: textTheme?.button),
      subtitle: GoogleFonts.alikeAngular(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.alikeAngular(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Allan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allan
  static TextStyle allan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/allan/v12/ea8XadU7WuTxEtb2P9SF8nZE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/allan/v12/ea8aadU7WuTxEu5KEPCN2WpNgEKU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Allan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Allan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allan
  static TextTheme allanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.allan(textStyle: textTheme?.display4),
      display3: GoogleFonts.allan(textStyle: textTheme?.display3),
      display2: GoogleFonts.allan(textStyle: textTheme?.display2),
      display1: GoogleFonts.allan(textStyle: textTheme?.display1),
      headline: GoogleFonts.allan(textStyle: textTheme?.headline),
      title: GoogleFonts.allan(textStyle: textTheme?.title),
      subhead: GoogleFonts.allan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.allan(textStyle: textTheme?.body2),
      body1: GoogleFonts.allan(textStyle: textTheme?.body1),
      caption: GoogleFonts.allan(textStyle: textTheme?.caption),
      button: GoogleFonts.allan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.allan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.allan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Allerta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allerta
  static TextStyle allerta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/allerta/v10/TwMO-IAHRlkbx940UnEdSQqO5uY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Allerta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Allerta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allerta
  static TextTheme allertaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.allerta(textStyle: textTheme?.display4),
      display3: GoogleFonts.allerta(textStyle: textTheme?.display3),
      display2: GoogleFonts.allerta(textStyle: textTheme?.display2),
      display1: GoogleFonts.allerta(textStyle: textTheme?.display1),
      headline: GoogleFonts.allerta(textStyle: textTheme?.headline),
      title: GoogleFonts.allerta(textStyle: textTheme?.title),
      subhead: GoogleFonts.allerta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.allerta(textStyle: textTheme?.body2),
      body1: GoogleFonts.allerta(textStyle: textTheme?.body1),
      caption: GoogleFonts.allerta(textStyle: textTheme?.caption),
      button: GoogleFonts.allerta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.allerta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.allerta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Allerta Stencil font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allerta+Stencil
  static TextStyle allertaStencil({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/allertastencil/v10/HTx0L209KT-LmIE9N7OR6eiycOeF-zz313DuvQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AllertaStencil',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Allerta Stencil font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allerta+Stencil
  static TextTheme allertaStencilTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.allertaStencil(textStyle: textTheme?.display4),
      display3: GoogleFonts.allertaStencil(textStyle: textTheme?.display3),
      display2: GoogleFonts.allertaStencil(textStyle: textTheme?.display2),
      display1: GoogleFonts.allertaStencil(textStyle: textTheme?.display1),
      headline: GoogleFonts.allertaStencil(textStyle: textTheme?.headline),
      title: GoogleFonts.allertaStencil(textStyle: textTheme?.title),
      subhead: GoogleFonts.allertaStencil(textStyle: textTheme?.subhead),
      body2: GoogleFonts.allertaStencil(textStyle: textTheme?.body2),
      body1: GoogleFonts.allertaStencil(textStyle: textTheme?.body1),
      caption: GoogleFonts.allertaStencil(textStyle: textTheme?.caption),
      button: GoogleFonts.allertaStencil(textStyle: textTheme?.button),
      subtitle: GoogleFonts.allertaStencil(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.allertaStencil(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Allura font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allura
  static TextStyle allura({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/allura/v8/9oRPNYsQpS4zjuAPjAIXPtrrGA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Allura',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Allura font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Allura
  static TextTheme alluraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.allura(textStyle: textTheme?.display4),
      display3: GoogleFonts.allura(textStyle: textTheme?.display3),
      display2: GoogleFonts.allura(textStyle: textTheme?.display2),
      display1: GoogleFonts.allura(textStyle: textTheme?.display1),
      headline: GoogleFonts.allura(textStyle: textTheme?.headline),
      title: GoogleFonts.allura(textStyle: textTheme?.title),
      subhead: GoogleFonts.allura(textStyle: textTheme?.subhead),
      body2: GoogleFonts.allura(textStyle: textTheme?.body2),
      body1: GoogleFonts.allura(textStyle: textTheme?.body1),
      caption: GoogleFonts.allura(textStyle: textTheme?.caption),
      button: GoogleFonts.allura(textStyle: textTheme?.button),
      subtitle: GoogleFonts.allura(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.allura(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Almarai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almarai
  static TextStyle almarai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/almarai/v2/tssoApxBaigK_hnnS_anhnicoq72sXg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/almarai/v2/tsstApxBaigK_hnnc1qPonC3vqc.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/almarai/v2/tssoApxBaigK_hnnS-aghnicoq72sXg.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/almarai/v2/tssoApxBaigK_hnnS_qjhnicoq72sXg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Almarai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Almarai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almarai
  static TextTheme almaraiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.almarai(textStyle: textTheme?.display4),
      display3: GoogleFonts.almarai(textStyle: textTheme?.display3),
      display2: GoogleFonts.almarai(textStyle: textTheme?.display2),
      display1: GoogleFonts.almarai(textStyle: textTheme?.display1),
      headline: GoogleFonts.almarai(textStyle: textTheme?.headline),
      title: GoogleFonts.almarai(textStyle: textTheme?.title),
      subhead: GoogleFonts.almarai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.almarai(textStyle: textTheme?.body2),
      body1: GoogleFonts.almarai(textStyle: textTheme?.body1),
      caption: GoogleFonts.almarai(textStyle: textTheme?.caption),
      button: GoogleFonts.almarai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.almarai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.almarai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Almendra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra
  static TextStyle almendra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/almendra/v12/H4ckBXKAlMnTn0CskyY6wr-wg763.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/almendra/v12/H4ciBXKAlMnTn0CskxY4yLuShq63czE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/almendra/v12/H4cjBXKAlMnTn0Cskx6G7Zu4qKK-aihq.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/almendra/v12/H4chBXKAlMnTn0CskxY48Ae9oqacbzhqDtg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Almendra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Almendra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra
  static TextTheme almendraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.almendra(textStyle: textTheme?.display4),
      display3: GoogleFonts.almendra(textStyle: textTheme?.display3),
      display2: GoogleFonts.almendra(textStyle: textTheme?.display2),
      display1: GoogleFonts.almendra(textStyle: textTheme?.display1),
      headline: GoogleFonts.almendra(textStyle: textTheme?.headline),
      title: GoogleFonts.almendra(textStyle: textTheme?.title),
      subhead: GoogleFonts.almendra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.almendra(textStyle: textTheme?.body2),
      body1: GoogleFonts.almendra(textStyle: textTheme?.body1),
      caption: GoogleFonts.almendra(textStyle: textTheme?.caption),
      button: GoogleFonts.almendra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.almendra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.almendra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Almendra Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra+Display
  static TextStyle almendraDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/almendradisplay/v10/0FlPVOGWl1Sb4O3tETtADHRRlZhzXS_eTyer338.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlmendraDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Almendra Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra+Display
  static TextTheme almendraDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.almendraDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.almendraDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.almendraDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.almendraDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.almendraDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.almendraDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.almendraDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.almendraDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.almendraDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.almendraDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.almendraDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.almendraDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.almendraDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Almendra SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra+SC
  static TextStyle almendraSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/almendrasc/v10/Iure6Yx284eebowr7hbyTZZJprVA4XQ0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AlmendraSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Almendra SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Almendra+SC
  static TextTheme almendraSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.almendraSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.almendraSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.almendraSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.almendraSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.almendraSC(textStyle: textTheme?.headline),
      title: GoogleFonts.almendraSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.almendraSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.almendraSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.almendraSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.almendraSC(textStyle: textTheme?.caption),
      button: GoogleFonts.almendraSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.almendraSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.almendraSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amarante font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amarante
  static TextStyle amarante({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/amarante/v7/xMQXuF1KTa6EvGx9bq-3C3rAmD-b.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amarante',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amarante font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amarante
  static TextTheme amaranteTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amarante(textStyle: textTheme?.display4),
      display3: GoogleFonts.amarante(textStyle: textTheme?.display3),
      display2: GoogleFonts.amarante(textStyle: textTheme?.display2),
      display1: GoogleFonts.amarante(textStyle: textTheme?.display1),
      headline: GoogleFonts.amarante(textStyle: textTheme?.headline),
      title: GoogleFonts.amarante(textStyle: textTheme?.title),
      subhead: GoogleFonts.amarante(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amarante(textStyle: textTheme?.body2),
      body1: GoogleFonts.amarante(textStyle: textTheme?.body1),
      caption: GoogleFonts.amarante(textStyle: textTheme?.caption),
      button: GoogleFonts.amarante(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amarante(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amarante(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amaranth font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amaranth
  static TextStyle amaranth({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/amaranth/v10/KtkuALODe433f0j1zPnCF9GqwnzW.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/amaranth/v10/KtkoALODe433f0j1zMnAHdWIx2zWD4I.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/amaranth/v10/KtkpALODe433f0j1zMF-OPWi6WDfFpuc.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/amaranth/v10/KtkrALODe433f0j1zMnAJWmn42T9E4ucRY8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amaranth',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amaranth font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amaranth
  static TextTheme amaranthTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amaranth(textStyle: textTheme?.display4),
      display3: GoogleFonts.amaranth(textStyle: textTheme?.display3),
      display2: GoogleFonts.amaranth(textStyle: textTheme?.display2),
      display1: GoogleFonts.amaranth(textStyle: textTheme?.display1),
      headline: GoogleFonts.amaranth(textStyle: textTheme?.headline),
      title: GoogleFonts.amaranth(textStyle: textTheme?.title),
      subhead: GoogleFonts.amaranth(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amaranth(textStyle: textTheme?.body2),
      body1: GoogleFonts.amaranth(textStyle: textTheme?.body1),
      caption: GoogleFonts.amaranth(textStyle: textTheme?.caption),
      button: GoogleFonts.amaranth(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amaranth(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amaranth(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amatic SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amatic+SC
  static TextStyle amaticSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/amaticsc/v13/TUZyzwprpvBS1izr_vO0De6ecZQf1A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/amaticsc/v13/TUZ3zwprpvBS1izr_vOMscG6eb8D3WTy-A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AmaticSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amatic SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amatic+SC
  static TextTheme amaticSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amaticSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.amaticSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.amaticSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.amaticSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.amaticSC(textStyle: textTheme?.headline),
      title: GoogleFonts.amaticSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.amaticSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amaticSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.amaticSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.amaticSC(textStyle: textTheme?.caption),
      button: GoogleFonts.amaticSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amaticSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amaticSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amethysta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amethysta
  static TextStyle amethysta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/amethysta/v8/rP2Fp2K15kgb_F3ibfWIGDWCBl0O8Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amethysta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amethysta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amethysta
  static TextTheme amethystaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amethysta(textStyle: textTheme?.display4),
      display3: GoogleFonts.amethysta(textStyle: textTheme?.display3),
      display2: GoogleFonts.amethysta(textStyle: textTheme?.display2),
      display1: GoogleFonts.amethysta(textStyle: textTheme?.display1),
      headline: GoogleFonts.amethysta(textStyle: textTheme?.headline),
      title: GoogleFonts.amethysta(textStyle: textTheme?.title),
      subhead: GoogleFonts.amethysta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amethysta(textStyle: textTheme?.body2),
      body1: GoogleFonts.amethysta(textStyle: textTheme?.body1),
      caption: GoogleFonts.amethysta(textStyle: textTheme?.caption),
      button: GoogleFonts.amethysta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amethysta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amethysta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amiko font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amiko
  static TextStyle amiko({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/amiko/v4/WwkQxPq1DFK04tqlc17MMZgJ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/amiko/v4/WwkdxPq1DFK04uJ9XXrEGoQAUco5.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/amiko/v4/WwkdxPq1DFK04uIZXHrEGoQAUco5.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amiko',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amiko font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amiko
  static TextTheme amikoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amiko(textStyle: textTheme?.display4),
      display3: GoogleFonts.amiko(textStyle: textTheme?.display3),
      display2: GoogleFonts.amiko(textStyle: textTheme?.display2),
      display1: GoogleFonts.amiko(textStyle: textTheme?.display1),
      headline: GoogleFonts.amiko(textStyle: textTheme?.headline),
      title: GoogleFonts.amiko(textStyle: textTheme?.title),
      subhead: GoogleFonts.amiko(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amiko(textStyle: textTheme?.body2),
      body1: GoogleFonts.amiko(textStyle: textTheme?.body1),
      caption: GoogleFonts.amiko(textStyle: textTheme?.caption),
      button: GoogleFonts.amiko(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amiko(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amiko(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amiri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amiri
  static TextStyle amiri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/amiri/v13/J7aRnpd8CGxBHqUpvrIw74NL.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/amiri/v13/J7afnpd8CGxBHpUrtLYS6pNLAjk.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/amiri/v13/J7acnpd8CGxBHp2VkZY4xJ9CGyAa.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/amiri/v13/J7aanpd8CGxBHpUrjAo9zptgHjAavCA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amiri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amiri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amiri
  static TextTheme amiriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amiri(textStyle: textTheme?.display4),
      display3: GoogleFonts.amiri(textStyle: textTheme?.display3),
      display2: GoogleFonts.amiri(textStyle: textTheme?.display2),
      display1: GoogleFonts.amiri(textStyle: textTheme?.display1),
      headline: GoogleFonts.amiri(textStyle: textTheme?.headline),
      title: GoogleFonts.amiri(textStyle: textTheme?.title),
      subhead: GoogleFonts.amiri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amiri(textStyle: textTheme?.body2),
      body1: GoogleFonts.amiri(textStyle: textTheme?.body1),
      caption: GoogleFonts.amiri(textStyle: textTheme?.caption),
      button: GoogleFonts.amiri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amiri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amiri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Amita font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amita
  static TextStyle amita({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/amita/v5/HhyaU5si9Om7PQlvAfSKEZZL.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/amita/v5/HhyXU5si9Om7PTHTLtCCOopCTKkI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Amita',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Amita font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Amita
  static TextTheme amitaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.amita(textStyle: textTheme?.display4),
      display3: GoogleFonts.amita(textStyle: textTheme?.display3),
      display2: GoogleFonts.amita(textStyle: textTheme?.display2),
      display1: GoogleFonts.amita(textStyle: textTheme?.display1),
      headline: GoogleFonts.amita(textStyle: textTheme?.headline),
      title: GoogleFonts.amita(textStyle: textTheme?.title),
      subhead: GoogleFonts.amita(textStyle: textTheme?.subhead),
      body2: GoogleFonts.amita(textStyle: textTheme?.body2),
      body1: GoogleFonts.amita(textStyle: textTheme?.body1),
      caption: GoogleFonts.amita(textStyle: textTheme?.caption),
      button: GoogleFonts.amita(textStyle: textTheme?.button),
      subtitle: GoogleFonts.amita(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.amita(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Anaheim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anaheim
  static TextStyle anaheim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/anaheim/v7/8vII7w042Wp87g4G0UTUEE5eK_w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Anaheim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Anaheim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anaheim
  static TextTheme anaheimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anaheim(textStyle: textTheme?.display4),
      display3: GoogleFonts.anaheim(textStyle: textTheme?.display3),
      display2: GoogleFonts.anaheim(textStyle: textTheme?.display2),
      display1: GoogleFonts.anaheim(textStyle: textTheme?.display1),
      headline: GoogleFonts.anaheim(textStyle: textTheme?.headline),
      title: GoogleFonts.anaheim(textStyle: textTheme?.title),
      subhead: GoogleFonts.anaheim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anaheim(textStyle: textTheme?.body2),
      body1: GoogleFonts.anaheim(textStyle: textTheme?.body1),
      caption: GoogleFonts.anaheim(textStyle: textTheme?.caption),
      button: GoogleFonts.anaheim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anaheim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anaheim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Andada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Andada
  static TextStyle andada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/andada/v11/uK_y4riWaego3w9RCh0TMv6EXw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Andada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Andada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Andada
  static TextTheme andadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.andada(textStyle: textTheme?.display4),
      display3: GoogleFonts.andada(textStyle: textTheme?.display3),
      display2: GoogleFonts.andada(textStyle: textTheme?.display2),
      display1: GoogleFonts.andada(textStyle: textTheme?.display1),
      headline: GoogleFonts.andada(textStyle: textTheme?.headline),
      title: GoogleFonts.andada(textStyle: textTheme?.title),
      subhead: GoogleFonts.andada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.andada(textStyle: textTheme?.body2),
      body1: GoogleFonts.andada(textStyle: textTheme?.body1),
      caption: GoogleFonts.andada(textStyle: textTheme?.caption),
      button: GoogleFonts.andada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.andada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.andada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Andika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Andika
  static TextStyle andika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/andika/v11/mem_Ya6iyW-LwqgAbbwRWrwGVA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Andika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Andika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Andika
  static TextTheme andikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.andika(textStyle: textTheme?.display4),
      display3: GoogleFonts.andika(textStyle: textTheme?.display3),
      display2: GoogleFonts.andika(textStyle: textTheme?.display2),
      display1: GoogleFonts.andika(textStyle: textTheme?.display1),
      headline: GoogleFonts.andika(textStyle: textTheme?.headline),
      title: GoogleFonts.andika(textStyle: textTheme?.title),
      subhead: GoogleFonts.andika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.andika(textStyle: textTheme?.body2),
      body1: GoogleFonts.andika(textStyle: textTheme?.body1),
      caption: GoogleFonts.andika(textStyle: textTheme?.caption),
      button: GoogleFonts.andika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.andika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.andika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Angkor font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Angkor
  static TextStyle angkor({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/angkor/v12/H4cmBXyAlsPdnlb-8iw-4Lqggw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Angkor',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Angkor font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Angkor
  static TextTheme angkorTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.angkor(textStyle: textTheme?.display4),
      display3: GoogleFonts.angkor(textStyle: textTheme?.display3),
      display2: GoogleFonts.angkor(textStyle: textTheme?.display2),
      display1: GoogleFonts.angkor(textStyle: textTheme?.display1),
      headline: GoogleFonts.angkor(textStyle: textTheme?.headline),
      title: GoogleFonts.angkor(textStyle: textTheme?.title),
      subhead: GoogleFonts.angkor(textStyle: textTheme?.subhead),
      body2: GoogleFonts.angkor(textStyle: textTheme?.body2),
      body1: GoogleFonts.angkor(textStyle: textTheme?.body1),
      caption: GoogleFonts.angkor(textStyle: textTheme?.caption),
      button: GoogleFonts.angkor(textStyle: textTheme?.button),
      subtitle: GoogleFonts.angkor(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.angkor(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Annie Use Your Telescope font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Annie+Use+Your+Telescope
  static TextStyle annieUseYourTelescope({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/annieuseyourtelescope/v10/daaLSS4tI2qYYl3Jq9s_Hu74xwktnlKxH6osGVGjlDfB3UUVZA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AnnieUseYourTelescope',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Annie Use Your Telescope font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Annie+Use+Your+Telescope
  static TextTheme annieUseYourTelescopeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.headline),
      title: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.title),
      subhead: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.subhead),
      body2: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.body2),
      body1: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.body1),
      caption: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.caption),
      button: GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.annieUseYourTelescope(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Anonymous Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anonymous+Pro
  static TextStyle anonymousPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/anonymouspro/v13/rP2Bp2a15UIB7Un-bOeISG3pLlw89CH98Ko.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/anonymouspro/v13/rP2fp2a15UIB7Un-bOeISG3pHl428AP44Kqr2Q.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/anonymouspro/v13/rP2cp2a15UIB7Un-bOeISG3pFuAT0CnW7KOywKo.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/anonymouspro/v13/rP2ap2a15UIB7Un-bOeISG3pHl4OTCzc6IG30KqB9Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AnonymousPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Anonymous Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anonymous+Pro
  static TextTheme anonymousProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anonymousPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.anonymousPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.anonymousPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.anonymousPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.anonymousPro(textStyle: textTheme?.headline),
      title: GoogleFonts.anonymousPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.anonymousPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anonymousPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.anonymousPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.anonymousPro(textStyle: textTheme?.caption),
      button: GoogleFonts.anonymousPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anonymousPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anonymousPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Antic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic
  static TextStyle antic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/antic/v11/TuGfUVB8XY5DRaZLodgzydtk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Antic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Antic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic
  static TextTheme anticTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.antic(textStyle: textTheme?.display4),
      display3: GoogleFonts.antic(textStyle: textTheme?.display3),
      display2: GoogleFonts.antic(textStyle: textTheme?.display2),
      display1: GoogleFonts.antic(textStyle: textTheme?.display1),
      headline: GoogleFonts.antic(textStyle: textTheme?.headline),
      title: GoogleFonts.antic(textStyle: textTheme?.title),
      subhead: GoogleFonts.antic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.antic(textStyle: textTheme?.body2),
      body1: GoogleFonts.antic(textStyle: textTheme?.body1),
      caption: GoogleFonts.antic(textStyle: textTheme?.caption),
      button: GoogleFonts.antic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.antic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.antic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Antic Didone font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic+Didone
  static TextStyle anticDidone({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/anticdidone/v8/RWmPoKKX6u8sp8fIWdnDKqDiqYsGBGBzCw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AnticDidone',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Antic Didone font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic+Didone
  static TextTheme anticDidoneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anticDidone(textStyle: textTheme?.display4),
      display3: GoogleFonts.anticDidone(textStyle: textTheme?.display3),
      display2: GoogleFonts.anticDidone(textStyle: textTheme?.display2),
      display1: GoogleFonts.anticDidone(textStyle: textTheme?.display1),
      headline: GoogleFonts.anticDidone(textStyle: textTheme?.headline),
      title: GoogleFonts.anticDidone(textStyle: textTheme?.title),
      subhead: GoogleFonts.anticDidone(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anticDidone(textStyle: textTheme?.body2),
      body1: GoogleFonts.anticDidone(textStyle: textTheme?.body1),
      caption: GoogleFonts.anticDidone(textStyle: textTheme?.caption),
      button: GoogleFonts.anticDidone(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anticDidone(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anticDidone(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Antic Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic+Slab
  static TextStyle anticSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/anticslab/v8/bWt97fPFfRzkCa9Jlp6IWcJWXW5p5Qo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AnticSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Antic Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Antic+Slab
  static TextTheme anticSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anticSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.anticSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.anticSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.anticSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.anticSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.anticSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.anticSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anticSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.anticSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.anticSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.anticSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anticSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anticSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Anton font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anton
  static TextStyle anton({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/anton/v11/1Ptgg87LROyAm0K08i4gS7lu.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Anton',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Anton font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Anton
  static TextTheme antonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.anton(textStyle: textTheme?.display4),
      display3: GoogleFonts.anton(textStyle: textTheme?.display3),
      display2: GoogleFonts.anton(textStyle: textTheme?.display2),
      display1: GoogleFonts.anton(textStyle: textTheme?.display1),
      headline: GoogleFonts.anton(textStyle: textTheme?.headline),
      title: GoogleFonts.anton(textStyle: textTheme?.title),
      subhead: GoogleFonts.anton(textStyle: textTheme?.subhead),
      body2: GoogleFonts.anton(textStyle: textTheme?.body2),
      body1: GoogleFonts.anton(textStyle: textTheme?.body1),
      caption: GoogleFonts.anton(textStyle: textTheme?.caption),
      button: GoogleFonts.anton(textStyle: textTheme?.button),
      subtitle: GoogleFonts.anton(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.anton(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arapey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arapey
  static TextStyle arapey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arapey/v8/-W__XJn-UDDA2RC6Z9AcZkIzeg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/arapey/v8/-W_9XJn-UDDA2RCKZdoYREcjeo0k.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arapey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arapey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arapey
  static TextTheme arapeyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arapey(textStyle: textTheme?.display4),
      display3: GoogleFonts.arapey(textStyle: textTheme?.display3),
      display2: GoogleFonts.arapey(textStyle: textTheme?.display2),
      display1: GoogleFonts.arapey(textStyle: textTheme?.display1),
      headline: GoogleFonts.arapey(textStyle: textTheme?.headline),
      title: GoogleFonts.arapey(textStyle: textTheme?.title),
      subhead: GoogleFonts.arapey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arapey(textStyle: textTheme?.body2),
      body1: GoogleFonts.arapey(textStyle: textTheme?.body1),
      caption: GoogleFonts.arapey(textStyle: textTheme?.caption),
      button: GoogleFonts.arapey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arapey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arapey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arbutus font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arbutus
  static TextStyle arbutus({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arbutus/v9/NaPYcZ7dG_5J3poob9JtryO8fMU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arbutus',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arbutus font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arbutus
  static TextTheme arbutusTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arbutus(textStyle: textTheme?.display4),
      display3: GoogleFonts.arbutus(textStyle: textTheme?.display3),
      display2: GoogleFonts.arbutus(textStyle: textTheme?.display2),
      display1: GoogleFonts.arbutus(textStyle: textTheme?.display1),
      headline: GoogleFonts.arbutus(textStyle: textTheme?.headline),
      title: GoogleFonts.arbutus(textStyle: textTheme?.title),
      subhead: GoogleFonts.arbutus(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arbutus(textStyle: textTheme?.body2),
      body1: GoogleFonts.arbutus(textStyle: textTheme?.body1),
      caption: GoogleFonts.arbutus(textStyle: textTheme?.caption),
      button: GoogleFonts.arbutus(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arbutus(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arbutus(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arbutus Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arbutus+Slab
  static TextStyle arbutusSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arbutusslab/v8/oY1Z8e7OuLXkJGbXtr5ba7ZVa68dJlaFAQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArbutusSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arbutus Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arbutus+Slab
  static TextTheme arbutusSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arbutusSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.arbutusSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.arbutusSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.arbutusSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.arbutusSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.arbutusSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.arbutusSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arbutusSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.arbutusSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.arbutusSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.arbutusSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arbutusSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arbutusSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Architects Daughter font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Architects+Daughter
  static TextStyle architectsDaughter({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/architectsdaughter/v10/KtkxAKiDZI_td1Lkx62xHZHDtgO_Y-bvfY5q4szgE-Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArchitectsDaughter',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Architects Daughter font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Architects+Daughter
  static TextTheme architectsDaughterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.architectsDaughter(textStyle: textTheme?.display4),
      display3: GoogleFonts.architectsDaughter(textStyle: textTheme?.display3),
      display2: GoogleFonts.architectsDaughter(textStyle: textTheme?.display2),
      display1: GoogleFonts.architectsDaughter(textStyle: textTheme?.display1),
      headline: GoogleFonts.architectsDaughter(textStyle: textTheme?.headline),
      title: GoogleFonts.architectsDaughter(textStyle: textTheme?.title),
      subhead: GoogleFonts.architectsDaughter(textStyle: textTheme?.subhead),
      body2: GoogleFonts.architectsDaughter(textStyle: textTheme?.body2),
      body1: GoogleFonts.architectsDaughter(textStyle: textTheme?.body1),
      caption: GoogleFonts.architectsDaughter(textStyle: textTheme?.caption),
      button: GoogleFonts.architectsDaughter(textStyle: textTheme?.button),
      subtitle: GoogleFonts.architectsDaughter(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.architectsDaughter(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Archivo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo
  static TextStyle archivo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/archivo/v6/k3kQo8UDI-1M0wlSTd7iL0nAMaM.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/archivo/v6/k3kSo8UDI-1M0wlSfdzoK2vFIaOV8A.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/archivo/v6/k3kVo8UDI-1M0wlSdSrLC0HrLaqM6Q4.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/archivo/v6/k3kXo8UDI-1M0wlSfdzQ30LhKYiJ-Q7m8w.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/archivo/v6/k3kVo8UDI-1M0wlSdQbMC0HrLaqM6Q4.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/archivo/v6/k3kXo8UDI-1M0wlSfdzQ80XhKYiJ-Q7m8w.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/archivo/v6/k3kVo8UDI-1M0wlSdWLNC0HrLaqM6Q4.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/archivo/v6/k3kXo8UDI-1M0wlSfdzQl0ThKYiJ-Q7m8w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Archivo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Archivo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo
  static TextTheme archivoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.archivo(textStyle: textTheme?.display4),
      display3: GoogleFonts.archivo(textStyle: textTheme?.display3),
      display2: GoogleFonts.archivo(textStyle: textTheme?.display2),
      display1: GoogleFonts.archivo(textStyle: textTheme?.display1),
      headline: GoogleFonts.archivo(textStyle: textTheme?.headline),
      title: GoogleFonts.archivo(textStyle: textTheme?.title),
      subhead: GoogleFonts.archivo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.archivo(textStyle: textTheme?.body2),
      body1: GoogleFonts.archivo(textStyle: textTheme?.body1),
      caption: GoogleFonts.archivo(textStyle: textTheme?.caption),
      button: GoogleFonts.archivo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.archivo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.archivo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Archivo Black font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo+Black
  static TextStyle archivoBlack({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/archivoblack/v9/HTxqL289NzCGg4MzN6KJ7eW6OYuP_x7yx3A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArchivoBlack',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Archivo Black font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo+Black
  static TextTheme archivoBlackTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.archivoBlack(textStyle: textTheme?.display4),
      display3: GoogleFonts.archivoBlack(textStyle: textTheme?.display3),
      display2: GoogleFonts.archivoBlack(textStyle: textTheme?.display2),
      display1: GoogleFonts.archivoBlack(textStyle: textTheme?.display1),
      headline: GoogleFonts.archivoBlack(textStyle: textTheme?.headline),
      title: GoogleFonts.archivoBlack(textStyle: textTheme?.title),
      subhead: GoogleFonts.archivoBlack(textStyle: textTheme?.subhead),
      body2: GoogleFonts.archivoBlack(textStyle: textTheme?.body2),
      body1: GoogleFonts.archivoBlack(textStyle: textTheme?.body1),
      caption: GoogleFonts.archivoBlack(textStyle: textTheme?.caption),
      button: GoogleFonts.archivoBlack(textStyle: textTheme?.button),
      subtitle: GoogleFonts.archivoBlack(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.archivoBlack(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Archivo Narrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo+Narrow
  static TextStyle archivoNarrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/archivonarrow/v11/tss0ApVBdCYD5Q7hcxTE1ArZ0Yb3g31S2s8p.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/archivonarrow/v11/tss2ApVBdCYD5Q7hcxTE1ArZ0bb1iXlw398pJxk.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/archivonarrow/v11/tss3ApVBdCYD5Q7hcxTE1ArZ0b4Dqlla8dMgPgBu.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/archivonarrow/v11/tssxApVBdCYD5Q7hcxTE1ArZ0bb1sY1Z-9cCOxBu_BM.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/archivonarrow/v11/tss3ApVBdCYD5Q7hcxTE1ArZ0b4vrVla8dMgPgBu.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/archivonarrow/v11/tssxApVBdCYD5Q7hcxTE1ArZ0bb1saFe-9cCOxBu_BM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/archivonarrow/v11/tss3ApVBdCYD5Q7hcxTE1ArZ0b5LrFla8dMgPgBu.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/archivonarrow/v11/tssxApVBdCYD5Q7hcxTE1ArZ0bb1scVf-9cCOxBu_BM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArchivoNarrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Archivo Narrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Archivo+Narrow
  static TextTheme archivoNarrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.archivoNarrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.archivoNarrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.archivoNarrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.archivoNarrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.archivoNarrow(textStyle: textTheme?.headline),
      title: GoogleFonts.archivoNarrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.archivoNarrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.archivoNarrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.archivoNarrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.archivoNarrow(textStyle: textTheme?.caption),
      button: GoogleFonts.archivoNarrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.archivoNarrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.archivoNarrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aref Ruqaa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aref+Ruqaa
  static TextStyle arefRuqaa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arefruqaa/v8/WwkbxPW1E165rajQKDulEIAiVNo5xNY.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/arefruqaa/v8/WwkYxPW1E165rajQKDulKDwNcNIS2N_7Bdk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArefRuqaa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aref Ruqaa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aref+Ruqaa
  static TextTheme arefRuqaaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arefRuqaa(textStyle: textTheme?.display4),
      display3: GoogleFonts.arefRuqaa(textStyle: textTheme?.display3),
      display2: GoogleFonts.arefRuqaa(textStyle: textTheme?.display2),
      display1: GoogleFonts.arefRuqaa(textStyle: textTheme?.display1),
      headline: GoogleFonts.arefRuqaa(textStyle: textTheme?.headline),
      title: GoogleFonts.arefRuqaa(textStyle: textTheme?.title),
      subhead: GoogleFonts.arefRuqaa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arefRuqaa(textStyle: textTheme?.body2),
      body1: GoogleFonts.arefRuqaa(textStyle: textTheme?.body1),
      caption: GoogleFonts.arefRuqaa(textStyle: textTheme?.caption),
      button: GoogleFonts.arefRuqaa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arefRuqaa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arefRuqaa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arima Madurai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arima+Madurai
  static TextStyle arimaMadurai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/arimamadurai/v5/t5t4IRoeKYORG0WNMgnC3seB1V3PqrGCch4Drg.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/arimamadurai/v5/t5t7IRoeKYORG0WNMgnC3seB1fHuipusfhcat2c.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/arimamadurai/v5/t5t7IRoeKYORG0WNMgnC3seB1ZXtipusfhcat2c.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arimamadurai/v5/t5tmIRoeKYORG0WNMgnC3seB7TnFrpOHYh4.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/arimamadurai/v5/t5t7IRoeKYORG0WNMgnC3seB1c3sipusfhcat2c.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/arimamadurai/v5/t5t7IRoeKYORG0WNMgnC3seB1YXqipusfhcat2c.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/arimamadurai/v5/t5t7IRoeKYORG0WNMgnC3seB1Znpipusfhcat2c.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/arimamadurai/v5/t5t7IRoeKYORG0WNMgnC3seB1b3oipusfhcat2c.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ArimaMadurai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arima Madurai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arima+Madurai
  static TextTheme arimaMaduraiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arimaMadurai(textStyle: textTheme?.display4),
      display3: GoogleFonts.arimaMadurai(textStyle: textTheme?.display3),
      display2: GoogleFonts.arimaMadurai(textStyle: textTheme?.display2),
      display1: GoogleFonts.arimaMadurai(textStyle: textTheme?.display1),
      headline: GoogleFonts.arimaMadurai(textStyle: textTheme?.headline),
      title: GoogleFonts.arimaMadurai(textStyle: textTheme?.title),
      subhead: GoogleFonts.arimaMadurai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arimaMadurai(textStyle: textTheme?.body2),
      body1: GoogleFonts.arimaMadurai(textStyle: textTheme?.body1),
      caption: GoogleFonts.arimaMadurai(textStyle: textTheme?.caption),
      button: GoogleFonts.arimaMadurai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arimaMadurai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arimaMadurai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arimo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arimo
  static TextStyle arimo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arimo/v13/P5sMzZCDf9_T_20eziBMjI-u.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/arimo/v13/P5sCzZCDf9_T_10cxCRuiZ-uydg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/arimo/v13/P5sBzZCDf9_T_1Wi4QREp5On0ME2.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/arimo/v13/P5sHzZCDf9_T_10c_JhBrZeF1dE2PY4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arimo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arimo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arimo
  static TextTheme arimoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arimo(textStyle: textTheme?.display4),
      display3: GoogleFonts.arimo(textStyle: textTheme?.display3),
      display2: GoogleFonts.arimo(textStyle: textTheme?.display2),
      display1: GoogleFonts.arimo(textStyle: textTheme?.display1),
      headline: GoogleFonts.arimo(textStyle: textTheme?.headline),
      title: GoogleFonts.arimo(textStyle: textTheme?.title),
      subhead: GoogleFonts.arimo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arimo(textStyle: textTheme?.body2),
      body1: GoogleFonts.arimo(textStyle: textTheme?.body1),
      caption: GoogleFonts.arimo(textStyle: textTheme?.caption),
      button: GoogleFonts.arimo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arimo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arimo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arizonia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arizonia
  static TextStyle arizonia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arizonia/v10/neIIzCemt4A5qa7mv6WGHK06UY30.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arizonia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arizonia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arizonia
  static TextTheme arizoniaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arizonia(textStyle: textTheme?.display4),
      display3: GoogleFonts.arizonia(textStyle: textTheme?.display3),
      display2: GoogleFonts.arizonia(textStyle: textTheme?.display2),
      display1: GoogleFonts.arizonia(textStyle: textTheme?.display1),
      headline: GoogleFonts.arizonia(textStyle: textTheme?.headline),
      title: GoogleFonts.arizonia(textStyle: textTheme?.title),
      subhead: GoogleFonts.arizonia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arizonia(textStyle: textTheme?.body2),
      body1: GoogleFonts.arizonia(textStyle: textTheme?.body1),
      caption: GoogleFonts.arizonia(textStyle: textTheme?.caption),
      button: GoogleFonts.arizonia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arizonia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arizonia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Armata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Armata
  static TextStyle armata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/armata/v11/gokvH63_HV5jQ-E9lD53Q2u_mQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Armata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Armata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Armata
  static TextTheme armataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.armata(textStyle: textTheme?.display4),
      display3: GoogleFonts.armata(textStyle: textTheme?.display3),
      display2: GoogleFonts.armata(textStyle: textTheme?.display2),
      display1: GoogleFonts.armata(textStyle: textTheme?.display1),
      headline: GoogleFonts.armata(textStyle: textTheme?.headline),
      title: GoogleFonts.armata(textStyle: textTheme?.title),
      subhead: GoogleFonts.armata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.armata(textStyle: textTheme?.body2),
      body1: GoogleFonts.armata(textStyle: textTheme?.body1),
      caption: GoogleFonts.armata(textStyle: textTheme?.caption),
      button: GoogleFonts.armata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.armata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.armata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arsenal font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arsenal
  static TextStyle arsenal({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arsenal/v4/wXKrE3kQtZQ4pF3D11_WAewrhXY.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/arsenal/v4/wXKpE3kQtZQ4pF3D513cBc4ulXYrtA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/arsenal/v4/wXKuE3kQtZQ4pF3D7-P5JeQAmX8yrdk.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/arsenal/v4/wXKsE3kQtZQ4pF3D513kueEKnV03vdnKjw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arsenal',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arsenal font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arsenal
  static TextTheme arsenalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arsenal(textStyle: textTheme?.display4),
      display3: GoogleFonts.arsenal(textStyle: textTheme?.display3),
      display2: GoogleFonts.arsenal(textStyle: textTheme?.display2),
      display1: GoogleFonts.arsenal(textStyle: textTheme?.display1),
      headline: GoogleFonts.arsenal(textStyle: textTheme?.headline),
      title: GoogleFonts.arsenal(textStyle: textTheme?.title),
      subhead: GoogleFonts.arsenal(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arsenal(textStyle: textTheme?.body2),
      body1: GoogleFonts.arsenal(textStyle: textTheme?.body1),
      caption: GoogleFonts.arsenal(textStyle: textTheme?.caption),
      button: GoogleFonts.arsenal(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arsenal(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arsenal(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Artifika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Artifika
  static TextStyle artifika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/artifika/v10/VEMyRoxzronptCuxu6Wt5jDtreOL.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Artifika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Artifika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Artifika
  static TextTheme artifikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.artifika(textStyle: textTheme?.display4),
      display3: GoogleFonts.artifika(textStyle: textTheme?.display3),
      display2: GoogleFonts.artifika(textStyle: textTheme?.display2),
      display1: GoogleFonts.artifika(textStyle: textTheme?.display1),
      headline: GoogleFonts.artifika(textStyle: textTheme?.headline),
      title: GoogleFonts.artifika(textStyle: textTheme?.title),
      subhead: GoogleFonts.artifika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.artifika(textStyle: textTheme?.body2),
      body1: GoogleFonts.artifika(textStyle: textTheme?.body1),
      caption: GoogleFonts.artifika(textStyle: textTheme?.caption),
      button: GoogleFonts.artifika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.artifika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.artifika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arvo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arvo
  static TextStyle arvo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arvo/v13/tDbD2oWUg0MKmSAa7Lzr7vs.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/arvo/v13/tDbN2oWUg0MKqSIQ6J7u_vvijQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/arvo/v13/tDbM2oWUg0MKoZw1yLTA8vL7lAE.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/arvo/v13/tDbO2oWUg0MKqSIoVLHK9tD-hAHkGg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arvo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arvo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arvo
  static TextTheme arvoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arvo(textStyle: textTheme?.display4),
      display3: GoogleFonts.arvo(textStyle: textTheme?.display3),
      display2: GoogleFonts.arvo(textStyle: textTheme?.display2),
      display1: GoogleFonts.arvo(textStyle: textTheme?.display1),
      headline: GoogleFonts.arvo(textStyle: textTheme?.headline),
      title: GoogleFonts.arvo(textStyle: textTheme?.title),
      subhead: GoogleFonts.arvo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arvo(textStyle: textTheme?.body2),
      body1: GoogleFonts.arvo(textStyle: textTheme?.body1),
      caption: GoogleFonts.arvo(textStyle: textTheme?.caption),
      button: GoogleFonts.arvo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arvo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arvo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Arya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arya
  static TextStyle arya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/arya/v5/ga6CawNG-HJd9Ub1-beqdFE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/arya/v5/ga6NawNG-HJdzfra3b-BaFg3dRE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Arya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Arya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Arya
  static TextTheme aryaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.arya(textStyle: textTheme?.display4),
      display3: GoogleFonts.arya(textStyle: textTheme?.display3),
      display2: GoogleFonts.arya(textStyle: textTheme?.display2),
      display1: GoogleFonts.arya(textStyle: textTheme?.display1),
      headline: GoogleFonts.arya(textStyle: textTheme?.headline),
      title: GoogleFonts.arya(textStyle: textTheme?.title),
      subhead: GoogleFonts.arya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.arya(textStyle: textTheme?.body2),
      body1: GoogleFonts.arya(textStyle: textTheme?.body1),
      caption: GoogleFonts.arya(textStyle: textTheme?.caption),
      button: GoogleFonts.arya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.arya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.arya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asap font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asap
  static TextStyle asap({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/asap/v11/KFOoCniXp96a-zwU4UROGzY.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/asap/v11/KFOmCniXp96ayz4e5WZLCzYlKw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/asap/v11/KFOnCniXp96aw8g9xUxlBz88MsA.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/asap/v11/KFOlCniXp96ayz4mEU9vAx05IsDqlA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/asap/v11/KFOnCniXp96aw-Q6xUxlBz88MsA.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/asap/v11/KFOlCniXp96ayz4mPUhvAx05IsDqlA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/asap/v11/KFOnCniXp96aw4A7xUxlBz88MsA.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/asap/v11/KFOlCniXp96ayz4mWUlvAx05IsDqlA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Asap',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asap font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asap
  static TextTheme asapTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asap(textStyle: textTheme?.display4),
      display3: GoogleFonts.asap(textStyle: textTheme?.display3),
      display2: GoogleFonts.asap(textStyle: textTheme?.display2),
      display1: GoogleFonts.asap(textStyle: textTheme?.display1),
      headline: GoogleFonts.asap(textStyle: textTheme?.headline),
      title: GoogleFonts.asap(textStyle: textTheme?.title),
      subhead: GoogleFonts.asap(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asap(textStyle: textTheme?.body2),
      body1: GoogleFonts.asap(textStyle: textTheme?.body1),
      caption: GoogleFonts.asap(textStyle: textTheme?.caption),
      button: GoogleFonts.asap(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asap(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asap(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asap Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asap+Condensed
  static TextStyle asapCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/asapcondensed/v5/pxidypY1o9NHyXh3WvSbGSggdNeLYk1Mq3ap.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/asapcondensed/v5/pxifypY1o9NHyXh3WvSbGSggdOeJaElurmapvvM.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/asapcondensed/v5/pxieypY1o9NHyXh3WvSbGSggdO9_S2lEgGqgp-pO.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/asapcondensed/v5/pxiYypY1o9NHyXh3WvSbGSggdOeJUL1Him6CovpOkXA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/asapcondensed/v5/pxieypY1o9NHyXh3WvSbGSggdO9TTGlEgGqgp-pO.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/asapcondensed/v5/pxiYypY1o9NHyXh3WvSbGSggdOeJUJFAim6CovpOkXA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/asapcondensed/v5/pxieypY1o9NHyXh3WvSbGSggdO83TWlEgGqgp-pO.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/asapcondensed/v5/pxiYypY1o9NHyXh3WvSbGSggdOeJUPVBim6CovpOkXA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AsapCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asap Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asap+Condensed
  static TextTheme asapCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asapCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.asapCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.asapCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.asapCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.asapCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.asapCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.asapCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asapCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.asapCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.asapCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.asapCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asapCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asapCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asar
  static TextStyle asar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/asar/v7/sZlLdRyI6TBIXkYQDLlTW6E.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Asar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asar
  static TextTheme asarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asar(textStyle: textTheme?.display4),
      display3: GoogleFonts.asar(textStyle: textTheme?.display3),
      display2: GoogleFonts.asar(textStyle: textTheme?.display2),
      display1: GoogleFonts.asar(textStyle: textTheme?.display1),
      headline: GoogleFonts.asar(textStyle: textTheme?.headline),
      title: GoogleFonts.asar(textStyle: textTheme?.title),
      subhead: GoogleFonts.asar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asar(textStyle: textTheme?.body2),
      body1: GoogleFonts.asar(textStyle: textTheme?.body1),
      caption: GoogleFonts.asar(textStyle: textTheme?.caption),
      button: GoogleFonts.asar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asset font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asset
  static TextStyle asset({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/asset/v10/SLXGc1na-mM4cWImRJqExst1.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Asset',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asset font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asset
  static TextTheme assetTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asset(textStyle: textTheme?.display4),
      display3: GoogleFonts.asset(textStyle: textTheme?.display3),
      display2: GoogleFonts.asset(textStyle: textTheme?.display2),
      display1: GoogleFonts.asset(textStyle: textTheme?.display1),
      headline: GoogleFonts.asset(textStyle: textTheme?.headline),
      title: GoogleFonts.asset(textStyle: textTheme?.title),
      subhead: GoogleFonts.asset(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asset(textStyle: textTheme?.body2),
      body1: GoogleFonts.asset(textStyle: textTheme?.body1),
      caption: GoogleFonts.asset(textStyle: textTheme?.caption),
      button: GoogleFonts.asset(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asset(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asset(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Assistant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Assistant
  static TextStyle assistant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/assistant/v4/2sDZZGJYnIjSi6H75xk7p0ScA5cZbCjItw.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/assistant/v4/2sDZZGJYnIjSi6H75xk7w0ecA5cZbCjItw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/assistant/v4/2sDcZGJYnIjSi6H75xkDb2-4C7wFZQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/assistant/v4/2sDZZGJYnIjSi6H75xk7t0GcA5cZbCjItw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/assistant/v4/2sDZZGJYnIjSi6H75xk700CcA5cZbCjItw.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/assistant/v4/2sDZZGJYnIjSi6H75xk7z0OcA5cZbCjItw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Assistant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Assistant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Assistant
  static TextTheme assistantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.assistant(textStyle: textTheme?.display4),
      display3: GoogleFonts.assistant(textStyle: textTheme?.display3),
      display2: GoogleFonts.assistant(textStyle: textTheme?.display2),
      display1: GoogleFonts.assistant(textStyle: textTheme?.display1),
      headline: GoogleFonts.assistant(textStyle: textTheme?.headline),
      title: GoogleFonts.assistant(textStyle: textTheme?.title),
      subhead: GoogleFonts.assistant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.assistant(textStyle: textTheme?.body2),
      body1: GoogleFonts.assistant(textStyle: textTheme?.body1),
      caption: GoogleFonts.assistant(textStyle: textTheme?.caption),
      button: GoogleFonts.assistant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.assistant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.assistant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Astloch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Astloch
  static TextStyle astloch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/astloch/v11/TuGRUVJ8QI5GSeUjq9wRzMtkH1Q.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/astloch/v11/TuGUUVJ8QI5GSeUjk2A-6MNPA10xLMQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Astloch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Astloch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Astloch
  static TextTheme astlochTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.astloch(textStyle: textTheme?.display4),
      display3: GoogleFonts.astloch(textStyle: textTheme?.display3),
      display2: GoogleFonts.astloch(textStyle: textTheme?.display2),
      display1: GoogleFonts.astloch(textStyle: textTheme?.display1),
      headline: GoogleFonts.astloch(textStyle: textTheme?.headline),
      title: GoogleFonts.astloch(textStyle: textTheme?.title),
      subhead: GoogleFonts.astloch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.astloch(textStyle: textTheme?.body2),
      body1: GoogleFonts.astloch(textStyle: textTheme?.body1),
      caption: GoogleFonts.astloch(textStyle: textTheme?.caption),
      button: GoogleFonts.astloch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.astloch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.astloch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Asul font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asul
  static TextStyle asul({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/asul/v9/VuJ-dNjKxYr46fMFXK78JIg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/asul/v9/VuJxdNjKxYr40U8qeKbXOIFneRo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Asul',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Asul font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Asul
  static TextTheme asulTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.asul(textStyle: textTheme?.display4),
      display3: GoogleFonts.asul(textStyle: textTheme?.display3),
      display2: GoogleFonts.asul(textStyle: textTheme?.display2),
      display1: GoogleFonts.asul(textStyle: textTheme?.display1),
      headline: GoogleFonts.asul(textStyle: textTheme?.headline),
      title: GoogleFonts.asul(textStyle: textTheme?.title),
      subhead: GoogleFonts.asul(textStyle: textTheme?.subhead),
      body2: GoogleFonts.asul(textStyle: textTheme?.body2),
      body1: GoogleFonts.asul(textStyle: textTheme?.body1),
      caption: GoogleFonts.asul(textStyle: textTheme?.caption),
      button: GoogleFonts.asul(textStyle: textTheme?.button),
      subtitle: GoogleFonts.asul(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.asul(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Athiti font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Athiti
  static TextStyle athiti({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/athiti/v4/pe0sMISdLIZIv1wAxDNyAv2-C99ycg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/athiti/v4/pe0sMISdLIZIv1wAoDByAv2-C99ycg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/athiti/v4/pe0vMISdLIZIv1w4DBhWCtaiAg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/athiti/v4/pe0sMISdLIZIv1wA-DFyAv2-C99ycg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/athiti/v4/pe0sMISdLIZIv1wA1DZyAv2-C99ycg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/athiti/v4/pe0sMISdLIZIv1wAsDdyAv2-C99ycg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Athiti',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Athiti font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Athiti
  static TextTheme athitiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.athiti(textStyle: textTheme?.display4),
      display3: GoogleFonts.athiti(textStyle: textTheme?.display3),
      display2: GoogleFonts.athiti(textStyle: textTheme?.display2),
      display1: GoogleFonts.athiti(textStyle: textTheme?.display1),
      headline: GoogleFonts.athiti(textStyle: textTheme?.headline),
      title: GoogleFonts.athiti(textStyle: textTheme?.title),
      subhead: GoogleFonts.athiti(textStyle: textTheme?.subhead),
      body2: GoogleFonts.athiti(textStyle: textTheme?.body2),
      body1: GoogleFonts.athiti(textStyle: textTheme?.body1),
      caption: GoogleFonts.athiti(textStyle: textTheme?.caption),
      button: GoogleFonts.athiti(textStyle: textTheme?.button),
      subtitle: GoogleFonts.athiti(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.athiti(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Atma font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Atma
  static TextStyle atma({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/atma/v5/uK_z4rqWc-Eoo8JzKjc9PvedRkM.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/atma/v5/uK_84rqWc-Eom25bDj8WIv4.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/atma/v5/uK_z4rqWc-Eoo5pyKjc9PvedRkM.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/atma/v5/uK_z4rqWc-Eoo7Z1Kjc9PvedRkM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/atma/v5/uK_z4rqWc-Eoo9J0Kjc9PvedRkM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Atma',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Atma font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Atma
  static TextTheme atmaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.atma(textStyle: textTheme?.display4),
      display3: GoogleFonts.atma(textStyle: textTheme?.display3),
      display2: GoogleFonts.atma(textStyle: textTheme?.display2),
      display1: GoogleFonts.atma(textStyle: textTheme?.display1),
      headline: GoogleFonts.atma(textStyle: textTheme?.headline),
      title: GoogleFonts.atma(textStyle: textTheme?.title),
      subhead: GoogleFonts.atma(textStyle: textTheme?.subhead),
      body2: GoogleFonts.atma(textStyle: textTheme?.body2),
      body1: GoogleFonts.atma(textStyle: textTheme?.body1),
      caption: GoogleFonts.atma(textStyle: textTheme?.caption),
      button: GoogleFonts.atma(textStyle: textTheme?.button),
      subtitle: GoogleFonts.atma(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.atma(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Atomic Age font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Atomic+Age
  static TextStyle atomicAge({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/atomicage/v12/f0Xz0eug6sdmRFkYZZGL58Ht9a8GYeA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AtomicAge',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Atomic Age font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Atomic+Age
  static TextTheme atomicAgeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.atomicAge(textStyle: textTheme?.display4),
      display3: GoogleFonts.atomicAge(textStyle: textTheme?.display3),
      display2: GoogleFonts.atomicAge(textStyle: textTheme?.display2),
      display1: GoogleFonts.atomicAge(textStyle: textTheme?.display1),
      headline: GoogleFonts.atomicAge(textStyle: textTheme?.headline),
      title: GoogleFonts.atomicAge(textStyle: textTheme?.title),
      subhead: GoogleFonts.atomicAge(textStyle: textTheme?.subhead),
      body2: GoogleFonts.atomicAge(textStyle: textTheme?.body2),
      body1: GoogleFonts.atomicAge(textStyle: textTheme?.body1),
      caption: GoogleFonts.atomicAge(textStyle: textTheme?.caption),
      button: GoogleFonts.atomicAge(textStyle: textTheme?.button),
      subtitle: GoogleFonts.atomicAge(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.atomicAge(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Aubrey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aubrey
  static TextStyle aubrey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/aubrey/v12/q5uGsou7NPBw-p7vugNsCxVEgA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Aubrey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Aubrey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Aubrey
  static TextTheme aubreyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.aubrey(textStyle: textTheme?.display4),
      display3: GoogleFonts.aubrey(textStyle: textTheme?.display3),
      display2: GoogleFonts.aubrey(textStyle: textTheme?.display2),
      display1: GoogleFonts.aubrey(textStyle: textTheme?.display1),
      headline: GoogleFonts.aubrey(textStyle: textTheme?.headline),
      title: GoogleFonts.aubrey(textStyle: textTheme?.title),
      subhead: GoogleFonts.aubrey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.aubrey(textStyle: textTheme?.body2),
      body1: GoogleFonts.aubrey(textStyle: textTheme?.body1),
      caption: GoogleFonts.aubrey(textStyle: textTheme?.caption),
      button: GoogleFonts.aubrey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.aubrey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.aubrey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Audiowide font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Audiowide
  static TextStyle audiowide({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/audiowide/v8/l7gdbjpo0cum0ckerWCtkQXPExpQBw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Audiowide',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Audiowide font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Audiowide
  static TextTheme audiowideTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.audiowide(textStyle: textTheme?.display4),
      display3: GoogleFonts.audiowide(textStyle: textTheme?.display3),
      display2: GoogleFonts.audiowide(textStyle: textTheme?.display2),
      display1: GoogleFonts.audiowide(textStyle: textTheme?.display1),
      headline: GoogleFonts.audiowide(textStyle: textTheme?.headline),
      title: GoogleFonts.audiowide(textStyle: textTheme?.title),
      subhead: GoogleFonts.audiowide(textStyle: textTheme?.subhead),
      body2: GoogleFonts.audiowide(textStyle: textTheme?.body2),
      body1: GoogleFonts.audiowide(textStyle: textTheme?.body1),
      caption: GoogleFonts.audiowide(textStyle: textTheme?.caption),
      button: GoogleFonts.audiowide(textStyle: textTheme?.button),
      subtitle: GoogleFonts.audiowide(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.audiowide(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Autour One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Autour+One
  static TextStyle autourOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/autourone/v9/UqyVK80cP25l3fJgbdfbk5lWVscxdKE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AutourOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Autour One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Autour+One
  static TextTheme autourOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.autourOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.autourOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.autourOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.autourOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.autourOne(textStyle: textTheme?.headline),
      title: GoogleFonts.autourOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.autourOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.autourOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.autourOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.autourOne(textStyle: textTheme?.caption),
      button: GoogleFonts.autourOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.autourOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.autourOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Average font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Average
  static TextStyle average({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/average/v8/fC1hPYBHe23MxA7rIeJwVWytTyk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Average',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Average font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Average
  static TextTheme averageTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.average(textStyle: textTheme?.display4),
      display3: GoogleFonts.average(textStyle: textTheme?.display3),
      display2: GoogleFonts.average(textStyle: textTheme?.display2),
      display1: GoogleFonts.average(textStyle: textTheme?.display1),
      headline: GoogleFonts.average(textStyle: textTheme?.headline),
      title: GoogleFonts.average(textStyle: textTheme?.title),
      subhead: GoogleFonts.average(textStyle: textTheme?.subhead),
      body2: GoogleFonts.average(textStyle: textTheme?.body2),
      body1: GoogleFonts.average(textStyle: textTheme?.body1),
      caption: GoogleFonts.average(textStyle: textTheme?.caption),
      button: GoogleFonts.average(textStyle: textTheme?.button),
      subtitle: GoogleFonts.average(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.average(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Average Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Average+Sans
  static TextStyle averageSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/averagesans/v8/1Ptpg8fLXP2dlAXR-HlJJNJPBdqazVoK4A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AverageSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Average Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Average+Sans
  static TextTheme averageSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averageSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.averageSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.averageSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.averageSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.averageSans(textStyle: textTheme?.headline),
      title: GoogleFonts.averageSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.averageSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averageSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.averageSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.averageSans(textStyle: textTheme?.caption),
      button: GoogleFonts.averageSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averageSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averageSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Averia Gruesa Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Gruesa+Libre
  static TextStyle averiaGruesaLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/averiagruesalibre/v8/NGSov4nEGEktOaDRKsY-1dhh8eEtIx3ZUmmJw0SLRA8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AveriaGruesaLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Averia Gruesa Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Gruesa+Libre
  static TextTheme averiaGruesaLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averiaGruesaLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Averia Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Libre
  static TextStyle averiaLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/averialibre/v8/2V0FKIcMGZEnV6xygz7eNjEarovtb07t-pQgTw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/averialibre/v8/2V0HKIcMGZEnV6xygz7eNjESAJFhbUTp2JEwT4Sk.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/averialibre/v8/2V0aKIcMGZEnV6xygz7eNjEiAqPJZ2Xx8w.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/averialibre/v8/2V0EKIcMGZEnV6xygz7eNjESAKnNRWDh8405.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/averialibre/v8/2V0FKIcMGZEnV6xygz7eNjEavoztb07t-pQgTw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/averialibre/v8/2V0HKIcMGZEnV6xygz7eNjESAJFxakTp2JEwT4Sk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AveriaLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Averia Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Libre
  static TextTheme averiaLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averiaLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.averiaLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.averiaLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.averiaLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.averiaLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.averiaLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.averiaLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averiaLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.averiaLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.averiaLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.averiaLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averiaLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averiaLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Averia Sans Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Sans+Libre
  static TextStyle averiaSansLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/averiasanslibre/v8/ga6SaxZG_G5OvCf_rt7FH3B6BHLMEd3lMKcQJZP1LmD9.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/averiasanslibre/v8/ga6caxZG_G5OvCf_rt7FH3B6BHLMEdVLKisSL5fXK3D9qtg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/averiasanslibre/v8/ga6XaxZG_G5OvCf_rt7FH3B6BHLMEeVJGIMYDo_8.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/averiasanslibre/v8/ga6RaxZG_G5OvCf_rt7FH3B6BHLMEdVLEoc6C5_8N3k.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/averiasanslibre/v8/ga6SaxZG_G5OvCf_rt7FH3B6BHLMEd31N6cQJZP1LmD9.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/averiasanslibre/v8/ga6caxZG_G5OvCf_rt7FH3B6BHLMEdVLKjsVL5fXK3D9qtg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AveriaSansLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Averia Sans Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Sans+Libre
  static TextTheme averiaSansLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averiaSansLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.averiaSansLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.averiaSansLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.averiaSansLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.averiaSansLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.averiaSansLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.averiaSansLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averiaSansLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.averiaSansLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.averiaSansLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.averiaSansLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averiaSansLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averiaSansLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Averia Serif Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Serif+Libre
  static TextStyle averiaSerifLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/averiaseriflibre/v9/neIVzD2ms4wxr6GvjeD0X88SHPyX2xYGCSmqwacqdrKvbQ.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/averiaseriflibre/v9/neIbzD2ms4wxr6GvjeD0X88SHPyX2xYOpzMmw60uVLe_bXHq.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/averiaseriflibre/v9/neIWzD2ms4wxr6GvjeD0X88SHPyX2xY-pQGOyYw2fw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/averiaseriflibre/v9/neIUzD2ms4wxr6GvjeD0X88SHPyX2xYOpwuK64kmf6u2.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/averiaseriflibre/v9/neIVzD2ms4wxr6GvjeD0X88SHPyX2xYGGS6qwacqdrKvbQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/averiaseriflibre/v9/neIbzD2ms4wxr6GvjeD0X88SHPyX2xYOpzM2xK0uVLe_bXHq.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'AveriaSerifLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Averia Serif Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Averia+Serif+Libre
  static TextTheme averiaSerifLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.averiaSerifLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the B612 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/B612
  static TextStyle b612({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/b612/v4/3JnySDDxiSz32jm4GDigUXw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/b612/v4/3Jn8SDDxiSz36juyHBqlQXwdVw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/b612/v4/3Jn9SDDxiSz34oWXPDCLTXUETuE.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/b612/v4/3Jn_SDDxiSz36juKoDWBSVcBXuFb0Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'B612',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the B612 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/B612
  static TextTheme b612TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.b612(textStyle: textTheme?.display4),
      display3: GoogleFonts.b612(textStyle: textTheme?.display3),
      display2: GoogleFonts.b612(textStyle: textTheme?.display2),
      display1: GoogleFonts.b612(textStyle: textTheme?.display1),
      headline: GoogleFonts.b612(textStyle: textTheme?.headline),
      title: GoogleFonts.b612(textStyle: textTheme?.title),
      subhead: GoogleFonts.b612(textStyle: textTheme?.subhead),
      body2: GoogleFonts.b612(textStyle: textTheme?.body2),
      body1: GoogleFonts.b612(textStyle: textTheme?.body1),
      caption: GoogleFonts.b612(textStyle: textTheme?.caption),
      button: GoogleFonts.b612(textStyle: textTheme?.button),
      subtitle: GoogleFonts.b612(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.b612(textStyle: textTheme?.overline),
    );
  }

  /// Applies the B612 Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/B612+Mono
  static TextStyle b612Mono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/b612mono/v4/kmK_Zq85QVWbN1eW6lJl1wTcquRTtg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/b612mono/v4/kmK5Zq85QVWbN1eW6lJV1Q7YiOFDtqtf.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/b612mono/v4/kmK6Zq85QVWbN1eW6lJdayv4os9Pv7JGSg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/b612mono/v4/kmKkZq85QVWbN1eW6lJV1TZkp8VLnbdWSg4x.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'B612Mono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the B612 Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/B612+Mono
  static TextTheme b612MonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.b612Mono(textStyle: textTheme?.display4),
      display3: GoogleFonts.b612Mono(textStyle: textTheme?.display3),
      display2: GoogleFonts.b612Mono(textStyle: textTheme?.display2),
      display1: GoogleFonts.b612Mono(textStyle: textTheme?.display1),
      headline: GoogleFonts.b612Mono(textStyle: textTheme?.headline),
      title: GoogleFonts.b612Mono(textStyle: textTheme?.title),
      subhead: GoogleFonts.b612Mono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.b612Mono(textStyle: textTheme?.body2),
      body1: GoogleFonts.b612Mono(textStyle: textTheme?.body1),
      caption: GoogleFonts.b612Mono(textStyle: textTheme?.caption),
      button: GoogleFonts.b612Mono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.b612Mono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.b612Mono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bad Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bad+Script
  static TextStyle badScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/badscript/v8/6NUT8F6PJgbFWQn47_x7lOwuzd1AZtw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BadScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bad Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bad+Script
  static TextTheme badScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.badScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.badScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.badScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.badScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.badScript(textStyle: textTheme?.headline),
      title: GoogleFonts.badScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.badScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.badScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.badScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.badScript(textStyle: textTheme?.caption),
      button: GoogleFonts.badScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.badScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.badScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bahiana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bahiana
  static TextStyle bahiana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bahiana/v4/uU9PCBUV4YenPWJU7xPb3vyHmlI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bahiana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bahiana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bahiana
  static TextTheme bahianaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bahiana(textStyle: textTheme?.display4),
      display3: GoogleFonts.bahiana(textStyle: textTheme?.display3),
      display2: GoogleFonts.bahiana(textStyle: textTheme?.display2),
      display1: GoogleFonts.bahiana(textStyle: textTheme?.display1),
      headline: GoogleFonts.bahiana(textStyle: textTheme?.headline),
      title: GoogleFonts.bahiana(textStyle: textTheme?.title),
      subhead: GoogleFonts.bahiana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bahiana(textStyle: textTheme?.body2),
      body1: GoogleFonts.bahiana(textStyle: textTheme?.body1),
      caption: GoogleFonts.bahiana(textStyle: textTheme?.caption),
      button: GoogleFonts.bahiana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bahiana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bahiana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bahianita font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bahianita
  static TextStyle bahianita({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bahianita/v2/yYLr0hTb3vuqqsBUgxWtxTvV2NJPcA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bahianita',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bahianita font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bahianita
  static TextTheme bahianitaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bahianita(textStyle: textTheme?.display4),
      display3: GoogleFonts.bahianita(textStyle: textTheme?.display3),
      display2: GoogleFonts.bahianita(textStyle: textTheme?.display2),
      display1: GoogleFonts.bahianita(textStyle: textTheme?.display1),
      headline: GoogleFonts.bahianita(textStyle: textTheme?.headline),
      title: GoogleFonts.bahianita(textStyle: textTheme?.title),
      subhead: GoogleFonts.bahianita(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bahianita(textStyle: textTheme?.body2),
      body1: GoogleFonts.bahianita(textStyle: textTheme?.body1),
      caption: GoogleFonts.bahianita(textStyle: textTheme?.caption),
      button: GoogleFonts.bahianita(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bahianita(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bahianita(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bai Jamjuree font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bai+Jamjuree
  static TextStyle baiJamjuree({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIqapSCOBt_aeQQ7ftydoa0kePuk5A1-yiSgA.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIoapSCOBt_aeQQ7ftydoa8W_oGkpox2S2CgOva.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIqapSCOBt_aeQQ7ftydoa09eDuk5A1-yiSgA.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIoapSCOBt_aeQQ7ftydoa8W_pikZox2S2CgOva.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDI1apSCOBt_aeQQ7ftydoaMWcjKm7sp8g.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIrapSCOBt_aeQQ7ftydoa8W8LOub458jGL.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIqapSCOBt_aeQQ7ftydoa0reHuk5A1-yiSgA.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIoapSCOBt_aeQQ7ftydoa8W_o6kJox2S2CgOva.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIqapSCOBt_aeQQ7ftydoa0gebuk5A1-yiSgA.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIoapSCOBt_aeQQ7ftydoa8W_oWl5ox2S2CgOva.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIqapSCOBt_aeQQ7ftydoa05efuk5A1-yiSgA.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/baijamjuree/v3/LDIoapSCOBt_aeQQ7ftydoa8W_pylpox2S2CgOva.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BaiJamjuree',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bai Jamjuree font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bai+Jamjuree
  static TextTheme baiJamjureeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.baiJamjuree(textStyle: textTheme?.display4),
      display3: GoogleFonts.baiJamjuree(textStyle: textTheme?.display3),
      display2: GoogleFonts.baiJamjuree(textStyle: textTheme?.display2),
      display1: GoogleFonts.baiJamjuree(textStyle: textTheme?.display1),
      headline: GoogleFonts.baiJamjuree(textStyle: textTheme?.headline),
      title: GoogleFonts.baiJamjuree(textStyle: textTheme?.title),
      subhead: GoogleFonts.baiJamjuree(textStyle: textTheme?.subhead),
      body2: GoogleFonts.baiJamjuree(textStyle: textTheme?.body2),
      body1: GoogleFonts.baiJamjuree(textStyle: textTheme?.body1),
      caption: GoogleFonts.baiJamjuree(textStyle: textTheme?.caption),
      button: GoogleFonts.baiJamjuree(textStyle: textTheme?.button),
      subtitle: GoogleFonts.baiJamjuree(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.baiJamjuree(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo
  static TextStyle baloo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baloo/v5/6xKhdSpJJ92I9PWIAG_5LWwJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Baloo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo
  static TextTheme balooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.baloo(textStyle: textTheme?.display4),
      display3: GoogleFonts.baloo(textStyle: textTheme?.display3),
      display2: GoogleFonts.baloo(textStyle: textTheme?.display2),
      display1: GoogleFonts.baloo(textStyle: textTheme?.display1),
      headline: GoogleFonts.baloo(textStyle: textTheme?.headline),
      title: GoogleFonts.baloo(textStyle: textTheme?.title),
      subhead: GoogleFonts.baloo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.baloo(textStyle: textTheme?.body2),
      body1: GoogleFonts.baloo(textStyle: textTheme?.body1),
      caption: GoogleFonts.baloo(textStyle: textTheme?.caption),
      button: GoogleFonts.baloo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.baloo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.baloo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Bhai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhai
  static TextStyle balooBhai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baloobhai/v5/ZgNWjP5GM7bCUdmXgWyVjGXEM4COoE4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooBhai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Bhai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhai
  static TextTheme balooBhaiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooBhai(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooBhai(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooBhai(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooBhai(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooBhai(textStyle: textTheme?.headline),
      title: GoogleFonts.balooBhai(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooBhai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooBhai(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooBhai(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooBhai(textStyle: textTheme?.caption),
      button: GoogleFonts.balooBhai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooBhai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooBhai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Bhaijaan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhaijaan
  static TextStyle balooBhaijaan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baloobhaijaan/v6/RWmRoKCU5fcqq8fOWNzFLqSjx4ECJmVjC0-V.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooBhaijaan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Bhaijaan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhaijaan
  static TextTheme balooBhaijaanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooBhaijaan(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooBhaijaan(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooBhaijaan(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooBhaijaan(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooBhaijaan(textStyle: textTheme?.headline),
      title: GoogleFonts.balooBhaijaan(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooBhaijaan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooBhaijaan(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooBhaijaan(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooBhaijaan(textStyle: textTheme?.caption),
      button: GoogleFonts.balooBhaijaan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooBhaijaan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooBhaijaan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Bhaina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhaina
  static TextStyle balooBhaina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baloobhaina/v5/Noa16Uzzzp2FIkfhq5vm9thxPAR9mhHobg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooBhaina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Bhaina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Bhaina
  static TextTheme balooBhainaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooBhaina(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooBhaina(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooBhaina(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooBhaina(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooBhaina(textStyle: textTheme?.headline),
      title: GoogleFonts.balooBhaina(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooBhaina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooBhaina(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooBhaina(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooBhaina(textStyle: textTheme?.caption),
      button: GoogleFonts.balooBhaina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooBhaina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooBhaina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Chettan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Chettan
  static TextStyle balooChettan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baloochettan/v5/0QImMXRN8o2gTC2YTr4665DA07z8_ApHqqk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooChettan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Chettan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Chettan
  static TextTheme balooChettanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooChettan(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooChettan(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooChettan(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooChettan(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooChettan(textStyle: textTheme?.headline),
      title: GoogleFonts.balooChettan(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooChettan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooChettan(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooChettan(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooChettan(textStyle: textTheme?.caption),
      button: GoogleFonts.balooChettan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooChettan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooChettan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Da font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Da
  static TextStyle balooDa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/balooda/v5/LhWmMVnXOfIZO795FXkfSvtVM8mZ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooDa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Da font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Da
  static TextTheme balooDaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooDa(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooDa(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooDa(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooDa(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooDa(textStyle: textTheme?.headline),
      title: GoogleFonts.balooDa(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooDa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooDa(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooDa(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooDa(textStyle: textTheme?.caption),
      button: GoogleFonts.balooDa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooDa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooDa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Paaji font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Paaji
  static TextStyle balooPaaji({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baloopaaji/v6/8AttGsyxM5KQQU-Y4MTwVZnToxvQBiot.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooPaaji',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Paaji font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Paaji
  static TextTheme balooPaajiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooPaaji(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooPaaji(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooPaaji(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooPaaji(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooPaaji(textStyle: textTheme?.headline),
      title: GoogleFonts.balooPaaji(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooPaaji(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooPaaji(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooPaaji(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooPaaji(textStyle: textTheme?.caption),
      button: GoogleFonts.balooPaaji(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooPaaji(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooPaaji(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Tamma font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Tamma
  static TextStyle balooTamma({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/balootamma/v6/JTUTjIk68Cy27gWhOWIghE5B5Arr-s50.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooTamma',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Tamma font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Tamma
  static TextTheme balooTammaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooTamma(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooTamma(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooTamma(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooTamma(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooTamma(textStyle: textTheme?.headline),
      title: GoogleFonts.balooTamma(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooTamma(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooTamma(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooTamma(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooTamma(textStyle: textTheme?.caption),
      button: GoogleFonts.balooTamma(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooTamma(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooTamma(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Tammudu font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Tammudu
  static TextStyle balooTammudu({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/balootammudu/v6/mFT3Wb8Qza7c_Z5HTsC_5nxW8EpQl9RWxD8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooTammudu',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Tammudu font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Tammudu
  static TextTheme balooTammuduTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooTammudu(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooTammudu(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooTammudu(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooTammudu(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooTammudu(textStyle: textTheme?.headline),
      title: GoogleFonts.balooTammudu(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooTammudu(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooTammudu(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooTammudu(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooTammudu(textStyle: textTheme?.caption),
      button: GoogleFonts.balooTammudu(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooTammudu(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooTammudu(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baloo Thambi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Thambi
  static TextStyle balooThambi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baloothambi/v5/va9B4kXJzNhTFoA7CYcS8sHuQR37fF3Wlg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BalooThambi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baloo Thambi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baloo+Thambi
  static TextTheme balooThambiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balooThambi(textStyle: textTheme?.display4),
      display3: GoogleFonts.balooThambi(textStyle: textTheme?.display3),
      display2: GoogleFonts.balooThambi(textStyle: textTheme?.display2),
      display1: GoogleFonts.balooThambi(textStyle: textTheme?.display1),
      headline: GoogleFonts.balooThambi(textStyle: textTheme?.headline),
      title: GoogleFonts.balooThambi(textStyle: textTheme?.title),
      subhead: GoogleFonts.balooThambi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balooThambi(textStyle: textTheme?.body2),
      body1: GoogleFonts.balooThambi(textStyle: textTheme?.body1),
      caption: GoogleFonts.balooThambi(textStyle: textTheme?.caption),
      button: GoogleFonts.balooThambi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balooThambi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balooThambi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Balthazar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Balthazar
  static TextStyle balthazar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/balthazar/v9/d6lKkaajS8Gm4CVQjFEvyRTo39l8hw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Balthazar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Balthazar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Balthazar
  static TextTheme balthazarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.balthazar(textStyle: textTheme?.display4),
      display3: GoogleFonts.balthazar(textStyle: textTheme?.display3),
      display2: GoogleFonts.balthazar(textStyle: textTheme?.display2),
      display1: GoogleFonts.balthazar(textStyle: textTheme?.display1),
      headline: GoogleFonts.balthazar(textStyle: textTheme?.headline),
      title: GoogleFonts.balthazar(textStyle: textTheme?.title),
      subhead: GoogleFonts.balthazar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.balthazar(textStyle: textTheme?.body2),
      body1: GoogleFonts.balthazar(textStyle: textTheme?.body1),
      caption: GoogleFonts.balthazar(textStyle: textTheme?.caption),
      button: GoogleFonts.balthazar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.balthazar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.balthazar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bangers font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bangers
  static TextStyle bangers({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bangers/v12/FeVQS0BTqb0h60ACL5la2bxii28.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bangers',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bangers font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bangers
  static TextTheme bangersTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bangers(textStyle: textTheme?.display4),
      display3: GoogleFonts.bangers(textStyle: textTheme?.display3),
      display2: GoogleFonts.bangers(textStyle: textTheme?.display2),
      display1: GoogleFonts.bangers(textStyle: textTheme?.display1),
      headline: GoogleFonts.bangers(textStyle: textTheme?.headline),
      title: GoogleFonts.bangers(textStyle: textTheme?.title),
      subhead: GoogleFonts.bangers(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bangers(textStyle: textTheme?.body2),
      body1: GoogleFonts.bangers(textStyle: textTheme?.body1),
      caption: GoogleFonts.bangers(textStyle: textTheme?.caption),
      button: GoogleFonts.bangers(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bangers(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bangers(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Barlow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barlow
  static TextStyle barlow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHrv4kjgoGqM7E3b8s8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHtv4kjgoGqM7E_CfNYwHoDmTcibrA.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHqv4kjgoGqM7E3w-oc4FAtlT47dw.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHsv4kjgoGqM7E_CfP04Voptzsrd6m9.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHqv4kjgoGqM7E3p-kc4FAtlT47dw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHsv4kjgoGqM7E_CfOQ4loptzsrd6m9.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHpv4kjgoGqM7EPC8E46HsxnA.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHrv4kjgoGqM7E_Ccs8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHqv4kjgoGqM7E3_-gc4FAtlT47dw.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHsv4kjgoGqM7E_CfPI41optzsrd6m9.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHqv4kjgoGqM7E30-8c4FAtlT47dw.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHsv4kjgoGqM7E_CfPk5Foptzsrd6m9.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHqv4kjgoGqM7E3t-4c4FAtlT47dw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHsv4kjgoGqM7E_CfOA5Voptzsrd6m9.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHqv4kjgoGqM7E3q-0c4FAtlT47dw.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHsv4kjgoGqM7E_CfOc5loptzsrd6m9.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHqv4kjgoGqM7E3j-wc4FAtlT47dw.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/barlow/v4/7cHsv4kjgoGqM7E_CfO451optzsrd6m9.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Barlow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Barlow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barlow
  static TextTheme barlowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.barlow(textStyle: textTheme?.display4),
      display3: GoogleFonts.barlow(textStyle: textTheme?.display3),
      display2: GoogleFonts.barlow(textStyle: textTheme?.display2),
      display1: GoogleFonts.barlow(textStyle: textTheme?.display1),
      headline: GoogleFonts.barlow(textStyle: textTheme?.headline),
      title: GoogleFonts.barlow(textStyle: textTheme?.title),
      subhead: GoogleFonts.barlow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.barlow(textStyle: textTheme?.body2),
      body1: GoogleFonts.barlow(textStyle: textTheme?.body1),
      caption: GoogleFonts.barlow(textStyle: textTheme?.caption),
      button: GoogleFonts.barlow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.barlow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.barlow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Barlow Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barlow+Condensed
  static TextStyle barlowCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxxL3I-JCGChYJ8VI-L6OO_au7B43LT31vytKgbaw.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxzL3I-JCGChYJ8VI-L6OO_au7B6xTru1H2lq0La6JN.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxwL3I-JCGChYJ8VI-L6OO_au7B497y_3HcuKECcrs.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxyL3I-JCGChYJ8VI-L6OO_au7B6xTrF3DWvIMHYrtUxg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxwL3I-JCGChYJ8VI-L6OO_au7B47rx_3HcuKECcrs.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxyL3I-JCGChYJ8VI-L6OO_au7B6xTrc3PWvIMHYrtUxg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTx3L3I-JCGChYJ8VI-L6OO_au7B2xbZ23n3pKg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxxL3I-JCGChYJ8VI-L6OO_au7B6xTT31vytKgbaw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxwL3I-JCGChYJ8VI-L6OO_au7B4-Lw_3HcuKECcrs.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxyL3I-JCGChYJ8VI-L6OO_au7B6xTrK3LWvIMHYrtUxg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxwL3I-JCGChYJ8VI-L6OO_au7B4873_3HcuKECcrs.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxyL3I-JCGChYJ8VI-L6OO_au7B6xTrB3XWvIMHYrtUxg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxwL3I-JCGChYJ8VI-L6OO_au7B46r2_3HcuKECcrs.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxyL3I-JCGChYJ8VI-L6OO_au7B6xTrY3TWvIMHYrtUxg.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxwL3I-JCGChYJ8VI-L6OO_au7B47b1_3HcuKECcrs.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxyL3I-JCGChYJ8VI-L6OO_au7B6xTrf3fWvIMHYrtUxg.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxwL3I-JCGChYJ8VI-L6OO_au7B45L0_3HcuKECcrs.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/barlowcondensed/v4/HTxyL3I-JCGChYJ8VI-L6OO_au7B6xTrW3bWvIMHYrtUxg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BarlowCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Barlow Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barlow+Condensed
  static TextTheme barlowCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.barlowCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.barlowCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.barlowCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.barlowCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.barlowCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.barlowCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.barlowCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.barlowCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.barlowCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.barlowCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.barlowCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.barlowCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.barlowCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Barlow Semi Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barlow+Semi+Condensed
  static TextStyle barlowSemiCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlphgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRfG4qvKk8ogoSP.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpjgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfbLLIEsKh5SPZWs.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpigxjLBV1hqnzfr-F8sEYMB0Yybp0mudRft6uPAGEki52WfA.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpkgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfbJnAWsgqZiGfHK5.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpigxjLBV1hqnzfr-F8sEYMB0Yybp0mudRf06iPAGEki52WfA.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpkgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfbIDAmsgqZiGfHK5.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpvgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRnf4CrCEo4gg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlphgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfYqvKk8ogoSP.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpigxjLBV1hqnzfr-F8sEYMB0Yybp0mudRfi6mPAGEki52WfA.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpkgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfbJbA2sgqZiGfHK5.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpigxjLBV1hqnzfr-F8sEYMB0Yybp0mudRfp66PAGEki52WfA.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpkgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfbJ3BGsgqZiGfHK5.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpigxjLBV1hqnzfr-F8sEYMB0Yybp0mudRfw6-PAGEki52WfA.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpkgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfbITBWsgqZiGfHK5.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpigxjLBV1hqnzfr-F8sEYMB0Yybp0mudRf36yPAGEki52WfA.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpkgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfbIPBmsgqZiGfHK5.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpigxjLBV1hqnzfr-F8sEYMB0Yybp0mudRf-62PAGEki52WfA.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/barlowsemicondensed/v5/wlpkgxjLBV1hqnzfr-F8sEYMB0Yybp0mudRXfbIrB2sgqZiGfHK5.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BarlowSemiCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Barlow Semi Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barlow+Semi+Condensed
  static TextTheme barlowSemiCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.barlowSemiCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Barriecito font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barriecito
  static TextStyle barriecito({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/barriecito/v2/WWXXlj-CbBOSLY2QTuY_KdUiYwTO0MU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Barriecito',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Barriecito font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barriecito
  static TextTheme barriecitoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.barriecito(textStyle: textTheme?.display4),
      display3: GoogleFonts.barriecito(textStyle: textTheme?.display3),
      display2: GoogleFonts.barriecito(textStyle: textTheme?.display2),
      display1: GoogleFonts.barriecito(textStyle: textTheme?.display1),
      headline: GoogleFonts.barriecito(textStyle: textTheme?.headline),
      title: GoogleFonts.barriecito(textStyle: textTheme?.title),
      subhead: GoogleFonts.barriecito(textStyle: textTheme?.subhead),
      body2: GoogleFonts.barriecito(textStyle: textTheme?.body2),
      body1: GoogleFonts.barriecito(textStyle: textTheme?.body1),
      caption: GoogleFonts.barriecito(textStyle: textTheme?.caption),
      button: GoogleFonts.barriecito(textStyle: textTheme?.button),
      subtitle: GoogleFonts.barriecito(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.barriecito(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Barrio font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barrio
  static TextStyle barrio({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/barrio/v4/wEO8EBXBk8hBIDiEdQYhWdsX1Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Barrio',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Barrio font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Barrio
  static TextTheme barrioTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.barrio(textStyle: textTheme?.display4),
      display3: GoogleFonts.barrio(textStyle: textTheme?.display3),
      display2: GoogleFonts.barrio(textStyle: textTheme?.display2),
      display1: GoogleFonts.barrio(textStyle: textTheme?.display1),
      headline: GoogleFonts.barrio(textStyle: textTheme?.headline),
      title: GoogleFonts.barrio(textStyle: textTheme?.title),
      subhead: GoogleFonts.barrio(textStyle: textTheme?.subhead),
      body2: GoogleFonts.barrio(textStyle: textTheme?.body2),
      body1: GoogleFonts.barrio(textStyle: textTheme?.body1),
      caption: GoogleFonts.barrio(textStyle: textTheme?.caption),
      button: GoogleFonts.barrio(textStyle: textTheme?.button),
      subtitle: GoogleFonts.barrio(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.barrio(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Basic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Basic
  static TextStyle basic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/basic/v9/xfu_0WLxV2_XKQN34lDVyR7D.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Basic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Basic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Basic
  static TextTheme basicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.basic(textStyle: textTheme?.display4),
      display3: GoogleFonts.basic(textStyle: textTheme?.display3),
      display2: GoogleFonts.basic(textStyle: textTheme?.display2),
      display1: GoogleFonts.basic(textStyle: textTheme?.display1),
      headline: GoogleFonts.basic(textStyle: textTheme?.headline),
      title: GoogleFonts.basic(textStyle: textTheme?.title),
      subhead: GoogleFonts.basic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.basic(textStyle: textTheme?.body2),
      body1: GoogleFonts.basic(textStyle: textTheme?.body1),
      caption: GoogleFonts.basic(textStyle: textTheme?.caption),
      button: GoogleFonts.basic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.basic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.basic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baskervville font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baskervville
  static TextStyle baskervville({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baskervville/v1/YA9Ur0yU4l_XOrogbkun3kQgt5OohvbJ9A.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/baskervville/v1/YA9Kr0yU4l_XOrogbkun3kQQtZmspPPZ9Mlt.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Baskervville',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baskervville font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baskervville
  static TextTheme baskervvilleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.baskervville(textStyle: textTheme?.display4),
      display3: GoogleFonts.baskervville(textStyle: textTheme?.display3),
      display2: GoogleFonts.baskervville(textStyle: textTheme?.display2),
      display1: GoogleFonts.baskervville(textStyle: textTheme?.display1),
      headline: GoogleFonts.baskervville(textStyle: textTheme?.headline),
      title: GoogleFonts.baskervville(textStyle: textTheme?.title),
      subhead: GoogleFonts.baskervville(textStyle: textTheme?.subhead),
      body2: GoogleFonts.baskervville(textStyle: textTheme?.body2),
      body1: GoogleFonts.baskervville(textStyle: textTheme?.body1),
      caption: GoogleFonts.baskervville(textStyle: textTheme?.caption),
      button: GoogleFonts.baskervville(textStyle: textTheme?.button),
      subtitle: GoogleFonts.baskervville(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.baskervville(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Battambang font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Battambang
  static TextStyle battambang({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/battambang/v13/uk-mEGe7raEw-HjkzZabDnWj4yxx7o8.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/battambang/v13/uk-lEGe7raEw-HjkzZabNsmMxyRa8oZK9I0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Battambang',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Battambang font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Battambang
  static TextTheme battambangTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.battambang(textStyle: textTheme?.display4),
      display3: GoogleFonts.battambang(textStyle: textTheme?.display3),
      display2: GoogleFonts.battambang(textStyle: textTheme?.display2),
      display1: GoogleFonts.battambang(textStyle: textTheme?.display1),
      headline: GoogleFonts.battambang(textStyle: textTheme?.headline),
      title: GoogleFonts.battambang(textStyle: textTheme?.title),
      subhead: GoogleFonts.battambang(textStyle: textTheme?.subhead),
      body2: GoogleFonts.battambang(textStyle: textTheme?.body2),
      body1: GoogleFonts.battambang(textStyle: textTheme?.body1),
      caption: GoogleFonts.battambang(textStyle: textTheme?.caption),
      button: GoogleFonts.battambang(textStyle: textTheme?.button),
      subtitle: GoogleFonts.battambang(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.battambang(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Baumans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baumans
  static TextStyle baumans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/baumans/v9/-W_-XJj9QyTd3QfpR_oyaksqY5Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Baumans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Baumans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Baumans
  static TextTheme baumansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.baumans(textStyle: textTheme?.display4),
      display3: GoogleFonts.baumans(textStyle: textTheme?.display3),
      display2: GoogleFonts.baumans(textStyle: textTheme?.display2),
      display1: GoogleFonts.baumans(textStyle: textTheme?.display1),
      headline: GoogleFonts.baumans(textStyle: textTheme?.headline),
      title: GoogleFonts.baumans(textStyle: textTheme?.title),
      subhead: GoogleFonts.baumans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.baumans(textStyle: textTheme?.body2),
      body1: GoogleFonts.baumans(textStyle: textTheme?.body1),
      caption: GoogleFonts.baumans(textStyle: textTheme?.caption),
      button: GoogleFonts.baumans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.baumans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.baumans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bayon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bayon
  static TextStyle bayon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bayon/v13/9XUrlJNmn0LPFl-pOhYEd2NJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bayon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bayon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bayon
  static TextTheme bayonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bayon(textStyle: textTheme?.display4),
      display3: GoogleFonts.bayon(textStyle: textTheme?.display3),
      display2: GoogleFonts.bayon(textStyle: textTheme?.display2),
      display1: GoogleFonts.bayon(textStyle: textTheme?.display1),
      headline: GoogleFonts.bayon(textStyle: textTheme?.headline),
      title: GoogleFonts.bayon(textStyle: textTheme?.title),
      subhead: GoogleFonts.bayon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bayon(textStyle: textTheme?.body2),
      body1: GoogleFonts.bayon(textStyle: textTheme?.body1),
      caption: GoogleFonts.bayon(textStyle: textTheme?.caption),
      button: GoogleFonts.bayon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bayon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bayon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Be Vietnam font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Be+Vietnam
  static TextStyle beVietnam({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVxdDflz-iPfoPuIC2iKsUn7W1hK2czPg.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVvdDflz-iPfoPuIC2iIqMfiWdlCWIjPi5p.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVwdDflz-iPfoPuIC2iKg0FzUdPJ24qJzc.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVudDflz-iPfoPuIC2iIqMfQUVFI0wvNzdwXQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVzdDflz-iPfoPuIC2iEqEt6U9kO2c.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVxdDflz-iPfoPuIC2iIqMn7W1hK2czPg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVwdDflz-iPfoPuIC2iKlUEzUdPJ24qJzc.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVudDflz-iPfoPuIC2iIqMfGURFI0wvNzdwXQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVwdDflz-iPfoPuIC2iKnkDzUdPJ24qJzc.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVudDflz-iPfoPuIC2iIqMfNUNFI0wvNzdwXQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVwdDflz-iPfoPuIC2iKh0CzUdPJ24qJzc.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVudDflz-iPfoPuIC2iIqMfUUJFI0wvNzdwXQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVwdDflz-iPfoPuIC2iKgEBzUdPJ24qJzc.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/bevietnam/v1/FBVudDflz-iPfoPuIC2iIqMfTUFFI0wvNzdwXQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BeVietnam',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Be Vietnam font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Be+Vietnam
  static TextTheme beVietnamTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.beVietnam(textStyle: textTheme?.display4),
      display3: GoogleFonts.beVietnam(textStyle: textTheme?.display3),
      display2: GoogleFonts.beVietnam(textStyle: textTheme?.display2),
      display1: GoogleFonts.beVietnam(textStyle: textTheme?.display1),
      headline: GoogleFonts.beVietnam(textStyle: textTheme?.headline),
      title: GoogleFonts.beVietnam(textStyle: textTheme?.title),
      subhead: GoogleFonts.beVietnam(textStyle: textTheme?.subhead),
      body2: GoogleFonts.beVietnam(textStyle: textTheme?.body2),
      body1: GoogleFonts.beVietnam(textStyle: textTheme?.body1),
      caption: GoogleFonts.beVietnam(textStyle: textTheme?.caption),
      button: GoogleFonts.beVietnam(textStyle: textTheme?.button),
      subtitle: GoogleFonts.beVietnam(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.beVietnam(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bebas Neue font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bebas+Neue
  static TextStyle bebasNeue({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bebasneue/v1/JTUSjIg69CK48gW7PXooxW5rygbi49c.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BebasNeue',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bebas Neue font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bebas+Neue
  static TextTheme bebasNeueTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bebasNeue(textStyle: textTheme?.display4),
      display3: GoogleFonts.bebasNeue(textStyle: textTheme?.display3),
      display2: GoogleFonts.bebasNeue(textStyle: textTheme?.display2),
      display1: GoogleFonts.bebasNeue(textStyle: textTheme?.display1),
      headline: GoogleFonts.bebasNeue(textStyle: textTheme?.headline),
      title: GoogleFonts.bebasNeue(textStyle: textTheme?.title),
      subhead: GoogleFonts.bebasNeue(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bebasNeue(textStyle: textTheme?.body2),
      body1: GoogleFonts.bebasNeue(textStyle: textTheme?.body1),
      caption: GoogleFonts.bebasNeue(textStyle: textTheme?.caption),
      button: GoogleFonts.bebasNeue(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bebasNeue(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bebasNeue(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Belgrano font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Belgrano
  static TextStyle belgrano({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/belgrano/v10/55xvey5tM9rwKWrJZcMFirl08KDJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Belgrano',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Belgrano font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Belgrano
  static TextTheme belgranoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.belgrano(textStyle: textTheme?.display4),
      display3: GoogleFonts.belgrano(textStyle: textTheme?.display3),
      display2: GoogleFonts.belgrano(textStyle: textTheme?.display2),
      display1: GoogleFonts.belgrano(textStyle: textTheme?.display1),
      headline: GoogleFonts.belgrano(textStyle: textTheme?.headline),
      title: GoogleFonts.belgrano(textStyle: textTheme?.title),
      subhead: GoogleFonts.belgrano(textStyle: textTheme?.subhead),
      body2: GoogleFonts.belgrano(textStyle: textTheme?.body2),
      body1: GoogleFonts.belgrano(textStyle: textTheme?.body1),
      caption: GoogleFonts.belgrano(textStyle: textTheme?.caption),
      button: GoogleFonts.belgrano(textStyle: textTheme?.button),
      subtitle: GoogleFonts.belgrano(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.belgrano(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bellefair font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bellefair
  static TextStyle bellefair({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bellefair/v5/kJExBuYY6AAuhiXUxG19__A2pOdvDA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bellefair',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bellefair font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bellefair
  static TextTheme bellefairTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bellefair(textStyle: textTheme?.display4),
      display3: GoogleFonts.bellefair(textStyle: textTheme?.display3),
      display2: GoogleFonts.bellefair(textStyle: textTheme?.display2),
      display1: GoogleFonts.bellefair(textStyle: textTheme?.display1),
      headline: GoogleFonts.bellefair(textStyle: textTheme?.headline),
      title: GoogleFonts.bellefair(textStyle: textTheme?.title),
      subhead: GoogleFonts.bellefair(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bellefair(textStyle: textTheme?.body2),
      body1: GoogleFonts.bellefair(textStyle: textTheme?.body1),
      caption: GoogleFonts.bellefair(textStyle: textTheme?.caption),
      button: GoogleFonts.bellefair(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bellefair(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bellefair(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Belleza font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Belleza
  static TextStyle belleza({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/belleza/v8/0nkoC9_pNeMfhX4BtcbyawzruP8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Belleza',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Belleza font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Belleza
  static TextTheme bellezaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.belleza(textStyle: textTheme?.display4),
      display3: GoogleFonts.belleza(textStyle: textTheme?.display3),
      display2: GoogleFonts.belleza(textStyle: textTheme?.display2),
      display1: GoogleFonts.belleza(textStyle: textTheme?.display1),
      headline: GoogleFonts.belleza(textStyle: textTheme?.headline),
      title: GoogleFonts.belleza(textStyle: textTheme?.title),
      subhead: GoogleFonts.belleza(textStyle: textTheme?.subhead),
      body2: GoogleFonts.belleza(textStyle: textTheme?.body2),
      body1: GoogleFonts.belleza(textStyle: textTheme?.body1),
      caption: GoogleFonts.belleza(textStyle: textTheme?.caption),
      button: GoogleFonts.belleza(textStyle: textTheme?.button),
      subtitle: GoogleFonts.belleza(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.belleza(textStyle: textTheme?.overline),
    );
  }

  /// Applies the BenchNine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BenchNine
  static TextStyle benchNine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/benchnine/v8/ahcev8612zF4jxrwMosT--tRhWa8q0v8ag.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/benchnine/v8/ahcbv8612zF4jxrwMosrV8N1jU2gog.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/benchnine/v8/ahcev8612zF4jxrwMosT6-xRhWa8q0v8ag.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BenchNine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the BenchNine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BenchNine
  static TextTheme benchNineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.benchNine(textStyle: textTheme?.display4),
      display3: GoogleFonts.benchNine(textStyle: textTheme?.display3),
      display2: GoogleFonts.benchNine(textStyle: textTheme?.display2),
      display1: GoogleFonts.benchNine(textStyle: textTheme?.display1),
      headline: GoogleFonts.benchNine(textStyle: textTheme?.headline),
      title: GoogleFonts.benchNine(textStyle: textTheme?.title),
      subhead: GoogleFonts.benchNine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.benchNine(textStyle: textTheme?.body2),
      body1: GoogleFonts.benchNine(textStyle: textTheme?.body1),
      caption: GoogleFonts.benchNine(textStyle: textTheme?.caption),
      button: GoogleFonts.benchNine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.benchNine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.benchNine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bentham font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bentham
  static TextStyle bentham({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bentham/v10/VdGeAZQPEpYfmHglKWw7CJaK_y4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bentham',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bentham font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bentham
  static TextTheme benthamTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bentham(textStyle: textTheme?.display4),
      display3: GoogleFonts.bentham(textStyle: textTheme?.display3),
      display2: GoogleFonts.bentham(textStyle: textTheme?.display2),
      display1: GoogleFonts.bentham(textStyle: textTheme?.display1),
      headline: GoogleFonts.bentham(textStyle: textTheme?.headline),
      title: GoogleFonts.bentham(textStyle: textTheme?.title),
      subhead: GoogleFonts.bentham(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bentham(textStyle: textTheme?.body2),
      body1: GoogleFonts.bentham(textStyle: textTheme?.body1),
      caption: GoogleFonts.bentham(textStyle: textTheme?.caption),
      button: GoogleFonts.bentham(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bentham(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bentham(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Berkshire Swash font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Berkshire+Swash
  static TextStyle berkshireSwash({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/berkshireswash/v8/ptRRTi-cavZOGqCvnNJDl5m5XmNPrcQybX4pQA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BerkshireSwash',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Berkshire Swash font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Berkshire+Swash
  static TextTheme berkshireSwashTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.berkshireSwash(textStyle: textTheme?.display4),
      display3: GoogleFonts.berkshireSwash(textStyle: textTheme?.display3),
      display2: GoogleFonts.berkshireSwash(textStyle: textTheme?.display2),
      display1: GoogleFonts.berkshireSwash(textStyle: textTheme?.display1),
      headline: GoogleFonts.berkshireSwash(textStyle: textTheme?.headline),
      title: GoogleFonts.berkshireSwash(textStyle: textTheme?.title),
      subhead: GoogleFonts.berkshireSwash(textStyle: textTheme?.subhead),
      body2: GoogleFonts.berkshireSwash(textStyle: textTheme?.body2),
      body1: GoogleFonts.berkshireSwash(textStyle: textTheme?.body1),
      caption: GoogleFonts.berkshireSwash(textStyle: textTheme?.caption),
      button: GoogleFonts.berkshireSwash(textStyle: textTheme?.button),
      subtitle: GoogleFonts.berkshireSwash(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.berkshireSwash(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Beth Ellen font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Beth+Ellen
  static TextStyle bethEllen({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bethellen/v1/WwkbxPW2BE-3rb_JNT-qEIAiVNo5xNY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BethEllen',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Beth Ellen font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Beth+Ellen
  static TextTheme bethEllenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bethEllen(textStyle: textTheme?.display4),
      display3: GoogleFonts.bethEllen(textStyle: textTheme?.display3),
      display2: GoogleFonts.bethEllen(textStyle: textTheme?.display2),
      display1: GoogleFonts.bethEllen(textStyle: textTheme?.display1),
      headline: GoogleFonts.bethEllen(textStyle: textTheme?.headline),
      title: GoogleFonts.bethEllen(textStyle: textTheme?.title),
      subhead: GoogleFonts.bethEllen(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bethEllen(textStyle: textTheme?.body2),
      body1: GoogleFonts.bethEllen(textStyle: textTheme?.body1),
      caption: GoogleFonts.bethEllen(textStyle: textTheme?.caption),
      button: GoogleFonts.bethEllen(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bethEllen(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bethEllen(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bevan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bevan
  static TextStyle bevan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bevan/v11/4iCj6KZ0a9NXjF8aUir7tlSJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bevan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bevan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bevan
  static TextTheme bevanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bevan(textStyle: textTheme?.display4),
      display3: GoogleFonts.bevan(textStyle: textTheme?.display3),
      display2: GoogleFonts.bevan(textStyle: textTheme?.display2),
      display1: GoogleFonts.bevan(textStyle: textTheme?.display1),
      headline: GoogleFonts.bevan(textStyle: textTheme?.headline),
      title: GoogleFonts.bevan(textStyle: textTheme?.title),
      subhead: GoogleFonts.bevan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bevan(textStyle: textTheme?.body2),
      body1: GoogleFonts.bevan(textStyle: textTheme?.body1),
      caption: GoogleFonts.bevan(textStyle: textTheme?.caption),
      button: GoogleFonts.bevan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bevan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bevan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Big Shoulders Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Big+Shoulders+Display
  static TextStyle bigShouldersDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/bigshouldersdisplay/v1/fC1xPZJEZG-e9gHhdI4-NBbfd2ys3SjJCx1Ur9DrDJYM2lAZ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/bigshouldersdisplay/v1/fC1yPZJEZG-e9gHhdI4-NBbfd2ys3SjJCx1UZ_LLJrgA00kAdA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bigshouldersdisplay/v1/fC1_PZJEZG-e9gHhdI4-NBbfd2ys3SjJCx1sy9rvLpMc2g.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/bigshouldersdisplay/v1/fC1yPZJEZG-e9gHhdI4-NBbfd2ys3SjJCx1UP_PLJrgA00kAdA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/bigshouldersdisplay/v1/fC1yPZJEZG-e9gHhdI4-NBbfd2ys3SjJCx1UE_TLJrgA00kAdA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/bigshouldersdisplay/v1/fC1yPZJEZG-e9gHhdI4-NBbfd2ys3SjJCx1Ud_XLJrgA00kAdA.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/bigshouldersdisplay/v1/fC1yPZJEZG-e9gHhdI4-NBbfd2ys3SjJCx1Ua_bLJrgA00kAdA.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/bigshouldersdisplay/v1/fC1yPZJEZG-e9gHhdI4-NBbfd2ys3SjJCx1UT_fLJrgA00kAdA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BigShouldersDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Big Shoulders Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Big+Shoulders+Display
  static TextTheme bigShouldersDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bigShouldersDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Big Shoulders Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Big+Shoulders+Text
  static TextStyle bigShouldersText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/bigshoulderstext/v1/55xzezRtP9G3CGPIf49hxc8P0eytUxBU-IZ_YscCdXQB.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/bigshoulderstext/v1/55xyezRtP9G3CGPIf49hxc8P0eytUxBUMKRfSOkOfG0Y3A.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bigshoulderstext/v1/55xxezRtP9G3CGPIf49hxc8P0eytUxBsnIx7QMISdQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/bigshoulderstext/v1/55xyezRtP9G3CGPIf49hxc8P0eytUxBUaKVfSOkOfG0Y3A.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/bigshoulderstext/v1/55xyezRtP9G3CGPIf49hxc8P0eytUxBURKJfSOkOfG0Y3A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/bigshoulderstext/v1/55xyezRtP9G3CGPIf49hxc8P0eytUxBUIKNfSOkOfG0Y3A.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/bigshoulderstext/v1/55xyezRtP9G3CGPIf49hxc8P0eytUxBUPKBfSOkOfG0Y3A.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/bigshoulderstext/v1/55xyezRtP9G3CGPIf49hxc8P0eytUxBUGKFfSOkOfG0Y3A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BigShouldersText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Big Shoulders Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Big+Shoulders+Text
  static TextTheme bigShouldersTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bigShouldersText(textStyle: textTheme?.display4),
      display3: GoogleFonts.bigShouldersText(textStyle: textTheme?.display3),
      display2: GoogleFonts.bigShouldersText(textStyle: textTheme?.display2),
      display1: GoogleFonts.bigShouldersText(textStyle: textTheme?.display1),
      headline: GoogleFonts.bigShouldersText(textStyle: textTheme?.headline),
      title: GoogleFonts.bigShouldersText(textStyle: textTheme?.title),
      subhead: GoogleFonts.bigShouldersText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bigShouldersText(textStyle: textTheme?.body2),
      body1: GoogleFonts.bigShouldersText(textStyle: textTheme?.body1),
      caption: GoogleFonts.bigShouldersText(textStyle: textTheme?.caption),
      button: GoogleFonts.bigShouldersText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bigShouldersText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bigShouldersText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bigelow Rules font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bigelow+Rules
  static TextStyle bigelowRules({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bigelowrules/v8/RrQWboly8iR_I3KWSzeRuN0zT4cCH8WAJVk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BigelowRules',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bigelow Rules font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bigelow+Rules
  static TextTheme bigelowRulesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bigelowRules(textStyle: textTheme?.display4),
      display3: GoogleFonts.bigelowRules(textStyle: textTheme?.display3),
      display2: GoogleFonts.bigelowRules(textStyle: textTheme?.display2),
      display1: GoogleFonts.bigelowRules(textStyle: textTheme?.display1),
      headline: GoogleFonts.bigelowRules(textStyle: textTheme?.headline),
      title: GoogleFonts.bigelowRules(textStyle: textTheme?.title),
      subhead: GoogleFonts.bigelowRules(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bigelowRules(textStyle: textTheme?.body2),
      body1: GoogleFonts.bigelowRules(textStyle: textTheme?.body1),
      caption: GoogleFonts.bigelowRules(textStyle: textTheme?.caption),
      button: GoogleFonts.bigelowRules(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bigelowRules(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bigelowRules(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bigshot One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bigshot+One
  static TextStyle bigshotOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bigshotone/v10/u-470qukhRkkO6BD_7cM_gxuUQJBXv_-.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BigshotOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bigshot One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bigshot+One
  static TextTheme bigshotOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bigshotOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.bigshotOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.bigshotOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.bigshotOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.bigshotOne(textStyle: textTheme?.headline),
      title: GoogleFonts.bigshotOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.bigshotOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bigshotOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.bigshotOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.bigshotOne(textStyle: textTheme?.caption),
      button: GoogleFonts.bigshotOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bigshotOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bigshotOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bilbo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bilbo
  static TextStyle bilbo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bilbo/v9/o-0EIpgpwWwZ210hpIRz4wxE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bilbo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bilbo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bilbo
  static TextTheme bilboTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bilbo(textStyle: textTheme?.display4),
      display3: GoogleFonts.bilbo(textStyle: textTheme?.display3),
      display2: GoogleFonts.bilbo(textStyle: textTheme?.display2),
      display1: GoogleFonts.bilbo(textStyle: textTheme?.display1),
      headline: GoogleFonts.bilbo(textStyle: textTheme?.headline),
      title: GoogleFonts.bilbo(textStyle: textTheme?.title),
      subhead: GoogleFonts.bilbo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bilbo(textStyle: textTheme?.body2),
      body1: GoogleFonts.bilbo(textStyle: textTheme?.body1),
      caption: GoogleFonts.bilbo(textStyle: textTheme?.caption),
      button: GoogleFonts.bilbo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bilbo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bilbo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bilbo Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bilbo+Swash+Caps
  static TextStyle bilboSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bilboswashcaps/v12/zrf-0GXbz-H3Wb4XBsGrTgq2PVmdqAPopiRfKp8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BilboSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bilbo Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bilbo+Swash+Caps
  static TextTheme bilboSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bilboSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the BioRhyme font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BioRhyme
  static TextStyle bioRhyme({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/biorhyme/v4/1cX3aULHBpDMsHYW_ESOjnGAq8Sk1PoH.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/biorhyme/v4/1cX3aULHBpDMsHYW_ETqjXGAq8Sk1PoH.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/biorhyme/v4/1cXwaULHBpDMsHYW_HxGpVWIgNit.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/biorhyme/v4/1cX3aULHBpDMsHYW_ET6inGAq8Sk1PoH.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/biorhyme/v4/1cX3aULHBpDMsHYW_ETmiXGAq8Sk1PoH.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BioRhyme',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the BioRhyme font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BioRhyme
  static TextTheme bioRhymeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bioRhyme(textStyle: textTheme?.display4),
      display3: GoogleFonts.bioRhyme(textStyle: textTheme?.display3),
      display2: GoogleFonts.bioRhyme(textStyle: textTheme?.display2),
      display1: GoogleFonts.bioRhyme(textStyle: textTheme?.display1),
      headline: GoogleFonts.bioRhyme(textStyle: textTheme?.headline),
      title: GoogleFonts.bioRhyme(textStyle: textTheme?.title),
      subhead: GoogleFonts.bioRhyme(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bioRhyme(textStyle: textTheme?.body2),
      body1: GoogleFonts.bioRhyme(textStyle: textTheme?.body1),
      caption: GoogleFonts.bioRhyme(textStyle: textTheme?.caption),
      button: GoogleFonts.bioRhyme(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bioRhyme(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bioRhyme(textStyle: textTheme?.overline),
    );
  }

  /// Applies the BioRhyme Expanded font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BioRhyme+Expanded
  static TextStyle bioRhymeExpanded({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/biorhymeexpanded/v5/i7dVIE1zZzytGswgU577CDY9LjbffxxcblSHSdTXrb_z.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/biorhymeexpanded/v5/i7dVIE1zZzytGswgU577CDY9Ljbffxw4bVSHSdTXrb_z.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/biorhymeexpanded/v5/i7dQIE1zZzytGswgU577CDY9LjbffySURXCPYsje.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/biorhymeexpanded/v5/i7dVIE1zZzytGswgU577CDY9LjbffxwoalSHSdTXrb_z.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/biorhymeexpanded/v5/i7dVIE1zZzytGswgU577CDY9Ljbffxw0aVSHSdTXrb_z.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BioRhymeExpanded',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the BioRhyme Expanded font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/BioRhyme+Expanded
  static TextTheme bioRhymeExpandedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.display4),
      display3: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.display3),
      display2: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.display2),
      display1: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.display1),
      headline: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.headline),
      title: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.title),
      subhead: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.body2),
      body1: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.body1),
      caption: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.caption),
      button: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bioRhymeExpanded(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Biryani font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Biryani
  static TextStyle biryani({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/biryani/v5/hv-TlzNxIFoO84YddYQyGTBSU-J-RxQ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/biryani/v5/hv-TlzNxIFoO84YddeAxGTBSU-J-RxQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/biryani/v5/hv-WlzNxIFoO84YdTUwZPTh5T-s.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/biryani/v5/hv-TlzNxIFoO84YddZQ3GTBSU-J-RxQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/biryani/v5/hv-TlzNxIFoO84YddfA2GTBSU-J-RxQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/biryani/v5/hv-TlzNxIFoO84Yddew1GTBSU-J-RxQ.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/biryani/v5/hv-TlzNxIFoO84Yddcg0GTBSU-J-RxQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Biryani',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Biryani font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Biryani
  static TextTheme biryaniTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.biryani(textStyle: textTheme?.display4),
      display3: GoogleFonts.biryani(textStyle: textTheme?.display3),
      display2: GoogleFonts.biryani(textStyle: textTheme?.display2),
      display1: GoogleFonts.biryani(textStyle: textTheme?.display1),
      headline: GoogleFonts.biryani(textStyle: textTheme?.headline),
      title: GoogleFonts.biryani(textStyle: textTheme?.title),
      subhead: GoogleFonts.biryani(textStyle: textTheme?.subhead),
      body2: GoogleFonts.biryani(textStyle: textTheme?.body2),
      body1: GoogleFonts.biryani(textStyle: textTheme?.body1),
      caption: GoogleFonts.biryani(textStyle: textTheme?.caption),
      button: GoogleFonts.biryani(textStyle: textTheme?.button),
      subtitle: GoogleFonts.biryani(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.biryani(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bitter font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bitter
  static TextStyle bitter({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bitter/v15/rax8HiqOu8IVPmnLeIZoDDlCmg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/bitter/v15/rax-HiqOu8IVPmn7eoxsLjxSmlLZ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/bitter/v15/rax_HiqOu8IVPmnzxKlMBBJek0vA8A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bitter',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bitter font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bitter
  static TextTheme bitterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bitter(textStyle: textTheme?.display4),
      display3: GoogleFonts.bitter(textStyle: textTheme?.display3),
      display2: GoogleFonts.bitter(textStyle: textTheme?.display2),
      display1: GoogleFonts.bitter(textStyle: textTheme?.display1),
      headline: GoogleFonts.bitter(textStyle: textTheme?.headline),
      title: GoogleFonts.bitter(textStyle: textTheme?.title),
      subhead: GoogleFonts.bitter(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bitter(textStyle: textTheme?.body2),
      body1: GoogleFonts.bitter(textStyle: textTheme?.body1),
      caption: GoogleFonts.bitter(textStyle: textTheme?.caption),
      button: GoogleFonts.bitter(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bitter(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bitter(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Black And White Picture font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+And+White+Picture
  static TextStyle blackAndWhitePicture({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/blackandwhitepicture/v8/TwMe-JAERlQd3ooUHBUXGmrmioKjjnRSFO-NqI5HbcMi-yWY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BlackAndWhitePicture',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Black And White Picture font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+And+White+Picture
  static TextTheme blackAndWhitePictureTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.headline),
      title: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.title),
      subhead: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.subhead),
      body2: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.body2),
      body1: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.body1),
      caption: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.caption),
      button: GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.blackAndWhitePicture(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Black Han Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+Han+Sans
  static TextStyle blackHanSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/blackhansans/v8/ea8Aad44WunzF9a-dL6toA8r8nqVIXSkH-Hc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BlackHanSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Black Han Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+Han+Sans
  static TextTheme blackHanSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.blackHanSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.blackHanSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.blackHanSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.blackHanSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.blackHanSans(textStyle: textTheme?.headline),
      title: GoogleFonts.blackHanSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.blackHanSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.blackHanSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.blackHanSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.blackHanSans(textStyle: textTheme?.caption),
      button: GoogleFonts.blackHanSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.blackHanSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.blackHanSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Black Ops One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+Ops+One
  static TextStyle blackOpsOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/blackopsone/v11/qWcsB6-ypo7xBdr6Xshe96H3WDzRtjkho4M.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BlackOpsOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Black Ops One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Black+Ops+One
  static TextTheme blackOpsOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.blackOpsOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.blackOpsOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.blackOpsOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.blackOpsOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.blackOpsOne(textStyle: textTheme?.headline),
      title: GoogleFonts.blackOpsOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.blackOpsOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.blackOpsOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.blackOpsOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.blackOpsOne(textStyle: textTheme?.caption),
      button: GoogleFonts.blackOpsOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.blackOpsOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.blackOpsOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Blinker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Blinker
  static TextStyle blinker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/blinker/v3/cIf_MaFatEE-VTaP_E2hZEsCkIt9QQ.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/blinker/v3/cIf4MaFatEE-VTaP_OGARGEsnIJkWL4.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/blinker/v3/cIf4MaFatEE-VTaP_IWDRGEsnIJkWL4.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/blinker/v3/cIf9MaFatEE-VTaPxCmrYGkHgIs.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/blinker/v3/cIf4MaFatEE-VTaP_PGFRGEsnIJkWL4.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/blinker/v3/cIf4MaFatEE-VTaP_JWERGEsnIJkWL4.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/blinker/v3/cIf4MaFatEE-VTaP_ImHRGEsnIJkWL4.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/blinker/v3/cIf4MaFatEE-VTaP_K2GRGEsnIJkWL4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Blinker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Blinker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Blinker
  static TextTheme blinkerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.blinker(textStyle: textTheme?.display4),
      display3: GoogleFonts.blinker(textStyle: textTheme?.display3),
      display2: GoogleFonts.blinker(textStyle: textTheme?.display2),
      display1: GoogleFonts.blinker(textStyle: textTheme?.display1),
      headline: GoogleFonts.blinker(textStyle: textTheme?.headline),
      title: GoogleFonts.blinker(textStyle: textTheme?.title),
      subhead: GoogleFonts.blinker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.blinker(textStyle: textTheme?.body2),
      body1: GoogleFonts.blinker(textStyle: textTheme?.body1),
      caption: GoogleFonts.blinker(textStyle: textTheme?.caption),
      button: GoogleFonts.blinker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.blinker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.blinker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bokor font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bokor
  static TextStyle bokor({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bokor/v12/m8JcjfpeeaqTiR2WdInbcaxE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bokor',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bokor font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bokor
  static TextTheme bokorTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bokor(textStyle: textTheme?.display4),
      display3: GoogleFonts.bokor(textStyle: textTheme?.display3),
      display2: GoogleFonts.bokor(textStyle: textTheme?.display2),
      display1: GoogleFonts.bokor(textStyle: textTheme?.display1),
      headline: GoogleFonts.bokor(textStyle: textTheme?.headline),
      title: GoogleFonts.bokor(textStyle: textTheme?.title),
      subhead: GoogleFonts.bokor(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bokor(textStyle: textTheme?.body2),
      body1: GoogleFonts.bokor(textStyle: textTheme?.body1),
      caption: GoogleFonts.bokor(textStyle: textTheme?.caption),
      button: GoogleFonts.bokor(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bokor(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bokor(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bonbon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bonbon
  static TextStyle bonbon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bonbon/v11/0FlVVPeVlFec4ee_cDEAbQY5-A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bonbon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bonbon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bonbon
  static TextTheme bonbonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bonbon(textStyle: textTheme?.display4),
      display3: GoogleFonts.bonbon(textStyle: textTheme?.display3),
      display2: GoogleFonts.bonbon(textStyle: textTheme?.display2),
      display1: GoogleFonts.bonbon(textStyle: textTheme?.display1),
      headline: GoogleFonts.bonbon(textStyle: textTheme?.headline),
      title: GoogleFonts.bonbon(textStyle: textTheme?.title),
      subhead: GoogleFonts.bonbon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bonbon(textStyle: textTheme?.body2),
      body1: GoogleFonts.bonbon(textStyle: textTheme?.body1),
      caption: GoogleFonts.bonbon(textStyle: textTheme?.caption),
      button: GoogleFonts.bonbon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bonbon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bonbon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Boogaloo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Boogaloo
  static TextStyle boogaloo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/boogaloo/v11/kmK-Zq45GAvOdnaW6x1F_SrQo_1K.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Boogaloo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Boogaloo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Boogaloo
  static TextTheme boogalooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.boogaloo(textStyle: textTheme?.display4),
      display3: GoogleFonts.boogaloo(textStyle: textTheme?.display3),
      display2: GoogleFonts.boogaloo(textStyle: textTheme?.display2),
      display1: GoogleFonts.boogaloo(textStyle: textTheme?.display1),
      headline: GoogleFonts.boogaloo(textStyle: textTheme?.headline),
      title: GoogleFonts.boogaloo(textStyle: textTheme?.title),
      subhead: GoogleFonts.boogaloo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.boogaloo(textStyle: textTheme?.body2),
      body1: GoogleFonts.boogaloo(textStyle: textTheme?.body1),
      caption: GoogleFonts.boogaloo(textStyle: textTheme?.caption),
      button: GoogleFonts.boogaloo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.boogaloo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.boogaloo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bowlby One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bowlby+One
  static TextStyle bowlbyOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bowlbyone/v11/taiPGmVuC4y96PFeqp8smo6C_Z0wcK4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BowlbyOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bowlby One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bowlby+One
  static TextTheme bowlbyOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bowlbyOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.bowlbyOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.bowlbyOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.bowlbyOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.bowlbyOne(textStyle: textTheme?.headline),
      title: GoogleFonts.bowlbyOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.bowlbyOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bowlbyOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.bowlbyOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.bowlbyOne(textStyle: textTheme?.caption),
      button: GoogleFonts.bowlbyOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bowlbyOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bowlbyOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bowlby One SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bowlby+One+SC
  static TextStyle bowlbyOneSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bowlbyonesc/v11/DtVlJxerQqQm37tzN3wMug9Pzgj8owhNjuE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BowlbyOneSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bowlby One SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bowlby+One+SC
  static TextTheme bowlbyOneSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.headline),
      title: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.caption),
      button: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bowlbyOneSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Brawler font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Brawler
  static TextStyle brawler({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/brawler/v10/xn7gYHE3xXewAscGsgC7S9XdZN8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Brawler',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Brawler font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Brawler
  static TextTheme brawlerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.brawler(textStyle: textTheme?.display4),
      display3: GoogleFonts.brawler(textStyle: textTheme?.display3),
      display2: GoogleFonts.brawler(textStyle: textTheme?.display2),
      display1: GoogleFonts.brawler(textStyle: textTheme?.display1),
      headline: GoogleFonts.brawler(textStyle: textTheme?.headline),
      title: GoogleFonts.brawler(textStyle: textTheme?.title),
      subhead: GoogleFonts.brawler(textStyle: textTheme?.subhead),
      body2: GoogleFonts.brawler(textStyle: textTheme?.body2),
      body1: GoogleFonts.brawler(textStyle: textTheme?.body1),
      caption: GoogleFonts.brawler(textStyle: textTheme?.caption),
      button: GoogleFonts.brawler(textStyle: textTheme?.button),
      subtitle: GoogleFonts.brawler(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.brawler(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bree Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bree+Serif
  static TextStyle breeSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/breeserif/v9/4UaHrEJCrhhnVA3DgluAx63j5pN1MwI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BreeSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bree Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bree+Serif
  static TextTheme breeSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.breeSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.breeSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.breeSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.breeSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.breeSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.breeSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.breeSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.breeSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.breeSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.breeSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.breeSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.breeSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.breeSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bubblegum Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bubblegum+Sans
  static TextStyle bubblegumSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bubblegumsans/v8/AYCSpXb_Z9EORv1M5QTjEzMEtdaHzoPPb7R4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BubblegumSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bubblegum Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bubblegum+Sans
  static TextTheme bubblegumSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bubblegumSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.bubblegumSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.bubblegumSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.bubblegumSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.bubblegumSans(textStyle: textTheme?.headline),
      title: GoogleFonts.bubblegumSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.bubblegumSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bubblegumSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.bubblegumSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.bubblegumSans(textStyle: textTheme?.caption),
      button: GoogleFonts.bubblegumSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bubblegumSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bubblegumSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bubbler One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bubbler+One
  static TextStyle bubblerOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bubblerone/v8/f0Xy0eqj68ppQV9KBLmAouHH26MPePkt.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BubblerOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bubbler One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bubbler+One
  static TextTheme bubblerOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bubblerOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.bubblerOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.bubblerOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.bubblerOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.bubblerOne(textStyle: textTheme?.headline),
      title: GoogleFonts.bubblerOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.bubblerOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bubblerOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.bubblerOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.bubblerOne(textStyle: textTheme?.caption),
      button: GoogleFonts.bubblerOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bubblerOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bubblerOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Buda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Buda
  static TextStyle buda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/buda/v10/GFDqWAN8mnyIJSSrG7UBr7pZKA0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Buda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Buda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Buda
  static TextTheme budaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.buda(textStyle: textTheme?.display4),
      display3: GoogleFonts.buda(textStyle: textTheme?.display3),
      display2: GoogleFonts.buda(textStyle: textTheme?.display2),
      display1: GoogleFonts.buda(textStyle: textTheme?.display1),
      headline: GoogleFonts.buda(textStyle: textTheme?.headline),
      title: GoogleFonts.buda(textStyle: textTheme?.title),
      subhead: GoogleFonts.buda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.buda(textStyle: textTheme?.body2),
      body1: GoogleFonts.buda(textStyle: textTheme?.body1),
      caption: GoogleFonts.buda(textStyle: textTheme?.caption),
      button: GoogleFonts.buda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.buda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.buda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Buenard font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Buenard
  static TextStyle buenard({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/buenard/v11/OD5DuM6Cyma8FnnsPzf9qGi9HL4.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/buenard/v11/OD5GuM6Cyma8FnnsB4vSjGCWALepwss.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Buenard',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Buenard font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Buenard
  static TextTheme buenardTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.buenard(textStyle: textTheme?.display4),
      display3: GoogleFonts.buenard(textStyle: textTheme?.display3),
      display2: GoogleFonts.buenard(textStyle: textTheme?.display2),
      display1: GoogleFonts.buenard(textStyle: textTheme?.display1),
      headline: GoogleFonts.buenard(textStyle: textTheme?.headline),
      title: GoogleFonts.buenard(textStyle: textTheme?.title),
      subhead: GoogleFonts.buenard(textStyle: textTheme?.subhead),
      body2: GoogleFonts.buenard(textStyle: textTheme?.body2),
      body1: GoogleFonts.buenard(textStyle: textTheme?.body1),
      caption: GoogleFonts.buenard(textStyle: textTheme?.caption),
      button: GoogleFonts.buenard(textStyle: textTheme?.button),
      subtitle: GoogleFonts.buenard(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.buenard(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee
  static TextStyle bungee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bungee/v5/N0bU2SZBIuF2PU_ECn50Kd_PmA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Bungee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee
  static TextTheme bungeeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungee(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungee(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungee(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungee(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungee(textStyle: textTheme?.headline),
      title: GoogleFonts.bungee(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungee(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungee(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungee(textStyle: textTheme?.caption),
      button: GoogleFonts.bungee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee Hairline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Hairline
  static TextStyle bungeeHairline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bungeehairline/v5/snfys0G548t04270a_ljTLUVrv-7YB2dQ5ZPqQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BungeeHairline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee Hairline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Hairline
  static TextTheme bungeeHairlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungeeHairline(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungeeHairline(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungeeHairline(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungeeHairline(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungeeHairline(textStyle: textTheme?.headline),
      title: GoogleFonts.bungeeHairline(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungeeHairline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungeeHairline(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungeeHairline(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungeeHairline(textStyle: textTheme?.caption),
      button: GoogleFonts.bungeeHairline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungeeHairline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungeeHairline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee Inline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Inline
  static TextStyle bungeeInline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bungeeinline/v5/Gg8zN58UcgnlCweMrih332VuDGJ1-FEglsc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BungeeInline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee Inline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Inline
  static TextTheme bungeeInlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungeeInline(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungeeInline(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungeeInline(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungeeInline(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungeeInline(textStyle: textTheme?.headline),
      title: GoogleFonts.bungeeInline(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungeeInline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungeeInline(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungeeInline(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungeeInline(textStyle: textTheme?.caption),
      button: GoogleFonts.bungeeInline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungeeInline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungeeInline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee Outline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Outline
  static TextStyle bungeeOutline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bungeeoutline/v5/_6_mEDvmVP24UvU2MyiGDslL3Qg3YhJqPXxo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BungeeOutline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee Outline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Outline
  static TextTheme bungeeOutlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungeeOutline(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungeeOutline(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungeeOutline(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungeeOutline(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungeeOutline(textStyle: textTheme?.headline),
      title: GoogleFonts.bungeeOutline(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungeeOutline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungeeOutline(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungeeOutline(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungeeOutline(textStyle: textTheme?.caption),
      button: GoogleFonts.bungeeOutline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungeeOutline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungeeOutline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Bungee Shade font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Shade
  static TextStyle bungeeShade({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/bungeeshade/v5/DtVkJxarWL0t2KdzK3oI_jks7iLSrwFUlw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'BungeeShade',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Bungee Shade font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Bungee+Shade
  static TextTheme bungeeShadeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.bungeeShade(textStyle: textTheme?.display4),
      display3: GoogleFonts.bungeeShade(textStyle: textTheme?.display3),
      display2: GoogleFonts.bungeeShade(textStyle: textTheme?.display2),
      display1: GoogleFonts.bungeeShade(textStyle: textTheme?.display1),
      headline: GoogleFonts.bungeeShade(textStyle: textTheme?.headline),
      title: GoogleFonts.bungeeShade(textStyle: textTheme?.title),
      subhead: GoogleFonts.bungeeShade(textStyle: textTheme?.subhead),
      body2: GoogleFonts.bungeeShade(textStyle: textTheme?.body2),
      body1: GoogleFonts.bungeeShade(textStyle: textTheme?.body1),
      caption: GoogleFonts.bungeeShade(textStyle: textTheme?.caption),
      button: GoogleFonts.bungeeShade(textStyle: textTheme?.button),
      subtitle: GoogleFonts.bungeeShade(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.bungeeShade(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Butcherman font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Butcherman
  static TextStyle butcherman({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/butcherman/v11/2EbiL-thF0loflXUBOdb1zWzq_5uT84.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Butcherman',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Butcherman font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Butcherman
  static TextTheme butchermanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.butcherman(textStyle: textTheme?.display4),
      display3: GoogleFonts.butcherman(textStyle: textTheme?.display3),
      display2: GoogleFonts.butcherman(textStyle: textTheme?.display2),
      display1: GoogleFonts.butcherman(textStyle: textTheme?.display1),
      headline: GoogleFonts.butcherman(textStyle: textTheme?.headline),
      title: GoogleFonts.butcherman(textStyle: textTheme?.title),
      subhead: GoogleFonts.butcherman(textStyle: textTheme?.subhead),
      body2: GoogleFonts.butcherman(textStyle: textTheme?.body2),
      body1: GoogleFonts.butcherman(textStyle: textTheme?.body1),
      caption: GoogleFonts.butcherman(textStyle: textTheme?.caption),
      button: GoogleFonts.butcherman(textStyle: textTheme?.button),
      subtitle: GoogleFonts.butcherman(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.butcherman(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Butterfly Kids font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Butterfly+Kids
  static TextStyle butterflyKids({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/butterflykids/v8/ll8lK2CWTjuqAsXDqlnIbMNs5S4arxFrAX1D.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ButterflyKids',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Butterfly Kids font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Butterfly+Kids
  static TextTheme butterflyKidsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.butterflyKids(textStyle: textTheme?.display4),
      display3: GoogleFonts.butterflyKids(textStyle: textTheme?.display3),
      display2: GoogleFonts.butterflyKids(textStyle: textTheme?.display2),
      display1: GoogleFonts.butterflyKids(textStyle: textTheme?.display1),
      headline: GoogleFonts.butterflyKids(textStyle: textTheme?.headline),
      title: GoogleFonts.butterflyKids(textStyle: textTheme?.title),
      subhead: GoogleFonts.butterflyKids(textStyle: textTheme?.subhead),
      body2: GoogleFonts.butterflyKids(textStyle: textTheme?.body2),
      body1: GoogleFonts.butterflyKids(textStyle: textTheme?.body1),
      caption: GoogleFonts.butterflyKids(textStyle: textTheme?.caption),
      button: GoogleFonts.butterflyKids(textStyle: textTheme?.button),
      subtitle: GoogleFonts.butterflyKids(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.butterflyKids(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cabin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin
  static TextStyle cabin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cabin/v14/u-4x0qWljRw-Pe839fxqmjRv.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cabin/v14/u-4_0qWljRw-Pd81__hInyRvYwc.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/cabin/v14/u-480qWljRw-PdfD3NhisShmeh5I.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/cabin/v14/u-460qWljRw-Pd81xwxhuyxEfw5IR-Y.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cabin/v14/u-480qWljRw-Pdfv29hisShmeh5I.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/cabin/v14/u-460qWljRw-Pd81xyBmuyxEfw5IR-Y.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cabin/v14/u-480qWljRw-PdeL2thisShmeh5I.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/cabin/v14/u-460qWljRw-Pd81x0RnuyxEfw5IR-Y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cabin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cabin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin
  static TextTheme cabinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cabin(textStyle: textTheme?.display4),
      display3: GoogleFonts.cabin(textStyle: textTheme?.display3),
      display2: GoogleFonts.cabin(textStyle: textTheme?.display2),
      display1: GoogleFonts.cabin(textStyle: textTheme?.display1),
      headline: GoogleFonts.cabin(textStyle: textTheme?.headline),
      title: GoogleFonts.cabin(textStyle: textTheme?.title),
      subhead: GoogleFonts.cabin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cabin(textStyle: textTheme?.body2),
      body1: GoogleFonts.cabin(textStyle: textTheme?.body1),
      caption: GoogleFonts.cabin(textStyle: textTheme?.caption),
      button: GoogleFonts.cabin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cabin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cabin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cabin Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin+Condensed
  static TextStyle cabinCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cabincondensed/v13/nwpMtK6mNhBK2err_hqkYhHRqmwaYOjZ5HZl8Q.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/cabincondensed/v13/nwpJtK6mNhBK2err_hqkYhHRqmwilMH97F15-K1oqQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cabincondensed/v13/nwpJtK6mNhBK2err_hqkYhHRqmwiuMb97F15-K1oqQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cabincondensed/v13/nwpJtK6mNhBK2err_hqkYhHRqmwi3Mf97F15-K1oqQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CabinCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cabin Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin+Condensed
  static TextTheme cabinCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cabinCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.cabinCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.cabinCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.cabinCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.cabinCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.cabinCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.cabinCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cabinCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.cabinCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.cabinCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.cabinCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cabinCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cabinCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cabin Sketch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin+Sketch
  static TextStyle cabinSketch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cabinsketch/v13/QGYpz_kZZAGCONcK2A4bGOjMn9JM6fnuKg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cabinsketch/v13/QGY2z_kZZAGCONcK2A4bGOj0I_1o4dLyI4CMFw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CabinSketch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cabin Sketch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cabin+Sketch
  static TextTheme cabinSketchTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cabinSketch(textStyle: textTheme?.display4),
      display3: GoogleFonts.cabinSketch(textStyle: textTheme?.display3),
      display2: GoogleFonts.cabinSketch(textStyle: textTheme?.display2),
      display1: GoogleFonts.cabinSketch(textStyle: textTheme?.display1),
      headline: GoogleFonts.cabinSketch(textStyle: textTheme?.headline),
      title: GoogleFonts.cabinSketch(textStyle: textTheme?.title),
      subhead: GoogleFonts.cabinSketch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cabinSketch(textStyle: textTheme?.body2),
      body1: GoogleFonts.cabinSketch(textStyle: textTheme?.body1),
      caption: GoogleFonts.cabinSketch(textStyle: textTheme?.caption),
      button: GoogleFonts.cabinSketch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cabinSketch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cabinSketch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Caesar Dressing font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caesar+Dressing
  static TextStyle caesarDressing({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/caesardressing/v8/yYLx0hLa3vawqtwdswbotmK4vrR3cbb6LZttyg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CaesarDressing',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Caesar Dressing font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caesar+Dressing
  static TextTheme caesarDressingTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.caesarDressing(textStyle: textTheme?.display4),
      display3: GoogleFonts.caesarDressing(textStyle: textTheme?.display3),
      display2: GoogleFonts.caesarDressing(textStyle: textTheme?.display2),
      display1: GoogleFonts.caesarDressing(textStyle: textTheme?.display1),
      headline: GoogleFonts.caesarDressing(textStyle: textTheme?.headline),
      title: GoogleFonts.caesarDressing(textStyle: textTheme?.title),
      subhead: GoogleFonts.caesarDressing(textStyle: textTheme?.subhead),
      body2: GoogleFonts.caesarDressing(textStyle: textTheme?.body2),
      body1: GoogleFonts.caesarDressing(textStyle: textTheme?.body1),
      caption: GoogleFonts.caesarDressing(textStyle: textTheme?.caption),
      button: GoogleFonts.caesarDressing(textStyle: textTheme?.button),
      subtitle: GoogleFonts.caesarDressing(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.caesarDressing(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cagliostro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cagliostro
  static TextStyle cagliostro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cagliostro/v8/ZgNWjP5HM73BV5amnX-TjGXEM4COoE4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cagliostro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cagliostro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cagliostro
  static TextTheme cagliostroTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cagliostro(textStyle: textTheme?.display4),
      display3: GoogleFonts.cagliostro(textStyle: textTheme?.display3),
      display2: GoogleFonts.cagliostro(textStyle: textTheme?.display2),
      display1: GoogleFonts.cagliostro(textStyle: textTheme?.display1),
      headline: GoogleFonts.cagliostro(textStyle: textTheme?.headline),
      title: GoogleFonts.cagliostro(textStyle: textTheme?.title),
      subhead: GoogleFonts.cagliostro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cagliostro(textStyle: textTheme?.body2),
      body1: GoogleFonts.cagliostro(textStyle: textTheme?.body1),
      caption: GoogleFonts.cagliostro(textStyle: textTheme?.caption),
      button: GoogleFonts.cagliostro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cagliostro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cagliostro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cairo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cairo
  static TextStyle cairo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/cairo/v6/SLXLc1nY6Hkvalrub76M7dd8aGZk.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/cairo/v6/SLXLc1nY6HkvalqKbL6M7dd8aGZk.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cairo/v6/SLXGc1nY6HkvamImRJqExst1.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cairo/v6/SLXLc1nY6Hkvalr-ar6M7dd8aGZk.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cairo/v6/SLXLc1nY6Hkvalqaa76M7dd8aGZk.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/cairo/v6/SLXLc1nY6Hkvalqiab6M7dd8aGZk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cairo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cairo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cairo
  static TextTheme cairoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cairo(textStyle: textTheme?.display4),
      display3: GoogleFonts.cairo(textStyle: textTheme?.display3),
      display2: GoogleFonts.cairo(textStyle: textTheme?.display2),
      display1: GoogleFonts.cairo(textStyle: textTheme?.display1),
      headline: GoogleFonts.cairo(textStyle: textTheme?.headline),
      title: GoogleFonts.cairo(textStyle: textTheme?.title),
      subhead: GoogleFonts.cairo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cairo(textStyle: textTheme?.body2),
      body1: GoogleFonts.cairo(textStyle: textTheme?.body1),
      caption: GoogleFonts.cairo(textStyle: textTheme?.caption),
      button: GoogleFonts.cairo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cairo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cairo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Calistoga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Calistoga
  static TextStyle calistoga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/calistoga/v1/6NUU8F2OJg6MeR7l4e0vtMYAwdRZfw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Calistoga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Calistoga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Calistoga
  static TextTheme calistogaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.calistoga(textStyle: textTheme?.display4),
      display3: GoogleFonts.calistoga(textStyle: textTheme?.display3),
      display2: GoogleFonts.calistoga(textStyle: textTheme?.display2),
      display1: GoogleFonts.calistoga(textStyle: textTheme?.display1),
      headline: GoogleFonts.calistoga(textStyle: textTheme?.headline),
      title: GoogleFonts.calistoga(textStyle: textTheme?.title),
      subhead: GoogleFonts.calistoga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.calistoga(textStyle: textTheme?.body2),
      body1: GoogleFonts.calistoga(textStyle: textTheme?.body1),
      caption: GoogleFonts.calistoga(textStyle: textTheme?.caption),
      button: GoogleFonts.calistoga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.calistoga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.calistoga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Calligraffitti font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Calligraffitti
  static TextStyle calligraffitti({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/calligraffitti/v11/46k2lbT3XjDVqJw3DCmCFjE0vnFZM5ZBpYN-.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Calligraffitti',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Calligraffitti font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Calligraffitti
  static TextTheme calligraffittiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.calligraffitti(textStyle: textTheme?.display4),
      display3: GoogleFonts.calligraffitti(textStyle: textTheme?.display3),
      display2: GoogleFonts.calligraffitti(textStyle: textTheme?.display2),
      display1: GoogleFonts.calligraffitti(textStyle: textTheme?.display1),
      headline: GoogleFonts.calligraffitti(textStyle: textTheme?.headline),
      title: GoogleFonts.calligraffitti(textStyle: textTheme?.title),
      subhead: GoogleFonts.calligraffitti(textStyle: textTheme?.subhead),
      body2: GoogleFonts.calligraffitti(textStyle: textTheme?.body2),
      body1: GoogleFonts.calligraffitti(textStyle: textTheme?.body1),
      caption: GoogleFonts.calligraffitti(textStyle: textTheme?.caption),
      button: GoogleFonts.calligraffitti(textStyle: textTheme?.button),
      subtitle: GoogleFonts.calligraffitti(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.calligraffitti(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cambay font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cambay
  static TextStyle cambay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cambay/v6/SLXJc1rY6H0_ZDsGbrSIz9JsaA.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cambay/v6/SLXLc1rY6H0_ZDs2bL6M7dd8aGZk.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cambay/v6/SLXKc1rY6H0_ZDs-0pusx_lwYX99kA.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/cambay/v6/SLXMc1rY6H0_ZDs2bIYwwvN0Q3ptkDMN.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cambay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cambay font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cambay
  static TextTheme cambayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cambay(textStyle: textTheme?.display4),
      display3: GoogleFonts.cambay(textStyle: textTheme?.display3),
      display2: GoogleFonts.cambay(textStyle: textTheme?.display2),
      display1: GoogleFonts.cambay(textStyle: textTheme?.display1),
      headline: GoogleFonts.cambay(textStyle: textTheme?.headline),
      title: GoogleFonts.cambay(textStyle: textTheme?.title),
      subhead: GoogleFonts.cambay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cambay(textStyle: textTheme?.body2),
      body1: GoogleFonts.cambay(textStyle: textTheme?.body1),
      caption: GoogleFonts.cambay(textStyle: textTheme?.caption),
      button: GoogleFonts.cambay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cambay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cambay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cambo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cambo
  static TextStyle cambo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cambo/v8/IFSqHeNEk8FJk416ok7xkPm8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cambo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cambo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cambo
  static TextTheme camboTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cambo(textStyle: textTheme?.display4),
      display3: GoogleFonts.cambo(textStyle: textTheme?.display3),
      display2: GoogleFonts.cambo(textStyle: textTheme?.display2),
      display1: GoogleFonts.cambo(textStyle: textTheme?.display1),
      headline: GoogleFonts.cambo(textStyle: textTheme?.headline),
      title: GoogleFonts.cambo(textStyle: textTheme?.title),
      subhead: GoogleFonts.cambo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cambo(textStyle: textTheme?.body2),
      body1: GoogleFonts.cambo(textStyle: textTheme?.body1),
      caption: GoogleFonts.cambo(textStyle: textTheme?.caption),
      button: GoogleFonts.cambo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cambo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cambo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Candal font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Candal
  static TextStyle candal({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/candal/v9/XoHn2YH6T7-t_8cNAR4Jt9Yxlw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Candal',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Candal font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Candal
  static TextTheme candalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.candal(textStyle: textTheme?.display4),
      display3: GoogleFonts.candal(textStyle: textTheme?.display3),
      display2: GoogleFonts.candal(textStyle: textTheme?.display2),
      display1: GoogleFonts.candal(textStyle: textTheme?.display1),
      headline: GoogleFonts.candal(textStyle: textTheme?.headline),
      title: GoogleFonts.candal(textStyle: textTheme?.title),
      subhead: GoogleFonts.candal(textStyle: textTheme?.subhead),
      body2: GoogleFonts.candal(textStyle: textTheme?.body2),
      body1: GoogleFonts.candal(textStyle: textTheme?.body1),
      caption: GoogleFonts.candal(textStyle: textTheme?.caption),
      button: GoogleFonts.candal(textStyle: textTheme?.button),
      subtitle: GoogleFonts.candal(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.candal(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cantarell font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantarell
  static TextStyle cantarell({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cantarell/v9/B50NF7ZDq37KMUvlO01Ji6hqHK-CLA.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cantarell/v9/B50LF7ZDq37KMUvlO015iaJuPqqSLJYf.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cantarell/v9/B50IF7ZDq37KMUvlO01xN4dOFISeJY8GgQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/cantarell/v9/B50WF7ZDq37KMUvlO015iZrSEY6aB4oWgWHB.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cantarell',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cantarell font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantarell
  static TextTheme cantarellTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cantarell(textStyle: textTheme?.display4),
      display3: GoogleFonts.cantarell(textStyle: textTheme?.display3),
      display2: GoogleFonts.cantarell(textStyle: textTheme?.display2),
      display1: GoogleFonts.cantarell(textStyle: textTheme?.display1),
      headline: GoogleFonts.cantarell(textStyle: textTheme?.headline),
      title: GoogleFonts.cantarell(textStyle: textTheme?.title),
      subhead: GoogleFonts.cantarell(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cantarell(textStyle: textTheme?.body2),
      body1: GoogleFonts.cantarell(textStyle: textTheme?.body1),
      caption: GoogleFonts.cantarell(textStyle: textTheme?.caption),
      button: GoogleFonts.cantarell(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cantarell(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cantarell(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cantata One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantata+One
  static TextStyle cantataOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cantataone/v9/PlI5Fl60Nb5obNzNe2jslVxEt8CwfGaD.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CantataOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cantata One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantata+One
  static TextTheme cantataOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cantataOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.cantataOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.cantataOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.cantataOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.cantataOne(textStyle: textTheme?.headline),
      title: GoogleFonts.cantataOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.cantataOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cantataOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.cantataOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.cantataOne(textStyle: textTheme?.caption),
      button: GoogleFonts.cantataOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cantataOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cantataOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cantora One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantora+One
  static TextStyle cantoraOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cantoraone/v9/gyB4hws1JdgnKy56GB_JX6zdZ4vZVbgZ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CantoraOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cantora One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cantora+One
  static TextTheme cantoraOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cantoraOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.cantoraOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.cantoraOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.cantoraOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.cantoraOne(textStyle: textTheme?.headline),
      title: GoogleFonts.cantoraOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.cantoraOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cantoraOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.cantoraOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.cantoraOne(textStyle: textTheme?.caption),
      button: GoogleFonts.cantoraOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cantoraOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cantoraOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Capriola font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Capriola
  static TextStyle capriola({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/capriola/v7/wXKoE3YSppcvo1PDln_8L-AinG8y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Capriola',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Capriola font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Capriola
  static TextTheme capriolaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.capriola(textStyle: textTheme?.display4),
      display3: GoogleFonts.capriola(textStyle: textTheme?.display3),
      display2: GoogleFonts.capriola(textStyle: textTheme?.display2),
      display1: GoogleFonts.capriola(textStyle: textTheme?.display1),
      headline: GoogleFonts.capriola(textStyle: textTheme?.headline),
      title: GoogleFonts.capriola(textStyle: textTheme?.title),
      subhead: GoogleFonts.capriola(textStyle: textTheme?.subhead),
      body2: GoogleFonts.capriola(textStyle: textTheme?.body2),
      body1: GoogleFonts.capriola(textStyle: textTheme?.body1),
      caption: GoogleFonts.capriola(textStyle: textTheme?.caption),
      button: GoogleFonts.capriola(textStyle: textTheme?.button),
      subtitle: GoogleFonts.capriola(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.capriola(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cardo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cardo
  static TextStyle cardo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cardo/v11/wlp_gwjKBV1pqiv_1oAZ2H5O.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cardo/v11/wlpxgwjKBV1pqhv93IQ73W5OcCk.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cardo/v11/wlpygwjKBV1pqhND-aQR82JHaTBX.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cardo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cardo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cardo
  static TextTheme cardoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cardo(textStyle: textTheme?.display4),
      display3: GoogleFonts.cardo(textStyle: textTheme?.display3),
      display2: GoogleFonts.cardo(textStyle: textTheme?.display2),
      display1: GoogleFonts.cardo(textStyle: textTheme?.display1),
      headline: GoogleFonts.cardo(textStyle: textTheme?.headline),
      title: GoogleFonts.cardo(textStyle: textTheme?.title),
      subhead: GoogleFonts.cardo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cardo(textStyle: textTheme?.body2),
      body1: GoogleFonts.cardo(textStyle: textTheme?.body1),
      caption: GoogleFonts.cardo(textStyle: textTheme?.caption),
      button: GoogleFonts.cardo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cardo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cardo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Carme font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carme
  static TextStyle carme({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/carme/v10/ptRHTiWdbvZIDOjGxLNrxfbZ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Carme',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Carme font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carme
  static TextTheme carmeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.carme(textStyle: textTheme?.display4),
      display3: GoogleFonts.carme(textStyle: textTheme?.display3),
      display2: GoogleFonts.carme(textStyle: textTheme?.display2),
      display1: GoogleFonts.carme(textStyle: textTheme?.display1),
      headline: GoogleFonts.carme(textStyle: textTheme?.headline),
      title: GoogleFonts.carme(textStyle: textTheme?.title),
      subhead: GoogleFonts.carme(textStyle: textTheme?.subhead),
      body2: GoogleFonts.carme(textStyle: textTheme?.body2),
      body1: GoogleFonts.carme(textStyle: textTheme?.body1),
      caption: GoogleFonts.carme(textStyle: textTheme?.caption),
      button: GoogleFonts.carme(textStyle: textTheme?.button),
      subtitle: GoogleFonts.carme(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.carme(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Carrois Gothic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carrois+Gothic
  static TextStyle carroisGothic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/carroisgothic/v10/Z9XPDmFATg-N1PLtLOOxvIHl9ZmD3i7ajcJ-.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CarroisGothic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Carrois Gothic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carrois+Gothic
  static TextTheme carroisGothicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.carroisGothic(textStyle: textTheme?.display4),
      display3: GoogleFonts.carroisGothic(textStyle: textTheme?.display3),
      display2: GoogleFonts.carroisGothic(textStyle: textTheme?.display2),
      display1: GoogleFonts.carroisGothic(textStyle: textTheme?.display1),
      headline: GoogleFonts.carroisGothic(textStyle: textTheme?.headline),
      title: GoogleFonts.carroisGothic(textStyle: textTheme?.title),
      subhead: GoogleFonts.carroisGothic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.carroisGothic(textStyle: textTheme?.body2),
      body1: GoogleFonts.carroisGothic(textStyle: textTheme?.body1),
      caption: GoogleFonts.carroisGothic(textStyle: textTheme?.caption),
      button: GoogleFonts.carroisGothic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.carroisGothic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.carroisGothic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Carrois Gothic SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carrois+Gothic+SC
  static TextStyle carroisGothicSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/carroisgothicsc/v9/ZgNJjOVHM6jfUZCmyUqT2A2HVKjc-28nNHabY4dN.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CarroisGothicSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Carrois Gothic SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carrois+Gothic+SC
  static TextTheme carroisGothicSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.carroisGothicSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.carroisGothicSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.carroisGothicSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.carroisGothicSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.carroisGothicSC(textStyle: textTheme?.headline),
      title: GoogleFonts.carroisGothicSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.carroisGothicSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.carroisGothicSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.carroisGothicSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.carroisGothicSC(textStyle: textTheme?.caption),
      button: GoogleFonts.carroisGothicSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.carroisGothicSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.carroisGothicSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Carter One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carter+One
  static TextStyle carterOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/carterone/v11/q5uCsoe5IOB2-pXv9UcNIxR2hYxREMs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CarterOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Carter One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Carter+One
  static TextTheme carterOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.carterOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.carterOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.carterOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.carterOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.carterOne(textStyle: textTheme?.headline),
      title: GoogleFonts.carterOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.carterOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.carterOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.carterOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.carterOne(textStyle: textTheme?.caption),
      button: GoogleFonts.carterOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.carterOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.carterOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Catamaran font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Catamaran
  static TextStyle catamaran({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0OIpQoyXQa2RxT7-5jhjRFSfiM7HBj.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0NIpQoyXQa2RxT7-5jKhVlY9aA5Wl6PQ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0NIpQoyXQa2RxT7-5jThZlY9aA5Wl6PQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0IIpQoyXQa2RxT7-5b4j5Ba_2c7A.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0NIpQoyXQa2RxT7-5jFhdlY9aA5Wl6PQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0NIpQoyXQa2RxT7-5jOhBlY9aA5Wl6PQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0NIpQoyXQa2RxT7-5jXhFlY9aA5Wl6PQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0NIpQoyXQa2RxT7-5jQhJlY9aA5Wl6PQ.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/catamaran/v6/o-0NIpQoyXQa2RxT7-5jZhNlY9aA5Wl6PQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Catamaran',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Catamaran font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Catamaran
  static TextTheme catamaranTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.catamaran(textStyle: textTheme?.display4),
      display3: GoogleFonts.catamaran(textStyle: textTheme?.display3),
      display2: GoogleFonts.catamaran(textStyle: textTheme?.display2),
      display1: GoogleFonts.catamaran(textStyle: textTheme?.display1),
      headline: GoogleFonts.catamaran(textStyle: textTheme?.headline),
      title: GoogleFonts.catamaran(textStyle: textTheme?.title),
      subhead: GoogleFonts.catamaran(textStyle: textTheme?.subhead),
      body2: GoogleFonts.catamaran(textStyle: textTheme?.body2),
      body1: GoogleFonts.catamaran(textStyle: textTheme?.body1),
      caption: GoogleFonts.catamaran(textStyle: textTheme?.caption),
      button: GoogleFonts.catamaran(textStyle: textTheme?.button),
      subtitle: GoogleFonts.catamaran(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.catamaran(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Caudex font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caudex
  static TextStyle caudex({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/caudex/v9/esDQ311QOP6BJUrIyviAnb4eEw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/caudex/v9/esDS311QOP6BJUr4yPKEv7sOE4in.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/caudex/v9/esDT311QOP6BJUrwdteklZUCGpG-GQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/caudex/v9/esDV311QOP6BJUr4yMo4kJ8GOJSuGdLB.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Caudex',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Caudex font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caudex
  static TextTheme caudexTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.caudex(textStyle: textTheme?.display4),
      display3: GoogleFonts.caudex(textStyle: textTheme?.display3),
      display2: GoogleFonts.caudex(textStyle: textTheme?.display2),
      display1: GoogleFonts.caudex(textStyle: textTheme?.display1),
      headline: GoogleFonts.caudex(textStyle: textTheme?.headline),
      title: GoogleFonts.caudex(textStyle: textTheme?.title),
      subhead: GoogleFonts.caudex(textStyle: textTheme?.subhead),
      body2: GoogleFonts.caudex(textStyle: textTheme?.body2),
      body1: GoogleFonts.caudex(textStyle: textTheme?.body1),
      caption: GoogleFonts.caudex(textStyle: textTheme?.caption),
      button: GoogleFonts.caudex(textStyle: textTheme?.button),
      subtitle: GoogleFonts.caudex(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.caudex(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Caveat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caveat
  static TextStyle caveat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/caveat/v7/Wnz6HAc5bAfYB2QLYTwZqg_MPQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/caveat/v7/Wnz5HAc5bAfYB2Qz3RM9oiTQNAuxjA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Caveat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Caveat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caveat
  static TextTheme caveatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.caveat(textStyle: textTheme?.display4),
      display3: GoogleFonts.caveat(textStyle: textTheme?.display3),
      display2: GoogleFonts.caveat(textStyle: textTheme?.display2),
      display1: GoogleFonts.caveat(textStyle: textTheme?.display1),
      headline: GoogleFonts.caveat(textStyle: textTheme?.headline),
      title: GoogleFonts.caveat(textStyle: textTheme?.title),
      subhead: GoogleFonts.caveat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.caveat(textStyle: textTheme?.body2),
      body1: GoogleFonts.caveat(textStyle: textTheme?.body1),
      caption: GoogleFonts.caveat(textStyle: textTheme?.caption),
      button: GoogleFonts.caveat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.caveat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.caveat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Caveat Brush font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caveat+Brush
  static TextStyle caveatBrush({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/caveatbrush/v5/EYq0maZfwr9S9-ETZc3fKXtMW7mT03pdQw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CaveatBrush',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Caveat Brush font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Caveat+Brush
  static TextTheme caveatBrushTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.caveatBrush(textStyle: textTheme?.display4),
      display3: GoogleFonts.caveatBrush(textStyle: textTheme?.display3),
      display2: GoogleFonts.caveatBrush(textStyle: textTheme?.display2),
      display1: GoogleFonts.caveatBrush(textStyle: textTheme?.display1),
      headline: GoogleFonts.caveatBrush(textStyle: textTheme?.headline),
      title: GoogleFonts.caveatBrush(textStyle: textTheme?.title),
      subhead: GoogleFonts.caveatBrush(textStyle: textTheme?.subhead),
      body2: GoogleFonts.caveatBrush(textStyle: textTheme?.body2),
      body1: GoogleFonts.caveatBrush(textStyle: textTheme?.body1),
      caption: GoogleFonts.caveatBrush(textStyle: textTheme?.caption),
      button: GoogleFonts.caveatBrush(textStyle: textTheme?.button),
      subtitle: GoogleFonts.caveatBrush(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.caveatBrush(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cedarville Cursive font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cedarville+Cursive
  static TextStyle cedarvilleCursive({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cedarvillecursive/v11/yYL00g_a2veiudhUmxjo5VKkoqA-B_neJbBxw8BeTg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CedarvilleCursive',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cedarville Cursive font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cedarville+Cursive
  static TextTheme cedarvilleCursiveTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.display4),
      display3: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.display3),
      display2: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.display2),
      display1: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.display1),
      headline: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.headline),
      title: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.title),
      subhead: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.body2),
      body1: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.body1),
      caption: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.caption),
      button: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cedarvilleCursive(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ceviche One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ceviche+One
  static TextStyle cevicheOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cevicheone/v10/gyB4hws1IcA6JzR-GB_JX6zdZ4vZVbgZ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CevicheOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ceviche One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ceviche+One
  static TextTheme cevicheOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cevicheOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.cevicheOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.cevicheOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.cevicheOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.cevicheOne(textStyle: textTheme?.headline),
      title: GoogleFonts.cevicheOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.cevicheOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cevicheOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.cevicheOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.cevicheOne(textStyle: textTheme?.caption),
      button: GoogleFonts.cevicheOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cevicheOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cevicheOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chakra Petch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chakra+Petch
  static TextStyle chakraPetch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIflMapbsEk7TDLdtEz1BwkeNIhFQJXE3AY00g.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIfnMapbsEk7TDLdtEz1BwkWmpLJQp_A_gMk0izH.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIf6MapbsEk7TDLdtEz1BwkmmKBhSL7Y1Q.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIfkMapbsEk7TDLdtEz1BwkWmqplarvI1R8t.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIflMapbsEk7TDLdtEz1BwkebIlFQJXE3AY00g.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIfnMapbsEk7TDLdtEz1BwkWmpKRQ5_A_gMk0izH.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIflMapbsEk7TDLdtEz1BwkeQI5FQJXE3AY00g.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIfnMapbsEk7TDLdtEz1BwkWmpK9RJ_A_gMk0izH.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIflMapbsEk7TDLdtEz1BwkeJI9FQJXE3AY00g.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/chakrapetch/v3/cIfnMapbsEk7TDLdtEz1BwkWmpLZRZ_A_gMk0izH.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChakraPetch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chakra Petch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chakra+Petch
  static TextTheme chakraPetchTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chakraPetch(textStyle: textTheme?.display4),
      display3: GoogleFonts.chakraPetch(textStyle: textTheme?.display3),
      display2: GoogleFonts.chakraPetch(textStyle: textTheme?.display2),
      display1: GoogleFonts.chakraPetch(textStyle: textTheme?.display1),
      headline: GoogleFonts.chakraPetch(textStyle: textTheme?.headline),
      title: GoogleFonts.chakraPetch(textStyle: textTheme?.title),
      subhead: GoogleFonts.chakraPetch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chakraPetch(textStyle: textTheme?.body2),
      body1: GoogleFonts.chakraPetch(textStyle: textTheme?.body1),
      caption: GoogleFonts.chakraPetch(textStyle: textTheme?.caption),
      button: GoogleFonts.chakraPetch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chakraPetch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chakraPetch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Changa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Changa
  static TextStyle changa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/changa/v8/2-c79JNi2YuVOUcOarRPgnNGooxCZy2xQjDp9htf1ZM.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/changa/v8/2-c79JNi2YuVOUcOarRPgnNGooxCZ_OxQjDp9htf1ZM.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/changa/v8/2-c79JNi2YuVOUcOarRPgnNGooxCZ62xQjDp9htf1ZM.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/changa/v8/2-c79JNi2YuVOUcOarRPgnNGooxCZ5-xQjDp9htf1ZM.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/changa/v8/2-c79JNi2YuVOUcOarRPgnNGooxCZ3O2QjDp9htf1ZM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/changa/v8/2-c79JNi2YuVOUcOarRPgnNGooxCZ0q2QjDp9htf1ZM.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/changa/v8/2-c79JNi2YuVOUcOarRPgnNGooxCZy22QjDp9htf1ZM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Changa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Changa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Changa
  static TextTheme changaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.changa(textStyle: textTheme?.display4),
      display3: GoogleFonts.changa(textStyle: textTheme?.display3),
      display2: GoogleFonts.changa(textStyle: textTheme?.display2),
      display1: GoogleFonts.changa(textStyle: textTheme?.display1),
      headline: GoogleFonts.changa(textStyle: textTheme?.headline),
      title: GoogleFonts.changa(textStyle: textTheme?.title),
      subhead: GoogleFonts.changa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.changa(textStyle: textTheme?.body2),
      body1: GoogleFonts.changa(textStyle: textTheme?.body1),
      caption: GoogleFonts.changa(textStyle: textTheme?.caption),
      button: GoogleFonts.changa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.changa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.changa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Changa One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Changa+One
  static TextStyle changaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/changaone/v12/xfu00W3wXn3QLUJXhzq46AbouLfbK64.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/changaone/v12/xfu20W3wXn3QLUJXhzq42ATivJXeO67ISw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChangaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Changa One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Changa+One
  static TextTheme changaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.changaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.changaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.changaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.changaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.changaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.changaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.changaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.changaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.changaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.changaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.changaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.changaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.changaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chango font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chango
  static TextStyle chango({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chango/v8/2V0cKI0OB5U7WaJyz324TFUaAw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chango',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chango font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chango
  static TextTheme changoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chango(textStyle: textTheme?.display4),
      display3: GoogleFonts.chango(textStyle: textTheme?.display3),
      display2: GoogleFonts.chango(textStyle: textTheme?.display2),
      display1: GoogleFonts.chango(textStyle: textTheme?.display1),
      headline: GoogleFonts.chango(textStyle: textTheme?.headline),
      title: GoogleFonts.chango(textStyle: textTheme?.title),
      subhead: GoogleFonts.chango(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chango(textStyle: textTheme?.body2),
      body1: GoogleFonts.chango(textStyle: textTheme?.body1),
      caption: GoogleFonts.chango(textStyle: textTheme?.caption),
      button: GoogleFonts.chango(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chango(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chango(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Charm font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Charm
  static TextStyle charm({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/charm/v4/7cHmv4oii5K0MeYvIe804WIo.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/charm/v4/7cHrv4oii5K0Md6TDss8yn4hnCci.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Charm',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Charm font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Charm
  static TextTheme charmTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.charm(textStyle: textTheme?.display4),
      display3: GoogleFonts.charm(textStyle: textTheme?.display3),
      display2: GoogleFonts.charm(textStyle: textTheme?.display2),
      display1: GoogleFonts.charm(textStyle: textTheme?.display1),
      headline: GoogleFonts.charm(textStyle: textTheme?.headline),
      title: GoogleFonts.charm(textStyle: textTheme?.title),
      subhead: GoogleFonts.charm(textStyle: textTheme?.subhead),
      body2: GoogleFonts.charm(textStyle: textTheme?.body2),
      body1: GoogleFonts.charm(textStyle: textTheme?.body1),
      caption: GoogleFonts.charm(textStyle: textTheme?.caption),
      button: GoogleFonts.charm(textStyle: textTheme?.button),
      subtitle: GoogleFonts.charm(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.charm(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Charmonman font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Charmonman
  static TextStyle charmonman({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/charmonman/v3/MjQDmiR3vP_nuxDv47jiWJGovLdh6OE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/charmonman/v3/MjQAmiR3vP_nuxDv47jiYC2HmL9K9OhmGnY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Charmonman',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Charmonman font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Charmonman
  static TextTheme charmonmanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.charmonman(textStyle: textTheme?.display4),
      display3: GoogleFonts.charmonman(textStyle: textTheme?.display3),
      display2: GoogleFonts.charmonman(textStyle: textTheme?.display2),
      display1: GoogleFonts.charmonman(textStyle: textTheme?.display1),
      headline: GoogleFonts.charmonman(textStyle: textTheme?.headline),
      title: GoogleFonts.charmonman(textStyle: textTheme?.title),
      subhead: GoogleFonts.charmonman(textStyle: textTheme?.subhead),
      body2: GoogleFonts.charmonman(textStyle: textTheme?.body2),
      body1: GoogleFonts.charmonman(textStyle: textTheme?.body1),
      caption: GoogleFonts.charmonman(textStyle: textTheme?.caption),
      button: GoogleFonts.charmonman(textStyle: textTheme?.button),
      subtitle: GoogleFonts.charmonman(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.charmonman(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chathura font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chathura
  static TextStyle chathura({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/chathura/v5/_gP91R7-rzUuVjim42dEq0SbTvZyuDo.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/chathura/v5/_gP81R7-rzUuVjim42eMiWSxYPp7oSNy.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chathura/v5/_gP71R7-rzUuVjim418goUC5S-Zy.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/chathura/v5/_gP81R7-rzUuVjim42ecjmSxYPp7oSNy.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/chathura/v5/_gP81R7-rzUuVjim42eAjWSxYPp7oSNy.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chathura',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chathura font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chathura
  static TextTheme chathuraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chathura(textStyle: textTheme?.display4),
      display3: GoogleFonts.chathura(textStyle: textTheme?.display3),
      display2: GoogleFonts.chathura(textStyle: textTheme?.display2),
      display1: GoogleFonts.chathura(textStyle: textTheme?.display1),
      headline: GoogleFonts.chathura(textStyle: textTheme?.headline),
      title: GoogleFonts.chathura(textStyle: textTheme?.title),
      subhead: GoogleFonts.chathura(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chathura(textStyle: textTheme?.body2),
      body1: GoogleFonts.chathura(textStyle: textTheme?.body1),
      caption: GoogleFonts.chathura(textStyle: textTheme?.caption),
      button: GoogleFonts.chathura(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chathura(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chathura(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chau Philomene One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chau+Philomene+One
  static TextStyle chauPhilomeneOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chauphilomeneone/v9/55xxezRsPtfie1vPY49qzdgSlJiHRQFsnIx7QMISdQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/chauphilomeneone/v9/55xzezRsPtfie1vPY49qzdgSlJiHRQFcnoZ_YscCdXQB.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChauPhilomeneOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chau Philomene One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chau+Philomene+One
  static TextTheme chauPhilomeneOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.headline),
      title: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.caption),
      button: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chauPhilomeneOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chela One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chela+One
  static TextStyle chelaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chelaone/v8/6ae-4KC7Uqgdz_JZdPIy31vWNTMwoQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChelaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chela One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chela+One
  static TextTheme chelaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chelaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.chelaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.chelaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.chelaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.chelaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.chelaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.chelaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chelaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.chelaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.chelaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.chelaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chelaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chelaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chelsea Market font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chelsea+Market
  static TextStyle chelseaMarket({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chelseamarket/v7/BCawqZsHqfr89WNP_IApC8tzKBhlLA4uKkWk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ChelseaMarket',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chelsea Market font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chelsea+Market
  static TextTheme chelseaMarketTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chelseaMarket(textStyle: textTheme?.display4),
      display3: GoogleFonts.chelseaMarket(textStyle: textTheme?.display3),
      display2: GoogleFonts.chelseaMarket(textStyle: textTheme?.display2),
      display1: GoogleFonts.chelseaMarket(textStyle: textTheme?.display1),
      headline: GoogleFonts.chelseaMarket(textStyle: textTheme?.headline),
      title: GoogleFonts.chelseaMarket(textStyle: textTheme?.title),
      subhead: GoogleFonts.chelseaMarket(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chelseaMarket(textStyle: textTheme?.body2),
      body1: GoogleFonts.chelseaMarket(textStyle: textTheme?.body1),
      caption: GoogleFonts.chelseaMarket(textStyle: textTheme?.caption),
      button: GoogleFonts.chelseaMarket(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chelseaMarket(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chelseaMarket(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chenla font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chenla
  static TextStyle chenla({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chenla/v12/SZc43FDpIKu8WZ9eXxfonUPL6Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chenla',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chenla font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chenla
  static TextTheme chenlaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chenla(textStyle: textTheme?.display4),
      display3: GoogleFonts.chenla(textStyle: textTheme?.display3),
      display2: GoogleFonts.chenla(textStyle: textTheme?.display2),
      display1: GoogleFonts.chenla(textStyle: textTheme?.display1),
      headline: GoogleFonts.chenla(textStyle: textTheme?.headline),
      title: GoogleFonts.chenla(textStyle: textTheme?.title),
      subhead: GoogleFonts.chenla(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chenla(textStyle: textTheme?.body2),
      body1: GoogleFonts.chenla(textStyle: textTheme?.body1),
      caption: GoogleFonts.chenla(textStyle: textTheme?.caption),
      button: GoogleFonts.chenla(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chenla(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chenla(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cherry Cream Soda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cherry+Cream+Soda
  static TextStyle cherryCreamSoda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cherrycreamsoda/v10/UMBIrOxBrW6w2FFyi9paG0fdVdRciTd6Cd47DJ7G.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CherryCreamSoda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cherry Cream Soda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cherry+Cream+Soda
  static TextTheme cherryCreamSodaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.display4),
      display3: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.display3),
      display2: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.display2),
      display1: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.display1),
      headline: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.headline),
      title: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.title),
      subhead: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.body2),
      body1: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.body1),
      caption: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.caption),
      button: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cherryCreamSoda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cherry Swash font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cherry+Swash
  static TextStyle cherrySwash({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cherryswash/v8/i7dNIFByZjaNAMxtZcnfAy58QHi-EwWMbg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cherryswash/v8/i7dSIFByZjaNAMxtZcnfAy5E_FeaGy6QZ3WfYg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CherrySwash',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cherry Swash font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cherry+Swash
  static TextTheme cherrySwashTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cherrySwash(textStyle: textTheme?.display4),
      display3: GoogleFonts.cherrySwash(textStyle: textTheme?.display3),
      display2: GoogleFonts.cherrySwash(textStyle: textTheme?.display2),
      display1: GoogleFonts.cherrySwash(textStyle: textTheme?.display1),
      headline: GoogleFonts.cherrySwash(textStyle: textTheme?.headline),
      title: GoogleFonts.cherrySwash(textStyle: textTheme?.title),
      subhead: GoogleFonts.cherrySwash(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cherrySwash(textStyle: textTheme?.body2),
      body1: GoogleFonts.cherrySwash(textStyle: textTheme?.body1),
      caption: GoogleFonts.cherrySwash(textStyle: textTheme?.caption),
      button: GoogleFonts.cherrySwash(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cherrySwash(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cherrySwash(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chewy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chewy
  static TextStyle chewy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chewy/v11/uK_94ruUb-k-wk5xIDMfO-ed.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chewy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chewy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chewy
  static TextTheme chewyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chewy(textStyle: textTheme?.display4),
      display3: GoogleFonts.chewy(textStyle: textTheme?.display3),
      display2: GoogleFonts.chewy(textStyle: textTheme?.display2),
      display1: GoogleFonts.chewy(textStyle: textTheme?.display1),
      headline: GoogleFonts.chewy(textStyle: textTheme?.headline),
      title: GoogleFonts.chewy(textStyle: textTheme?.title),
      subhead: GoogleFonts.chewy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chewy(textStyle: textTheme?.body2),
      body1: GoogleFonts.chewy(textStyle: textTheme?.body1),
      caption: GoogleFonts.chewy(textStyle: textTheme?.caption),
      button: GoogleFonts.chewy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chewy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chewy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chicle font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chicle
  static TextStyle chicle({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chicle/v8/lJwG-pw9i2dqU-BDyWKuobYSxw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chicle',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chicle font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chicle
  static TextTheme chicleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chicle(textStyle: textTheme?.display4),
      display3: GoogleFonts.chicle(textStyle: textTheme?.display3),
      display2: GoogleFonts.chicle(textStyle: textTheme?.display2),
      display1: GoogleFonts.chicle(textStyle: textTheme?.display1),
      headline: GoogleFonts.chicle(textStyle: textTheme?.headline),
      title: GoogleFonts.chicle(textStyle: textTheme?.title),
      subhead: GoogleFonts.chicle(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chicle(textStyle: textTheme?.body2),
      body1: GoogleFonts.chicle(textStyle: textTheme?.body1),
      caption: GoogleFonts.chicle(textStyle: textTheme?.caption),
      button: GoogleFonts.chicle(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chicle(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chicle(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chilanka font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chilanka
  static TextStyle chilanka({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chilanka/v5/WWXRlj2DZQiMJYaYRrJQI9EAZhTO.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chilanka',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chilanka font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chilanka
  static TextTheme chilankaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chilanka(textStyle: textTheme?.display4),
      display3: GoogleFonts.chilanka(textStyle: textTheme?.display3),
      display2: GoogleFonts.chilanka(textStyle: textTheme?.display2),
      display1: GoogleFonts.chilanka(textStyle: textTheme?.display1),
      headline: GoogleFonts.chilanka(textStyle: textTheme?.headline),
      title: GoogleFonts.chilanka(textStyle: textTheme?.title),
      subhead: GoogleFonts.chilanka(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chilanka(textStyle: textTheme?.body2),
      body1: GoogleFonts.chilanka(textStyle: textTheme?.body1),
      caption: GoogleFonts.chilanka(textStyle: textTheme?.caption),
      button: GoogleFonts.chilanka(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chilanka(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chilanka(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chivo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chivo
  static TextStyle chivo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/chivo/v11/va9F4kzIxd1KFrjDY8Z_uqzGQC_-.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/chivo/v11/va9D4kzIxd1KFrBteUp9sKjkRT_-bF0.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chivo/v11/va9I4kzIxd1KFoBvS-J3kbDP.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/chivo/v11/va9G4kzIxd1KFrBtQeZVlKDPWTY.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/chivo/v11/va9F4kzIxd1KFrjTZMZ_uqzGQC_-.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/chivo/v11/va9D4kzIxd1KFrBteVp6sKjkRT_-bF0.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/chivo/v11/va9F4kzIxd1KFrjrZsZ_uqzGQC_-.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/chivo/v11/va9D4kzIxd1KFrBteWJ4sKjkRT_-bF0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chivo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chivo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chivo
  static TextTheme chivoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chivo(textStyle: textTheme?.display4),
      display3: GoogleFonts.chivo(textStyle: textTheme?.display3),
      display2: GoogleFonts.chivo(textStyle: textTheme?.display2),
      display1: GoogleFonts.chivo(textStyle: textTheme?.display1),
      headline: GoogleFonts.chivo(textStyle: textTheme?.headline),
      title: GoogleFonts.chivo(textStyle: textTheme?.title),
      subhead: GoogleFonts.chivo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chivo(textStyle: textTheme?.body2),
      body1: GoogleFonts.chivo(textStyle: textTheme?.body1),
      caption: GoogleFonts.chivo(textStyle: textTheme?.caption),
      button: GoogleFonts.chivo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chivo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chivo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Chonburi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chonburi
  static TextStyle chonburi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/chonburi/v4/8AtqGs-wOpGRTBq66IWaFr3biAfZ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Chonburi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Chonburi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Chonburi
  static TextTheme chonburiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.chonburi(textStyle: textTheme?.display4),
      display3: GoogleFonts.chonburi(textStyle: textTheme?.display3),
      display2: GoogleFonts.chonburi(textStyle: textTheme?.display2),
      display1: GoogleFonts.chonburi(textStyle: textTheme?.display1),
      headline: GoogleFonts.chonburi(textStyle: textTheme?.headline),
      title: GoogleFonts.chonburi(textStyle: textTheme?.title),
      subhead: GoogleFonts.chonburi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.chonburi(textStyle: textTheme?.body2),
      body1: GoogleFonts.chonburi(textStyle: textTheme?.body1),
      caption: GoogleFonts.chonburi(textStyle: textTheme?.caption),
      button: GoogleFonts.chonburi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.chonburi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.chonburi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cinzel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cinzel
  static TextStyle cinzel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cinzel/v9/8vIJ7ww63mVu7gtL8W76HEdHMg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cinzel/v9/8vIK7ww63mVu7gtzTUHeFGxbO_zo-w.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/cinzel/v9/8vIK7ww63mVu7gtzdUPeFGxbO_zo-w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cinzel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cinzel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cinzel
  static TextTheme cinzelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cinzel(textStyle: textTheme?.display4),
      display3: GoogleFonts.cinzel(textStyle: textTheme?.display3),
      display2: GoogleFonts.cinzel(textStyle: textTheme?.display2),
      display1: GoogleFonts.cinzel(textStyle: textTheme?.display1),
      headline: GoogleFonts.cinzel(textStyle: textTheme?.headline),
      title: GoogleFonts.cinzel(textStyle: textTheme?.title),
      subhead: GoogleFonts.cinzel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cinzel(textStyle: textTheme?.body2),
      body1: GoogleFonts.cinzel(textStyle: textTheme?.body1),
      caption: GoogleFonts.cinzel(textStyle: textTheme?.caption),
      button: GoogleFonts.cinzel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cinzel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cinzel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cinzel Decorative font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cinzel+Decorative
  static TextStyle cinzelDecorative({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cinzeldecorative/v8/daaCSScvJGqLYhG8nNt8KPPswUAPnh7URs1LaCyC.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cinzeldecorative/v8/daaHSScvJGqLYhG8nNt8KPPswUAPniZoaelDQzCLlQXE.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/cinzeldecorative/v8/daaHSScvJGqLYhG8nNt8KPPswUAPniZQa-lDQzCLlQXE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CinzelDecorative',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cinzel Decorative font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cinzel+Decorative
  static TextTheme cinzelDecorativeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cinzelDecorative(textStyle: textTheme?.display4),
      display3: GoogleFonts.cinzelDecorative(textStyle: textTheme?.display3),
      display2: GoogleFonts.cinzelDecorative(textStyle: textTheme?.display2),
      display1: GoogleFonts.cinzelDecorative(textStyle: textTheme?.display1),
      headline: GoogleFonts.cinzelDecorative(textStyle: textTheme?.headline),
      title: GoogleFonts.cinzelDecorative(textStyle: textTheme?.title),
      subhead: GoogleFonts.cinzelDecorative(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cinzelDecorative(textStyle: textTheme?.body2),
      body1: GoogleFonts.cinzelDecorative(textStyle: textTheme?.body1),
      caption: GoogleFonts.cinzelDecorative(textStyle: textTheme?.caption),
      button: GoogleFonts.cinzelDecorative(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cinzelDecorative(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cinzelDecorative(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Clicker Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Clicker+Script
  static TextStyle clickerScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/clickerscript/v7/raxkHiKPvt8CMH6ZWP8PdlEq72rY2zqUKafv.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ClickerScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Clicker Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Clicker+Script
  static TextTheme clickerScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.clickerScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.clickerScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.clickerScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.clickerScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.clickerScript(textStyle: textTheme?.headline),
      title: GoogleFonts.clickerScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.clickerScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.clickerScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.clickerScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.clickerScript(textStyle: textTheme?.caption),
      button: GoogleFonts.clickerScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.clickerScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.clickerScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coda
  static TextStyle coda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/coda/v15/SLXHc1jY5nQ8JUIMapaN39I.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/coda/v15/SLXIc1jY5nQ8HeIgTp6mw9t1cX8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Coda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coda
  static TextTheme codaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.coda(textStyle: textTheme?.display4),
      display3: GoogleFonts.coda(textStyle: textTheme?.display3),
      display2: GoogleFonts.coda(textStyle: textTheme?.display2),
      display1: GoogleFonts.coda(textStyle: textTheme?.display1),
      headline: GoogleFonts.coda(textStyle: textTheme?.headline),
      title: GoogleFonts.coda(textStyle: textTheme?.title),
      subhead: GoogleFonts.coda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.coda(textStyle: textTheme?.body2),
      body1: GoogleFonts.coda(textStyle: textTheme?.body1),
      caption: GoogleFonts.coda(textStyle: textTheme?.caption),
      button: GoogleFonts.coda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.coda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.coda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coda Caption font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coda+Caption
  static TextStyle codaCaption({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/codacaption/v13/ieVm2YRII2GMY7SyXSoDRiQGqcx6x_-fACIgaw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CodaCaption',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coda Caption font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coda+Caption
  static TextTheme codaCaptionTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.codaCaption(textStyle: textTheme?.display4),
      display3: GoogleFonts.codaCaption(textStyle: textTheme?.display3),
      display2: GoogleFonts.codaCaption(textStyle: textTheme?.display2),
      display1: GoogleFonts.codaCaption(textStyle: textTheme?.display1),
      headline: GoogleFonts.codaCaption(textStyle: textTheme?.headline),
      title: GoogleFonts.codaCaption(textStyle: textTheme?.title),
      subhead: GoogleFonts.codaCaption(textStyle: textTheme?.subhead),
      body2: GoogleFonts.codaCaption(textStyle: textTheme?.body2),
      body1: GoogleFonts.codaCaption(textStyle: textTheme?.body1),
      caption: GoogleFonts.codaCaption(textStyle: textTheme?.caption),
      button: GoogleFonts.codaCaption(textStyle: textTheme?.button),
      subtitle: GoogleFonts.codaCaption(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.codaCaption(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Codystar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Codystar
  static TextStyle codystar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/codystar/v7/FwZf7-Q1xVk-40qxOuYsyuyrj0e29bfC.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/codystar/v7/FwZY7-Q1xVk-40qxOt6A4sijpFu_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Codystar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Codystar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Codystar
  static TextTheme codystarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.codystar(textStyle: textTheme?.display4),
      display3: GoogleFonts.codystar(textStyle: textTheme?.display3),
      display2: GoogleFonts.codystar(textStyle: textTheme?.display2),
      display1: GoogleFonts.codystar(textStyle: textTheme?.display1),
      headline: GoogleFonts.codystar(textStyle: textTheme?.headline),
      title: GoogleFonts.codystar(textStyle: textTheme?.title),
      subhead: GoogleFonts.codystar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.codystar(textStyle: textTheme?.body2),
      body1: GoogleFonts.codystar(textStyle: textTheme?.body1),
      caption: GoogleFonts.codystar(textStyle: textTheme?.caption),
      button: GoogleFonts.codystar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.codystar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.codystar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coiny font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coiny
  static TextStyle coiny({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/coiny/v5/gyByhwU1K989PXwbElSvO5Tc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Coiny',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coiny font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coiny
  static TextTheme coinyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.coiny(textStyle: textTheme?.display4),
      display3: GoogleFonts.coiny(textStyle: textTheme?.display3),
      display2: GoogleFonts.coiny(textStyle: textTheme?.display2),
      display1: GoogleFonts.coiny(textStyle: textTheme?.display1),
      headline: GoogleFonts.coiny(textStyle: textTheme?.headline),
      title: GoogleFonts.coiny(textStyle: textTheme?.title),
      subhead: GoogleFonts.coiny(textStyle: textTheme?.subhead),
      body2: GoogleFonts.coiny(textStyle: textTheme?.body2),
      body1: GoogleFonts.coiny(textStyle: textTheme?.body1),
      caption: GoogleFonts.coiny(textStyle: textTheme?.caption),
      button: GoogleFonts.coiny(textStyle: textTheme?.button),
      subtitle: GoogleFonts.coiny(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.coiny(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Combo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Combo
  static TextStyle combo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/combo/v8/BXRlvF3Jh_fIhg0iBu9y8Hf0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Combo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Combo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Combo
  static TextTheme comboTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.combo(textStyle: textTheme?.display4),
      display3: GoogleFonts.combo(textStyle: textTheme?.display3),
      display2: GoogleFonts.combo(textStyle: textTheme?.display2),
      display1: GoogleFonts.combo(textStyle: textTheme?.display1),
      headline: GoogleFonts.combo(textStyle: textTheme?.headline),
      title: GoogleFonts.combo(textStyle: textTheme?.title),
      subhead: GoogleFonts.combo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.combo(textStyle: textTheme?.body2),
      body1: GoogleFonts.combo(textStyle: textTheme?.body1),
      caption: GoogleFonts.combo(textStyle: textTheme?.caption),
      button: GoogleFonts.combo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.combo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.combo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Comfortaa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Comfortaa
  static TextStyle comfortaa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/comfortaa/v27/1Pt_g8LJRfWJmhDAuUsSQamb1W0lwk4S4TbMPrQVIT9c2c8.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/comfortaa/v27/1Pt_g8LJRfWJmhDAuUsSQamb1W0lwk4S4WjMPrQVIT9c2c8.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/comfortaa/v27/1Pt_g8LJRfWJmhDAuUsSQamb1W0lwk4S4VrMPrQVIT9c2c8.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/comfortaa/v27/1Pt_g8LJRfWJmhDAuUsSQamb1W0lwk4S4bbLPrQVIT9c2c8.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/comfortaa/v27/1Pt_g8LJRfWJmhDAuUsSQamb1W0lwk4S4Y_LPrQVIT9c2c8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Comfortaa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Comfortaa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Comfortaa
  static TextTheme comfortaaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.comfortaa(textStyle: textTheme?.display4),
      display3: GoogleFonts.comfortaa(textStyle: textTheme?.display3),
      display2: GoogleFonts.comfortaa(textStyle: textTheme?.display2),
      display1: GoogleFonts.comfortaa(textStyle: textTheme?.display1),
      headline: GoogleFonts.comfortaa(textStyle: textTheme?.headline),
      title: GoogleFonts.comfortaa(textStyle: textTheme?.title),
      subhead: GoogleFonts.comfortaa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.comfortaa(textStyle: textTheme?.body2),
      body1: GoogleFonts.comfortaa(textStyle: textTheme?.body1),
      caption: GoogleFonts.comfortaa(textStyle: textTheme?.caption),
      button: GoogleFonts.comfortaa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.comfortaa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.comfortaa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coming Soon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coming+Soon
  static TextStyle comingSoon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/comingsoon/v11/qWcuB6mzpYL7AJ2VfdQR1u-SUjjzsykh.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ComingSoon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coming Soon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coming+Soon
  static TextTheme comingSoonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.comingSoon(textStyle: textTheme?.display4),
      display3: GoogleFonts.comingSoon(textStyle: textTheme?.display3),
      display2: GoogleFonts.comingSoon(textStyle: textTheme?.display2),
      display1: GoogleFonts.comingSoon(textStyle: textTheme?.display1),
      headline: GoogleFonts.comingSoon(textStyle: textTheme?.headline),
      title: GoogleFonts.comingSoon(textStyle: textTheme?.title),
      subhead: GoogleFonts.comingSoon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.comingSoon(textStyle: textTheme?.body2),
      body1: GoogleFonts.comingSoon(textStyle: textTheme?.body1),
      caption: GoogleFonts.comingSoon(textStyle: textTheme?.caption),
      button: GoogleFonts.comingSoon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.comingSoon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.comingSoon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Concert One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Concert+One
  static TextStyle concertOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/concertone/v10/VEM1Ro9xs5PjtzCu-srDqRTlhv-CuVAQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ConcertOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Concert One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Concert+One
  static TextTheme concertOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.concertOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.concertOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.concertOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.concertOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.concertOne(textStyle: textTheme?.headline),
      title: GoogleFonts.concertOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.concertOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.concertOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.concertOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.concertOne(textStyle: textTheme?.caption),
      button: GoogleFonts.concertOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.concertOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.concertOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Condiment font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Condiment
  static TextStyle condiment({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/condiment/v7/pONk1hggFNmwvXALyH6Sq4n4o1vyCQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Condiment',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Condiment font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Condiment
  static TextTheme condimentTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.condiment(textStyle: textTheme?.display4),
      display3: GoogleFonts.condiment(textStyle: textTheme?.display3),
      display2: GoogleFonts.condiment(textStyle: textTheme?.display2),
      display1: GoogleFonts.condiment(textStyle: textTheme?.display1),
      headline: GoogleFonts.condiment(textStyle: textTheme?.headline),
      title: GoogleFonts.condiment(textStyle: textTheme?.title),
      subhead: GoogleFonts.condiment(textStyle: textTheme?.subhead),
      body2: GoogleFonts.condiment(textStyle: textTheme?.body2),
      body1: GoogleFonts.condiment(textStyle: textTheme?.body1),
      caption: GoogleFonts.condiment(textStyle: textTheme?.caption),
      button: GoogleFonts.condiment(textStyle: textTheme?.button),
      subtitle: GoogleFonts.condiment(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.condiment(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Content font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Content
  static TextStyle content({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/content/v12/zrfl0HLayePhU_AwUaDyIiL0RCg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/content/v12/zrfg0HLayePhU_AwaRzdBirfWCHvkAI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Content',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Content font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Content
  static TextTheme contentTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.content(textStyle: textTheme?.display4),
      display3: GoogleFonts.content(textStyle: textTheme?.display3),
      display2: GoogleFonts.content(textStyle: textTheme?.display2),
      display1: GoogleFonts.content(textStyle: textTheme?.display1),
      headline: GoogleFonts.content(textStyle: textTheme?.headline),
      title: GoogleFonts.content(textStyle: textTheme?.title),
      subhead: GoogleFonts.content(textStyle: textTheme?.subhead),
      body2: GoogleFonts.content(textStyle: textTheme?.body2),
      body1: GoogleFonts.content(textStyle: textTheme?.body1),
      caption: GoogleFonts.content(textStyle: textTheme?.caption),
      button: GoogleFonts.content(textStyle: textTheme?.button),
      subtitle: GoogleFonts.content(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.content(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Contrail One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Contrail+One
  static TextStyle contrailOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/contrailone/v9/eLGbP-j_JA-kG0_Zo51noafdZUvt_c092w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ContrailOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Contrail One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Contrail+One
  static TextTheme contrailOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.contrailOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.contrailOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.contrailOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.contrailOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.contrailOne(textStyle: textTheme?.headline),
      title: GoogleFonts.contrailOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.contrailOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.contrailOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.contrailOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.contrailOne(textStyle: textTheme?.caption),
      button: GoogleFonts.contrailOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.contrailOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.contrailOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Convergence font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Convergence
  static TextStyle convergence({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/convergence/v8/rax5HiePvdgXPmmMHcIPYRhasU7Q8Cad.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Convergence',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Convergence font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Convergence
  static TextTheme convergenceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.convergence(textStyle: textTheme?.display4),
      display3: GoogleFonts.convergence(textStyle: textTheme?.display3),
      display2: GoogleFonts.convergence(textStyle: textTheme?.display2),
      display1: GoogleFonts.convergence(textStyle: textTheme?.display1),
      headline: GoogleFonts.convergence(textStyle: textTheme?.headline),
      title: GoogleFonts.convergence(textStyle: textTheme?.title),
      subhead: GoogleFonts.convergence(textStyle: textTheme?.subhead),
      body2: GoogleFonts.convergence(textStyle: textTheme?.body2),
      body1: GoogleFonts.convergence(textStyle: textTheme?.body1),
      caption: GoogleFonts.convergence(textStyle: textTheme?.caption),
      button: GoogleFonts.convergence(textStyle: textTheme?.button),
      subtitle: GoogleFonts.convergence(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.convergence(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cookie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cookie
  static TextStyle cookie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cookie/v11/syky-y18lb0tSbfNlQCT9tPdpw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cookie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cookie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cookie
  static TextTheme cookieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cookie(textStyle: textTheme?.display4),
      display3: GoogleFonts.cookie(textStyle: textTheme?.display3),
      display2: GoogleFonts.cookie(textStyle: textTheme?.display2),
      display1: GoogleFonts.cookie(textStyle: textTheme?.display1),
      headline: GoogleFonts.cookie(textStyle: textTheme?.headline),
      title: GoogleFonts.cookie(textStyle: textTheme?.title),
      subhead: GoogleFonts.cookie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cookie(textStyle: textTheme?.body2),
      body1: GoogleFonts.cookie(textStyle: textTheme?.body1),
      caption: GoogleFonts.cookie(textStyle: textTheme?.caption),
      button: GoogleFonts.cookie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cookie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cookie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Copse font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Copse
  static TextStyle copse({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/copse/v9/11hPGpDKz1rGb0djHkihUb-A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Copse',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Copse font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Copse
  static TextTheme copseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.copse(textStyle: textTheme?.display4),
      display3: GoogleFonts.copse(textStyle: textTheme?.display3),
      display2: GoogleFonts.copse(textStyle: textTheme?.display2),
      display1: GoogleFonts.copse(textStyle: textTheme?.display1),
      headline: GoogleFonts.copse(textStyle: textTheme?.headline),
      title: GoogleFonts.copse(textStyle: textTheme?.title),
      subhead: GoogleFonts.copse(textStyle: textTheme?.subhead),
      body2: GoogleFonts.copse(textStyle: textTheme?.body2),
      body1: GoogleFonts.copse(textStyle: textTheme?.body1),
      caption: GoogleFonts.copse(textStyle: textTheme?.caption),
      button: GoogleFonts.copse(textStyle: textTheme?.button),
      subtitle: GoogleFonts.copse(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.copse(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Corben font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Corben
  static TextStyle corben({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/corben/v13/LYjDdGzzklQtCMp9oAlEpVs3VQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/corben/v13/LYjAdGzzklQtCMpFHCZgrXArXN7HWQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Corben',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Corben font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Corben
  static TextTheme corbenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.corben(textStyle: textTheme?.display4),
      display3: GoogleFonts.corben(textStyle: textTheme?.display3),
      display2: GoogleFonts.corben(textStyle: textTheme?.display2),
      display1: GoogleFonts.corben(textStyle: textTheme?.display1),
      headline: GoogleFonts.corben(textStyle: textTheme?.headline),
      title: GoogleFonts.corben(textStyle: textTheme?.title),
      subhead: GoogleFonts.corben(textStyle: textTheme?.subhead),
      body2: GoogleFonts.corben(textStyle: textTheme?.body2),
      body1: GoogleFonts.corben(textStyle: textTheme?.body1),
      caption: GoogleFonts.corben(textStyle: textTheme?.caption),
      button: GoogleFonts.corben(textStyle: textTheme?.button),
      subtitle: GoogleFonts.corben(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.corben(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant
  static TextStyle cormorant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4cgBXOCl9bbnla_nHIiRLmYgoyyYzFzFw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4c-BXOCl9bbnla_nHIq6qMUgIa2QTRjF8ER.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4clBXOCl9bbnla_nHIa6JG8iqeuag.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4cjBXOCl9bbnla_nHIq6pu4qKK-aihq.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4cgBXOCl9bbnla_nHIiHLiYgoyyYzFzFw.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4c-BXOCl9bbnla_nHIq6qNMgYa2QTRjF8ER.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4cgBXOCl9bbnla_nHIiML-YgoyyYzFzFw.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4c-BXOCl9bbnla_nHIq6qNghoa2QTRjF8ER.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4cgBXOCl9bbnla_nHIiVL6YgoyyYzFzFw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/cormorant/v8/H4c-BXOCl9bbnla_nHIq6qMEh4a2QTRjF8ER.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cormorant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant
  static TextTheme cormorantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorant(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorant(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorant(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorant(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorant(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorant(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorant(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorant(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorant(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant Garamond font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Garamond
  static TextStyle cormorantGaramond({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3YmX5slCNuHLi8bLeY9MK7whWMhyjQAllvuQWJ5heb_w.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3WmX5slCNuHLi8bLeY9MK7whWMhyjYrEPjuw-NxBKL_y94.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3bmX5slCNuHLi8bLeY9MK7whWMhyjornFLsS6V7w.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3ZmX5slCNuHLi8bLeY9MK7whWMhyjYrHtPkyuF7w6C.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3YmX5slCNuHLi8bLeY9MK7whWMhyjQWlhvuQWJ5heb_w.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3WmX5slCNuHLi8bLeY9MK7whWMhyjYrEO7ug-NxBKL_y94.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3YmX5slCNuHLi8bLeY9MK7whWMhyjQdl9vuQWJ5heb_w.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3WmX5slCNuHLi8bLeY9MK7whWMhyjYrEOXvQ-NxBKL_y94.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3YmX5slCNuHLi8bLeY9MK7whWMhyjQEl5vuQWJ5heb_w.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/cormorantgaramond/v7/co3WmX5slCNuHLi8bLeY9MK7whWMhyjYrEPzvA-NxBKL_y94.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantGaramond',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant Garamond font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Garamond
  static TextTheme cormorantGaramondTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantGaramond(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantGaramond(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantGaramond(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantGaramond(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantGaramond(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantGaramond(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantGaramond(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantGaramond(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantGaramond(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantGaramond(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantGaramond(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantGaramond(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantGaramond(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant Infant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Infant
  static TextStyle cormorantInfant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyIU44g9vKiM1sORYSiWeAsLN9951w3_DMrQqcdJrk.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyKU44g9vKiM1sORYSiWeAsLN997_ItcDEhRoUYNrn_Ig.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyPU44g9vKiM1sORYSiWeAsLN993_Af2DsAXq4.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyJU44g9vKiM1sORYSiWeAsLN997_IV3BkFTq4EPw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyIU44g9vKiM1sORYSiWeAsLN995wQ2_DMrQqcdJrk.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyKU44g9vKiM1sORYSiWeAsLN997_ItKDAhRoUYNrn_Ig.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyIU44g9vKiM1sORYSiWeAsLN995ygx_DMrQqcdJrk.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyKU44g9vKiM1sORYSiWeAsLN997_ItBDchRoUYNrn_Ig.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyIU44g9vKiM1sORYSiWeAsLN9950ww_DMrQqcdJrk.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/cormorantinfant/v8/HhyKU44g9vKiM1sORYSiWeAsLN997_ItYDYhRoUYNrn_Ig.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantInfant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant Infant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Infant
  static TextTheme cormorantInfantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantInfant(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantInfant(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantInfant(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantInfant(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantInfant(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantInfant(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantInfant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantInfant(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantInfant(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantInfant(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantInfant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantInfant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantInfant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+SC
  static TextStyle cormorantSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/cormorantsc/v8/0ybmGD4kxqXBmOVLG30OGwsmABIU_R3y8DOWGA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cormorantsc/v8/0yb5GD4kxqXBmOVLG30OGwserDow9Tbu-Q.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/cormorantsc/v8/0ybmGD4kxqXBmOVLG30OGwsmWBMU_R3y8DOWGA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cormorantsc/v8/0ybmGD4kxqXBmOVLG30OGwsmdBQU_R3y8DOWGA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cormorantsc/v8/0ybmGD4kxqXBmOVLG30OGwsmEBUU_R3y8DOWGA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+SC
  static TextTheme cormorantSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantSC(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantSC(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant Unicase font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Unicase
  static TextStyle cormorantUnicase({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/cormorantunicase/v8/HI_ViZUaILtOqhqgDeXoF_n1_fTGX9N_tucv7Gy0DRzS.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cormorantunicase/v8/HI_QiZUaILtOqhqgDeXoF_n1_fTGX-vTnsMnx3C9.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/cormorantunicase/v8/HI_ViZUaILtOqhqgDeXoF_n1_fTGX9Mnt-cv7Gy0DRzS.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cormorantunicase/v8/HI_ViZUaILtOqhqgDeXoF_n1_fTGX9MLsOcv7Gy0DRzS.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cormorantunicase/v8/HI_ViZUaILtOqhqgDeXoF_n1_fTGX9Nvsecv7Gy0DRzS.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantUnicase',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant Unicase font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Unicase
  static TextTheme cormorantUnicaseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantUnicase(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantUnicase(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantUnicase(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantUnicase(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantUnicase(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantUnicase(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantUnicase(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantUnicase(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantUnicase(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantUnicase(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantUnicase(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantUnicase(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantUnicase(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cormorant Upright font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Upright
  static TextStyle cormorantUpright({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/cormorantupright/v6/VuJudM3I2Y35poFONtLdafkUCHw1y1N5phDsU9X6RPzQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cormorantupright/v6/VuJrdM3I2Y35poFONtLdafkUCHw1y2vVjjTkeMnz.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/cormorantupright/v6/VuJudM3I2Y35poFONtLdafkUCHw1y1MhpxDsU9X6RPzQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/cormorantupright/v6/VuJudM3I2Y35poFONtLdafkUCHw1y1MNoBDsU9X6RPzQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cormorantupright/v6/VuJudM3I2Y35poFONtLdafkUCHw1y1NpoRDsU9X6RPzQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CormorantUpright',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cormorant Upright font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cormorant+Upright
  static TextTheme cormorantUprightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cormorantUpright(textStyle: textTheme?.display4),
      display3: GoogleFonts.cormorantUpright(textStyle: textTheme?.display3),
      display2: GoogleFonts.cormorantUpright(textStyle: textTheme?.display2),
      display1: GoogleFonts.cormorantUpright(textStyle: textTheme?.display1),
      headline: GoogleFonts.cormorantUpright(textStyle: textTheme?.headline),
      title: GoogleFonts.cormorantUpright(textStyle: textTheme?.title),
      subhead: GoogleFonts.cormorantUpright(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cormorantUpright(textStyle: textTheme?.body2),
      body1: GoogleFonts.cormorantUpright(textStyle: textTheme?.body1),
      caption: GoogleFonts.cormorantUpright(textStyle: textTheme?.caption),
      button: GoogleFonts.cormorantUpright(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cormorantUpright(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cormorantUpright(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Courgette font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Courgette
  static TextStyle courgette({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/courgette/v7/wEO_EBrAnc9BLjLQAUkFUfAL3EsHiA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Courgette',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Courgette font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Courgette
  static TextTheme courgetteTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.courgette(textStyle: textTheme?.display4),
      display3: GoogleFonts.courgette(textStyle: textTheme?.display3),
      display2: GoogleFonts.courgette(textStyle: textTheme?.display2),
      display1: GoogleFonts.courgette(textStyle: textTheme?.display1),
      headline: GoogleFonts.courgette(textStyle: textTheme?.headline),
      title: GoogleFonts.courgette(textStyle: textTheme?.title),
      subhead: GoogleFonts.courgette(textStyle: textTheme?.subhead),
      body2: GoogleFonts.courgette(textStyle: textTheme?.body2),
      body1: GoogleFonts.courgette(textStyle: textTheme?.body1),
      caption: GoogleFonts.courgette(textStyle: textTheme?.caption),
      button: GoogleFonts.courgette(textStyle: textTheme?.button),
      subtitle: GoogleFonts.courgette(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.courgette(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Courier Prime font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Courier+Prime
  static TextStyle courierPrime({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/courierprime/v1/u-450q2lgwslOqpF_6gQ8kELWwZjW-_-tvg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/courierprime/v1/u-4n0q2lgwslOqpF_6gQ8kELawRpX837pvjxPA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/courierprime/v1/u-4k0q2lgwslOqpF_6gQ8kELY7pMf-fVqvHoJXw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/courierprime/v1/u-4i0q2lgwslOqpF_6gQ8kELawRR4-LfrtPtNXyeAg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CourierPrime',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Courier Prime font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Courier+Prime
  static TextTheme courierPrimeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.courierPrime(textStyle: textTheme?.display4),
      display3: GoogleFonts.courierPrime(textStyle: textTheme?.display3),
      display2: GoogleFonts.courierPrime(textStyle: textTheme?.display2),
      display1: GoogleFonts.courierPrime(textStyle: textTheme?.display1),
      headline: GoogleFonts.courierPrime(textStyle: textTheme?.headline),
      title: GoogleFonts.courierPrime(textStyle: textTheme?.title),
      subhead: GoogleFonts.courierPrime(textStyle: textTheme?.subhead),
      body2: GoogleFonts.courierPrime(textStyle: textTheme?.body2),
      body1: GoogleFonts.courierPrime(textStyle: textTheme?.body1),
      caption: GoogleFonts.courierPrime(textStyle: textTheme?.caption),
      button: GoogleFonts.courierPrime(textStyle: textTheme?.button),
      subtitle: GoogleFonts.courierPrime(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.courierPrime(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cousine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cousine
  static TextStyle cousine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cousine/v14/d6lIkaiiRdih4SpPzSMlzTbtz9k.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cousine/v14/d6lKkaiiRdih4SpP_SEvyRTo39l8hw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cousine/v14/d6lNkaiiRdih4SpP9Z8K6T7G09BlnmQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/cousine/v14/d6lPkaiiRdih4SpP_SEXdTvM1_JgjmRpOA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cousine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cousine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cousine
  static TextTheme cousineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cousine(textStyle: textTheme?.display4),
      display3: GoogleFonts.cousine(textStyle: textTheme?.display3),
      display2: GoogleFonts.cousine(textStyle: textTheme?.display2),
      display1: GoogleFonts.cousine(textStyle: textTheme?.display1),
      headline: GoogleFonts.cousine(textStyle: textTheme?.headline),
      title: GoogleFonts.cousine(textStyle: textTheme?.title),
      subhead: GoogleFonts.cousine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cousine(textStyle: textTheme?.body2),
      body1: GoogleFonts.cousine(textStyle: textTheme?.body1),
      caption: GoogleFonts.cousine(textStyle: textTheme?.caption),
      button: GoogleFonts.cousine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cousine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cousine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Coustard font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coustard
  static TextStyle coustard({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/coustard/v10/3XFpErgg3YsZ5fqUU9UPvWXuROTd.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/coustard/v10/3XFuErgg3YsZ5fqUU-2LkEHmb_jU3eRL.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Coustard',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Coustard font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Coustard
  static TextTheme coustardTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.coustard(textStyle: textTheme?.display4),
      display3: GoogleFonts.coustard(textStyle: textTheme?.display3),
      display2: GoogleFonts.coustard(textStyle: textTheme?.display2),
      display1: GoogleFonts.coustard(textStyle: textTheme?.display1),
      headline: GoogleFonts.coustard(textStyle: textTheme?.headline),
      title: GoogleFonts.coustard(textStyle: textTheme?.title),
      subhead: GoogleFonts.coustard(textStyle: textTheme?.subhead),
      body2: GoogleFonts.coustard(textStyle: textTheme?.body2),
      body1: GoogleFonts.coustard(textStyle: textTheme?.body1),
      caption: GoogleFonts.coustard(textStyle: textTheme?.caption),
      button: GoogleFonts.coustard(textStyle: textTheme?.button),
      subtitle: GoogleFonts.coustard(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.coustard(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Covered By Your Grace font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Covered+By+Your+Grace
  static TextStyle coveredByYourGrace({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/coveredbyyourgrace/v9/QGYwz-AZahWOJJI9kykWW9mD6opopoqXSOS0FgItq6bFIg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CoveredByYourGrace',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Covered By Your Grace font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Covered+By+Your+Grace
  static TextTheme coveredByYourGraceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.display4),
      display3: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.display3),
      display2: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.display2),
      display1: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.display1),
      headline: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.headline),
      title: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.title),
      subhead: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.subhead),
      body2: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.body2),
      body1: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.body1),
      caption: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.caption),
      button: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.button),
      subtitle: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.coveredByYourGrace(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crafty Girls font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crafty+Girls
  static TextStyle craftyGirls({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/craftygirls/v9/va9B4kXI39VaDdlPJo8N_NvuQR37fF3Wlg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CraftyGirls',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crafty Girls font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crafty+Girls
  static TextTheme craftyGirlsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.craftyGirls(textStyle: textTheme?.display4),
      display3: GoogleFonts.craftyGirls(textStyle: textTheme?.display3),
      display2: GoogleFonts.craftyGirls(textStyle: textTheme?.display2),
      display1: GoogleFonts.craftyGirls(textStyle: textTheme?.display1),
      headline: GoogleFonts.craftyGirls(textStyle: textTheme?.headline),
      title: GoogleFonts.craftyGirls(textStyle: textTheme?.title),
      subhead: GoogleFonts.craftyGirls(textStyle: textTheme?.subhead),
      body2: GoogleFonts.craftyGirls(textStyle: textTheme?.body2),
      body1: GoogleFonts.craftyGirls(textStyle: textTheme?.body1),
      caption: GoogleFonts.craftyGirls(textStyle: textTheme?.caption),
      button: GoogleFonts.craftyGirls(textStyle: textTheme?.button),
      subtitle: GoogleFonts.craftyGirls(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.craftyGirls(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Creepster font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Creepster
  static TextStyle creepster({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/creepster/v8/AlZy_zVUqJz4yMrniH4hdXf4XB0Tow.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Creepster',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Creepster font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Creepster
  static TextTheme creepsterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.creepster(textStyle: textTheme?.display4),
      display3: GoogleFonts.creepster(textStyle: textTheme?.display3),
      display2: GoogleFonts.creepster(textStyle: textTheme?.display2),
      display1: GoogleFonts.creepster(textStyle: textTheme?.display1),
      headline: GoogleFonts.creepster(textStyle: textTheme?.headline),
      title: GoogleFonts.creepster(textStyle: textTheme?.title),
      subhead: GoogleFonts.creepster(textStyle: textTheme?.subhead),
      body2: GoogleFonts.creepster(textStyle: textTheme?.body2),
      body1: GoogleFonts.creepster(textStyle: textTheme?.body1),
      caption: GoogleFonts.creepster(textStyle: textTheme?.caption),
      button: GoogleFonts.creepster(textStyle: textTheme?.button),
      subtitle: GoogleFonts.creepster(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.creepster(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crete Round font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crete+Round
  static TextStyle creteRound({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/creteround/v8/55xoey1sJNPjPiv1ZZZrxJ1827zAKnxN.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/creteround/v8/55xqey1sJNPjPiv1ZZZrxK1-0bjiL2xNhKc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CreteRound',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crete Round font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crete+Round
  static TextTheme creteRoundTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.creteRound(textStyle: textTheme?.display4),
      display3: GoogleFonts.creteRound(textStyle: textTheme?.display3),
      display2: GoogleFonts.creteRound(textStyle: textTheme?.display2),
      display1: GoogleFonts.creteRound(textStyle: textTheme?.display1),
      headline: GoogleFonts.creteRound(textStyle: textTheme?.headline),
      title: GoogleFonts.creteRound(textStyle: textTheme?.title),
      subhead: GoogleFonts.creteRound(textStyle: textTheme?.subhead),
      body2: GoogleFonts.creteRound(textStyle: textTheme?.body2),
      body1: GoogleFonts.creteRound(textStyle: textTheme?.body1),
      caption: GoogleFonts.creteRound(textStyle: textTheme?.caption),
      button: GoogleFonts.creteRound(textStyle: textTheme?.button),
      subtitle: GoogleFonts.creteRound(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.creteRound(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crimson Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crimson+Pro
  static TextStyle crimsonPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uUsoa5M_tv7IihmnkabC5XiXCAlXGks1WZTm18OJE_VNWoyQ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uUsoa5M_tv7IihmnkabC5XiXCAlXGks1WZkG18OJE_VNWoyQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uUsoa5M_tv7IihmnkabC5XiXCAlXGks1WZzm18OJE_VNWoyQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uUsoa5M_tv7IihmnkabC5XiXCAlXGks1WZ_G18OJE_VNWoyQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uUsoa5M_tv7IihmnkabC5XiXCAlXGks1WZEGp8OJE_VNWoyQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uUsoa5M_tv7IihmnkabC5XiXCAlXGks1WZKWp8OJE_VNWoyQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uUsoa5M_tv7IihmnkabC5XiXCAlXGks1WZTmp8OJE_VNWoyQ.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uUsoa5M_tv7IihmnkabC5XiXCAlXGks1WZZ2p8OJE_VNWoyQ.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uSsoa5M_tv7IihmnkabAReu49Y_Bo-HVKMBi4Ue5s7dtC4yZNE.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uSsoa5M_tv7IihmnkabAReu49Y_Bo-HVKMBi7Ke5s7dtC4yZNE.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uSsoa5M_tv7IihmnkabAReu49Y_Bo-HVKMBi6Ue5s7dtC4yZNE.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uSsoa5M_tv7IihmnkabAReu49Y_Bo-HVKMBi6me5s7dtC4yZNE.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uSsoa5M_tv7IihmnkabAReu49Y_Bo-HVKMBi5KfJs7dtC4yZNE.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uSsoa5M_tv7IihmnkabAReu49Y_Bo-HVKMBi5zfJs7dtC4yZNE.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uSsoa5M_tv7IihmnkabAReu49Y_Bo-HVKMBi4UfJs7dtC4yZNE.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/crimsonpro/v11/q5uSsoa5M_tv7IihmnkabAReu49Y_Bo-HVKMBi49fJs7dtC4yZNE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CrimsonPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crimson Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crimson+Pro
  static TextTheme crimsonProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.crimsonPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.crimsonPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.crimsonPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.crimsonPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.crimsonPro(textStyle: textTheme?.headline),
      title: GoogleFonts.crimsonPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.crimsonPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.crimsonPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.crimsonPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.crimsonPro(textStyle: textTheme?.caption),
      button: GoogleFonts.crimsonPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.crimsonPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.crimsonPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crimson Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crimson+Text
  static TextStyle crimsonText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/crimsontext/v10/wlp2gwHKFkZgtmSR3NB0oRJvaAJSA_JN3Q.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/crimsontext/v10/wlpogwHKFkZgtmSR3NB0oRJfaghWIfdd3ahG.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/crimsontext/v10/wlppgwHKFkZgtmSR3NB0oRJXsCx2C9lR1LFffg.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/crimsontext/v10/wlprgwHKFkZgtmSR3NB0oRJfajCOD9NV9rRPfrKu.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/crimsontext/v10/wlppgwHKFkZgtmSR3NB0oRJX1C12C9lR1LFffg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/crimsontext/v10/wlprgwHKFkZgtmSR3NB0oRJfajDqDtNV9rRPfrKu.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CrimsonText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crimson Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crimson+Text
  static TextTheme crimsonTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.crimsonText(textStyle: textTheme?.display4),
      display3: GoogleFonts.crimsonText(textStyle: textTheme?.display3),
      display2: GoogleFonts.crimsonText(textStyle: textTheme?.display2),
      display1: GoogleFonts.crimsonText(textStyle: textTheme?.display1),
      headline: GoogleFonts.crimsonText(textStyle: textTheme?.headline),
      title: GoogleFonts.crimsonText(textStyle: textTheme?.title),
      subhead: GoogleFonts.crimsonText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.crimsonText(textStyle: textTheme?.body2),
      body1: GoogleFonts.crimsonText(textStyle: textTheme?.body1),
      caption: GoogleFonts.crimsonText(textStyle: textTheme?.caption),
      button: GoogleFonts.crimsonText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.crimsonText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.crimsonText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Croissant One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Croissant+One
  static TextStyle croissantOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/croissantone/v7/3y9n6bU9bTPg4m8NDy3Kq24UM3pqn5cdJ-4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CroissantOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Croissant One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Croissant+One
  static TextTheme croissantOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.croissantOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.croissantOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.croissantOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.croissantOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.croissantOne(textStyle: textTheme?.headline),
      title: GoogleFonts.croissantOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.croissantOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.croissantOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.croissantOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.croissantOne(textStyle: textTheme?.caption),
      button: GoogleFonts.croissantOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.croissantOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.croissantOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Crushed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crushed
  static TextStyle crushed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/crushed/v10/U9Mc6dym6WXImTlFT1kfuIqyLzA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Crushed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Crushed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Crushed
  static TextTheme crushedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.crushed(textStyle: textTheme?.display4),
      display3: GoogleFonts.crushed(textStyle: textTheme?.display3),
      display2: GoogleFonts.crushed(textStyle: textTheme?.display2),
      display1: GoogleFonts.crushed(textStyle: textTheme?.display1),
      headline: GoogleFonts.crushed(textStyle: textTheme?.headline),
      title: GoogleFonts.crushed(textStyle: textTheme?.title),
      subhead: GoogleFonts.crushed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.crushed(textStyle: textTheme?.body2),
      body1: GoogleFonts.crushed(textStyle: textTheme?.body1),
      caption: GoogleFonts.crushed(textStyle: textTheme?.caption),
      button: GoogleFonts.crushed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.crushed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.crushed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cuprum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cuprum
  static TextStyle cuprum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cuprum/v11/dg4k_pLmvrkcOkB9IeFDh701Sg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/cuprum/v11/dg4m_pLmvrkcOkBNI-tHpbglShon.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/cuprum/v11/dg4n_pLmvrkcOkBFnc5nj5YpQwM-gg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/cuprum/v11/dg4h_pLmvrkcOkBNI9P7ipwtYQYugjW4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cuprum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cuprum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cuprum
  static TextTheme cuprumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cuprum(textStyle: textTheme?.display4),
      display3: GoogleFonts.cuprum(textStyle: textTheme?.display3),
      display2: GoogleFonts.cuprum(textStyle: textTheme?.display2),
      display1: GoogleFonts.cuprum(textStyle: textTheme?.display1),
      headline: GoogleFonts.cuprum(textStyle: textTheme?.headline),
      title: GoogleFonts.cuprum(textStyle: textTheme?.title),
      subhead: GoogleFonts.cuprum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cuprum(textStyle: textTheme?.body2),
      body1: GoogleFonts.cuprum(textStyle: textTheme?.body1),
      caption: GoogleFonts.cuprum(textStyle: textTheme?.caption),
      button: GoogleFonts.cuprum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cuprum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cuprum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cute Font font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cute+Font
  static TextStyle cuteFont({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cutefont/v8/Noaw6Uny2oWPbSHMrY6vmJNVNC9hkw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CuteFont',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cute Font font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cute+Font
  static TextTheme cuteFontTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cuteFont(textStyle: textTheme?.display4),
      display3: GoogleFonts.cuteFont(textStyle: textTheme?.display3),
      display2: GoogleFonts.cuteFont(textStyle: textTheme?.display2),
      display1: GoogleFonts.cuteFont(textStyle: textTheme?.display1),
      headline: GoogleFonts.cuteFont(textStyle: textTheme?.headline),
      title: GoogleFonts.cuteFont(textStyle: textTheme?.title),
      subhead: GoogleFonts.cuteFont(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cuteFont(textStyle: textTheme?.body2),
      body1: GoogleFonts.cuteFont(textStyle: textTheme?.body1),
      caption: GoogleFonts.cuteFont(textStyle: textTheme?.caption),
      button: GoogleFonts.cuteFont(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cuteFont(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cuteFont(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cutive font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cutive
  static TextStyle cutive({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cutive/v11/NaPZcZ_fHOhV3Ip7T_hDoyqlZQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Cutive',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cutive font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cutive
  static TextTheme cutiveTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cutive(textStyle: textTheme?.display4),
      display3: GoogleFonts.cutive(textStyle: textTheme?.display3),
      display2: GoogleFonts.cutive(textStyle: textTheme?.display2),
      display1: GoogleFonts.cutive(textStyle: textTheme?.display1),
      headline: GoogleFonts.cutive(textStyle: textTheme?.headline),
      title: GoogleFonts.cutive(textStyle: textTheme?.title),
      subhead: GoogleFonts.cutive(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cutive(textStyle: textTheme?.body2),
      body1: GoogleFonts.cutive(textStyle: textTheme?.body1),
      caption: GoogleFonts.cutive(textStyle: textTheme?.caption),
      button: GoogleFonts.cutive(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cutive(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cutive(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Cutive Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cutive+Mono
  static TextStyle cutiveMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/cutivemono/v8/m8JWjfRfY7WVjVi2E-K9H5RFRG-K3Mud.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'CutiveMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Cutive Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Cutive+Mono
  static TextTheme cutiveMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.cutiveMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.cutiveMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.cutiveMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.cutiveMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.cutiveMono(textStyle: textTheme?.headline),
      title: GoogleFonts.cutiveMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.cutiveMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.cutiveMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.cutiveMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.cutiveMono(textStyle: textTheme?.caption),
      button: GoogleFonts.cutiveMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.cutiveMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.cutiveMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the DM Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Sans
  static TextStyle dMSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dmsans/v4/rP2Hp2ywxg089UriOZSCHBeHFl0.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/dmsans/v4/rP2Fp2ywxg089UriCZaIGDWCBl0O8Q.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/dmsans/v4/rP2Cp2ywxg089UriAWCrOB-sClQX6Cg.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/dmsans/v4/rP2Ap2ywxg089UriCZaw7BymDnYS-Cjk6Q.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/dmsans/v4/rP2Cp2ywxg089UriASitOB-sClQX6Cg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/dmsans/v4/rP2Ap2ywxg089UriCZawpBqmDnYS-Cjk6Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DMSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the DM Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Sans
  static TextTheme dMSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dMSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.dMSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.dMSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.dMSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.dMSans(textStyle: textTheme?.headline),
      title: GoogleFonts.dMSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.dMSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dMSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.dMSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.dMSans(textStyle: textTheme?.caption),
      button: GoogleFonts.dMSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dMSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dMSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the DM Serif Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Serif+Display
  static TextStyle dMSerifDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dmserifdisplay/v4/-nFnOHM81r4j6k0gjAW3mujVU2B2K_d709jy92k.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/dmserifdisplay/v4/-nFhOHM81r4j6k0gjAW3mujVU2B2G_Vx1_r352np3Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DMSerifDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the DM Serif Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Serif+Display
  static TextTheme dMSerifDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dMSerifDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the DM Serif Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Serif+Text
  static TextStyle dMSerifText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dmseriftext/v4/rnCu-xZa_krGokauCeNq1wWyafOPXHIJErY.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/dmseriftext/v4/rnCw-xZa_krGokauCeNq1wWyWfGFWFAMArZKqQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DMSerifText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the DM Serif Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/DM+Serif+Text
  static TextTheme dMSerifTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dMSerifText(textStyle: textTheme?.display4),
      display3: GoogleFonts.dMSerifText(textStyle: textTheme?.display3),
      display2: GoogleFonts.dMSerifText(textStyle: textTheme?.display2),
      display1: GoogleFonts.dMSerifText(textStyle: textTheme?.display1),
      headline: GoogleFonts.dMSerifText(textStyle: textTheme?.headline),
      title: GoogleFonts.dMSerifText(textStyle: textTheme?.title),
      subhead: GoogleFonts.dMSerifText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dMSerifText(textStyle: textTheme?.body2),
      body1: GoogleFonts.dMSerifText(textStyle: textTheme?.body1),
      caption: GoogleFonts.dMSerifText(textStyle: textTheme?.caption),
      button: GoogleFonts.dMSerifText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dMSerifText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dMSerifText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Damion font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Damion
  static TextStyle damion({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/damion/v9/hv-XlzJ3KEUe_YZUbWY3MTFgVg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Damion',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Damion font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Damion
  static TextTheme damionTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.damion(textStyle: textTheme?.display4),
      display3: GoogleFonts.damion(textStyle: textTheme?.display3),
      display2: GoogleFonts.damion(textStyle: textTheme?.display2),
      display1: GoogleFonts.damion(textStyle: textTheme?.display1),
      headline: GoogleFonts.damion(textStyle: textTheme?.headline),
      title: GoogleFonts.damion(textStyle: textTheme?.title),
      subhead: GoogleFonts.damion(textStyle: textTheme?.subhead),
      body2: GoogleFonts.damion(textStyle: textTheme?.body2),
      body1: GoogleFonts.damion(textStyle: textTheme?.body1),
      caption: GoogleFonts.damion(textStyle: textTheme?.caption),
      button: GoogleFonts.damion(textStyle: textTheme?.button),
      subtitle: GoogleFonts.damion(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.damion(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dancing Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dancing+Script
  static TextStyle dancingScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dancingscript/v13/If2cXTr6YS-zF4S-kcSWSVi_sxjsohD9F50Ruu7BMSoHTeB9ptDqpw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/dancingscript/v13/If2cXTr6YS-zF4S-kcSWSVi_sxjsohD9F50Ruu7BAyoHTeB9ptDqpw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/dancingscript/v13/If2cXTr6YS-zF4S-kcSWSVi_sxjsohD9F50Ruu7B7y0HTeB9ptDqpw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/dancingscript/v13/If2cXTr6YS-zF4S-kcSWSVi_sxjsohD9F50Ruu7B1i0HTeB9ptDqpw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DancingScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dancing Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dancing+Script
  static TextTheme dancingScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dancingScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.dancingScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.dancingScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.dancingScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.dancingScript(textStyle: textTheme?.headline),
      title: GoogleFonts.dancingScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.dancingScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dancingScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.dancingScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.dancingScript(textStyle: textTheme?.caption),
      button: GoogleFonts.dancingScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dancingScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dancingScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dangrek font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dangrek
  static TextStyle dangrek({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dangrek/v11/LYjCdG30nEgoH8E2gCNqqVIuTN4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dangrek',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dangrek font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dangrek
  static TextTheme dangrekTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dangrek(textStyle: textTheme?.display4),
      display3: GoogleFonts.dangrek(textStyle: textTheme?.display3),
      display2: GoogleFonts.dangrek(textStyle: textTheme?.display2),
      display1: GoogleFonts.dangrek(textStyle: textTheme?.display1),
      headline: GoogleFonts.dangrek(textStyle: textTheme?.headline),
      title: GoogleFonts.dangrek(textStyle: textTheme?.title),
      subhead: GoogleFonts.dangrek(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dangrek(textStyle: textTheme?.body2),
      body1: GoogleFonts.dangrek(textStyle: textTheme?.body1),
      caption: GoogleFonts.dangrek(textStyle: textTheme?.caption),
      button: GoogleFonts.dangrek(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dangrek(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dangrek(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Darker Grotesque font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Darker+Grotesque
  static TextStyle darkerGrotesque({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/darkergrotesque/v1/U9MA6cuh-mLQlC4BKCtayOfARkSVoxr2AW8hTOsXsX0.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/darkergrotesque/v1/U9MH6cuh-mLQlC4BKCtayOfARkSVm7beJWcKUOI.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/darkergrotesque/v1/U9MA6cuh-mLQlC4BKCtayOfARkSVo0L3AW8hTOsXsX0.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/darkergrotesque/v1/U9MA6cuh-mLQlC4BKCtayOfARkSVo27wAW8hTOsXsX0.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/darkergrotesque/v1/U9MA6cuh-mLQlC4BKCtayOfARkSVowrxAW8hTOsXsX0.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/darkergrotesque/v1/U9MA6cuh-mLQlC4BKCtayOfARkSVoxbyAW8hTOsXsX0.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/darkergrotesque/v1/U9MA6cuh-mLQlC4BKCtayOfARkSVozLzAW8hTOsXsX0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DarkerGrotesque',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Darker Grotesque font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Darker+Grotesque
  static TextTheme darkerGrotesqueTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.darkerGrotesque(textStyle: textTheme?.display4),
      display3: GoogleFonts.darkerGrotesque(textStyle: textTheme?.display3),
      display2: GoogleFonts.darkerGrotesque(textStyle: textTheme?.display2),
      display1: GoogleFonts.darkerGrotesque(textStyle: textTheme?.display1),
      headline: GoogleFonts.darkerGrotesque(textStyle: textTheme?.headline),
      title: GoogleFonts.darkerGrotesque(textStyle: textTheme?.title),
      subhead: GoogleFonts.darkerGrotesque(textStyle: textTheme?.subhead),
      body2: GoogleFonts.darkerGrotesque(textStyle: textTheme?.body2),
      body1: GoogleFonts.darkerGrotesque(textStyle: textTheme?.body1),
      caption: GoogleFonts.darkerGrotesque(textStyle: textTheme?.caption),
      button: GoogleFonts.darkerGrotesque(textStyle: textTheme?.button),
      subtitle: GoogleFonts.darkerGrotesque(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.darkerGrotesque(textStyle: textTheme?.overline),
    );
  }

  /// Applies the David Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/David+Libre
  static TextStyle davidLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/davidlibre/v4/snfus0W_99N64iuYSvp4W_l86p6TYS-Y.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/davidlibre/v4/snfzs0W_99N64iuYSvp4W8GIw7qbSjORSo9W.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/davidlibre/v4/snfzs0W_99N64iuYSvp4W8HAxbqbSjORSo9W.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DavidLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the David Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/David+Libre
  static TextTheme davidLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.davidLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.davidLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.davidLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.davidLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.davidLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.davidLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.davidLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.davidLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.davidLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.davidLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.davidLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.davidLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.davidLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dawning of a New Day font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dawning+of+a+New+Day
  static TextStyle dawningofaNewDay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dawningofanewday/v10/t5t_IQMbOp2SEwuncwLRjMfIg1yYit_nAz8bhWJGNoBE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DawningofaNewDay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dawning of a New Day font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dawning+of+a+New+Day
  static TextTheme dawningofaNewDayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.display4),
      display3: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.display3),
      display2: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.display2),
      display1: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.display1),
      headline: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.headline),
      title: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.title),
      subhead: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.body2),
      body1: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.body1),
      caption: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.caption),
      button: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dawningofaNewDay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Days One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Days+One
  static TextStyle daysOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/daysone/v9/mem9YaCnxnKRiYZOCLYVeLkWVNBt.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DaysOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Days One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Days+One
  static TextTheme daysOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.daysOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.daysOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.daysOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.daysOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.daysOne(textStyle: textTheme?.headline),
      title: GoogleFonts.daysOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.daysOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.daysOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.daysOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.daysOne(textStyle: textTheme?.caption),
      button: GoogleFonts.daysOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.daysOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.daysOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dekko font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dekko
  static TextStyle dekko({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dekko/v6/46khlb_wWjfSrttFR0vsfl1B.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dekko',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dekko font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dekko
  static TextTheme dekkoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dekko(textStyle: textTheme?.display4),
      display3: GoogleFonts.dekko(textStyle: textTheme?.display3),
      display2: GoogleFonts.dekko(textStyle: textTheme?.display2),
      display1: GoogleFonts.dekko(textStyle: textTheme?.display1),
      headline: GoogleFonts.dekko(textStyle: textTheme?.headline),
      title: GoogleFonts.dekko(textStyle: textTheme?.title),
      subhead: GoogleFonts.dekko(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dekko(textStyle: textTheme?.body2),
      body1: GoogleFonts.dekko(textStyle: textTheme?.body1),
      caption: GoogleFonts.dekko(textStyle: textTheme?.caption),
      button: GoogleFonts.dekko(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dekko(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dekko(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Delius font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius
  static TextStyle delius({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/delius/v9/PN_xRfK0pW_9e1rtYcI-jT3L_w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Delius',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Delius font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius
  static TextTheme deliusTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.delius(textStyle: textTheme?.display4),
      display3: GoogleFonts.delius(textStyle: textTheme?.display3),
      display2: GoogleFonts.delius(textStyle: textTheme?.display2),
      display1: GoogleFonts.delius(textStyle: textTheme?.display1),
      headline: GoogleFonts.delius(textStyle: textTheme?.headline),
      title: GoogleFonts.delius(textStyle: textTheme?.title),
      subhead: GoogleFonts.delius(textStyle: textTheme?.subhead),
      body2: GoogleFonts.delius(textStyle: textTheme?.body2),
      body1: GoogleFonts.delius(textStyle: textTheme?.body1),
      caption: GoogleFonts.delius(textStyle: textTheme?.caption),
      button: GoogleFonts.delius(textStyle: textTheme?.button),
      subtitle: GoogleFonts.delius(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.delius(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Delius Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius+Swash+Caps
  static TextStyle deliusSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/deliusswashcaps/v11/oY1E8fPLr7v4JWCExZpWebxVKORpXXedKmeBvEYs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DeliusSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Delius Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius+Swash+Caps
  static TextTheme deliusSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.deliusSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Delius Unicase font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius+Unicase
  static TextStyle deliusUnicase({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/deliusunicase/v13/845BNMEwEIOVT8BmgfSzIr_6mmLHd-73LXWs.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/deliusunicase/v13/845CNMEwEIOVT8BmgfSzIr_6mlp7WMr_BmmlS5aw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DeliusUnicase',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Delius Unicase font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Delius+Unicase
  static TextTheme deliusUnicaseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.deliusUnicase(textStyle: textTheme?.display4),
      display3: GoogleFonts.deliusUnicase(textStyle: textTheme?.display3),
      display2: GoogleFonts.deliusUnicase(textStyle: textTheme?.display2),
      display1: GoogleFonts.deliusUnicase(textStyle: textTheme?.display1),
      headline: GoogleFonts.deliusUnicase(textStyle: textTheme?.headline),
      title: GoogleFonts.deliusUnicase(textStyle: textTheme?.title),
      subhead: GoogleFonts.deliusUnicase(textStyle: textTheme?.subhead),
      body2: GoogleFonts.deliusUnicase(textStyle: textTheme?.body2),
      body1: GoogleFonts.deliusUnicase(textStyle: textTheme?.body1),
      caption: GoogleFonts.deliusUnicase(textStyle: textTheme?.caption),
      button: GoogleFonts.deliusUnicase(textStyle: textTheme?.button),
      subtitle: GoogleFonts.deliusUnicase(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.deliusUnicase(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Della Respira font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Della+Respira
  static TextStyle dellaRespira({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dellarespira/v7/RLp5K5v44KaueWI6iEJQBiGPRfkSu6EuTHo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DellaRespira',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Della Respira font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Della+Respira
  static TextTheme dellaRespiraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dellaRespira(textStyle: textTheme?.display4),
      display3: GoogleFonts.dellaRespira(textStyle: textTheme?.display3),
      display2: GoogleFonts.dellaRespira(textStyle: textTheme?.display2),
      display1: GoogleFonts.dellaRespira(textStyle: textTheme?.display1),
      headline: GoogleFonts.dellaRespira(textStyle: textTheme?.headline),
      title: GoogleFonts.dellaRespira(textStyle: textTheme?.title),
      subhead: GoogleFonts.dellaRespira(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dellaRespira(textStyle: textTheme?.body2),
      body1: GoogleFonts.dellaRespira(textStyle: textTheme?.body1),
      caption: GoogleFonts.dellaRespira(textStyle: textTheme?.caption),
      button: GoogleFonts.dellaRespira(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dellaRespira(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dellaRespira(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Denk One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Denk+One
  static TextStyle denkOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/denkone/v7/dg4m_pzhrqcFb2IzROtHpbglShon.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DenkOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Denk One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Denk+One
  static TextTheme denkOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.denkOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.denkOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.denkOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.denkOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.denkOne(textStyle: textTheme?.headline),
      title: GoogleFonts.denkOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.denkOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.denkOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.denkOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.denkOne(textStyle: textTheme?.caption),
      button: GoogleFonts.denkOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.denkOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.denkOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Devonshire font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Devonshire
  static TextStyle devonshire({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/devonshire/v8/46kqlbDwWirWr4gtBD2BX0Vq01lYAZM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Devonshire',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Devonshire font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Devonshire
  static TextTheme devonshireTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.devonshire(textStyle: textTheme?.display4),
      display3: GoogleFonts.devonshire(textStyle: textTheme?.display3),
      display2: GoogleFonts.devonshire(textStyle: textTheme?.display2),
      display1: GoogleFonts.devonshire(textStyle: textTheme?.display1),
      headline: GoogleFonts.devonshire(textStyle: textTheme?.headline),
      title: GoogleFonts.devonshire(textStyle: textTheme?.title),
      subhead: GoogleFonts.devonshire(textStyle: textTheme?.subhead),
      body2: GoogleFonts.devonshire(textStyle: textTheme?.body2),
      body1: GoogleFonts.devonshire(textStyle: textTheme?.body1),
      caption: GoogleFonts.devonshire(textStyle: textTheme?.caption),
      button: GoogleFonts.devonshire(textStyle: textTheme?.button),
      subtitle: GoogleFonts.devonshire(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.devonshire(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dhurjati font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dhurjati
  static TextStyle dhurjati({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dhurjati/v7/_6_8ED3gSeatXfFiFX3ySKQtuTA2.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dhurjati',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dhurjati font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dhurjati
  static TextTheme dhurjatiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dhurjati(textStyle: textTheme?.display4),
      display3: GoogleFonts.dhurjati(textStyle: textTheme?.display3),
      display2: GoogleFonts.dhurjati(textStyle: textTheme?.display2),
      display1: GoogleFonts.dhurjati(textStyle: textTheme?.display1),
      headline: GoogleFonts.dhurjati(textStyle: textTheme?.headline),
      title: GoogleFonts.dhurjati(textStyle: textTheme?.title),
      subhead: GoogleFonts.dhurjati(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dhurjati(textStyle: textTheme?.body2),
      body1: GoogleFonts.dhurjati(textStyle: textTheme?.body1),
      caption: GoogleFonts.dhurjati(textStyle: textTheme?.caption),
      button: GoogleFonts.dhurjati(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dhurjati(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dhurjati(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Didact Gothic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Didact+Gothic
  static TextStyle didactGothic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/didactgothic/v13/ahcfv8qz1zt6hCC5G4F_P4ASpUySp0LlcyQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DidactGothic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Didact Gothic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Didact+Gothic
  static TextTheme didactGothicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.didactGothic(textStyle: textTheme?.display4),
      display3: GoogleFonts.didactGothic(textStyle: textTheme?.display3),
      display2: GoogleFonts.didactGothic(textStyle: textTheme?.display2),
      display1: GoogleFonts.didactGothic(textStyle: textTheme?.display1),
      headline: GoogleFonts.didactGothic(textStyle: textTheme?.headline),
      title: GoogleFonts.didactGothic(textStyle: textTheme?.title),
      subhead: GoogleFonts.didactGothic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.didactGothic(textStyle: textTheme?.body2),
      body1: GoogleFonts.didactGothic(textStyle: textTheme?.body1),
      caption: GoogleFonts.didactGothic(textStyle: textTheme?.caption),
      button: GoogleFonts.didactGothic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.didactGothic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.didactGothic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Diplomata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Diplomata
  static TextStyle diplomata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/diplomata/v11/Cn-0JtiMXwhNwp-wKxyfYGxYrdM9Sg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Diplomata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Diplomata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Diplomata
  static TextTheme diplomataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.diplomata(textStyle: textTheme?.display4),
      display3: GoogleFonts.diplomata(textStyle: textTheme?.display3),
      display2: GoogleFonts.diplomata(textStyle: textTheme?.display2),
      display1: GoogleFonts.diplomata(textStyle: textTheme?.display1),
      headline: GoogleFonts.diplomata(textStyle: textTheme?.headline),
      title: GoogleFonts.diplomata(textStyle: textTheme?.title),
      subhead: GoogleFonts.diplomata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.diplomata(textStyle: textTheme?.body2),
      body1: GoogleFonts.diplomata(textStyle: textTheme?.body1),
      caption: GoogleFonts.diplomata(textStyle: textTheme?.caption),
      button: GoogleFonts.diplomata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.diplomata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.diplomata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Diplomata SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Diplomata+SC
  static TextStyle diplomataSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/diplomatasc/v8/buExpoi3ecvs3kidKgBJo2kf-P5Oaiw4cw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DiplomataSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Diplomata SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Diplomata+SC
  static TextTheme diplomataSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.diplomataSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.diplomataSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.diplomataSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.diplomataSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.diplomataSC(textStyle: textTheme?.headline),
      title: GoogleFonts.diplomataSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.diplomataSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.diplomataSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.diplomataSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.diplomataSC(textStyle: textTheme?.caption),
      button: GoogleFonts.diplomataSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.diplomataSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.diplomataSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Do Hyeon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Do+Hyeon
  static TextStyle doHyeon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dohyeon/v11/TwMN-I8CRRU2zM86HFE3ZwaH__-C.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DoHyeon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Do Hyeon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Do+Hyeon
  static TextTheme doHyeonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.doHyeon(textStyle: textTheme?.display4),
      display3: GoogleFonts.doHyeon(textStyle: textTheme?.display3),
      display2: GoogleFonts.doHyeon(textStyle: textTheme?.display2),
      display1: GoogleFonts.doHyeon(textStyle: textTheme?.display1),
      headline: GoogleFonts.doHyeon(textStyle: textTheme?.headline),
      title: GoogleFonts.doHyeon(textStyle: textTheme?.title),
      subhead: GoogleFonts.doHyeon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.doHyeon(textStyle: textTheme?.body2),
      body1: GoogleFonts.doHyeon(textStyle: textTheme?.body1),
      caption: GoogleFonts.doHyeon(textStyle: textTheme?.caption),
      button: GoogleFonts.doHyeon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.doHyeon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.doHyeon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dokdo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dokdo
  static TextStyle dokdo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dokdo/v8/esDf315XNuCBLxLo4NaMlKcH.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dokdo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dokdo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dokdo
  static TextTheme dokdoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dokdo(textStyle: textTheme?.display4),
      display3: GoogleFonts.dokdo(textStyle: textTheme?.display3),
      display2: GoogleFonts.dokdo(textStyle: textTheme?.display2),
      display1: GoogleFonts.dokdo(textStyle: textTheme?.display1),
      headline: GoogleFonts.dokdo(textStyle: textTheme?.headline),
      title: GoogleFonts.dokdo(textStyle: textTheme?.title),
      subhead: GoogleFonts.dokdo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dokdo(textStyle: textTheme?.body2),
      body1: GoogleFonts.dokdo(textStyle: textTheme?.body1),
      caption: GoogleFonts.dokdo(textStyle: textTheme?.caption),
      button: GoogleFonts.dokdo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dokdo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dokdo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Domine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Domine
  static TextStyle domine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/domine/v7/L0x8DFMnlVwD4h3RvPCmRSlUig.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/domine/v7/L0x_DFMnlVwD4h3pAN-CTQJIg3uuXg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Domine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Domine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Domine
  static TextTheme domineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.domine(textStyle: textTheme?.display4),
      display3: GoogleFonts.domine(textStyle: textTheme?.display3),
      display2: GoogleFonts.domine(textStyle: textTheme?.display2),
      display1: GoogleFonts.domine(textStyle: textTheme?.display1),
      headline: GoogleFonts.domine(textStyle: textTheme?.headline),
      title: GoogleFonts.domine(textStyle: textTheme?.title),
      subhead: GoogleFonts.domine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.domine(textStyle: textTheme?.body2),
      body1: GoogleFonts.domine(textStyle: textTheme?.body1),
      caption: GoogleFonts.domine(textStyle: textTheme?.caption),
      button: GoogleFonts.domine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.domine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.domine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Donegal One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Donegal+One
  static TextStyle donegalOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/donegalone/v7/m8JWjfRYea-ZnFz6fsK9FZRFRG-K3Mud.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DonegalOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Donegal One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Donegal+One
  static TextTheme donegalOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.donegalOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.donegalOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.donegalOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.donegalOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.donegalOne(textStyle: textTheme?.headline),
      title: GoogleFonts.donegalOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.donegalOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.donegalOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.donegalOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.donegalOne(textStyle: textTheme?.caption),
      button: GoogleFonts.donegalOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.donegalOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.donegalOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Doppio One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Doppio+One
  static TextStyle doppioOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/doppioone/v7/Gg8wN5gSaBfyBw2MqCh-lgshKGpe5Fg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DoppioOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Doppio One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Doppio+One
  static TextTheme doppioOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.doppioOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.doppioOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.doppioOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.doppioOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.doppioOne(textStyle: textTheme?.headline),
      title: GoogleFonts.doppioOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.doppioOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.doppioOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.doppioOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.doppioOne(textStyle: textTheme?.caption),
      button: GoogleFonts.doppioOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.doppioOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.doppioOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dorsa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dorsa
  static TextStyle dorsa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dorsa/v10/yYLn0hjd0OGwqo493XCFxAnQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dorsa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dorsa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dorsa
  static TextTheme dorsaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dorsa(textStyle: textTheme?.display4),
      display3: GoogleFonts.dorsa(textStyle: textTheme?.display3),
      display2: GoogleFonts.dorsa(textStyle: textTheme?.display2),
      display1: GoogleFonts.dorsa(textStyle: textTheme?.display1),
      headline: GoogleFonts.dorsa(textStyle: textTheme?.headline),
      title: GoogleFonts.dorsa(textStyle: textTheme?.title),
      subhead: GoogleFonts.dorsa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dorsa(textStyle: textTheme?.body2),
      body1: GoogleFonts.dorsa(textStyle: textTheme?.body1),
      caption: GoogleFonts.dorsa(textStyle: textTheme?.caption),
      button: GoogleFonts.dorsa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dorsa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dorsa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dosis font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dosis
  static TextStyle dosis({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/dosis/v16/HhyJU5sn9vOmLxNkIwRSjTVNWLEJt7MV3BkFTq4EPw.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/dosis/v16/HhyJU5sn9vOmLxNkIwRSjTVNWLEJabMV3BkFTq4EPw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dosis/v16/HhyJU5sn9vOmLxNkIwRSjTVNWLEJN7MV3BkFTq4EPw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/dosis/v16/HhyJU5sn9vOmLxNkIwRSjTVNWLEJBbMV3BkFTq4EPw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/dosis/v16/HhyJU5sn9vOmLxNkIwRSjTVNWLEJ6bQV3BkFTq4EPw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/dosis/v16/HhyJU5sn9vOmLxNkIwRSjTVNWLEJ0LQV3BkFTq4EPw.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/dosis/v16/HhyJU5sn9vOmLxNkIwRSjTVNWLEJt7QV3BkFTq4EPw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dosis',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dosis font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dosis
  static TextTheme dosisTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dosis(textStyle: textTheme?.display4),
      display3: GoogleFonts.dosis(textStyle: textTheme?.display3),
      display2: GoogleFonts.dosis(textStyle: textTheme?.display2),
      display1: GoogleFonts.dosis(textStyle: textTheme?.display1),
      headline: GoogleFonts.dosis(textStyle: textTheme?.headline),
      title: GoogleFonts.dosis(textStyle: textTheme?.title),
      subhead: GoogleFonts.dosis(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dosis(textStyle: textTheme?.body2),
      body1: GoogleFonts.dosis(textStyle: textTheme?.body1),
      caption: GoogleFonts.dosis(textStyle: textTheme?.caption),
      button: GoogleFonts.dosis(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dosis(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dosis(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dr Sugiyama font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dr+Sugiyama
  static TextStyle drSugiyama({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/drsugiyama/v9/HTxoL2k4N3O9n5I1boGI7abRM4-t-g7y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DrSugiyama',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dr Sugiyama font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dr+Sugiyama
  static TextTheme drSugiyamaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.drSugiyama(textStyle: textTheme?.display4),
      display3: GoogleFonts.drSugiyama(textStyle: textTheme?.display3),
      display2: GoogleFonts.drSugiyama(textStyle: textTheme?.display2),
      display1: GoogleFonts.drSugiyama(textStyle: textTheme?.display1),
      headline: GoogleFonts.drSugiyama(textStyle: textTheme?.headline),
      title: GoogleFonts.drSugiyama(textStyle: textTheme?.title),
      subhead: GoogleFonts.drSugiyama(textStyle: textTheme?.subhead),
      body2: GoogleFonts.drSugiyama(textStyle: textTheme?.body2),
      body1: GoogleFonts.drSugiyama(textStyle: textTheme?.body1),
      caption: GoogleFonts.drSugiyama(textStyle: textTheme?.caption),
      button: GoogleFonts.drSugiyama(textStyle: textTheme?.button),
      subtitle: GoogleFonts.drSugiyama(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.drSugiyama(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Duru Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Duru+Sans
  static TextStyle duruSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/durusans/v13/xn7iYH8xwmSyTvEV_HOxT_fYdN-WZw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'DuruSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Duru Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Duru+Sans
  static TextTheme duruSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.duruSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.duruSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.duruSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.duruSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.duruSans(textStyle: textTheme?.headline),
      title: GoogleFonts.duruSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.duruSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.duruSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.duruSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.duruSans(textStyle: textTheme?.caption),
      button: GoogleFonts.duruSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.duruSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.duruSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Dynalight font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dynalight
  static TextStyle dynalight({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/dynalight/v8/1Ptsg8LOU_aOmQvTsF4ISotrDfGGxA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Dynalight',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Dynalight font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Dynalight
  static TextTheme dynalightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.dynalight(textStyle: textTheme?.display4),
      display3: GoogleFonts.dynalight(textStyle: textTheme?.display3),
      display2: GoogleFonts.dynalight(textStyle: textTheme?.display2),
      display1: GoogleFonts.dynalight(textStyle: textTheme?.display1),
      headline: GoogleFonts.dynalight(textStyle: textTheme?.headline),
      title: GoogleFonts.dynalight(textStyle: textTheme?.title),
      subhead: GoogleFonts.dynalight(textStyle: textTheme?.subhead),
      body2: GoogleFonts.dynalight(textStyle: textTheme?.body2),
      body1: GoogleFonts.dynalight(textStyle: textTheme?.body1),
      caption: GoogleFonts.dynalight(textStyle: textTheme?.caption),
      button: GoogleFonts.dynalight(textStyle: textTheme?.button),
      subtitle: GoogleFonts.dynalight(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.dynalight(textStyle: textTheme?.overline),
    );
  }

  /// Applies the EB Garamond font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/EB+Garamond
  static TextStyle eBGaramond({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGDmQSNjdsmc35JDF1K5E55YMjF_7DPuGi-6_RUA4V-e6yHgQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGDmQSNjdsmc35JDF1K5E55YMjF_7DPuGi-2fRUA4V-e6yHgQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGDmQSNjdsmc35JDF1K5E55YMjF_7DPuGi-NfNUA4V-e6yHgQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGDmQSNjdsmc35JDF1K5E55YMjF_7DPuGi-DPNUA4V-e6yHgQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGDmQSNjdsmc35JDF1K5E55YMjF_7DPuGi-a_NUA4V-e6yHgQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGFmQSNjdsmc35JDF1K5GRwUjcdlttVFm-rI7e8QI96WamXgXFI.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGFmQSNjdsmc35JDF1K5GRwUjcdlttVFm-rI7eOQI96WamXgXFI.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGFmQSNjdsmc35JDF1K5GRwUjcdlttVFm-rI7diR496WamXgXFI.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGFmQSNjdsmc35JDF1K5GRwUjcdlttVFm-rI7dbR496WamXgXFI.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/ebgaramond/v12/SlGFmQSNjdsmc35JDF1K5GRwUjcdlttVFm-rI7c8R496WamXgXFI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EBGaramond',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the EB Garamond font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/EB+Garamond
  static TextTheme eBGaramondTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eBGaramond(textStyle: textTheme?.display4),
      display3: GoogleFonts.eBGaramond(textStyle: textTheme?.display3),
      display2: GoogleFonts.eBGaramond(textStyle: textTheme?.display2),
      display1: GoogleFonts.eBGaramond(textStyle: textTheme?.display1),
      headline: GoogleFonts.eBGaramond(textStyle: textTheme?.headline),
      title: GoogleFonts.eBGaramond(textStyle: textTheme?.title),
      subhead: GoogleFonts.eBGaramond(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eBGaramond(textStyle: textTheme?.body2),
      body1: GoogleFonts.eBGaramond(textStyle: textTheme?.body1),
      caption: GoogleFonts.eBGaramond(textStyle: textTheme?.caption),
      button: GoogleFonts.eBGaramond(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eBGaramond(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eBGaramond(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Eagle Lake font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eagle+Lake
  static TextStyle eagleLake({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/eaglelake/v7/ptRMTiqbbuNJDOiKj9wG5O7yKQNute8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EagleLake',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Eagle Lake font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eagle+Lake
  static TextTheme eagleLakeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eagleLake(textStyle: textTheme?.display4),
      display3: GoogleFonts.eagleLake(textStyle: textTheme?.display3),
      display2: GoogleFonts.eagleLake(textStyle: textTheme?.display2),
      display1: GoogleFonts.eagleLake(textStyle: textTheme?.display1),
      headline: GoogleFonts.eagleLake(textStyle: textTheme?.headline),
      title: GoogleFonts.eagleLake(textStyle: textTheme?.title),
      subhead: GoogleFonts.eagleLake(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eagleLake(textStyle: textTheme?.body2),
      body1: GoogleFonts.eagleLake(textStyle: textTheme?.body1),
      caption: GoogleFonts.eagleLake(textStyle: textTheme?.caption),
      button: GoogleFonts.eagleLake(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eagleLake(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eagleLake(textStyle: textTheme?.overline),
    );
  }

  /// Applies the East Sea Dokdo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/East+Sea+Dokdo
  static TextStyle eastSeaDokdo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/eastseadokdo/v8/xfuo0Wn2V2_KanASqXSZp22m05_aGavYS18y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EastSeaDokdo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the East Sea Dokdo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/East+Sea+Dokdo
  static TextTheme eastSeaDokdoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.display4),
      display3: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.display3),
      display2: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.display2),
      display1: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.display1),
      headline: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.headline),
      title: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.title),
      subhead: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.body2),
      body1: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.body1),
      caption: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.caption),
      button: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eastSeaDokdo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Eater font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eater
  static TextStyle eater({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/eater/v8/mtG04_FCK7bOvpu2u3FwsXsR.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Eater',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Eater font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eater
  static TextTheme eaterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eater(textStyle: textTheme?.display4),
      display3: GoogleFonts.eater(textStyle: textTheme?.display3),
      display2: GoogleFonts.eater(textStyle: textTheme?.display2),
      display1: GoogleFonts.eater(textStyle: textTheme?.display1),
      headline: GoogleFonts.eater(textStyle: textTheme?.headline),
      title: GoogleFonts.eater(textStyle: textTheme?.title),
      subhead: GoogleFonts.eater(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eater(textStyle: textTheme?.body2),
      body1: GoogleFonts.eater(textStyle: textTheme?.body1),
      caption: GoogleFonts.eater(textStyle: textTheme?.caption),
      button: GoogleFonts.eater(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eater(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eater(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Economica font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Economica
  static TextStyle economica({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/economica/v7/Qw3fZQZaHCLgIWa29ZBrMcgAAl1lfQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/economica/v7/Qw3ZZQZaHCLgIWa29ZBbM8IEIFh1fWUl.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/economica/v7/Qw3aZQZaHCLgIWa29ZBTjeckCnZ5dHw8iw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/economica/v7/Qw3EZQZaHCLgIWa29ZBbM_q4D3x9Vnksi4M7.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Economica',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Economica font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Economica
  static TextTheme economicaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.economica(textStyle: textTheme?.display4),
      display3: GoogleFonts.economica(textStyle: textTheme?.display3),
      display2: GoogleFonts.economica(textStyle: textTheme?.display2),
      display1: GoogleFonts.economica(textStyle: textTheme?.display1),
      headline: GoogleFonts.economica(textStyle: textTheme?.headline),
      title: GoogleFonts.economica(textStyle: textTheme?.title),
      subhead: GoogleFonts.economica(textStyle: textTheme?.subhead),
      body2: GoogleFonts.economica(textStyle: textTheme?.body2),
      body1: GoogleFonts.economica(textStyle: textTheme?.body1),
      caption: GoogleFonts.economica(textStyle: textTheme?.caption),
      button: GoogleFonts.economica(textStyle: textTheme?.button),
      subtitle: GoogleFonts.economica(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.economica(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Eczar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eczar
  static TextStyle eczar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/eczar/v8/BXRlvF3Pi-DLmw0iBu9y8Hf0.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/eczar/v8/BXRovF3Pi-DLmzXWL8t622v9WNjW.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/eczar/v8/BXRovF3Pi-DLmzX6KMt622v9WNjW.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/eczar/v8/BXRovF3Pi-DLmzWeKct622v9WNjW.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/eczar/v8/BXRovF3Pi-DLmzWCKst622v9WNjW.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Eczar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Eczar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Eczar
  static TextTheme eczarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.eczar(textStyle: textTheme?.display4),
      display3: GoogleFonts.eczar(textStyle: textTheme?.display3),
      display2: GoogleFonts.eczar(textStyle: textTheme?.display2),
      display1: GoogleFonts.eczar(textStyle: textTheme?.display1),
      headline: GoogleFonts.eczar(textStyle: textTheme?.headline),
      title: GoogleFonts.eczar(textStyle: textTheme?.title),
      subhead: GoogleFonts.eczar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.eczar(textStyle: textTheme?.body2),
      body1: GoogleFonts.eczar(textStyle: textTheme?.body1),
      caption: GoogleFonts.eczar(textStyle: textTheme?.caption),
      button: GoogleFonts.eczar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.eczar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.eczar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the El Messiri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/El+Messiri
  static TextStyle elMessiri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/elmessiri/v6/K2F0fZBRmr9vQ1pHEey6AoqKAyLzfWo.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/elmessiri/v6/K2F3fZBRmr9vQ1pHEey6On6jJyrYYWOMluQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/elmessiri/v6/K2F3fZBRmr9vQ1pHEey6OlKkJyrYYWOMluQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/elmessiri/v6/K2F3fZBRmr9vQ1pHEey6OjalJyrYYWOMluQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ElMessiri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the El Messiri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/El+Messiri
  static TextTheme elMessiriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.elMessiri(textStyle: textTheme?.display4),
      display3: GoogleFonts.elMessiri(textStyle: textTheme?.display3),
      display2: GoogleFonts.elMessiri(textStyle: textTheme?.display2),
      display1: GoogleFonts.elMessiri(textStyle: textTheme?.display1),
      headline: GoogleFonts.elMessiri(textStyle: textTheme?.headline),
      title: GoogleFonts.elMessiri(textStyle: textTheme?.title),
      subhead: GoogleFonts.elMessiri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.elMessiri(textStyle: textTheme?.body2),
      body1: GoogleFonts.elMessiri(textStyle: textTheme?.body1),
      caption: GoogleFonts.elMessiri(textStyle: textTheme?.caption),
      button: GoogleFonts.elMessiri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.elMessiri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.elMessiri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Electrolize font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Electrolize
  static TextStyle electrolize({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/electrolize/v8/cIf5Ma1dtE0zSiGSiED7AUEGso5tQafB.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Electrolize',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Electrolize font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Electrolize
  static TextTheme electrolizeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.electrolize(textStyle: textTheme?.display4),
      display3: GoogleFonts.electrolize(textStyle: textTheme?.display3),
      display2: GoogleFonts.electrolize(textStyle: textTheme?.display2),
      display1: GoogleFonts.electrolize(textStyle: textTheme?.display1),
      headline: GoogleFonts.electrolize(textStyle: textTheme?.headline),
      title: GoogleFonts.electrolize(textStyle: textTheme?.title),
      subhead: GoogleFonts.electrolize(textStyle: textTheme?.subhead),
      body2: GoogleFonts.electrolize(textStyle: textTheme?.body2),
      body1: GoogleFonts.electrolize(textStyle: textTheme?.body1),
      caption: GoogleFonts.electrolize(textStyle: textTheme?.caption),
      button: GoogleFonts.electrolize(textStyle: textTheme?.button),
      subtitle: GoogleFonts.electrolize(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.electrolize(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Elsie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Elsie
  static TextStyle elsie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/elsie/v9/BCanqZABrez54yYu9slAeLgX.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/elsie/v9/BCaqqZABrez54x6q2-1IU6QeXSBk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Elsie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Elsie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Elsie
  static TextTheme elsieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.elsie(textStyle: textTheme?.display4),
      display3: GoogleFonts.elsie(textStyle: textTheme?.display3),
      display2: GoogleFonts.elsie(textStyle: textTheme?.display2),
      display1: GoogleFonts.elsie(textStyle: textTheme?.display1),
      headline: GoogleFonts.elsie(textStyle: textTheme?.headline),
      title: GoogleFonts.elsie(textStyle: textTheme?.title),
      subhead: GoogleFonts.elsie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.elsie(textStyle: textTheme?.body2),
      body1: GoogleFonts.elsie(textStyle: textTheme?.body1),
      caption: GoogleFonts.elsie(textStyle: textTheme?.caption),
      button: GoogleFonts.elsie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.elsie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.elsie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Elsie Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Elsie+Swash+Caps
  static TextStyle elsieSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/elsieswashcaps/v8/845DNN8xGZyVX5MVo_upKf7KnjK0ferVKGWsUo8.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/elsieswashcaps/v8/845ENN8xGZyVX5MVo_upKf7KnjK0RW74DG2HToawrdU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ElsieSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Elsie Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Elsie+Swash+Caps
  static TextTheme elsieSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.elsieSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Emblema One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Emblema+One
  static TextStyle emblemaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/emblemaone/v8/nKKT-GQ0F5dSY8vzG0rOEIRBHl57G_f_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EmblemaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Emblema One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Emblema+One
  static TextTheme emblemaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.emblemaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.emblemaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.emblemaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.emblemaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.emblemaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.emblemaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.emblemaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.emblemaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.emblemaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.emblemaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.emblemaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.emblemaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.emblemaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Emilys Candy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Emilys+Candy
  static TextStyle emilysCandy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/emilyscandy/v7/2EbgL-1mD1Rnb0OGKudbk0y5r9xrX84JjA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EmilysCandy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Emilys Candy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Emilys+Candy
  static TextTheme emilysCandyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.emilysCandy(textStyle: textTheme?.display4),
      display3: GoogleFonts.emilysCandy(textStyle: textTheme?.display3),
      display2: GoogleFonts.emilysCandy(textStyle: textTheme?.display2),
      display1: GoogleFonts.emilysCandy(textStyle: textTheme?.display1),
      headline: GoogleFonts.emilysCandy(textStyle: textTheme?.headline),
      title: GoogleFonts.emilysCandy(textStyle: textTheme?.title),
      subhead: GoogleFonts.emilysCandy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.emilysCandy(textStyle: textTheme?.body2),
      body1: GoogleFonts.emilysCandy(textStyle: textTheme?.body1),
      caption: GoogleFonts.emilysCandy(textStyle: textTheme?.caption),
      button: GoogleFonts.emilysCandy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.emilysCandy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.emilysCandy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Encode Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans
  static TextStyle encodeSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDI0apOFNxEwR-Bd1O9uYPvIeeLkl7Iw6yg.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDIrapOFNxEwR-Bd1O9uYPtkWMLOub458jGL.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDIrapOFNxEwR-Bd1O9uYPsAW8LOub458jGL.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDI2apOFNxEwR-Bd1O9uYMOsc-bGkqIw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDIrapOFNxEwR-Bd1O9uYPtYWsLOub458jGL.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDIrapOFNxEwR-Bd1O9uYPt0XcLOub458jGL.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDIrapOFNxEwR-Bd1O9uYPsQXMLOub458jGL.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDIrapOFNxEwR-Bd1O9uYPsMX8LOub458jGL.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/encodesans/v4/LDIrapOFNxEwR-Bd1O9uYPsoXsLOub458jGL.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EncodeSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Encode Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans
  static TextTheme encodeSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.encodeSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.encodeSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.encodeSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.encodeSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.encodeSans(textStyle: textTheme?.headline),
      title: GoogleFonts.encodeSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.encodeSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.encodeSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.encodeSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.encodeSans(textStyle: textTheme?.caption),
      button: GoogleFonts.encodeSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.encodeSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.encodeSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Encode Sans Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans+Condensed
  static TextStyle encodeSansCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_76_LD37rqfuwxyIuaZhE6cRXOLtm2gfT-5a-JLQoFI2KR.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_46_LD37rqfuwxyIuaZhE6cRXOLtm2gfT-SY6pByQJKnuIFA.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_46_LD37rqfuwxyIuaZhE6cRXOLtm2gfT-LY2pByQJKnuIFA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_16_LD37rqfuwxyIuaZhE6cRXOLtm2gfTGgaWNDw8VIw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_46_LD37rqfuwxyIuaZhE6cRXOLtm2gfT-dYypByQJKnuIFA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_46_LD37rqfuwxyIuaZhE6cRXOLtm2gfT-WYupByQJKnuIFA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_46_LD37rqfuwxyIuaZhE6cRXOLtm2gfT-PYqpByQJKnuIFA.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_46_LD37rqfuwxyIuaZhE6cRXOLtm2gfT-IYmpByQJKnuIFA.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/encodesanscondensed/v4/j8_46_LD37rqfuwxyIuaZhE6cRXOLtm2gfT-BYipByQJKnuIFA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EncodeSansCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Encode Sans Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans+Condensed
  static TextTheme encodeSansCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.encodeSansCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Encode Sans Expanded font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans+Expanded
  static TextStyle encodeSansExpanded({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4mx1mF4GcnstG_Jh1QH6ac4hNLeNyeYUpJGKQNicoAbJlw.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4mw1mF4GcnstG_Jh1QH6ac4hNLeNyeYUpLqCCNIXIwSP0XD.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4mw1mF4GcnstG_Jh1QH6ac4hNLeNyeYUpKOCyNIXIwSP0XD.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4m_1mF4GcnstG_Jh1QH6ac4hNLeNyeYUqoiIwdAd5Ab.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4mw1mF4GcnstG_Jh1QH6ac4hNLeNyeYUpLWCiNIXIwSP0XD.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4mw1mF4GcnstG_Jh1QH6ac4hNLeNyeYUpL6DSNIXIwSP0XD.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4mw1mF4GcnstG_Jh1QH6ac4hNLeNyeYUpKeDCNIXIwSP0XD.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4mw1mF4GcnstG_Jh1QH6ac4hNLeNyeYUpKCDyNIXIwSP0XD.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/encodesansexpanded/v4/c4mw1mF4GcnstG_Jh1QH6ac4hNLeNyeYUpKmDiNIXIwSP0XD.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EncodeSansExpanded',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Encode Sans Expanded font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans+Expanded
  static TextTheme encodeSansExpandedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.display4),
      display3: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.display3),
      display2: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.display2),
      display1: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.display1),
      headline: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.headline),
      title: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.title),
      subhead: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.subhead),
      body2: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.body2),
      body1: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.body1),
      caption: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.caption),
      button: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.button),
      subtitle: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.encodeSansExpanded(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Encode Sans Semi Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans+Semi+Condensed
  static TextStyle encodeSansSemiCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT6oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG1T19MFtQ9jpVUA.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT7oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG1RZ1eFHbdTgTFmr.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT7oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG1Q91uFHbdTgTFmr.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT4oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG2yR_sVPRsjp.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT7oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG1Rl1-FHbdTgTFmr.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT7oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG1RJ0OFHbdTgTFmr.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT7oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG1Qt0eFHbdTgTFmr.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT7oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG1Qx0uFHbdTgTFmr.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/encodesanssemicondensed/v4/3qT7oiKqnDuUtQUEHMoXcmspmy55SFWrXFRp9FTOG1QV0-FHbdTgTFmr.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EncodeSansSemiCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Encode Sans Semi Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans+Semi+Condensed
  static TextTheme encodeSansSemiCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.title),
      subhead:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.body1),
      caption:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.encodeSansSemiCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Encode Sans Semi Expanded font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans+Semi+Expanded
  static TextStyle encodeSansSemiExpanded({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke8xOhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TM-41KwrlKXeOEA.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke8yOhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TM0IUCyDLJX6XCWU.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke8yOhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TMyYXCyDLJX6XCWU.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke83OhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TC4o_LyjgOXc.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke8yOhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TM34WCyDLJX6XCWU.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke8yOhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TM1IRCyDLJX6XCWU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke8yOhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TMzYQCyDLJX6XCWU.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke8yOhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TMyoTCyDLJX6XCWU.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/encodesanssemiexpanded/v5/ke8yOhAPMEZs-BDuzwftTNJ85JvwMOzE9d9Cca5TMw4SCyDLJX6XCWU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EncodeSansSemiExpanded',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Encode Sans Semi Expanded font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Encode+Sans+Semi+Expanded
  static TextTheme encodeSansSemiExpandedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.headline),
      title: GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.title),
      subhead:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.subhead),
      body2: GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.body2),
      body1: GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.body1),
      caption:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.caption),
      button: GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.encodeSansSemiExpanded(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Engagement font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Engagement
  static TextStyle engagement({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/engagement/v9/x3dlckLDZbqa7RUs9MFVXNossybsHQI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Engagement',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Engagement font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Engagement
  static TextTheme engagementTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.engagement(textStyle: textTheme?.display4),
      display3: GoogleFonts.engagement(textStyle: textTheme?.display3),
      display2: GoogleFonts.engagement(textStyle: textTheme?.display2),
      display1: GoogleFonts.engagement(textStyle: textTheme?.display1),
      headline: GoogleFonts.engagement(textStyle: textTheme?.headline),
      title: GoogleFonts.engagement(textStyle: textTheme?.title),
      subhead: GoogleFonts.engagement(textStyle: textTheme?.subhead),
      body2: GoogleFonts.engagement(textStyle: textTheme?.body2),
      body1: GoogleFonts.engagement(textStyle: textTheme?.body1),
      caption: GoogleFonts.engagement(textStyle: textTheme?.caption),
      button: GoogleFonts.engagement(textStyle: textTheme?.button),
      subtitle: GoogleFonts.engagement(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.engagement(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Englebert font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Englebert
  static TextStyle englebert({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/englebert/v7/xn7iYH8w2XGrC8AR4HSxT_fYdN-WZw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Englebert',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Englebert font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Englebert
  static TextTheme englebertTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.englebert(textStyle: textTheme?.display4),
      display3: GoogleFonts.englebert(textStyle: textTheme?.display3),
      display2: GoogleFonts.englebert(textStyle: textTheme?.display2),
      display1: GoogleFonts.englebert(textStyle: textTheme?.display1),
      headline: GoogleFonts.englebert(textStyle: textTheme?.headline),
      title: GoogleFonts.englebert(textStyle: textTheme?.title),
      subhead: GoogleFonts.englebert(textStyle: textTheme?.subhead),
      body2: GoogleFonts.englebert(textStyle: textTheme?.body2),
      body1: GoogleFonts.englebert(textStyle: textTheme?.body1),
      caption: GoogleFonts.englebert(textStyle: textTheme?.caption),
      button: GoogleFonts.englebert(textStyle: textTheme?.button),
      subtitle: GoogleFonts.englebert(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.englebert(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Enriqueta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Enriqueta
  static TextStyle enriqueta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/enriqueta/v9/goksH6L7AUFrRvV44HVTS0CjkP1Yog.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/enriqueta/v9/gokpH6L7AUFrRvV44HVrv2mHmNZEq6TTFw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/enriqueta/v9/gokpH6L7AUFrRvV44HVrk26HmNZEq6TTFw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/enriqueta/v9/gokpH6L7AUFrRvV44HVr92-HmNZEq6TTFw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Enriqueta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Enriqueta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Enriqueta
  static TextTheme enriquetaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.enriqueta(textStyle: textTheme?.display4),
      display3: GoogleFonts.enriqueta(textStyle: textTheme?.display3),
      display2: GoogleFonts.enriqueta(textStyle: textTheme?.display2),
      display1: GoogleFonts.enriqueta(textStyle: textTheme?.display1),
      headline: GoogleFonts.enriqueta(textStyle: textTheme?.headline),
      title: GoogleFonts.enriqueta(textStyle: textTheme?.title),
      subhead: GoogleFonts.enriqueta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.enriqueta(textStyle: textTheme?.body2),
      body1: GoogleFonts.enriqueta(textStyle: textTheme?.body1),
      caption: GoogleFonts.enriqueta(textStyle: textTheme?.caption),
      button: GoogleFonts.enriqueta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.enriqueta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.enriqueta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Erica One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Erica+One
  static TextStyle ericaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ericaone/v10/WBLnrEXccV9VGrOKmGD1W0_MJMGxiQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EricaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Erica One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Erica+One
  static TextTheme ericaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ericaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.ericaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.ericaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.ericaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.ericaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.ericaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.ericaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ericaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.ericaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.ericaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.ericaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ericaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ericaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Esteban font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Esteban
  static TextStyle esteban({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/esteban/v8/r05bGLZE-bdGdN-GdOuD5jokU8E.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Esteban',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Esteban font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Esteban
  static TextTheme estebanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.esteban(textStyle: textTheme?.display4),
      display3: GoogleFonts.esteban(textStyle: textTheme?.display3),
      display2: GoogleFonts.esteban(textStyle: textTheme?.display2),
      display1: GoogleFonts.esteban(textStyle: textTheme?.display1),
      headline: GoogleFonts.esteban(textStyle: textTheme?.headline),
      title: GoogleFonts.esteban(textStyle: textTheme?.title),
      subhead: GoogleFonts.esteban(textStyle: textTheme?.subhead),
      body2: GoogleFonts.esteban(textStyle: textTheme?.body2),
      body1: GoogleFonts.esteban(textStyle: textTheme?.body1),
      caption: GoogleFonts.esteban(textStyle: textTheme?.caption),
      button: GoogleFonts.esteban(textStyle: textTheme?.button),
      subtitle: GoogleFonts.esteban(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.esteban(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Euphoria Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Euphoria+Script
  static TextStyle euphoriaScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/euphoriascript/v8/mFTpWb0X2bLb_cx6To2B8GpKoD5ak_ZT1D8x7Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'EuphoriaScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Euphoria Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Euphoria+Script
  static TextTheme euphoriaScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.euphoriaScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.euphoriaScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.euphoriaScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.euphoriaScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.euphoriaScript(textStyle: textTheme?.headline),
      title: GoogleFonts.euphoriaScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.euphoriaScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.euphoriaScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.euphoriaScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.euphoriaScript(textStyle: textTheme?.caption),
      button: GoogleFonts.euphoriaScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.euphoriaScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.euphoriaScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ewert font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ewert
  static TextStyle ewert({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ewert/v7/va9I4kzO2tFODYBvS-J3kbDP.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ewert',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ewert font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ewert
  static TextTheme ewertTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ewert(textStyle: textTheme?.display4),
      display3: GoogleFonts.ewert(textStyle: textTheme?.display3),
      display2: GoogleFonts.ewert(textStyle: textTheme?.display2),
      display1: GoogleFonts.ewert(textStyle: textTheme?.display1),
      headline: GoogleFonts.ewert(textStyle: textTheme?.headline),
      title: GoogleFonts.ewert(textStyle: textTheme?.title),
      subhead: GoogleFonts.ewert(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ewert(textStyle: textTheme?.body2),
      body1: GoogleFonts.ewert(textStyle: textTheme?.body1),
      caption: GoogleFonts.ewert(textStyle: textTheme?.caption),
      button: GoogleFonts.ewert(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ewert(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ewert(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Exo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Exo
  static TextStyle exo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/exo/v9/4UaMrEtFpBIaEH6m2jbu5rXI.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaCrEtFpBISdkbC0DLM46XI-po.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/exo/v9/4UaDrEtFpBIavF-G8Bji76zR4w.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaBrEtFpBISdkZu8RLmzanB44N1.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/exo/v9/4UaDrEtFpBIa2FyG8Bji76zR4w.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaBrEtFpBISdkYK8hLmzanB44N1.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/exo/v9/4UaOrEtFpBIidHSi-DP-5g.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaMrEtFpBISdn6m2jbu5rXI.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/exo/v9/4UaDrEtFpBIagF2G8Bji76zR4w.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaBrEtFpBISdkZS8xLmzanB44N1.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/exo/v9/4UaDrEtFpBIarFqG8Bji76zR4w.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaBrEtFpBISdkZ-9BLmzanB44N1.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/exo/v9/4UaDrEtFpBIayFuG8Bji76zR4w.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaBrEtFpBISdkYa9RLmzanB44N1.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/exo/v9/4UaDrEtFpBIa1FiG8Bji76zR4w.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaBrEtFpBISdkYG9hLmzanB44N1.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/exo/v9/4UaDrEtFpBIa8FmG8Bji76zR4w.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/exo/v9/4UaBrEtFpBISdkYi9xLmzanB44N1.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Exo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Exo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Exo
  static TextTheme exoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.exo(textStyle: textTheme?.display4),
      display3: GoogleFonts.exo(textStyle: textTheme?.display3),
      display2: GoogleFonts.exo(textStyle: textTheme?.display2),
      display1: GoogleFonts.exo(textStyle: textTheme?.display1),
      headline: GoogleFonts.exo(textStyle: textTheme?.headline),
      title: GoogleFonts.exo(textStyle: textTheme?.title),
      subhead: GoogleFonts.exo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.exo(textStyle: textTheme?.body2),
      body1: GoogleFonts.exo(textStyle: textTheme?.body1),
      caption: GoogleFonts.exo(textStyle: textTheme?.caption),
      button: GoogleFonts.exo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.exo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.exo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Exo 2 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Exo+2
  static TextStyle exo2({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHov4okm5zmbt5LK-sW5HIohT4.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHqv4okm5zmbtYtE48c4FAtlT47dw.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHrv4okm5zmbt7nCss8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHtv4okm5zmbtYtEyM9wHoDmTcibrA.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHrv4okm5zmbt6DCcs8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHtv4okm5zmbtYtE0c-wHoDmTcibrA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHmv4okm5zmbuYvIe804WIo.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHov4okm5zmbtYtK-sW5HIohT4.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHrv4okm5zmbt7bCMs8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHtv4okm5zmbtYtEx8_wHoDmTcibrA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHrv4okm5zmbt73D8s8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHtv4okm5zmbtYtEzM4wHoDmTcibrA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHrv4okm5zmbt6TDss8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHtv4okm5zmbtYtE1c5wHoDmTcibrA.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHrv4okm5zmbt6PDcs8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHtv4okm5zmbtYtE0s6wHoDmTcibrA.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHrv4okm5zmbt6rDMs8yn4hnCci.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/exo2/v7/7cHtv4okm5zmbtYtE287wHoDmTcibrA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Exo2',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Exo 2 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Exo+2
  static TextTheme exo2TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.exo2(textStyle: textTheme?.display4),
      display3: GoogleFonts.exo2(textStyle: textTheme?.display3),
      display2: GoogleFonts.exo2(textStyle: textTheme?.display2),
      display1: GoogleFonts.exo2(textStyle: textTheme?.display1),
      headline: GoogleFonts.exo2(textStyle: textTheme?.headline),
      title: GoogleFonts.exo2(textStyle: textTheme?.title),
      subhead: GoogleFonts.exo2(textStyle: textTheme?.subhead),
      body2: GoogleFonts.exo2(textStyle: textTheme?.body2),
      body1: GoogleFonts.exo2(textStyle: textTheme?.body1),
      caption: GoogleFonts.exo2(textStyle: textTheme?.caption),
      button: GoogleFonts.exo2(textStyle: textTheme?.button),
      subtitle: GoogleFonts.exo2(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.exo2(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Expletus Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Expletus+Sans
  static TextStyle expletusSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/expletussans/v13/RLp5K5v5_bqufTYdnhFzDj2dRfkSu6EuTHo.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/expletussans/v13/RLpnK5v5_bqufTYdnhFzDj2ddfsYv4MrXHrRDA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/expletussans/v13/RLpkK5v5_bqufTYdnhFzDj2dfQ07n6kFUHPIFaU.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/expletussans/v13/RLpiK5v5_bqufTYdnhFzDj2ddfsgS6oPVFHNBaVImA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/expletussans/v13/RLpkK5v5_bqufTYdnhFzDj2dfSE8n6kFUHPIFaU.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/expletussans/v13/RLpiK5v5_bqufTYdnhFzDj2ddfsgZ60PVFHNBaVImA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/expletussans/v13/RLpkK5v5_bqufTYdnhFzDj2dfUU9n6kFUHPIFaU.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/expletussans/v13/RLpiK5v5_bqufTYdnhFzDj2ddfsgA6wPVFHNBaVImA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ExpletusSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Expletus Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Expletus+Sans
  static TextTheme expletusSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.expletusSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.expletusSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.expletusSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.expletusSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.expletusSans(textStyle: textTheme?.headline),
      title: GoogleFonts.expletusSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.expletusSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.expletusSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.expletusSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.expletusSans(textStyle: textTheme?.caption),
      button: GoogleFonts.expletusSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.expletusSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.expletusSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fahkwang font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fahkwang
  static TextStyle fahkwang({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa26Uj3zpmBOgbNpOJHmZlRFipxkwjx.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa06Uj3zpmBOgbNpOqNgHFQHC5Tlhjxdw4.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa26Uj3zpmBOgbNpOIjmplRFipxkwjx.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa06Uj3zpmBOgbNpOqNgBVTHC5Tlhjxdw4.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noax6Uj3zpmBOgbNpNqPsr1ZPTZ4.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa36Uj3zpmBOgbNpOqNuLl7OCZ4ihE.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa26Uj3zpmBOgbNpOJ7m5lRFipxkwjx.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa06Uj3zpmBOgbNpOqNgE1SHC5Tlhjxdw4.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa26Uj3zpmBOgbNpOJXnJlRFipxkwjx.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa06Uj3zpmBOgbNpOqNgGFVHC5Tlhjxdw4.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa26Uj3zpmBOgbNpOIznZlRFipxkwjx.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/fahkwang/v3/Noa06Uj3zpmBOgbNpOqNgAVUHC5Tlhjxdw4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fahkwang',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fahkwang font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fahkwang
  static TextTheme fahkwangTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fahkwang(textStyle: textTheme?.display4),
      display3: GoogleFonts.fahkwang(textStyle: textTheme?.display3),
      display2: GoogleFonts.fahkwang(textStyle: textTheme?.display2),
      display1: GoogleFonts.fahkwang(textStyle: textTheme?.display1),
      headline: GoogleFonts.fahkwang(textStyle: textTheme?.headline),
      title: GoogleFonts.fahkwang(textStyle: textTheme?.title),
      subhead: GoogleFonts.fahkwang(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fahkwang(textStyle: textTheme?.body2),
      body1: GoogleFonts.fahkwang(textStyle: textTheme?.body1),
      caption: GoogleFonts.fahkwang(textStyle: textTheme?.caption),
      button: GoogleFonts.fahkwang(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fahkwang(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fahkwang(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fanwood Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fanwood+Text
  static TextStyle fanwoodText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fanwoodtext/v9/3XFtErwl05Ad_vSCF6Fq7xXGRdbY1P1Sbg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/fanwoodtext/v9/3XFzErwl05Ad_vSCF6Fq7xX2R9zc9vhCblye.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FanwoodText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fanwood Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fanwood+Text
  static TextTheme fanwoodTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fanwoodText(textStyle: textTheme?.display4),
      display3: GoogleFonts.fanwoodText(textStyle: textTheme?.display3),
      display2: GoogleFonts.fanwoodText(textStyle: textTheme?.display2),
      display1: GoogleFonts.fanwoodText(textStyle: textTheme?.display1),
      headline: GoogleFonts.fanwoodText(textStyle: textTheme?.headline),
      title: GoogleFonts.fanwoodText(textStyle: textTheme?.title),
      subhead: GoogleFonts.fanwoodText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fanwoodText(textStyle: textTheme?.body2),
      body1: GoogleFonts.fanwoodText(textStyle: textTheme?.body1),
      caption: GoogleFonts.fanwoodText(textStyle: textTheme?.caption),
      button: GoogleFonts.fanwoodText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fanwoodText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fanwoodText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Farro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Farro
  static TextStyle farro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/farro/v1/i7dJIFl3byGNHa3hNJ6-WkJUQUq7.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/farro/v1/i7dEIFl3byGNHZVNHLq2cV5d.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/farro/v1/i7dJIFl3byGNHa25NZ6-WkJUQUq7.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/farro/v1/i7dJIFl3byGNHa3xM56-WkJUQUq7.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Farro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Farro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Farro
  static TextTheme farroTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.farro(textStyle: textTheme?.display4),
      display3: GoogleFonts.farro(textStyle: textTheme?.display3),
      display2: GoogleFonts.farro(textStyle: textTheme?.display2),
      display1: GoogleFonts.farro(textStyle: textTheme?.display1),
      headline: GoogleFonts.farro(textStyle: textTheme?.headline),
      title: GoogleFonts.farro(textStyle: textTheme?.title),
      subhead: GoogleFonts.farro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.farro(textStyle: textTheme?.body2),
      body1: GoogleFonts.farro(textStyle: textTheme?.body1),
      caption: GoogleFonts.farro(textStyle: textTheme?.caption),
      button: GoogleFonts.farro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.farro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.farro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Farsan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Farsan
  static TextStyle farsan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/farsan/v5/VEMwRoJ0vY_zsyz62q-pxDX9rQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Farsan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Farsan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Farsan
  static TextTheme farsanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.farsan(textStyle: textTheme?.display4),
      display3: GoogleFonts.farsan(textStyle: textTheme?.display3),
      display2: GoogleFonts.farsan(textStyle: textTheme?.display2),
      display1: GoogleFonts.farsan(textStyle: textTheme?.display1),
      headline: GoogleFonts.farsan(textStyle: textTheme?.headline),
      title: GoogleFonts.farsan(textStyle: textTheme?.title),
      subhead: GoogleFonts.farsan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.farsan(textStyle: textTheme?.body2),
      body1: GoogleFonts.farsan(textStyle: textTheme?.body1),
      caption: GoogleFonts.farsan(textStyle: textTheme?.caption),
      button: GoogleFonts.farsan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.farsan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.farsan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fascinate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fascinate
  static TextStyle fascinate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fascinate/v8/z7NWdRrufC8XJK0IIEli1LbQRPyNrw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fascinate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fascinate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fascinate
  static TextTheme fascinateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fascinate(textStyle: textTheme?.display4),
      display3: GoogleFonts.fascinate(textStyle: textTheme?.display3),
      display2: GoogleFonts.fascinate(textStyle: textTheme?.display2),
      display1: GoogleFonts.fascinate(textStyle: textTheme?.display1),
      headline: GoogleFonts.fascinate(textStyle: textTheme?.headline),
      title: GoogleFonts.fascinate(textStyle: textTheme?.title),
      subhead: GoogleFonts.fascinate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fascinate(textStyle: textTheme?.body2),
      body1: GoogleFonts.fascinate(textStyle: textTheme?.body1),
      caption: GoogleFonts.fascinate(textStyle: textTheme?.caption),
      button: GoogleFonts.fascinate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fascinate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fascinate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fascinate Inline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fascinate+Inline
  static TextStyle fascinateInline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fascinateinline/v9/jVyR7mzzB3zc-jp6QCAu60poNqIy1g3CfRXxWZQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FascinateInline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fascinate Inline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fascinate+Inline
  static TextTheme fascinateInlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fascinateInline(textStyle: textTheme?.display4),
      display3: GoogleFonts.fascinateInline(textStyle: textTheme?.display3),
      display2: GoogleFonts.fascinateInline(textStyle: textTheme?.display2),
      display1: GoogleFonts.fascinateInline(textStyle: textTheme?.display1),
      headline: GoogleFonts.fascinateInline(textStyle: textTheme?.headline),
      title: GoogleFonts.fascinateInline(textStyle: textTheme?.title),
      subhead: GoogleFonts.fascinateInline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fascinateInline(textStyle: textTheme?.body2),
      body1: GoogleFonts.fascinateInline(textStyle: textTheme?.body1),
      caption: GoogleFonts.fascinateInline(textStyle: textTheme?.caption),
      button: GoogleFonts.fascinateInline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fascinateInline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fascinateInline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Faster One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Faster+One
  static TextStyle fasterOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fasterone/v11/H4ciBXCHmdfClFb-vWhfyLuShq63czE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FasterOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Faster One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Faster+One
  static TextTheme fasterOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fasterOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fasterOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fasterOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fasterOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fasterOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fasterOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fasterOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fasterOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fasterOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fasterOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fasterOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fasterOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fasterOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fasthand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fasthand
  static TextStyle fasthand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fasthand/v10/0yb9GDohyKTYn_ZEESkuYkw2rQg1.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fasthand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fasthand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fasthand
  static TextTheme fasthandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fasthand(textStyle: textTheme?.display4),
      display3: GoogleFonts.fasthand(textStyle: textTheme?.display3),
      display2: GoogleFonts.fasthand(textStyle: textTheme?.display2),
      display1: GoogleFonts.fasthand(textStyle: textTheme?.display1),
      headline: GoogleFonts.fasthand(textStyle: textTheme?.headline),
      title: GoogleFonts.fasthand(textStyle: textTheme?.title),
      subhead: GoogleFonts.fasthand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fasthand(textStyle: textTheme?.body2),
      body1: GoogleFonts.fasthand(textStyle: textTheme?.body1),
      caption: GoogleFonts.fasthand(textStyle: textTheme?.caption),
      button: GoogleFonts.fasthand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fasthand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fasthand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fauna One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fauna+One
  static TextStyle faunaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/faunaone/v7/wlpzgwTPBVpjpCuwkuEx2UxLYClOCg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FaunaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fauna One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fauna+One
  static TextTheme faunaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.faunaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.faunaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.faunaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.faunaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.faunaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.faunaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.faunaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.faunaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.faunaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.faunaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.faunaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.faunaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.faunaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Faustina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Faustina
  static TextStyle faustina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/faustina/v5/XLY4IZPxYpJfTbZAFXWzNT2SO8wpWHlsgoEvGVWWe8tbEg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/faustina/v5/XLY4IZPxYpJfTbZAFXWzNT2SO8wpWHlssIEvGVWWe8tbEg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/faustina/v5/XLY4IZPxYpJfTbZAFXWzNT2SO8wpWHlsXIYvGVWWe8tbEg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/faustina/v5/XLY4IZPxYpJfTbZAFXWzNT2SO8wpWHlsZYYvGVWWe8tbEg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/faustina/v5/XLY2IZPxYpJfTbZAFV-6B8JKUqez9n55SsLHWl-SWc5LEnoF.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/faustina/v5/XLY2IZPxYpJfTbZAFV-6B8JKUqez9n55SsL1Wl-SWc5LEnoF.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/faustina/v5/XLY2IZPxYpJfTbZAFV-6B8JKUqez9n55SsIZXV-SWc5LEnoF.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/faustina/v5/XLY2IZPxYpJfTbZAFV-6B8JKUqez9n55SsIgXV-SWc5LEnoF.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Faustina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Faustina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Faustina
  static TextTheme faustinaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.faustina(textStyle: textTheme?.display4),
      display3: GoogleFonts.faustina(textStyle: textTheme?.display3),
      display2: GoogleFonts.faustina(textStyle: textTheme?.display2),
      display1: GoogleFonts.faustina(textStyle: textTheme?.display1),
      headline: GoogleFonts.faustina(textStyle: textTheme?.headline),
      title: GoogleFonts.faustina(textStyle: textTheme?.title),
      subhead: GoogleFonts.faustina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.faustina(textStyle: textTheme?.body2),
      body1: GoogleFonts.faustina(textStyle: textTheme?.body1),
      caption: GoogleFonts.faustina(textStyle: textTheme?.caption),
      button: GoogleFonts.faustina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.faustina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.faustina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Federant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Federant
  static TextStyle federant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/federant/v12/2sDdZGNfip_eirT0_U0jRUG0AqUc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Federant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Federant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Federant
  static TextTheme federantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.federant(textStyle: textTheme?.display4),
      display3: GoogleFonts.federant(textStyle: textTheme?.display3),
      display2: GoogleFonts.federant(textStyle: textTheme?.display2),
      display1: GoogleFonts.federant(textStyle: textTheme?.display1),
      headline: GoogleFonts.federant(textStyle: textTheme?.headline),
      title: GoogleFonts.federant(textStyle: textTheme?.title),
      subhead: GoogleFonts.federant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.federant(textStyle: textTheme?.body2),
      body1: GoogleFonts.federant(textStyle: textTheme?.body1),
      caption: GoogleFonts.federant(textStyle: textTheme?.caption),
      button: GoogleFonts.federant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.federant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.federant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Federo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Federo
  static TextStyle federo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/federo/v11/iJWFBX-cbD_ETsbmjVOe2WTG7Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Federo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Federo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Federo
  static TextTheme federoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.federo(textStyle: textTheme?.display4),
      display3: GoogleFonts.federo(textStyle: textTheme?.display3),
      display2: GoogleFonts.federo(textStyle: textTheme?.display2),
      display1: GoogleFonts.federo(textStyle: textTheme?.display1),
      headline: GoogleFonts.federo(textStyle: textTheme?.headline),
      title: GoogleFonts.federo(textStyle: textTheme?.title),
      subhead: GoogleFonts.federo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.federo(textStyle: textTheme?.body2),
      body1: GoogleFonts.federo(textStyle: textTheme?.body1),
      caption: GoogleFonts.federo(textStyle: textTheme?.caption),
      button: GoogleFonts.federo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.federo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.federo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Felipa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Felipa
  static TextStyle felipa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/felipa/v7/FwZa7-owz1Eu4F_wSNSEwM2zpA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Felipa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Felipa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Felipa
  static TextTheme felipaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.felipa(textStyle: textTheme?.display4),
      display3: GoogleFonts.felipa(textStyle: textTheme?.display3),
      display2: GoogleFonts.felipa(textStyle: textTheme?.display2),
      display1: GoogleFonts.felipa(textStyle: textTheme?.display1),
      headline: GoogleFonts.felipa(textStyle: textTheme?.headline),
      title: GoogleFonts.felipa(textStyle: textTheme?.title),
      subhead: GoogleFonts.felipa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.felipa(textStyle: textTheme?.body2),
      body1: GoogleFonts.felipa(textStyle: textTheme?.body1),
      caption: GoogleFonts.felipa(textStyle: textTheme?.caption),
      button: GoogleFonts.felipa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.felipa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.felipa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fenix font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fenix
  static TextStyle fenix({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fenix/v7/XoHo2YL_S7-g5ostKzAFvs8o.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fenix',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fenix font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fenix
  static TextTheme fenixTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fenix(textStyle: textTheme?.display4),
      display3: GoogleFonts.fenix(textStyle: textTheme?.display3),
      display2: GoogleFonts.fenix(textStyle: textTheme?.display2),
      display1: GoogleFonts.fenix(textStyle: textTheme?.display1),
      headline: GoogleFonts.fenix(textStyle: textTheme?.headline),
      title: GoogleFonts.fenix(textStyle: textTheme?.title),
      subhead: GoogleFonts.fenix(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fenix(textStyle: textTheme?.body2),
      body1: GoogleFonts.fenix(textStyle: textTheme?.body1),
      caption: GoogleFonts.fenix(textStyle: textTheme?.caption),
      button: GoogleFonts.fenix(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fenix(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fenix(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Finger Paint font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Finger+Paint
  static TextStyle fingerPaint({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fingerpaint/v9/0QInMXVJ-o-oRn_7dron8YWO85bS8ANesw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FingerPaint',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Finger Paint font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Finger+Paint
  static TextTheme fingerPaintTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fingerPaint(textStyle: textTheme?.display4),
      display3: GoogleFonts.fingerPaint(textStyle: textTheme?.display3),
      display2: GoogleFonts.fingerPaint(textStyle: textTheme?.display2),
      display1: GoogleFonts.fingerPaint(textStyle: textTheme?.display1),
      headline: GoogleFonts.fingerPaint(textStyle: textTheme?.headline),
      title: GoogleFonts.fingerPaint(textStyle: textTheme?.title),
      subhead: GoogleFonts.fingerPaint(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fingerPaint(textStyle: textTheme?.body2),
      body1: GoogleFonts.fingerPaint(textStyle: textTheme?.body1),
      caption: GoogleFonts.fingerPaint(textStyle: textTheme?.caption),
      button: GoogleFonts.fingerPaint(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fingerPaint(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fingerPaint(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Code font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Code
  static TextStyle firaCode({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/firacode/v7/uU9eCBsR6Z2vfE9aq3bL0fxyUs4tcw4W_GNsFVfxN87gsj0.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/firacode/v7/uU9eCBsR6Z2vfE9aq3bL0fxyUs4tcw4W_D1sFVfxN87gsj0.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/firacode/v7/uU9eCBsR6Z2vfE9aq3bL0fxyUs4tcw4W_A9sFVfxN87gsj0.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/firacode/v7/uU9eCBsR6Z2vfE9aq3bL0fxyUs4tcw4W_ONrFVfxN87gsj0.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/firacode/v7/uU9eCBsR6Z2vfE9aq3bL0fxyUs4tcw4W_NprFVfxN87gsj0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraCode',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Code font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Code
  static TextTheme firaCodeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.firaCode(textStyle: textTheme?.display4),
      display3: GoogleFonts.firaCode(textStyle: textTheme?.display3),
      display2: GoogleFonts.firaCode(textStyle: textTheme?.display2),
      display1: GoogleFonts.firaCode(textStyle: textTheme?.display1),
      headline: GoogleFonts.firaCode(textStyle: textTheme?.headline),
      title: GoogleFonts.firaCode(textStyle: textTheme?.title),
      subhead: GoogleFonts.firaCode(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaCode(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaCode(textStyle: textTheme?.body1),
      caption: GoogleFonts.firaCode(textStyle: textTheme?.caption),
      button: GoogleFonts.firaCode(textStyle: textTheme?.button),
      subtitle: GoogleFonts.firaCode(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.firaCode(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Mono
  static TextStyle firaMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/firamono/v8/N0bX2SlFPv1weGeLZDtQIfTTkdbJYA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/firamono/v8/N0bS2SlFPv1weGeLZDto1d33mf3VaZBRBQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/firamono/v8/N0bS2SlFPv1weGeLZDtondv3mf3VaZBRBQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Mono
  static TextTheme firaMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.firaMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.firaMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.firaMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.firaMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.firaMono(textStyle: textTheme?.headline),
      title: GoogleFonts.firaMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.firaMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.firaMono(textStyle: textTheme?.caption),
      button: GoogleFonts.firaMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.firaMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.firaMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans
  static TextStyle firaSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/firasans/v10/va9C4kDNxMZdWfMOD5Vn9IjOazP3dUTP.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9A4kDNxMZdWfMOD5VvkrCqYTfVcFTPj0s.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/firasans/v10/va9B4kDNxMZdWfMOD5VnWKnuQR37fF3Wlg.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9f4kDNxMZdWfMOD5VvkrAGQBf_XljGllLX.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/firasans/v10/va9B4kDNxMZdWfMOD5VnPKruQR37fF3Wlg.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9f4kDNxMZdWfMOD5VvkrBiQxf_XljGllLX.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/firasans/v10/va9E4kDNxMZdWfMOD5VfkILKSTbndQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9C4kDNxMZdWfMOD5VvkojOazP3dUTP.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/firasans/v10/va9B4kDNxMZdWfMOD5VnZKvuQR37fF3Wlg.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9f4kDNxMZdWfMOD5VvkrA6Qhf_XljGllLX.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/firasans/v10/va9B4kDNxMZdWfMOD5VnSKzuQR37fF3Wlg.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9f4kDNxMZdWfMOD5VvkrAWRRf_XljGllLX.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/firasans/v10/va9B4kDNxMZdWfMOD5VnLK3uQR37fF3Wlg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9f4kDNxMZdWfMOD5VvkrByRBf_XljGllLX.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/firasans/v10/va9B4kDNxMZdWfMOD5VnMK7uQR37fF3Wlg.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9f4kDNxMZdWfMOD5VvkrBuRxf_XljGllLX.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/firasans/v10/va9B4kDNxMZdWfMOD5VnFK_uQR37fF3Wlg.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/firasans/v10/va9f4kDNxMZdWfMOD5VvkrBKRhf_XljGllLX.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans
  static TextTheme firaSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.firaSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.firaSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.firaSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.firaSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.firaSans(textStyle: textTheme?.headline),
      title: GoogleFonts.firaSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.firaSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.firaSans(textStyle: textTheme?.caption),
      button: GoogleFonts.firaSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.firaSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.firaSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Sans Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans+Condensed
  static TextStyle firaSansCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOjEADFm8hSaQTFG18FErVhsC9x-tarWZXtqOlQfx9CjA.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOtEADFm8hSaQTFG18FErVhsC9x-tarUfPVzONUXRpSjJcu.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOsEADFm8hSaQTFG18FErVhsC9x-tarWTnMiMN-cxZblY4.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOuEADFm8hSaQTFG18FErVhsC9x-tarUfPVYMJ0dzRehY43EA.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOsEADFm8hSaQTFG18FErVhsC9x-tarWV3PiMN-cxZblY4.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOuEADFm8hSaQTFG18FErVhsC9x-tarUfPVBMF0dzRehY43EA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOhEADFm8hSaQTFG18FErVhsC9x-tarYfHnrMtVbx8.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOjEADFm8hSaQTFG18FErVhsC9x-tarUfPtqOlQfx9CjA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOsEADFm8hSaQTFG18FErVhsC9x-tarWQXOiMN-cxZblY4.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOuEADFm8hSaQTFG18FErVhsC9x-tarUfPVXMB0dzRehY43EA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOsEADFm8hSaQTFG18FErVhsC9x-tarWSnJiMN-cxZblY4.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOuEADFm8hSaQTFG18FErVhsC9x-tarUfPVcMd0dzRehY43EA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOsEADFm8hSaQTFG18FErVhsC9x-tarWU3IiMN-cxZblY4.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOuEADFm8hSaQTFG18FErVhsC9x-tarUfPVFMZ0dzRehY43EA.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOsEADFm8hSaQTFG18FErVhsC9x-tarWVHLiMN-cxZblY4.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOuEADFm8hSaQTFG18FErVhsC9x-tarUfPVCMV0dzRehY43EA.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOsEADFm8hSaQTFG18FErVhsC9x-tarWXXKiMN-cxZblY4.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/firasanscondensed/v4/wEOuEADFm8hSaQTFG18FErVhsC9x-tarUfPVLMR0dzRehY43EA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraSansCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Sans Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans+Condensed
  static TextTheme firaSansCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.firaSansCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.firaSansCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.firaSansCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.firaSansCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.firaSansCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.firaSansCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.firaSansCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaSansCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaSansCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.firaSansCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.firaSansCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.firaSansCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.firaSansCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fira Sans Extra Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans+Extra+Condensed
  static TextStyle firaSansExtraCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPMcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda3Zyuv1WarE9ncg.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPOcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fqW21-ejkp3cn22.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPPcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda3TCPn3-0oEZ-a2Q.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPxcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fqWd36-pGR7e2SvJQ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPPcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda3VSMn3-0oEZ-a2Q.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPxcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fqWE32-pGR7e2SvJQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPKcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda5fiku3efvE8.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPMcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fquv1WarE9ncg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPPcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda3QyNn3-0oEZ-a2Q.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPxcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fqWS3y-pGR7e2SvJQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPPcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda3SCKn3-0oEZ-a2Q.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPxcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fqWZ3u-pGR7e2SvJQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPPcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda3USLn3-0oEZ-a2Q.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPxcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fqWA3q-pGR7e2SvJQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPPcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda3ViIn3-0oEZ-a2Q.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPxcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fqWH3m-pGR7e2SvJQ.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPPcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda3XyJn3-0oEZ-a2Q.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/firasansextracondensed/v4/NaPxcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fqWO3i-pGR7e2SvJQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FiraSansExtraCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fira Sans Extra Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fira+Sans+Extra+Condensed
  static TextTheme firaSansExtraCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.title),
      subhead:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.body1),
      caption:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.firaSansExtraCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fjalla One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fjalla+One
  static TextStyle fjallaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fjallaone/v7/Yq6R-LCAWCX3-6Ky7FAFnOZwkxgtUb8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FjallaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fjalla One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fjalla+One
  static TextTheme fjallaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fjallaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fjallaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fjallaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fjallaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fjallaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fjallaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fjallaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fjallaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fjallaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fjallaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fjallaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fjallaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fjallaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fjord One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fjord+One
  static TextStyle fjordOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fjordone/v8/zOL-4pbEnKBY_9S1jNKr6e5As-FeiQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FjordOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fjord One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fjord+One
  static TextTheme fjordOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fjordOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fjordOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fjordOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fjordOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fjordOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fjordOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fjordOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fjordOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fjordOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fjordOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fjordOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fjordOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fjordOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Flamenco font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Flamenco
  static TextStyle flamenco({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/flamenco/v10/neIPzCehqYguo67ssZ0qNIkyepH9qGsf.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/flamenco/v10/neIIzCehqYguo67ssaWGHK06UY30.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Flamenco',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Flamenco font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Flamenco
  static TextTheme flamencoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.flamenco(textStyle: textTheme?.display4),
      display3: GoogleFonts.flamenco(textStyle: textTheme?.display3),
      display2: GoogleFonts.flamenco(textStyle: textTheme?.display2),
      display1: GoogleFonts.flamenco(textStyle: textTheme?.display1),
      headline: GoogleFonts.flamenco(textStyle: textTheme?.headline),
      title: GoogleFonts.flamenco(textStyle: textTheme?.title),
      subhead: GoogleFonts.flamenco(textStyle: textTheme?.subhead),
      body2: GoogleFonts.flamenco(textStyle: textTheme?.body2),
      body1: GoogleFonts.flamenco(textStyle: textTheme?.body1),
      caption: GoogleFonts.flamenco(textStyle: textTheme?.caption),
      button: GoogleFonts.flamenco(textStyle: textTheme?.button),
      subtitle: GoogleFonts.flamenco(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.flamenco(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Flavors font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Flavors
  static TextStyle flavors({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/flavors/v9/FBV2dDrhxqmveJTpbkzlNqkG9UY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Flavors',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Flavors font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Flavors
  static TextTheme flavorsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.flavors(textStyle: textTheme?.display4),
      display3: GoogleFonts.flavors(textStyle: textTheme?.display3),
      display2: GoogleFonts.flavors(textStyle: textTheme?.display2),
      display1: GoogleFonts.flavors(textStyle: textTheme?.display1),
      headline: GoogleFonts.flavors(textStyle: textTheme?.headline),
      title: GoogleFonts.flavors(textStyle: textTheme?.title),
      subhead: GoogleFonts.flavors(textStyle: textTheme?.subhead),
      body2: GoogleFonts.flavors(textStyle: textTheme?.body2),
      body1: GoogleFonts.flavors(textStyle: textTheme?.body1),
      caption: GoogleFonts.flavors(textStyle: textTheme?.caption),
      button: GoogleFonts.flavors(textStyle: textTheme?.button),
      subtitle: GoogleFonts.flavors(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.flavors(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fondamento font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fondamento
  static TextStyle fondamento({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fondamento/v10/4UaHrEJGsxNmFTPDnkaJx63j5pN1MwI.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/fondamento/v10/4UaFrEJGsxNmFTPDnkaJ96_p4rFwIwJePw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fondamento',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fondamento font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fondamento
  static TextTheme fondamentoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fondamento(textStyle: textTheme?.display4),
      display3: GoogleFonts.fondamento(textStyle: textTheme?.display3),
      display2: GoogleFonts.fondamento(textStyle: textTheme?.display2),
      display1: GoogleFonts.fondamento(textStyle: textTheme?.display1),
      headline: GoogleFonts.fondamento(textStyle: textTheme?.headline),
      title: GoogleFonts.fondamento(textStyle: textTheme?.title),
      subhead: GoogleFonts.fondamento(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fondamento(textStyle: textTheme?.body2),
      body1: GoogleFonts.fondamento(textStyle: textTheme?.body1),
      caption: GoogleFonts.fondamento(textStyle: textTheme?.caption),
      button: GoogleFonts.fondamento(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fondamento(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fondamento(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fontdiner Swanky font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fontdiner+Swanky
  static TextStyle fontdinerSwanky({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fontdinerswanky/v10/ijwOs4XgRNsiaI5-hcVb4hQgMvCD4uEfKiGvxts.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FontdinerSwanky',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fontdiner Swanky font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fontdiner+Swanky
  static TextTheme fontdinerSwankyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.display4),
      display3: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.display3),
      display2: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.display2),
      display1: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.display1),
      headline: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.headline),
      title: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.title),
      subhead: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.body2),
      body1: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.body1),
      caption: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.caption),
      button: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fontdinerSwanky(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Forum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Forum
  static TextStyle forum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/forum/v10/6aey4Ky-Vb8Ew_IWMJMa3mnT.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Forum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Forum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Forum
  static TextTheme forumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.forum(textStyle: textTheme?.display4),
      display3: GoogleFonts.forum(textStyle: textTheme?.display3),
      display2: GoogleFonts.forum(textStyle: textTheme?.display2),
      display1: GoogleFonts.forum(textStyle: textTheme?.display1),
      headline: GoogleFonts.forum(textStyle: textTheme?.headline),
      title: GoogleFonts.forum(textStyle: textTheme?.title),
      subhead: GoogleFonts.forum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.forum(textStyle: textTheme?.body2),
      body1: GoogleFonts.forum(textStyle: textTheme?.body1),
      caption: GoogleFonts.forum(textStyle: textTheme?.caption),
      button: GoogleFonts.forum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.forum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.forum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Francois One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Francois+One
  static TextStyle francoisOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/francoisone/v14/_Xmr-H4zszafZw3A-KPSZutNxgKQu_avAg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FrancoisOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Francois One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Francois+One
  static TextTheme francoisOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.francoisOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.francoisOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.francoisOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.francoisOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.francoisOne(textStyle: textTheme?.headline),
      title: GoogleFonts.francoisOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.francoisOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.francoisOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.francoisOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.francoisOne(textStyle: textTheme?.caption),
      button: GoogleFonts.francoisOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.francoisOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.francoisOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Frank Ruhl Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Frank+Ruhl+Libre
  static TextStyle frankRuhlLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/frankruhllibre/v5/j8_36_fAw7jrcalD7oKYNX0QfAnPUxvHxJDMhYeIHw8.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/frankruhllibre/v5/j8_w6_fAw7jrcalD7oKYNX0QfAnPa7fv4JjnmY4.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/frankruhllibre/v5/j8_36_fAw7jrcalD7oKYNX0QfAnPU0PGxJDMhYeIHw8.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/frankruhllibre/v5/j8_36_fAw7jrcalD7oKYNX0QfAnPUwvAxJDMhYeIHw8.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/frankruhllibre/v5/j8_36_fAw7jrcalD7oKYNX0QfAnPUzPCxJDMhYeIHw8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FrankRuhlLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Frank Ruhl Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Frank+Ruhl+Libre
  static TextTheme frankRuhlLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.frankRuhlLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Freckle Face font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Freckle+Face
  static TextStyle freckleFace({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/freckleface/v8/AMOWz4SXrmKHCvXTohxY-YI0U1K2w9lb4g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FreckleFace',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Freckle Face font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Freckle+Face
  static TextTheme freckleFaceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.freckleFace(textStyle: textTheme?.display4),
      display3: GoogleFonts.freckleFace(textStyle: textTheme?.display3),
      display2: GoogleFonts.freckleFace(textStyle: textTheme?.display2),
      display1: GoogleFonts.freckleFace(textStyle: textTheme?.display1),
      headline: GoogleFonts.freckleFace(textStyle: textTheme?.headline),
      title: GoogleFonts.freckleFace(textStyle: textTheme?.title),
      subhead: GoogleFonts.freckleFace(textStyle: textTheme?.subhead),
      body2: GoogleFonts.freckleFace(textStyle: textTheme?.body2),
      body1: GoogleFonts.freckleFace(textStyle: textTheme?.body1),
      caption: GoogleFonts.freckleFace(textStyle: textTheme?.caption),
      button: GoogleFonts.freckleFace(textStyle: textTheme?.button),
      subtitle: GoogleFonts.freckleFace(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.freckleFace(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fredericka the Great font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fredericka+the+Great
  static TextStyle frederickatheGreat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/frederickathegreat/v9/9Bt33CxNwt7aOctW2xjbCstzwVKsIBVV-9Skz7Ylch2L.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FrederickatheGreat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fredericka the Great font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fredericka+the+Great
  static TextTheme frederickatheGreatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.frederickatheGreat(textStyle: textTheme?.display4),
      display3: GoogleFonts.frederickatheGreat(textStyle: textTheme?.display3),
      display2: GoogleFonts.frederickatheGreat(textStyle: textTheme?.display2),
      display1: GoogleFonts.frederickatheGreat(textStyle: textTheme?.display1),
      headline: GoogleFonts.frederickatheGreat(textStyle: textTheme?.headline),
      title: GoogleFonts.frederickatheGreat(textStyle: textTheme?.title),
      subhead: GoogleFonts.frederickatheGreat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.frederickatheGreat(textStyle: textTheme?.body2),
      body1: GoogleFonts.frederickatheGreat(textStyle: textTheme?.body1),
      caption: GoogleFonts.frederickatheGreat(textStyle: textTheme?.caption),
      button: GoogleFonts.frederickatheGreat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.frederickatheGreat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.frederickatheGreat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fredoka One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fredoka+One
  static TextStyle fredokaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fredokaone/v7/k3kUo8kEI-tA1RRcTZGmTmHBA6aF8Bf_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FredokaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fredoka One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fredoka+One
  static TextTheme fredokaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fredokaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fredokaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fredokaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fredokaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fredokaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fredokaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fredokaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fredokaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fredokaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fredokaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fredokaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fredokaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fredokaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Freehand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Freehand
  static TextStyle freehand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/freehand/v11/cIf-Ma5eqk01VjKTgAmBTmUOmZJk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Freehand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Freehand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Freehand
  static TextTheme freehandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.freehand(textStyle: textTheme?.display4),
      display3: GoogleFonts.freehand(textStyle: textTheme?.display3),
      display2: GoogleFonts.freehand(textStyle: textTheme?.display2),
      display1: GoogleFonts.freehand(textStyle: textTheme?.display1),
      headline: GoogleFonts.freehand(textStyle: textTheme?.headline),
      title: GoogleFonts.freehand(textStyle: textTheme?.title),
      subhead: GoogleFonts.freehand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.freehand(textStyle: textTheme?.body2),
      body1: GoogleFonts.freehand(textStyle: textTheme?.body1),
      caption: GoogleFonts.freehand(textStyle: textTheme?.caption),
      button: GoogleFonts.freehand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.freehand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.freehand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fresca font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fresca
  static TextStyle fresca({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fresca/v8/6ae94K--SKgCzbM2Gr0W13DKPA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fresca',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fresca font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fresca
  static TextTheme frescaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fresca(textStyle: textTheme?.display4),
      display3: GoogleFonts.fresca(textStyle: textTheme?.display3),
      display2: GoogleFonts.fresca(textStyle: textTheme?.display2),
      display1: GoogleFonts.fresca(textStyle: textTheme?.display1),
      headline: GoogleFonts.fresca(textStyle: textTheme?.headline),
      title: GoogleFonts.fresca(textStyle: textTheme?.title),
      subhead: GoogleFonts.fresca(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fresca(textStyle: textTheme?.body2),
      body1: GoogleFonts.fresca(textStyle: textTheme?.body1),
      caption: GoogleFonts.fresca(textStyle: textTheme?.caption),
      button: GoogleFonts.fresca(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fresca(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fresca(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Frijole font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Frijole
  static TextStyle frijole({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/frijole/v8/uU9PCBUR8oakM2BQ7xPb3vyHmlI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Frijole',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Frijole font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Frijole
  static TextTheme frijoleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.frijole(textStyle: textTheme?.display4),
      display3: GoogleFonts.frijole(textStyle: textTheme?.display3),
      display2: GoogleFonts.frijole(textStyle: textTheme?.display2),
      display1: GoogleFonts.frijole(textStyle: textTheme?.display1),
      headline: GoogleFonts.frijole(textStyle: textTheme?.headline),
      title: GoogleFonts.frijole(textStyle: textTheme?.title),
      subhead: GoogleFonts.frijole(textStyle: textTheme?.subhead),
      body2: GoogleFonts.frijole(textStyle: textTheme?.body2),
      body1: GoogleFonts.frijole(textStyle: textTheme?.body1),
      caption: GoogleFonts.frijole(textStyle: textTheme?.caption),
      button: GoogleFonts.frijole(textStyle: textTheme?.button),
      subtitle: GoogleFonts.frijole(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.frijole(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fruktur font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fruktur
  static TextStyle fruktur({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fruktur/v12/SZc53FHsOru5QYsMfz3GkUrS8DI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Fruktur',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fruktur font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fruktur
  static TextTheme frukturTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fruktur(textStyle: textTheme?.display4),
      display3: GoogleFonts.fruktur(textStyle: textTheme?.display3),
      display2: GoogleFonts.fruktur(textStyle: textTheme?.display2),
      display1: GoogleFonts.fruktur(textStyle: textTheme?.display1),
      headline: GoogleFonts.fruktur(textStyle: textTheme?.headline),
      title: GoogleFonts.fruktur(textStyle: textTheme?.title),
      subhead: GoogleFonts.fruktur(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fruktur(textStyle: textTheme?.body2),
      body1: GoogleFonts.fruktur(textStyle: textTheme?.body1),
      caption: GoogleFonts.fruktur(textStyle: textTheme?.caption),
      button: GoogleFonts.fruktur(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fruktur(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fruktur(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Fugaz One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fugaz+One
  static TextStyle fugazOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/fugazone/v9/rax_HiWKp9EAITukFslMBBJek0vA8A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'FugazOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Fugaz One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Fugaz+One
  static TextTheme fugazOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.fugazOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.fugazOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.fugazOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.fugazOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.fugazOne(textStyle: textTheme?.headline),
      title: GoogleFonts.fugazOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.fugazOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.fugazOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.fugazOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.fugazOne(textStyle: textTheme?.caption),
      button: GoogleFonts.fugazOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.fugazOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.fugazOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the GFS Didot font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/GFS+Didot
  static TextStyle gFSDidot({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gfsdidot/v9/Jqzh5TybZ9vZMWFssvwiF-fGFSCGAA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GFSDidot',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the GFS Didot font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/GFS+Didot
  static TextTheme gFSDidotTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gFSDidot(textStyle: textTheme?.display4),
      display3: GoogleFonts.gFSDidot(textStyle: textTheme?.display3),
      display2: GoogleFonts.gFSDidot(textStyle: textTheme?.display2),
      display1: GoogleFonts.gFSDidot(textStyle: textTheme?.display1),
      headline: GoogleFonts.gFSDidot(textStyle: textTheme?.headline),
      title: GoogleFonts.gFSDidot(textStyle: textTheme?.title),
      subhead: GoogleFonts.gFSDidot(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gFSDidot(textStyle: textTheme?.body2),
      body1: GoogleFonts.gFSDidot(textStyle: textTheme?.body1),
      caption: GoogleFonts.gFSDidot(textStyle: textTheme?.caption),
      button: GoogleFonts.gFSDidot(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gFSDidot(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gFSDidot(textStyle: textTheme?.overline),
    );
  }

  /// Applies the GFS Neohellenic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/GFS+Neohellenic
  static TextStyle gFSNeohellenic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gfsneohellenic/v12/8QIRdiDOrfiq0b7R8O1Iw9WLcY5TLahP46UDUw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/gfsneohellenic/v12/8QITdiDOrfiq0b7R8O1Iw9WLcY5jL6JLwaATU91X.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gfsneohellenic/v12/8QIUdiDOrfiq0b7R8O1Iw9WLcY5rkYdr644fWsRO9w.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/gfsneohellenic/v12/8QIWdiDOrfiq0b7R8O1Iw9WLcY5jL5r37oQbeMFe985V.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GFSNeohellenic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the GFS Neohellenic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/GFS+Neohellenic
  static TextTheme gFSNeohellenicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.display4),
      display3: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.display3),
      display2: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.display2),
      display1: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.display1),
      headline: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.headline),
      title: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.title),
      subhead: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.body2),
      body1: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.body1),
      caption: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.caption),
      button: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gFSNeohellenic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gabriela font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gabriela
  static TextStyle gabriela({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gabriela/v8/qkBWXvsO6sreR8E-b_m-zrpHmRzC.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gabriela',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gabriela font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gabriela
  static TextTheme gabrielaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gabriela(textStyle: textTheme?.display4),
      display3: GoogleFonts.gabriela(textStyle: textTheme?.display3),
      display2: GoogleFonts.gabriela(textStyle: textTheme?.display2),
      display1: GoogleFonts.gabriela(textStyle: textTheme?.display1),
      headline: GoogleFonts.gabriela(textStyle: textTheme?.headline),
      title: GoogleFonts.gabriela(textStyle: textTheme?.title),
      subhead: GoogleFonts.gabriela(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gabriela(textStyle: textTheme?.body2),
      body1: GoogleFonts.gabriela(textStyle: textTheme?.body1),
      caption: GoogleFonts.gabriela(textStyle: textTheme?.caption),
      button: GoogleFonts.gabriela(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gabriela(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gabriela(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gaegu font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gaegu
  static TextStyle gaegu({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/gaegu/v8/TuGSUVB6Up9NU57nifw74sdtBk0x.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gaegu/v8/TuGfUVB6Up9NU6ZLodgzydtk.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gaegu/v8/TuGSUVB6Up9NU573jvw74sdtBk0x.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gaegu',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gaegu font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gaegu
  static TextTheme gaeguTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gaegu(textStyle: textTheme?.display4),
      display3: GoogleFonts.gaegu(textStyle: textTheme?.display3),
      display2: GoogleFonts.gaegu(textStyle: textTheme?.display2),
      display1: GoogleFonts.gaegu(textStyle: textTheme?.display1),
      headline: GoogleFonts.gaegu(textStyle: textTheme?.headline),
      title: GoogleFonts.gaegu(textStyle: textTheme?.title),
      subhead: GoogleFonts.gaegu(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gaegu(textStyle: textTheme?.body2),
      body1: GoogleFonts.gaegu(textStyle: textTheme?.body1),
      caption: GoogleFonts.gaegu(textStyle: textTheme?.caption),
      button: GoogleFonts.gaegu(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gaegu(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gaegu(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gafata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gafata
  static TextStyle gafata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gafata/v8/XRXV3I6Cn0VJKon4MuyAbsrVcA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gafata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gafata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gafata
  static TextTheme gafataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gafata(textStyle: textTheme?.display4),
      display3: GoogleFonts.gafata(textStyle: textTheme?.display3),
      display2: GoogleFonts.gafata(textStyle: textTheme?.display2),
      display1: GoogleFonts.gafata(textStyle: textTheme?.display1),
      headline: GoogleFonts.gafata(textStyle: textTheme?.headline),
      title: GoogleFonts.gafata(textStyle: textTheme?.title),
      subhead: GoogleFonts.gafata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gafata(textStyle: textTheme?.body2),
      body1: GoogleFonts.gafata(textStyle: textTheme?.body1),
      caption: GoogleFonts.gafata(textStyle: textTheme?.caption),
      button: GoogleFonts.gafata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gafata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gafata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Galada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galada
  static TextStyle galada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/galada/v5/H4cmBXyGmcjXlUX-8iw-4Lqggw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Galada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Galada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galada
  static TextTheme galadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.galada(textStyle: textTheme?.display4),
      display3: GoogleFonts.galada(textStyle: textTheme?.display3),
      display2: GoogleFonts.galada(textStyle: textTheme?.display2),
      display1: GoogleFonts.galada(textStyle: textTheme?.display1),
      headline: GoogleFonts.galada(textStyle: textTheme?.headline),
      title: GoogleFonts.galada(textStyle: textTheme?.title),
      subhead: GoogleFonts.galada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.galada(textStyle: textTheme?.body2),
      body1: GoogleFonts.galada(textStyle: textTheme?.body1),
      caption: GoogleFonts.galada(textStyle: textTheme?.caption),
      button: GoogleFonts.galada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.galada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.galada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Galdeano font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galdeano
  static TextStyle galdeano({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/galdeano/v9/uU9MCBoQ4YOqOW1boDPx8PCOg0uX.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Galdeano',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Galdeano font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galdeano
  static TextTheme galdeanoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.galdeano(textStyle: textTheme?.display4),
      display3: GoogleFonts.galdeano(textStyle: textTheme?.display3),
      display2: GoogleFonts.galdeano(textStyle: textTheme?.display2),
      display1: GoogleFonts.galdeano(textStyle: textTheme?.display1),
      headline: GoogleFonts.galdeano(textStyle: textTheme?.headline),
      title: GoogleFonts.galdeano(textStyle: textTheme?.title),
      subhead: GoogleFonts.galdeano(textStyle: textTheme?.subhead),
      body2: GoogleFonts.galdeano(textStyle: textTheme?.body2),
      body1: GoogleFonts.galdeano(textStyle: textTheme?.body1),
      caption: GoogleFonts.galdeano(textStyle: textTheme?.caption),
      button: GoogleFonts.galdeano(textStyle: textTheme?.button),
      subtitle: GoogleFonts.galdeano(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.galdeano(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Galindo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galindo
  static TextStyle galindo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/galindo/v7/HI_KiYMeLqVKqwyuQ5HiRp-dhpQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Galindo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Galindo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Galindo
  static TextTheme galindoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.galindo(textStyle: textTheme?.display4),
      display3: GoogleFonts.galindo(textStyle: textTheme?.display3),
      display2: GoogleFonts.galindo(textStyle: textTheme?.display2),
      display1: GoogleFonts.galindo(textStyle: textTheme?.display1),
      headline: GoogleFonts.galindo(textStyle: textTheme?.headline),
      title: GoogleFonts.galindo(textStyle: textTheme?.title),
      subhead: GoogleFonts.galindo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.galindo(textStyle: textTheme?.body2),
      body1: GoogleFonts.galindo(textStyle: textTheme?.body1),
      caption: GoogleFonts.galindo(textStyle: textTheme?.caption),
      button: GoogleFonts.galindo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.galindo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.galindo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gamja Flower font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gamja+Flower
  static TextStyle gamjaFlower({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gamjaflower/v8/6NUR8FiKJg-Pa0rM6uN40Z4kyf9Fdty2ew.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GamjaFlower',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gamja Flower font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gamja+Flower
  static TextTheme gamjaFlowerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gamjaFlower(textStyle: textTheme?.display4),
      display3: GoogleFonts.gamjaFlower(textStyle: textTheme?.display3),
      display2: GoogleFonts.gamjaFlower(textStyle: textTheme?.display2),
      display1: GoogleFonts.gamjaFlower(textStyle: textTheme?.display1),
      headline: GoogleFonts.gamjaFlower(textStyle: textTheme?.headline),
      title: GoogleFonts.gamjaFlower(textStyle: textTheme?.title),
      subhead: GoogleFonts.gamjaFlower(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gamjaFlower(textStyle: textTheme?.body2),
      body1: GoogleFonts.gamjaFlower(textStyle: textTheme?.body1),
      caption: GoogleFonts.gamjaFlower(textStyle: textTheme?.caption),
      button: GoogleFonts.gamjaFlower(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gamjaFlower(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gamjaFlower(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gayathri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gayathri
  static TextStyle gayathri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/gayathri/v1/MCoWzAb429DbBilWLLhc-pvSA_gA2W8.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gayathri/v1/MCoQzAb429DbBilWLIA48J_wBugA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gayathri/v1/MCoXzAb429DbBilWLLiE37v4LfQJwHbn.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gayathri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gayathri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gayathri
  static TextTheme gayathriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gayathri(textStyle: textTheme?.display4),
      display3: GoogleFonts.gayathri(textStyle: textTheme?.display3),
      display2: GoogleFonts.gayathri(textStyle: textTheme?.display2),
      display1: GoogleFonts.gayathri(textStyle: textTheme?.display1),
      headline: GoogleFonts.gayathri(textStyle: textTheme?.headline),
      title: GoogleFonts.gayathri(textStyle: textTheme?.title),
      subhead: GoogleFonts.gayathri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gayathri(textStyle: textTheme?.body2),
      body1: GoogleFonts.gayathri(textStyle: textTheme?.body1),
      caption: GoogleFonts.gayathri(textStyle: textTheme?.caption),
      button: GoogleFonts.gayathri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gayathri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gayathri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gelasio font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gelasio
  static TextStyle gelasio({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gelasio/v1/cIf9MaFfvUQxTTqSxCmrYGkHgIs.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/gelasio/v1/cIf_MaFfvUQxTTqS9CuhZEsCkIt9QQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/gelasio/v1/cIf4MaFfvUQxTTqS_N2CRGEsnIJkWL4.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/gelasio/v1/cIf6MaFfvUQxTTqS9CuZkGImmKBhSL7Y1Q.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/gelasio/v1/cIf4MaFfvUQxTTqS_PGFRGEsnIJkWL4.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/gelasio/v1/cIf6MaFfvUQxTTqS9CuZvGUmmKBhSL7Y1Q.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gelasio/v1/cIf4MaFfvUQxTTqS_JWERGEsnIJkWL4.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/gelasio/v1/cIf6MaFfvUQxTTqS9CuZ2GQmmKBhSL7Y1Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gelasio',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gelasio font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gelasio
  static TextTheme gelasioTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gelasio(textStyle: textTheme?.display4),
      display3: GoogleFonts.gelasio(textStyle: textTheme?.display3),
      display2: GoogleFonts.gelasio(textStyle: textTheme?.display2),
      display1: GoogleFonts.gelasio(textStyle: textTheme?.display1),
      headline: GoogleFonts.gelasio(textStyle: textTheme?.headline),
      title: GoogleFonts.gelasio(textStyle: textTheme?.title),
      subhead: GoogleFonts.gelasio(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gelasio(textStyle: textTheme?.body2),
      body1: GoogleFonts.gelasio(textStyle: textTheme?.body1),
      caption: GoogleFonts.gelasio(textStyle: textTheme?.caption),
      button: GoogleFonts.gelasio(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gelasio(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gelasio(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gentium Basic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gentium+Basic
  static TextStyle gentiumBasic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gentiumbasic/v11/Wnz9HAw9aB_JD2VGQVR80We3HAqDiTI_cIM.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/gentiumbasic/v11/WnzjHAw9aB_JD2VGQVR80We3LAiJjRA6YIORZQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gentiumbasic/v11/WnzgHAw9aB_JD2VGQVR80We3JLasrToUbIqIfBU.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/gentiumbasic/v11/WnzmHAw9aB_JD2VGQVR80We3LAixMT8eaKiNbBVWkw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GentiumBasic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gentium Basic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gentium+Basic
  static TextTheme gentiumBasicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gentiumBasic(textStyle: textTheme?.display4),
      display3: GoogleFonts.gentiumBasic(textStyle: textTheme?.display3),
      display2: GoogleFonts.gentiumBasic(textStyle: textTheme?.display2),
      display1: GoogleFonts.gentiumBasic(textStyle: textTheme?.display1),
      headline: GoogleFonts.gentiumBasic(textStyle: textTheme?.headline),
      title: GoogleFonts.gentiumBasic(textStyle: textTheme?.title),
      subhead: GoogleFonts.gentiumBasic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gentiumBasic(textStyle: textTheme?.body2),
      body1: GoogleFonts.gentiumBasic(textStyle: textTheme?.body1),
      caption: GoogleFonts.gentiumBasic(textStyle: textTheme?.caption),
      button: GoogleFonts.gentiumBasic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gentiumBasic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gentiumBasic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gentium Book Basic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gentium+Book+Basic
  static TextStyle gentiumBookBasic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gentiumbookbasic/v10/pe0zMJCbPYBVokB1LHA9bbyaQb8ZGjcIV7t7w6bE2A.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/gentiumbookbasic/v10/pe0xMJCbPYBVokB1LHA9bbyaQb8ZGjc4VbF_4aPU2Ec9.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gentiumbookbasic/v10/pe0wMJCbPYBVokB1LHA9bbyaQb8ZGjcw65Rfy43Y0V4kvg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/gentiumbookbasic/v10/pe0-MJCbPYBVokB1LHA9bbyaQb8ZGjc4VYnDzofc81s0voO3.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GentiumBookBasic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gentium Book Basic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gentium+Book+Basic
  static TextTheme gentiumBookBasicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.display4),
      display3: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.display3),
      display2: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.display2),
      display1: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.display1),
      headline: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.headline),
      title: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.title),
      subhead: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.body2),
      body1: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.body1),
      caption: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.caption),
      button: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gentiumBookBasic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Geo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geo
  static TextStyle geo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/geo/v11/CSRz4zRZlufVL3BmQjlCbQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/geo/v11/CSRx4zRZluflLXpiYDxSbf8r.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Geo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Geo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geo
  static TextTheme geoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.geo(textStyle: textTheme?.display4),
      display3: GoogleFonts.geo(textStyle: textTheme?.display3),
      display2: GoogleFonts.geo(textStyle: textTheme?.display2),
      display1: GoogleFonts.geo(textStyle: textTheme?.display1),
      headline: GoogleFonts.geo(textStyle: textTheme?.headline),
      title: GoogleFonts.geo(textStyle: textTheme?.title),
      subhead: GoogleFonts.geo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.geo(textStyle: textTheme?.body2),
      body1: GoogleFonts.geo(textStyle: textTheme?.body1),
      caption: GoogleFonts.geo(textStyle: textTheme?.caption),
      button: GoogleFonts.geo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.geo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.geo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Geostar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geostar
  static TextStyle geostar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/geostar/v10/sykz-yx4n701VLOftSq9-trEvlQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Geostar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Geostar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geostar
  static TextTheme geostarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.geostar(textStyle: textTheme?.display4),
      display3: GoogleFonts.geostar(textStyle: textTheme?.display3),
      display2: GoogleFonts.geostar(textStyle: textTheme?.display2),
      display1: GoogleFonts.geostar(textStyle: textTheme?.display1),
      headline: GoogleFonts.geostar(textStyle: textTheme?.headline),
      title: GoogleFonts.geostar(textStyle: textTheme?.title),
      subhead: GoogleFonts.geostar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.geostar(textStyle: textTheme?.body2),
      body1: GoogleFonts.geostar(textStyle: textTheme?.body1),
      caption: GoogleFonts.geostar(textStyle: textTheme?.caption),
      button: GoogleFonts.geostar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.geostar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.geostar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Geostar Fill font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geostar+Fill
  static TextStyle geostarFill({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/geostarfill/v10/AMOWz4SWuWiXFfjEohxQ9os0U1K2w9lb4g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GeostarFill',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Geostar Fill font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Geostar+Fill
  static TextTheme geostarFillTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.geostarFill(textStyle: textTheme?.display4),
      display3: GoogleFonts.geostarFill(textStyle: textTheme?.display3),
      display2: GoogleFonts.geostarFill(textStyle: textTheme?.display2),
      display1: GoogleFonts.geostarFill(textStyle: textTheme?.display1),
      headline: GoogleFonts.geostarFill(textStyle: textTheme?.headline),
      title: GoogleFonts.geostarFill(textStyle: textTheme?.title),
      subhead: GoogleFonts.geostarFill(textStyle: textTheme?.subhead),
      body2: GoogleFonts.geostarFill(textStyle: textTheme?.body2),
      body1: GoogleFonts.geostarFill(textStyle: textTheme?.body1),
      caption: GoogleFonts.geostarFill(textStyle: textTheme?.caption),
      button: GoogleFonts.geostarFill(textStyle: textTheme?.button),
      subtitle: GoogleFonts.geostarFill(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.geostarFill(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Germania One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Germania+One
  static TextStyle germaniaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/germaniaone/v7/Fh4yPjrqIyv2ucM2qzBjeS3ezAJONau6ew.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GermaniaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Germania One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Germania+One
  static TextTheme germaniaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.germaniaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.germaniaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.germaniaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.germaniaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.germaniaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.germaniaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.germaniaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.germaniaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.germaniaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.germaniaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.germaniaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.germaniaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.germaniaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gidugu font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gidugu
  static TextStyle gidugu({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gidugu/v6/L0x8DFMkk1Uf6w3RvPCmRSlUig.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gidugu',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gidugu font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gidugu
  static TextTheme giduguTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gidugu(textStyle: textTheme?.display4),
      display3: GoogleFonts.gidugu(textStyle: textTheme?.display3),
      display2: GoogleFonts.gidugu(textStyle: textTheme?.display2),
      display1: GoogleFonts.gidugu(textStyle: textTheme?.display1),
      headline: GoogleFonts.gidugu(textStyle: textTheme?.headline),
      title: GoogleFonts.gidugu(textStyle: textTheme?.title),
      subhead: GoogleFonts.gidugu(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gidugu(textStyle: textTheme?.body2),
      body1: GoogleFonts.gidugu(textStyle: textTheme?.body1),
      caption: GoogleFonts.gidugu(textStyle: textTheme?.caption),
      button: GoogleFonts.gidugu(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gidugu(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gidugu(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gilda Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gilda+Display
  static TextStyle gildaDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gildadisplay/v7/t5tmIRoYMoaYG0WEOh7HwMeR7TnFrpOHYh4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GildaDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gilda Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gilda+Display
  static TextTheme gildaDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gildaDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.gildaDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.gildaDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.gildaDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.gildaDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.gildaDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.gildaDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gildaDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.gildaDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.gildaDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.gildaDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gildaDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gildaDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Girassol font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Girassol
  static TextStyle girassol({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/girassol/v1/JTUUjIo_-DK48laaNC9Nz2pJzxbi.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Girassol',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Girassol font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Girassol
  static TextTheme girassolTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.girassol(textStyle: textTheme?.display4),
      display3: GoogleFonts.girassol(textStyle: textTheme?.display3),
      display2: GoogleFonts.girassol(textStyle: textTheme?.display2),
      display1: GoogleFonts.girassol(textStyle: textTheme?.display1),
      headline: GoogleFonts.girassol(textStyle: textTheme?.headline),
      title: GoogleFonts.girassol(textStyle: textTheme?.title),
      subhead: GoogleFonts.girassol(textStyle: textTheme?.subhead),
      body2: GoogleFonts.girassol(textStyle: textTheme?.body2),
      body1: GoogleFonts.girassol(textStyle: textTheme?.body1),
      caption: GoogleFonts.girassol(textStyle: textTheme?.caption),
      button: GoogleFonts.girassol(textStyle: textTheme?.button),
      subtitle: GoogleFonts.girassol(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.girassol(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Give You Glory font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Give+You+Glory
  static TextStyle giveYouGlory({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/giveyouglory/v9/8QIQdiHOgt3vv4LR7ahjw9-XYc1zB4ZD6rwa.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GiveYouGlory',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Give You Glory font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Give+You+Glory
  static TextTheme giveYouGloryTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.giveYouGlory(textStyle: textTheme?.display4),
      display3: GoogleFonts.giveYouGlory(textStyle: textTheme?.display3),
      display2: GoogleFonts.giveYouGlory(textStyle: textTheme?.display2),
      display1: GoogleFonts.giveYouGlory(textStyle: textTheme?.display1),
      headline: GoogleFonts.giveYouGlory(textStyle: textTheme?.headline),
      title: GoogleFonts.giveYouGlory(textStyle: textTheme?.title),
      subhead: GoogleFonts.giveYouGlory(textStyle: textTheme?.subhead),
      body2: GoogleFonts.giveYouGlory(textStyle: textTheme?.body2),
      body1: GoogleFonts.giveYouGlory(textStyle: textTheme?.body1),
      caption: GoogleFonts.giveYouGlory(textStyle: textTheme?.caption),
      button: GoogleFonts.giveYouGlory(textStyle: textTheme?.button),
      subtitle: GoogleFonts.giveYouGlory(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.giveYouGlory(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Glass Antiqua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Glass+Antiqua
  static TextStyle glassAntiqua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/glassantiqua/v7/xfu30Wr0Wn3NOQM2piC0uXOjnL_wN6fRUkY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GlassAntiqua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Glass Antiqua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Glass+Antiqua
  static TextTheme glassAntiquaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.glassAntiqua(textStyle: textTheme?.display4),
      display3: GoogleFonts.glassAntiqua(textStyle: textTheme?.display3),
      display2: GoogleFonts.glassAntiqua(textStyle: textTheme?.display2),
      display1: GoogleFonts.glassAntiqua(textStyle: textTheme?.display1),
      headline: GoogleFonts.glassAntiqua(textStyle: textTheme?.headline),
      title: GoogleFonts.glassAntiqua(textStyle: textTheme?.title),
      subhead: GoogleFonts.glassAntiqua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.glassAntiqua(textStyle: textTheme?.body2),
      body1: GoogleFonts.glassAntiqua(textStyle: textTheme?.body1),
      caption: GoogleFonts.glassAntiqua(textStyle: textTheme?.caption),
      button: GoogleFonts.glassAntiqua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.glassAntiqua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.glassAntiqua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Glegoo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Glegoo
  static TextStyle glegoo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/glegoo/v9/_Xmt-HQyrTKWaw2Ji6mZAI91xw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/glegoo/v9/_Xmu-HQyrTKWaw2xN4a9CKRpzimMsg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Glegoo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Glegoo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Glegoo
  static TextTheme glegooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.glegoo(textStyle: textTheme?.display4),
      display3: GoogleFonts.glegoo(textStyle: textTheme?.display3),
      display2: GoogleFonts.glegoo(textStyle: textTheme?.display2),
      display1: GoogleFonts.glegoo(textStyle: textTheme?.display1),
      headline: GoogleFonts.glegoo(textStyle: textTheme?.headline),
      title: GoogleFonts.glegoo(textStyle: textTheme?.title),
      subhead: GoogleFonts.glegoo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.glegoo(textStyle: textTheme?.body2),
      body1: GoogleFonts.glegoo(textStyle: textTheme?.body1),
      caption: GoogleFonts.glegoo(textStyle: textTheme?.caption),
      button: GoogleFonts.glegoo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.glegoo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.glegoo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gloria Hallelujah font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gloria+Hallelujah
  static TextStyle gloriaHallelujah({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gloriahallelujah/v11/LYjYdHv3kUk9BMV96EIswT9DIbW-MLSy3TKEvkCF.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GloriaHallelujah',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gloria Hallelujah font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gloria+Hallelujah
  static TextTheme gloriaHallelujahTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.display4),
      display3: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.display3),
      display2: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.display2),
      display1: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.display1),
      headline: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.headline),
      title: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.title),
      subhead: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.body2),
      body1: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.body1),
      caption: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.caption),
      button: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gloriaHallelujah(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Goblin One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Goblin+One
  static TextStyle goblinOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/goblinone/v9/CSR64z1ZnOqZRjRCBVY_TOcATNt_pOU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GoblinOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Goblin One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Goblin+One
  static TextTheme goblinOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.goblinOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.goblinOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.goblinOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.goblinOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.goblinOne(textStyle: textTheme?.headline),
      title: GoogleFonts.goblinOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.goblinOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.goblinOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.goblinOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.goblinOne(textStyle: textTheme?.caption),
      button: GoogleFonts.goblinOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.goblinOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.goblinOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gochi Hand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gochi+Hand
  static TextStyle gochiHand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gochihand/v10/hES06XlsOjtJsgCkx1PkTo71-n0nXWA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GochiHand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gochi Hand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gochi+Hand
  static TextTheme gochiHandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gochiHand(textStyle: textTheme?.display4),
      display3: GoogleFonts.gochiHand(textStyle: textTheme?.display3),
      display2: GoogleFonts.gochiHand(textStyle: textTheme?.display2),
      display1: GoogleFonts.gochiHand(textStyle: textTheme?.display1),
      headline: GoogleFonts.gochiHand(textStyle: textTheme?.headline),
      title: GoogleFonts.gochiHand(textStyle: textTheme?.title),
      subhead: GoogleFonts.gochiHand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gochiHand(textStyle: textTheme?.body2),
      body1: GoogleFonts.gochiHand(textStyle: textTheme?.body1),
      caption: GoogleFonts.gochiHand(textStyle: textTheme?.caption),
      button: GoogleFonts.gochiHand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gochiHand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gochiHand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gorditas font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gorditas
  static TextStyle gorditas({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gorditas/v7/ll8_K2aTVD26DsPEtQDoDa4AlxYb.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gorditas/v7/ll84K2aTVD26DsPEtThUIooIvAoShA1i.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gorditas',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gorditas font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gorditas
  static TextTheme gorditasTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gorditas(textStyle: textTheme?.display4),
      display3: GoogleFonts.gorditas(textStyle: textTheme?.display3),
      display2: GoogleFonts.gorditas(textStyle: textTheme?.display2),
      display1: GoogleFonts.gorditas(textStyle: textTheme?.display1),
      headline: GoogleFonts.gorditas(textStyle: textTheme?.headline),
      title: GoogleFonts.gorditas(textStyle: textTheme?.title),
      subhead: GoogleFonts.gorditas(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gorditas(textStyle: textTheme?.body2),
      body1: GoogleFonts.gorditas(textStyle: textTheme?.body1),
      caption: GoogleFonts.gorditas(textStyle: textTheme?.caption),
      button: GoogleFonts.gorditas(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gorditas(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gorditas(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gothic A1 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gothic+A1
  static TextStyle gothicA1({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR74z5ZnPydRjlCCwlCCMcqYtd2vfwk.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR44z5ZnPydRjlCCwlCpOYKSPl6tOU9Eg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR44z5ZnPydRjlCCwlCwOUKSPl6tOU9Eg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR94z5ZnPydRjlCCwl6bM0uQNJmvQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR44z5ZnPydRjlCCwlCmOQKSPl6tOU9Eg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR44z5ZnPydRjlCCwlCtOMKSPl6tOU9Eg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR44z5ZnPydRjlCCwlC0OIKSPl6tOU9Eg.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR44z5ZnPydRjlCCwlCzOEKSPl6tOU9Eg.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/gothica1/v8/CSR44z5ZnPydRjlCCwlC6OAKSPl6tOU9Eg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GothicA1',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gothic A1 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gothic+A1
  static TextTheme gothicA1TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gothicA1(textStyle: textTheme?.display4),
      display3: GoogleFonts.gothicA1(textStyle: textTheme?.display3),
      display2: GoogleFonts.gothicA1(textStyle: textTheme?.display2),
      display1: GoogleFonts.gothicA1(textStyle: textTheme?.display1),
      headline: GoogleFonts.gothicA1(textStyle: textTheme?.headline),
      title: GoogleFonts.gothicA1(textStyle: textTheme?.title),
      subhead: GoogleFonts.gothicA1(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gothicA1(textStyle: textTheme?.body2),
      body1: GoogleFonts.gothicA1(textStyle: textTheme?.body1),
      caption: GoogleFonts.gothicA1(textStyle: textTheme?.caption),
      button: GoogleFonts.gothicA1(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gothicA1(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gothicA1(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Goudy Bookletter 1911 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Goudy+Bookletter+1911
  static TextStyle goudyBookletter1911({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/goudybookletter1911/v9/sykt-z54laciWfKv-kX8krex0jDiD2HbY6I5tRbXZ4IXAA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GoudyBookletter1911',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Goudy Bookletter 1911 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Goudy+Bookletter+1911
  static TextTheme goudyBookletter1911TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.display4),
      display3: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.display3),
      display2: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.display2),
      display1: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.display1),
      headline: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.headline),
      title: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.title),
      subhead: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.subhead),
      body2: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.body2),
      body1: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.body1),
      caption: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.caption),
      button: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.button),
      subtitle: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.goudyBookletter1911(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Graduate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Graduate
  static TextStyle graduate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/graduate/v7/C8cg4cs3o2n15t_2YxgR6X2NZAn2.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Graduate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Graduate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Graduate
  static TextTheme graduateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.graduate(textStyle: textTheme?.display4),
      display3: GoogleFonts.graduate(textStyle: textTheme?.display3),
      display2: GoogleFonts.graduate(textStyle: textTheme?.display2),
      display1: GoogleFonts.graduate(textStyle: textTheme?.display1),
      headline: GoogleFonts.graduate(textStyle: textTheme?.headline),
      title: GoogleFonts.graduate(textStyle: textTheme?.title),
      subhead: GoogleFonts.graduate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.graduate(textStyle: textTheme?.body2),
      body1: GoogleFonts.graduate(textStyle: textTheme?.body1),
      caption: GoogleFonts.graduate(textStyle: textTheme?.caption),
      button: GoogleFonts.graduate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.graduate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.graduate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Grand Hotel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Grand+Hotel
  static TextStyle grandHotel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/grandhotel/v7/7Au7p_IgjDKdCRWuR1azpmQNEl0O0kEx.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GrandHotel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Grand Hotel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Grand+Hotel
  static TextTheme grandHotelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.grandHotel(textStyle: textTheme?.display4),
      display3: GoogleFonts.grandHotel(textStyle: textTheme?.display3),
      display2: GoogleFonts.grandHotel(textStyle: textTheme?.display2),
      display1: GoogleFonts.grandHotel(textStyle: textTheme?.display1),
      headline: GoogleFonts.grandHotel(textStyle: textTheme?.headline),
      title: GoogleFonts.grandHotel(textStyle: textTheme?.title),
      subhead: GoogleFonts.grandHotel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.grandHotel(textStyle: textTheme?.body2),
      body1: GoogleFonts.grandHotel(textStyle: textTheme?.body1),
      caption: GoogleFonts.grandHotel(textStyle: textTheme?.caption),
      button: GoogleFonts.grandHotel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.grandHotel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.grandHotel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gravitas One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gravitas+One
  static TextStyle gravitasOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gravitasone/v9/5h1diZ4hJ3cblKy3LWakKQmaDWRNr3DzbQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GravitasOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gravitas One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gravitas+One
  static TextTheme gravitasOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gravitasOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.gravitasOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.gravitasOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.gravitasOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.gravitasOne(textStyle: textTheme?.headline),
      title: GoogleFonts.gravitasOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.gravitasOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gravitasOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.gravitasOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.gravitasOne(textStyle: textTheme?.caption),
      button: GoogleFonts.gravitasOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gravitasOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gravitasOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Great Vibes font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Great+Vibes
  static TextStyle greatVibes({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/greatvibes/v7/RWmMoKWR9v4ksMfaWd_JN-XCg6UKDXlq.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'GreatVibes',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Great Vibes font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Great+Vibes
  static TextTheme greatVibesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.greatVibes(textStyle: textTheme?.display4),
      display3: GoogleFonts.greatVibes(textStyle: textTheme?.display3),
      display2: GoogleFonts.greatVibes(textStyle: textTheme?.display2),
      display1: GoogleFonts.greatVibes(textStyle: textTheme?.display1),
      headline: GoogleFonts.greatVibes(textStyle: textTheme?.headline),
      title: GoogleFonts.greatVibes(textStyle: textTheme?.title),
      subhead: GoogleFonts.greatVibes(textStyle: textTheme?.subhead),
      body2: GoogleFonts.greatVibes(textStyle: textTheme?.body2),
      body1: GoogleFonts.greatVibes(textStyle: textTheme?.body1),
      caption: GoogleFonts.greatVibes(textStyle: textTheme?.caption),
      button: GoogleFonts.greatVibes(textStyle: textTheme?.button),
      subtitle: GoogleFonts.greatVibes(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.greatVibes(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Grenze font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Grenze
  static TextStyle grenze({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZRFGb7hR12BxqPm2IjuAkalnmd.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZXFGb7hR12BxqH_VpHsg04k2md0kI.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZQFGb7hR12BxqPN0MDkicWn2CEyw.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZWFGb7hR12BxqH_Vrrky0SvWWUy1uW.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZQFGb7hR12BxqPU0ADkicWn2CEyw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZWFGb7hR12BxqH_VqPkC0SvWWUy1uW.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZTFGb7hR12Bxq3_2gnmgwKlg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZRFGb7hR12BxqH_WIjuAkalnmd.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZQFGb7hR12BxqPC0EDkicWn2CEyw.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZWFGb7hR12BxqH_VrXkS0SvWWUy1uW.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZQFGb7hR12BxqPJ0YDkicWn2CEyw.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZWFGb7hR12BxqH_Vr7li0SvWWUy1uW.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZQFGb7hR12BxqPQ0cDkicWn2CEyw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZWFGb7hR12BxqH_Vqfly0SvWWUy1uW.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZQFGb7hR12BxqPX0QDkicWn2CEyw.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZWFGb7hR12BxqH_VqDlC0SvWWUy1uW.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZQFGb7hR12BxqPe0UDkicWn2CEyw.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/grenze/v1/O4ZWFGb7hR12BxqH_VqnlS0SvWWUy1uW.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Grenze',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Grenze font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Grenze
  static TextTheme grenzeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.grenze(textStyle: textTheme?.display4),
      display3: GoogleFonts.grenze(textStyle: textTheme?.display3),
      display2: GoogleFonts.grenze(textStyle: textTheme?.display2),
      display1: GoogleFonts.grenze(textStyle: textTheme?.display1),
      headline: GoogleFonts.grenze(textStyle: textTheme?.headline),
      title: GoogleFonts.grenze(textStyle: textTheme?.title),
      subhead: GoogleFonts.grenze(textStyle: textTheme?.subhead),
      body2: GoogleFonts.grenze(textStyle: textTheme?.body2),
      body1: GoogleFonts.grenze(textStyle: textTheme?.body1),
      caption: GoogleFonts.grenze(textStyle: textTheme?.caption),
      button: GoogleFonts.grenze(textStyle: textTheme?.button),
      subtitle: GoogleFonts.grenze(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.grenze(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Griffy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Griffy
  static TextStyle griffy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/griffy/v8/FwZa7-ox2FQh9kfwSNSEwM2zpA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Griffy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Griffy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Griffy
  static TextTheme griffyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.griffy(textStyle: textTheme?.display4),
      display3: GoogleFonts.griffy(textStyle: textTheme?.display3),
      display2: GoogleFonts.griffy(textStyle: textTheme?.display2),
      display1: GoogleFonts.griffy(textStyle: textTheme?.display1),
      headline: GoogleFonts.griffy(textStyle: textTheme?.headline),
      title: GoogleFonts.griffy(textStyle: textTheme?.title),
      subhead: GoogleFonts.griffy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.griffy(textStyle: textTheme?.body2),
      body1: GoogleFonts.griffy(textStyle: textTheme?.body1),
      caption: GoogleFonts.griffy(textStyle: textTheme?.caption),
      button: GoogleFonts.griffy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.griffy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.griffy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gruppo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gruppo
  static TextStyle gruppo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gruppo/v10/WwkfxPmzE06v_ZWFWXDAOIEQUQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gruppo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gruppo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gruppo
  static TextTheme gruppoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gruppo(textStyle: textTheme?.display4),
      display3: GoogleFonts.gruppo(textStyle: textTheme?.display3),
      display2: GoogleFonts.gruppo(textStyle: textTheme?.display2),
      display1: GoogleFonts.gruppo(textStyle: textTheme?.display1),
      headline: GoogleFonts.gruppo(textStyle: textTheme?.headline),
      title: GoogleFonts.gruppo(textStyle: textTheme?.title),
      subhead: GoogleFonts.gruppo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gruppo(textStyle: textTheme?.body2),
      body1: GoogleFonts.gruppo(textStyle: textTheme?.body1),
      caption: GoogleFonts.gruppo(textStyle: textTheme?.caption),
      button: GoogleFonts.gruppo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gruppo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gruppo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gudea font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gudea
  static TextStyle gudea({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gudea/v9/neIFzCqgsI0mp-CP9IGON7Ez.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/gudea/v9/neILzCqgsI0mp9CN_oWsMqEzSJQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gudea/v9/neIIzCqgsI0mp9gz26WGHK06UY30.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gudea',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gudea font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gudea
  static TextTheme gudeaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gudea(textStyle: textTheme?.display4),
      display3: GoogleFonts.gudea(textStyle: textTheme?.display3),
      display2: GoogleFonts.gudea(textStyle: textTheme?.display2),
      display1: GoogleFonts.gudea(textStyle: textTheme?.display1),
      headline: GoogleFonts.gudea(textStyle: textTheme?.headline),
      title: GoogleFonts.gudea(textStyle: textTheme?.title),
      subhead: GoogleFonts.gudea(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gudea(textStyle: textTheme?.body2),
      body1: GoogleFonts.gudea(textStyle: textTheme?.body1),
      caption: GoogleFonts.gudea(textStyle: textTheme?.caption),
      button: GoogleFonts.gudea(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gudea(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gudea(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gugi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gugi
  static TextStyle gugi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gugi/v8/A2BVn5dXywshVA6A9DEfgqM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gugi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gugi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gugi
  static TextTheme gugiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gugi(textStyle: textTheme?.display4),
      display3: GoogleFonts.gugi(textStyle: textTheme?.display3),
      display2: GoogleFonts.gugi(textStyle: textTheme?.display2),
      display1: GoogleFonts.gugi(textStyle: textTheme?.display1),
      headline: GoogleFonts.gugi(textStyle: textTheme?.headline),
      title: GoogleFonts.gugi(textStyle: textTheme?.title),
      subhead: GoogleFonts.gugi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gugi(textStyle: textTheme?.body2),
      body1: GoogleFonts.gugi(textStyle: textTheme?.body1),
      caption: GoogleFonts.gugi(textStyle: textTheme?.caption),
      button: GoogleFonts.gugi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gugi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gugi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gupter font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gupter
  static TextStyle gupter({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gupter/v1/2-cm9JNmxJqPO1QUYZa_Wu_lpA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/gupter/v1/2-cl9JNmxJqPO1Qslb-bUsT5rZhaZg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/gupter/v1/2-cl9JNmxJqPO1Qs3bmbUsT5rZhaZg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gupter',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gupter font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gupter
  static TextTheme gupterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gupter(textStyle: textTheme?.display4),
      display3: GoogleFonts.gupter(textStyle: textTheme?.display3),
      display2: GoogleFonts.gupter(textStyle: textTheme?.display2),
      display1: GoogleFonts.gupter(textStyle: textTheme?.display1),
      headline: GoogleFonts.gupter(textStyle: textTheme?.headline),
      title: GoogleFonts.gupter(textStyle: textTheme?.title),
      subhead: GoogleFonts.gupter(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gupter(textStyle: textTheme?.body2),
      body1: GoogleFonts.gupter(textStyle: textTheme?.body1),
      caption: GoogleFonts.gupter(textStyle: textTheme?.caption),
      button: GoogleFonts.gupter(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gupter(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gupter(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Gurajada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gurajada
  static TextStyle gurajada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/gurajada/v7/FwZY7-Qx308m-l-0Kd6A4sijpFu_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Gurajada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Gurajada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Gurajada
  static TextTheme gurajadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.gurajada(textStyle: textTheme?.display4),
      display3: GoogleFonts.gurajada(textStyle: textTheme?.display3),
      display2: GoogleFonts.gurajada(textStyle: textTheme?.display2),
      display1: GoogleFonts.gurajada(textStyle: textTheme?.display1),
      headline: GoogleFonts.gurajada(textStyle: textTheme?.headline),
      title: GoogleFonts.gurajada(textStyle: textTheme?.title),
      subhead: GoogleFonts.gurajada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.gurajada(textStyle: textTheme?.body2),
      body1: GoogleFonts.gurajada(textStyle: textTheme?.body1),
      caption: GoogleFonts.gurajada(textStyle: textTheme?.caption),
      button: GoogleFonts.gurajada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.gurajada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.gurajada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Habibi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Habibi
  static TextStyle habibi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/habibi/v8/CSR-4zFWkuqcTTNCShJeZOYySQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Habibi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Habibi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Habibi
  static TextTheme habibiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.habibi(textStyle: textTheme?.display4),
      display3: GoogleFonts.habibi(textStyle: textTheme?.display3),
      display2: GoogleFonts.habibi(textStyle: textTheme?.display2),
      display1: GoogleFonts.habibi(textStyle: textTheme?.display1),
      headline: GoogleFonts.habibi(textStyle: textTheme?.headline),
      title: GoogleFonts.habibi(textStyle: textTheme?.title),
      subhead: GoogleFonts.habibi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.habibi(textStyle: textTheme?.body2),
      body1: GoogleFonts.habibi(textStyle: textTheme?.body1),
      caption: GoogleFonts.habibi(textStyle: textTheme?.caption),
      button: GoogleFonts.habibi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.habibi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.habibi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Halant font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Halant
  static TextStyle halant({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/halant/v7/u-490qaujRI2Pbsvc_pCmwZqcwdRXg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/halant/v7/u-4-0qaujRI2PbsX39Jmky12eg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/halant/v7/u-490qaujRI2PbsvK_tCmwZqcwdRXg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/halant/v7/u-490qaujRI2PbsvB_xCmwZqcwdRXg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/halant/v7/u-490qaujRI2PbsvY_1CmwZqcwdRXg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Halant',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Halant font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Halant
  static TextTheme halantTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.halant(textStyle: textTheme?.display4),
      display3: GoogleFonts.halant(textStyle: textTheme?.display3),
      display2: GoogleFonts.halant(textStyle: textTheme?.display2),
      display1: GoogleFonts.halant(textStyle: textTheme?.display1),
      headline: GoogleFonts.halant(textStyle: textTheme?.headline),
      title: GoogleFonts.halant(textStyle: textTheme?.title),
      subhead: GoogleFonts.halant(textStyle: textTheme?.subhead),
      body2: GoogleFonts.halant(textStyle: textTheme?.body2),
      body1: GoogleFonts.halant(textStyle: textTheme?.body1),
      caption: GoogleFonts.halant(textStyle: textTheme?.caption),
      button: GoogleFonts.halant(textStyle: textTheme?.button),
      subtitle: GoogleFonts.halant(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.halant(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hammersmith One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hammersmith+One
  static TextStyle hammersmithOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hammersmithone/v10/qWcyB624q4L_C4jGQ9IK0O_dFlnbshsks4MRXw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HammersmithOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hammersmith One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hammersmith+One
  static TextTheme hammersmithOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hammersmithOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.hammersmithOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.hammersmithOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.hammersmithOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.hammersmithOne(textStyle: textTheme?.headline),
      title: GoogleFonts.hammersmithOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.hammersmithOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hammersmithOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.hammersmithOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.hammersmithOne(textStyle: textTheme?.caption),
      button: GoogleFonts.hammersmithOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hammersmithOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hammersmithOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hanalei font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanalei
  static TextStyle hanalei({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hanalei/v10/E21n_dD8iufIjBRHXzgmVydREus.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Hanalei',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hanalei font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanalei
  static TextTheme hanaleiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hanalei(textStyle: textTheme?.display4),
      display3: GoogleFonts.hanalei(textStyle: textTheme?.display3),
      display2: GoogleFonts.hanalei(textStyle: textTheme?.display2),
      display1: GoogleFonts.hanalei(textStyle: textTheme?.display1),
      headline: GoogleFonts.hanalei(textStyle: textTheme?.headline),
      title: GoogleFonts.hanalei(textStyle: textTheme?.title),
      subhead: GoogleFonts.hanalei(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hanalei(textStyle: textTheme?.body2),
      body1: GoogleFonts.hanalei(textStyle: textTheme?.body1),
      caption: GoogleFonts.hanalei(textStyle: textTheme?.caption),
      button: GoogleFonts.hanalei(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hanalei(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hanalei(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hanalei Fill font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanalei+Fill
  static TextStyle hanaleiFill({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hanaleifill/v8/fC1mPYtObGbfyQznIaQzPQiMVwLBplm9aw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HanaleiFill',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hanalei Fill font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanalei+Fill
  static TextTheme hanaleiFillTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hanaleiFill(textStyle: textTheme?.display4),
      display3: GoogleFonts.hanaleiFill(textStyle: textTheme?.display3),
      display2: GoogleFonts.hanaleiFill(textStyle: textTheme?.display2),
      display1: GoogleFonts.hanaleiFill(textStyle: textTheme?.display1),
      headline: GoogleFonts.hanaleiFill(textStyle: textTheme?.headline),
      title: GoogleFonts.hanaleiFill(textStyle: textTheme?.title),
      subhead: GoogleFonts.hanaleiFill(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hanaleiFill(textStyle: textTheme?.body2),
      body1: GoogleFonts.hanaleiFill(textStyle: textTheme?.body1),
      caption: GoogleFonts.hanaleiFill(textStyle: textTheme?.caption),
      button: GoogleFonts.hanaleiFill(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hanaleiFill(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hanaleiFill(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Handlee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Handlee
  static TextStyle handlee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/handlee/v8/-F6xfjBsISg9aMakDmr6oilJ3ik.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Handlee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Handlee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Handlee
  static TextTheme handleeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.handlee(textStyle: textTheme?.display4),
      display3: GoogleFonts.handlee(textStyle: textTheme?.display3),
      display2: GoogleFonts.handlee(textStyle: textTheme?.display2),
      display1: GoogleFonts.handlee(textStyle: textTheme?.display1),
      headline: GoogleFonts.handlee(textStyle: textTheme?.headline),
      title: GoogleFonts.handlee(textStyle: textTheme?.title),
      subhead: GoogleFonts.handlee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.handlee(textStyle: textTheme?.body2),
      body1: GoogleFonts.handlee(textStyle: textTheme?.body1),
      caption: GoogleFonts.handlee(textStyle: textTheme?.caption),
      button: GoogleFonts.handlee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.handlee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.handlee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hanuman font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanuman
  static TextStyle hanuman({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hanuman/v13/VuJxdNvD15HhpJJBeKbXOIFneRo.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/hanuman/v13/VuJ0dNvD15HhpJJBQBr4HIlMZRNcp0o.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Hanuman',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hanuman font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hanuman
  static TextTheme hanumanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hanuman(textStyle: textTheme?.display4),
      display3: GoogleFonts.hanuman(textStyle: textTheme?.display3),
      display2: GoogleFonts.hanuman(textStyle: textTheme?.display2),
      display1: GoogleFonts.hanuman(textStyle: textTheme?.display1),
      headline: GoogleFonts.hanuman(textStyle: textTheme?.headline),
      title: GoogleFonts.hanuman(textStyle: textTheme?.title),
      subhead: GoogleFonts.hanuman(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hanuman(textStyle: textTheme?.body2),
      body1: GoogleFonts.hanuman(textStyle: textTheme?.body1),
      caption: GoogleFonts.hanuman(textStyle: textTheme?.caption),
      button: GoogleFonts.hanuman(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hanuman(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hanuman(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Happy Monkey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Happy+Monkey
  static TextStyle happyMonkey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/happymonkey/v8/K2F2fZZcl-9SXwl5F_C4R_OABwD2bWqVjw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HappyMonkey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Happy Monkey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Happy+Monkey
  static TextTheme happyMonkeyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.happyMonkey(textStyle: textTheme?.display4),
      display3: GoogleFonts.happyMonkey(textStyle: textTheme?.display3),
      display2: GoogleFonts.happyMonkey(textStyle: textTheme?.display2),
      display1: GoogleFonts.happyMonkey(textStyle: textTheme?.display1),
      headline: GoogleFonts.happyMonkey(textStyle: textTheme?.headline),
      title: GoogleFonts.happyMonkey(textStyle: textTheme?.title),
      subhead: GoogleFonts.happyMonkey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.happyMonkey(textStyle: textTheme?.body2),
      body1: GoogleFonts.happyMonkey(textStyle: textTheme?.body1),
      caption: GoogleFonts.happyMonkey(textStyle: textTheme?.caption),
      button: GoogleFonts.happyMonkey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.happyMonkey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.happyMonkey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Harmattan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Harmattan
  static TextStyle harmattan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/harmattan/v6/goksH6L2DkFvVvRp9XpTS0CjkP1Yog.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Harmattan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Harmattan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Harmattan
  static TextTheme harmattanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.harmattan(textStyle: textTheme?.display4),
      display3: GoogleFonts.harmattan(textStyle: textTheme?.display3),
      display2: GoogleFonts.harmattan(textStyle: textTheme?.display2),
      display1: GoogleFonts.harmattan(textStyle: textTheme?.display1),
      headline: GoogleFonts.harmattan(textStyle: textTheme?.headline),
      title: GoogleFonts.harmattan(textStyle: textTheme?.title),
      subhead: GoogleFonts.harmattan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.harmattan(textStyle: textTheme?.body2),
      body1: GoogleFonts.harmattan(textStyle: textTheme?.body1),
      caption: GoogleFonts.harmattan(textStyle: textTheme?.caption),
      button: GoogleFonts.harmattan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.harmattan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.harmattan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Headland One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Headland+One
  static TextStyle headlandOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/headlandone/v7/yYLu0hHR2vKnp89Tk1TCq3Tx0PlTeZ3mJA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HeadlandOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Headland One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Headland+One
  static TextTheme headlandOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.headlandOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.headlandOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.headlandOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.headlandOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.headlandOne(textStyle: textTheme?.headline),
      title: GoogleFonts.headlandOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.headlandOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.headlandOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.headlandOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.headlandOne(textStyle: textTheme?.caption),
      button: GoogleFonts.headlandOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.headlandOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.headlandOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Heebo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Heebo
  static TextStyle heebo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/heebo/v5/NGS0v5_NC0k9P9mVTbRhtKMByaw.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/heebo/v5/NGS3v5_NC0k9P9ldb5RLmq8I0LVF.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/heebo/v5/NGS6v5_NC0k9P-HxR7BDsbMB.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/heebo/v5/NGS3v5_NC0k9P9kFbpRLmq8I0LVF.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/heebo/v5/NGS3v5_NC0k9P9lNaJRLmq8I0LVF.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/heebo/v5/NGS3v5_NC0k9P9lRa5RLmq8I0LVF.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/heebo/v5/NGS3v5_NC0k9P9l1apRLmq8I0LVF.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Heebo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Heebo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Heebo
  static TextTheme heeboTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.heebo(textStyle: textTheme?.display4),
      display3: GoogleFonts.heebo(textStyle: textTheme?.display3),
      display2: GoogleFonts.heebo(textStyle: textTheme?.display2),
      display1: GoogleFonts.heebo(textStyle: textTheme?.display1),
      headline: GoogleFonts.heebo(textStyle: textTheme?.headline),
      title: GoogleFonts.heebo(textStyle: textTheme?.title),
      subhead: GoogleFonts.heebo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.heebo(textStyle: textTheme?.body2),
      body1: GoogleFonts.heebo(textStyle: textTheme?.body1),
      caption: GoogleFonts.heebo(textStyle: textTheme?.caption),
      button: GoogleFonts.heebo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.heebo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.heebo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Henny Penny font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Henny+Penny
  static TextStyle hennyPenny({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hennypenny/v7/wXKvE3UZookzsxz_kjGSfMQqt3M7tMDT.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HennyPenny',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Henny Penny font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Henny+Penny
  static TextTheme hennyPennyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hennyPenny(textStyle: textTheme?.display4),
      display3: GoogleFonts.hennyPenny(textStyle: textTheme?.display3),
      display2: GoogleFonts.hennyPenny(textStyle: textTheme?.display2),
      display1: GoogleFonts.hennyPenny(textStyle: textTheme?.display1),
      headline: GoogleFonts.hennyPenny(textStyle: textTheme?.headline),
      title: GoogleFonts.hennyPenny(textStyle: textTheme?.title),
      subhead: GoogleFonts.hennyPenny(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hennyPenny(textStyle: textTheme?.body2),
      body1: GoogleFonts.hennyPenny(textStyle: textTheme?.body1),
      caption: GoogleFonts.hennyPenny(textStyle: textTheme?.caption),
      button: GoogleFonts.hennyPenny(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hennyPenny(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hennyPenny(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hepta Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hepta+Slab
  static TextStyle heptaSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5HvkV5jfbY5B0NBkz.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5HvmV5zfbY5B0NBkz.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5HvlL5zfbY5B0NBkz.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5HvkV5zfbY5B0NBkz.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5Hvkn5zfbY5B0NBkz.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5HvnL4DfbY5B0NBkz.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5Hvny4DfbY5B0NBkz.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5HvmV4DfbY5B0NBkz.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/heptaslab/v6/ea8JadoyU_jkHdalebHvyWVNdYoIsHe5Hvm84DfbY5B0NBkz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HeptaSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hepta Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hepta+Slab
  static TextTheme heptaSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.heptaSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.heptaSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.heptaSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.heptaSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.heptaSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.heptaSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.heptaSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.heptaSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.heptaSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.heptaSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.heptaSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.heptaSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.heptaSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Herr Von Muellerhoff font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Herr+Von+Muellerhoff
  static TextStyle herrVonMuellerhoff({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/herrvonmuellerhoff/v9/WBL6rFjRZkREW8WqmCWYLgCkQKXb4CAft3c6_qJY3QPQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HerrVonMuellerhoff',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Herr Von Muellerhoff font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Herr+Von+Muellerhoff
  static TextTheme herrVonMuellerhoffTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.display4),
      display3: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.display3),
      display2: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.display2),
      display1: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.display1),
      headline: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.headline),
      title: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.title),
      subhead: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.subhead),
      body2: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.body2),
      body1: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.body1),
      caption: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.caption),
      button: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.button),
      subtitle: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.herrVonMuellerhoff(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hi Melody font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hi+Melody
  static TextStyle hiMelody({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/himelody/v8/46ktlbP8Vnz0pJcqCTbEf29E31BBGA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HiMelody',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hi Melody font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hi+Melody
  static TextTheme hiMelodyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hiMelody(textStyle: textTheme?.display4),
      display3: GoogleFonts.hiMelody(textStyle: textTheme?.display3),
      display2: GoogleFonts.hiMelody(textStyle: textTheme?.display2),
      display1: GoogleFonts.hiMelody(textStyle: textTheme?.display1),
      headline: GoogleFonts.hiMelody(textStyle: textTheme?.headline),
      title: GoogleFonts.hiMelody(textStyle: textTheme?.title),
      subhead: GoogleFonts.hiMelody(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hiMelody(textStyle: textTheme?.body2),
      body1: GoogleFonts.hiMelody(textStyle: textTheme?.body1),
      caption: GoogleFonts.hiMelody(textStyle: textTheme?.caption),
      button: GoogleFonts.hiMelody(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hiMelody(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hiMelody(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind
  static TextStyle hind({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/hind/v10/5aU19_a8oxmIfMJaIRuYjDpf5Vw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hind/v10/5aU69_a8oxmIRG5yBROzkDM.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/hind/v10/5aU19_a8oxmIfJpbIRuYjDpf5Vw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/hind/v10/5aU19_a8oxmIfLZcIRuYjDpf5Vw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/hind/v10/5aU19_a8oxmIfNJdIRuYjDpf5Vw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Hind',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind
  static TextTheme hindTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hind(textStyle: textTheme?.display4),
      display3: GoogleFonts.hind(textStyle: textTheme?.display3),
      display2: GoogleFonts.hind(textStyle: textTheme?.display2),
      display1: GoogleFonts.hind(textStyle: textTheme?.display1),
      headline: GoogleFonts.hind(textStyle: textTheme?.headline),
      title: GoogleFonts.hind(textStyle: textTheme?.title),
      subhead: GoogleFonts.hind(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hind(textStyle: textTheme?.body2),
      body1: GoogleFonts.hind(textStyle: textTheme?.body1),
      caption: GoogleFonts.hind(textStyle: textTheme?.caption),
      button: GoogleFonts.hind(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hind(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hind(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind Guntur font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Guntur
  static TextStyle hindGuntur({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/hindguntur/v5/wXKyE3UZrok56nvamSuJd_yGn1czn9zaj5Ju.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hindguntur/v5/wXKvE3UZrok56nvamSuJd8Qqt3M7tMDT.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/hindguntur/v5/wXKyE3UZrok56nvamSuJd_zenlczn9zaj5Ju.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/hindguntur/v5/wXKyE3UZrok56nvamSuJd_zymVczn9zaj5Ju.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/hindguntur/v5/wXKyE3UZrok56nvamSuJd_yWmFczn9zaj5Ju.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HindGuntur',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind Guntur font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Guntur
  static TextTheme hindGunturTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hindGuntur(textStyle: textTheme?.display4),
      display3: GoogleFonts.hindGuntur(textStyle: textTheme?.display3),
      display2: GoogleFonts.hindGuntur(textStyle: textTheme?.display2),
      display1: GoogleFonts.hindGuntur(textStyle: textTheme?.display1),
      headline: GoogleFonts.hindGuntur(textStyle: textTheme?.headline),
      title: GoogleFonts.hindGuntur(textStyle: textTheme?.title),
      subhead: GoogleFonts.hindGuntur(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hindGuntur(textStyle: textTheme?.body2),
      body1: GoogleFonts.hindGuntur(textStyle: textTheme?.body1),
      caption: GoogleFonts.hindGuntur(textStyle: textTheme?.caption),
      button: GoogleFonts.hindGuntur(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hindGuntur(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hindGuntur(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind Madurai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Madurai
  static TextStyle hindMadurai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/hindmadurai/v5/f0Xu0e2p98ZvDXdZQIOcpqjfXaUnecsoMJ0b_g.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hindmadurai/v5/f0Xx0e2p98ZvDXdZQIOcpqjn8Y0DceA0OQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/hindmadurai/v5/f0Xu0e2p98ZvDXdZQIOcpqjfBaQnecsoMJ0b_g.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/hindmadurai/v5/f0Xu0e2p98ZvDXdZQIOcpqjfKaMnecsoMJ0b_g.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/hindmadurai/v5/f0Xu0e2p98ZvDXdZQIOcpqjfTaInecsoMJ0b_g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HindMadurai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind Madurai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Madurai
  static TextTheme hindMaduraiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hindMadurai(textStyle: textTheme?.display4),
      display3: GoogleFonts.hindMadurai(textStyle: textTheme?.display3),
      display2: GoogleFonts.hindMadurai(textStyle: textTheme?.display2),
      display1: GoogleFonts.hindMadurai(textStyle: textTheme?.display1),
      headline: GoogleFonts.hindMadurai(textStyle: textTheme?.headline),
      title: GoogleFonts.hindMadurai(textStyle: textTheme?.title),
      subhead: GoogleFonts.hindMadurai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hindMadurai(textStyle: textTheme?.body2),
      body1: GoogleFonts.hindMadurai(textStyle: textTheme?.body1),
      caption: GoogleFonts.hindMadurai(textStyle: textTheme?.caption),
      button: GoogleFonts.hindMadurai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hindMadurai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hindMadurai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind Siliguri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Siliguri
  static TextStyle hindSiliguri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/hindsiliguri/v6/ijwOs5juQtsyLLR5jN4cxBEoRDf44uEfKiGvxts.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hindsiliguri/v6/ijwTs5juQtsyLLR5jN4cxBEofJvQxuk0Nig.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/hindsiliguri/v6/ijwOs5juQtsyLLR5jN4cxBEoRG_54uEfKiGvxts.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/hindsiliguri/v6/ijwOs5juQtsyLLR5jN4cxBEoREP-4uEfKiGvxts.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/hindsiliguri/v6/ijwOs5juQtsyLLR5jN4cxBEoRCf_4uEfKiGvxts.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HindSiliguri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind Siliguri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Siliguri
  static TextTheme hindSiliguriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hindSiliguri(textStyle: textTheme?.display4),
      display3: GoogleFonts.hindSiliguri(textStyle: textTheme?.display3),
      display2: GoogleFonts.hindSiliguri(textStyle: textTheme?.display2),
      display1: GoogleFonts.hindSiliguri(textStyle: textTheme?.display1),
      headline: GoogleFonts.hindSiliguri(textStyle: textTheme?.headline),
      title: GoogleFonts.hindSiliguri(textStyle: textTheme?.title),
      subhead: GoogleFonts.hindSiliguri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hindSiliguri(textStyle: textTheme?.body2),
      body1: GoogleFonts.hindSiliguri(textStyle: textTheme?.body1),
      caption: GoogleFonts.hindSiliguri(textStyle: textTheme?.caption),
      button: GoogleFonts.hindSiliguri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hindSiliguri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hindSiliguri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Hind Vadodara font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Vadodara
  static TextStyle hindVadodara({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/hindvadodara/v6/neIQzCKvrIcn5pbuuuriV9tTSDn3iXM0oSOL2Yw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/hindvadodara/v6/neINzCKvrIcn5pbuuuriV9tTcJXfrXsfvSo.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/hindvadodara/v6/neIQzCKvrIcn5pbuuuriV9tTSGH2iXM0oSOL2Yw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/hindvadodara/v6/neIQzCKvrIcn5pbuuuriV9tTSE3xiXM0oSOL2Yw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/hindvadodara/v6/neIQzCKvrIcn5pbuuuriV9tTSCnwiXM0oSOL2Yw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HindVadodara',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Hind Vadodara font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Hind+Vadodara
  static TextTheme hindVadodaraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.hindVadodara(textStyle: textTheme?.display4),
      display3: GoogleFonts.hindVadodara(textStyle: textTheme?.display3),
      display2: GoogleFonts.hindVadodara(textStyle: textTheme?.display2),
      display1: GoogleFonts.hindVadodara(textStyle: textTheme?.display1),
      headline: GoogleFonts.hindVadodara(textStyle: textTheme?.headline),
      title: GoogleFonts.hindVadodara(textStyle: textTheme?.title),
      subhead: GoogleFonts.hindVadodara(textStyle: textTheme?.subhead),
      body2: GoogleFonts.hindVadodara(textStyle: textTheme?.body2),
      body1: GoogleFonts.hindVadodara(textStyle: textTheme?.body1),
      caption: GoogleFonts.hindVadodara(textStyle: textTheme?.caption),
      button: GoogleFonts.hindVadodara(textStyle: textTheme?.button),
      subtitle: GoogleFonts.hindVadodara(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.hindVadodara(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Holtwood One SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Holtwood+One+SC
  static TextStyle holtwoodOneSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/holtwoodonesc/v10/yYLx0hLR0P-3vMFSk1TCq3Txg5B3cbb6LZttyg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HoltwoodOneSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Holtwood One SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Holtwood+One+SC
  static TextTheme holtwoodOneSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.headline),
      title: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.caption),
      button: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.holtwoodOneSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Homemade Apple font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Homemade+Apple
  static TextStyle homemadeApple({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/homemadeapple/v10/Qw3EZQFXECDrI2q789EKQZJob3x9Vnksi4M7.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'HomemadeApple',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Homemade Apple font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Homemade+Apple
  static TextTheme homemadeAppleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.homemadeApple(textStyle: textTheme?.display4),
      display3: GoogleFonts.homemadeApple(textStyle: textTheme?.display3),
      display2: GoogleFonts.homemadeApple(textStyle: textTheme?.display2),
      display1: GoogleFonts.homemadeApple(textStyle: textTheme?.display1),
      headline: GoogleFonts.homemadeApple(textStyle: textTheme?.headline),
      title: GoogleFonts.homemadeApple(textStyle: textTheme?.title),
      subhead: GoogleFonts.homemadeApple(textStyle: textTheme?.subhead),
      body2: GoogleFonts.homemadeApple(textStyle: textTheme?.body2),
      body1: GoogleFonts.homemadeApple(textStyle: textTheme?.body1),
      caption: GoogleFonts.homemadeApple(textStyle: textTheme?.caption),
      button: GoogleFonts.homemadeApple(textStyle: textTheme?.button),
      subtitle: GoogleFonts.homemadeApple(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.homemadeApple(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Homenaje font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Homenaje
  static TextStyle homenaje({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/homenaje/v9/FwZY7-Q-xVAi_l-6Ld6A4sijpFu_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Homenaje',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Homenaje font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Homenaje
  static TextTheme homenajeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.homenaje(textStyle: textTheme?.display4),
      display3: GoogleFonts.homenaje(textStyle: textTheme?.display3),
      display2: GoogleFonts.homenaje(textStyle: textTheme?.display2),
      display1: GoogleFonts.homenaje(textStyle: textTheme?.display1),
      headline: GoogleFonts.homenaje(textStyle: textTheme?.headline),
      title: GoogleFonts.homenaje(textStyle: textTheme?.title),
      subhead: GoogleFonts.homenaje(textStyle: textTheme?.subhead),
      body2: GoogleFonts.homenaje(textStyle: textTheme?.body2),
      body1: GoogleFonts.homenaje(textStyle: textTheme?.body1),
      caption: GoogleFonts.homenaje(textStyle: textTheme?.caption),
      button: GoogleFonts.homenaje(textStyle: textTheme?.button),
      subtitle: GoogleFonts.homenaje(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.homenaje(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IBM Plex Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Mono
  static TextStyle iBMPlexMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6pfjptAgt5VM-kVkqdyU8n3kwq0n1hj-sNFQ.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6rfjptAgt5VM-kVkqdyU8n1ioStndlre4dFcFh.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6qfjptAgt5VM-kVkqdyU8n3uAL8ldPg-IUDNg.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6sfjptAgt5VM-kVkqdyU8n1ioSGlZFh8ARHNh4zg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6qfjptAgt5VM-kVkqdyU8n3oQI8ldPg-IUDNg.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6sfjptAgt5VM-kVkqdyU8n1ioSflVFh8ARHNh4zg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F63fjptAgt5VM-kVkqdyU8n5igg1l9kn-s.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6pfjptAgt5VM-kVkqdyU8n1ioq0n1hj-sNFQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6qfjptAgt5VM-kVkqdyU8n3twJ8ldPg-IUDNg.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6sfjptAgt5VM-kVkqdyU8n1ioSJlRFh8ARHNh4zg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6qfjptAgt5VM-kVkqdyU8n3vAO8ldPg-IUDNg.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6sfjptAgt5VM-kVkqdyU8n1ioSClNFh8ARHNh4zg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6qfjptAgt5VM-kVkqdyU8n3pQP8ldPg-IUDNg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ibmplexmono/v5/-F6sfjptAgt5VM-kVkqdyU8n1ioSblJFh8ARHNh4zg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IBMPlexMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IBM Plex Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Mono
  static TextTheme iBMPlexMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iBMPlexMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.iBMPlexMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.iBMPlexMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.iBMPlexMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.iBMPlexMono(textStyle: textTheme?.headline),
      title: GoogleFonts.iBMPlexMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.iBMPlexMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iBMPlexMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.iBMPlexMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.iBMPlexMono(textStyle: textTheme?.caption),
      button: GoogleFonts.iBMPlexMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iBMPlexMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iBMPlexMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IBM Plex Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Sans
  static TextStyle iBMPlexSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX-KVElMYYaJe8bpLHnCwDKjbLeEKxIedbzDw.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX8KVElMYYaJe8bpLHnCwDKhdTmdKZMW9PjD3N8.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX9KVElMYYaJe8bpLHnCwDKjR7_MIZmdd_qFmo.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX7KVElMYYaJe8bpLHnCwDKhdTm2Idscf3vBmpl8A.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX9KVElMYYaJe8bpLHnCwDKjXr8MIZmdd_qFmo.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX7KVElMYYaJe8bpLHnCwDKhdTmvIRscf3vBmpl8A.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYXgKVElMYYaJe8bpLHnCwDKtdbUFI5NadY.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX-KVElMYYaJe8bpLHnCwDKhdTeEKxIedbzDw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX9KVElMYYaJe8bpLHnCwDKjSL9MIZmdd_qFmo.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX7KVElMYYaJe8bpLHnCwDKhdTm5IVscf3vBmpl8A.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX9KVElMYYaJe8bpLHnCwDKjQ76MIZmdd_qFmo.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX7KVElMYYaJe8bpLHnCwDKhdTmyIJscf3vBmpl8A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX9KVElMYYaJe8bpLHnCwDKjWr7MIZmdd_qFmo.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ibmplexsans/v7/zYX7KVElMYYaJe8bpLHnCwDKhdTmrINscf3vBmpl8A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IBMPlexSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IBM Plex Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Sans
  static TextTheme iBMPlexSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iBMPlexSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.iBMPlexSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.iBMPlexSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.iBMPlexSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.iBMPlexSans(textStyle: textTheme?.headline),
      title: GoogleFonts.iBMPlexSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.iBMPlexSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iBMPlexSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.iBMPlexSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.iBMPlexSans(textStyle: textTheme?.caption),
      button: GoogleFonts.iBMPlexSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iBMPlexSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iBMPlexSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IBM Plex Sans Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Sans+Condensed
  static TextStyle iBMPlexSansCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8nN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHY7KyKvBgYsMDhM.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8hN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHYas8M_LhakJHhOgBg.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8gN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHY5m6Yvrr4cFFwq5.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8iN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHYas8GPqpYMnEhq5H1w.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8gN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHY4C6ovrr4cFFwq5.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8iN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHYas8AfppYMnEhq5H1w.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8lN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHbauwq_jhJsM.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8nN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHYasyKvBgYsMDhM.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8gN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHY5a64vrr4cFFwq5.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8iN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHYas8F_opYMnEhq5H1w.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8gN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHY527Ivrr4cFFwq5.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8iN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHYas8HPvpYMnEhq5H1w.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8gN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHY4S7Yvrr4cFFwq5.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ibmplexsanscondensed/v6/Gg8iN4UfRSqiPg7Jn2ZI12V4DCEwkj1E4LVeHYas8BfupYMnEhq5H1w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IBMPlexSansCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IBM Plex Sans Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Sans+Condensed
  static TextTheme iBMPlexSansCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.iBMPlexSansCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IBM Plex Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Serif
  static TextStyle iBMPlexSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizBREVNn1dOx-zrZ2X3pZvkTi182zIZj1bIkNo.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizHREVNn1dOx-zrZ2X3pZvkTiUa41YTi3TNgNq55w.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizAREVNn1dOx-zrZ2X3pZvkTi3Q-hIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizGREVNn1dOx-zrZ2X3pZvkTiUa4_oyq17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizAREVNn1dOx-zrZ2X3pZvkTi20-RIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizGREVNn1dOx-zrZ2X3pZvkTiUa454xq17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizDREVNn1dOx-zrZ2X3pZvkThUY0TY7ikbI.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizBREVNn1dOx-zrZ2X3pZvkTiUa2zIZj1bIkNo.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizAREVNn1dOx-zrZ2X3pZvkTi3s-BIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizGREVNn1dOx-zrZ2X3pZvkTiUa48Ywq17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizAREVNn1dOx-zrZ2X3pZvkTi3A_xIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizGREVNn1dOx-zrZ2X3pZvkTiUa4-o3q17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizAREVNn1dOx-zrZ2X3pZvkTi2k_hIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ibmplexserif/v8/jizGREVNn1dOx-zrZ2X3pZvkTiUa4442q17jjNOg_oc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IBMPlexSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IBM Plex Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IBM+Plex+Serif
  static TextTheme iBMPlexSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iBMPlexSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell DW Pica font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+DW+Pica
  static TextStyle iMFellDWPica({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfelldwpica/v9/2sDGZGRQotv9nbn2qSl0TxXVYNw9ZAPUvi88MQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/imfelldwpica/v9/2sDEZGRQotv9nbn2qSl0TxXVYNwNZgnQnCosMXm0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellDWPica',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell DW Pica font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+DW+Pica
  static TextTheme iMFellDWPicaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellDWPica(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellDWPica(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellDWPica(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellDWPica(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellDWPica(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellDWPica(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellDWPica(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellDWPica(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellDWPica(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellDWPica(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellDWPica(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellDWPica(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellDWPica(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell DW Pica SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+DW+Pica+SC
  static TextStyle iMFellDWPicaSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfelldwpicasc/v9/0ybjGCAu5PfqkvtGVU15aBhXz3EUrnTW-BiKEUiBGA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellDWPicaSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell DW Pica SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+DW+Pica+SC
  static TextTheme iMFellDWPicaSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellDWPicaSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell Double Pica font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Double+Pica
  static TextStyle iMFellDoublePica({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfelldoublepica/v9/3XF2EqMq_94s9PeKF7Fg4gOKINyMtZ8rT0S1UL5Ayp0.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/imfelldoublepica/v9/3XF0EqMq_94s9PeKF7Fg4gOKINyMtZ8rf0a_VJxF2p2G8g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellDoublePica',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell Double Pica font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Double+Pica
  static TextTheme iMFellDoublePicaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellDoublePica(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell Double Pica SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Double+Pica+SC
  static TextStyle iMFellDoublePicaSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfelldoublepicasc/v9/neIazDmuiMkFo6zj_sHpQ8teNbWlwBB_hXjJ4Y0Eeru2dGg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellDoublePicaSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell Double Pica SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Double+Pica+SC
  static TextTheme iMFellDoublePicaSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellDoublePicaSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell English font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+English
  static TextStyle iMFellEnglish({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfellenglish/v9/Ktk1ALSLW8zDe0rthJysWrnLsAz3F6mZVY9Y5w.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/imfellenglish/v9/Ktk3ALSLW8zDe0rthJysWrnLsAzHFaOdd4pI59zg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellEnglish',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell English font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+English
  static TextTheme iMFellEnglishTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellEnglish(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellEnglish(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellEnglish(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellEnglish(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellEnglish(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellEnglish(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellEnglish(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellEnglish(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellEnglish(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellEnglish(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellEnglish(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellEnglish(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellEnglish(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell English SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+English+SC
  static TextStyle iMFellEnglishSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfellenglishsc/v9/a8IENpD3CDX-4zrWfr1VY879qFF05pZLO4gOg0shzA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellEnglishSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell English SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+English+SC
  static TextTheme iMFellEnglishSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellEnglishSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell French Canon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+French+Canon
  static TextStyle iMFellFrenchCanon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfellfrenchcanon/v9/-F6ufiNtDWYfYc-tDiyiw08rrghJszkK6coVPt1ozoPz.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/imfellfrenchcanon/v9/-F6gfiNtDWYfYc-tDiyiw08rrghJszkK6foXNNlKy5PzzrU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellFrenchCanon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell French Canon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+French+Canon
  static TextTheme iMFellFrenchCanonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellFrenchCanon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell French Canon SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+French+Canon+SC
  static TextStyle iMFellFrenchCanonSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfellfrenchcanonsc/v9/FBVmdCru5-ifcor2bgq9V89khWcmQghEURY7H3c0UBCVIVqH.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellFrenchCanonSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell French Canon SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+French+Canon+SC
  static TextTheme iMFellFrenchCanonSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellFrenchCanonSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell Great Primer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Great+Primer
  static TextStyle iMFellGreatPrimer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfellgreatprimer/v9/bx6aNwSJtayYxOkbYFsT6hMsLzX7u85rJorXvDo3SQY1.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/imfellgreatprimer/v9/bx6UNwSJtayYxOkbYFsT6hMsLzX7u85rJrrVtj4VTBY1N6U.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellGreatPrimer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell Great Primer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Great+Primer
  static TextTheme iMFellGreatPrimerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellGreatPrimer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the IM Fell Great Primer SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Great+Primer+SC
  static TextStyle iMFellGreatPrimerSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imfellgreatprimersc/v9/ga6daxBOxyt6sCqz3fjZCTFCTUDMHagsQKdDTLf9BXz0s8FG.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IMFellGreatPrimerSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the IM Fell Great Primer SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/IM+Fell+Great+Primer+SC
  static TextTheme iMFellGreatPrimerSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.headline),
      title: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.caption),
      button: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iMFellGreatPrimerSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ibarra Real Nova font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ibarra+Real+Nova
  static TextStyle ibarraRealNova({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ibarrarealnova/v1/sZlfdQiA-DBIDCcaWtQzL4BZHoiDoHxSENxuLuE.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ibarrarealnova/v1/sZlZdQiA-DBIDCcaWtQzL4BZHoiDkH5YFP5rPuF6EA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/ibarrarealnova/v1/sZlYdQiA-DBIDCcaWtQzL4BZHoiDmKR8NNRFMuhjCXY.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/ibarrarealnova/v1/sZladQiA-DBIDCcaWtQzL4BZHoiDkH5gzNBPNspmGXawpg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ibarrarealnova/v1/sZlYdQiA-DBIDCcaWtQzL4BZHoiDmMB9NNRFMuhjCXY.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ibarrarealnova/v1/sZladQiA-DBIDCcaWtQzL4BZHoiDkH5gqNFPNspmGXawpg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IbarraRealNova',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ibarra Real Nova font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ibarra+Real+Nova
  static TextTheme ibarraRealNovaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ibarraRealNova(textStyle: textTheme?.display4),
      display3: GoogleFonts.ibarraRealNova(textStyle: textTheme?.display3),
      display2: GoogleFonts.ibarraRealNova(textStyle: textTheme?.display2),
      display1: GoogleFonts.ibarraRealNova(textStyle: textTheme?.display1),
      headline: GoogleFonts.ibarraRealNova(textStyle: textTheme?.headline),
      title: GoogleFonts.ibarraRealNova(textStyle: textTheme?.title),
      subhead: GoogleFonts.ibarraRealNova(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ibarraRealNova(textStyle: textTheme?.body2),
      body1: GoogleFonts.ibarraRealNova(textStyle: textTheme?.body1),
      caption: GoogleFonts.ibarraRealNova(textStyle: textTheme?.caption),
      button: GoogleFonts.ibarraRealNova(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ibarraRealNova(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ibarraRealNova(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Iceberg font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Iceberg
  static TextStyle iceberg({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/iceberg/v7/8QIJdijAiM7o-qnZuIgOq7jkAOw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Iceberg',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Iceberg font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Iceberg
  static TextTheme icebergTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iceberg(textStyle: textTheme?.display4),
      display3: GoogleFonts.iceberg(textStyle: textTheme?.display3),
      display2: GoogleFonts.iceberg(textStyle: textTheme?.display2),
      display1: GoogleFonts.iceberg(textStyle: textTheme?.display1),
      headline: GoogleFonts.iceberg(textStyle: textTheme?.headline),
      title: GoogleFonts.iceberg(textStyle: textTheme?.title),
      subhead: GoogleFonts.iceberg(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iceberg(textStyle: textTheme?.body2),
      body1: GoogleFonts.iceberg(textStyle: textTheme?.body1),
      caption: GoogleFonts.iceberg(textStyle: textTheme?.caption),
      button: GoogleFonts.iceberg(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iceberg(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iceberg(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Iceland font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Iceland
  static TextStyle iceland({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/iceland/v8/rax9HiuFsdMNOnWPWKxGADBbg0s.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Iceland',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Iceland font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Iceland
  static TextTheme icelandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.iceland(textStyle: textTheme?.display4),
      display3: GoogleFonts.iceland(textStyle: textTheme?.display3),
      display2: GoogleFonts.iceland(textStyle: textTheme?.display2),
      display1: GoogleFonts.iceland(textStyle: textTheme?.display1),
      headline: GoogleFonts.iceland(textStyle: textTheme?.headline),
      title: GoogleFonts.iceland(textStyle: textTheme?.title),
      subhead: GoogleFonts.iceland(textStyle: textTheme?.subhead),
      body2: GoogleFonts.iceland(textStyle: textTheme?.body2),
      body1: GoogleFonts.iceland(textStyle: textTheme?.body1),
      caption: GoogleFonts.iceland(textStyle: textTheme?.caption),
      button: GoogleFonts.iceland(textStyle: textTheme?.button),
      subtitle: GoogleFonts.iceland(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.iceland(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Imprima font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Imprima
  static TextStyle imprima({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/imprima/v8/VEMxRoN7sY3yuy-7-oWHyDzktPo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Imprima',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Imprima font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Imprima
  static TextTheme imprimaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.imprima(textStyle: textTheme?.display4),
      display3: GoogleFonts.imprima(textStyle: textTheme?.display3),
      display2: GoogleFonts.imprima(textStyle: textTheme?.display2),
      display1: GoogleFonts.imprima(textStyle: textTheme?.display1),
      headline: GoogleFonts.imprima(textStyle: textTheme?.headline),
      title: GoogleFonts.imprima(textStyle: textTheme?.title),
      subhead: GoogleFonts.imprima(textStyle: textTheme?.subhead),
      body2: GoogleFonts.imprima(textStyle: textTheme?.body2),
      body1: GoogleFonts.imprima(textStyle: textTheme?.body1),
      caption: GoogleFonts.imprima(textStyle: textTheme?.caption),
      button: GoogleFonts.imprima(textStyle: textTheme?.button),
      subtitle: GoogleFonts.imprima(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.imprima(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inconsolata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inconsolata
  static TextStyle inconsolata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/inconsolata/v18/QldKNThLqRwH-OJ1UHjlKFle7KlmxuHx.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/inconsolata/v18/QldXNThLqRwH-OJ1UHjlKGHiw41u7f34DYwn.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Inconsolata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inconsolata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inconsolata
  static TextTheme inconsolataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inconsolata(textStyle: textTheme?.display4),
      display3: GoogleFonts.inconsolata(textStyle: textTheme?.display3),
      display2: GoogleFonts.inconsolata(textStyle: textTheme?.display2),
      display1: GoogleFonts.inconsolata(textStyle: textTheme?.display1),
      headline: GoogleFonts.inconsolata(textStyle: textTheme?.headline),
      title: GoogleFonts.inconsolata(textStyle: textTheme?.title),
      subhead: GoogleFonts.inconsolata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inconsolata(textStyle: textTheme?.body2),
      body1: GoogleFonts.inconsolata(textStyle: textTheme?.body1),
      caption: GoogleFonts.inconsolata(textStyle: textTheme?.caption),
      button: GoogleFonts.inconsolata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inconsolata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inconsolata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inder font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inder
  static TextStyle inder({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/inder/v8/w8gUH2YoQe8_4vq6pw-P3U4O.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Inder',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inder font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inder
  static TextTheme inderTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inder(textStyle: textTheme?.display4),
      display3: GoogleFonts.inder(textStyle: textTheme?.display3),
      display2: GoogleFonts.inder(textStyle: textTheme?.display2),
      display1: GoogleFonts.inder(textStyle: textTheme?.display1),
      headline: GoogleFonts.inder(textStyle: textTheme?.headline),
      title: GoogleFonts.inder(textStyle: textTheme?.title),
      subhead: GoogleFonts.inder(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inder(textStyle: textTheme?.body2),
      body1: GoogleFonts.inder(textStyle: textTheme?.body1),
      caption: GoogleFonts.inder(textStyle: textTheme?.caption),
      button: GoogleFonts.inder(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inder(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inder(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Indie Flower font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Indie+Flower
  static TextStyle indieFlower({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/indieflower/v11/m8JVjfNVeKWVnh3QMuKkFcZlbkGG1dKEDw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IndieFlower',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Indie Flower font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Indie+Flower
  static TextTheme indieFlowerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.indieFlower(textStyle: textTheme?.display4),
      display3: GoogleFonts.indieFlower(textStyle: textTheme?.display3),
      display2: GoogleFonts.indieFlower(textStyle: textTheme?.display2),
      display1: GoogleFonts.indieFlower(textStyle: textTheme?.display1),
      headline: GoogleFonts.indieFlower(textStyle: textTheme?.headline),
      title: GoogleFonts.indieFlower(textStyle: textTheme?.title),
      subhead: GoogleFonts.indieFlower(textStyle: textTheme?.subhead),
      body2: GoogleFonts.indieFlower(textStyle: textTheme?.body2),
      body1: GoogleFonts.indieFlower(textStyle: textTheme?.body1),
      caption: GoogleFonts.indieFlower(textStyle: textTheme?.caption),
      button: GoogleFonts.indieFlower(textStyle: textTheme?.button),
      subtitle: GoogleFonts.indieFlower(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.indieFlower(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inika
  static TextStyle inika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/inika/v8/rnCm-x5X3QP-phTHRcc2s2XH.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/inika/v8/rnCr-x5X3QP-pix7auM-mHnOSOuk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Inika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inika
  static TextTheme inikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inika(textStyle: textTheme?.display4),
      display3: GoogleFonts.inika(textStyle: textTheme?.display3),
      display2: GoogleFonts.inika(textStyle: textTheme?.display2),
      display1: GoogleFonts.inika(textStyle: textTheme?.display1),
      headline: GoogleFonts.inika(textStyle: textTheme?.headline),
      title: GoogleFonts.inika(textStyle: textTheme?.title),
      subhead: GoogleFonts.inika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inika(textStyle: textTheme?.body2),
      body1: GoogleFonts.inika(textStyle: textTheme?.body1),
      caption: GoogleFonts.inika(textStyle: textTheme?.caption),
      button: GoogleFonts.inika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inknut Antiqua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inknut+Antiqua
  static TextStyle inknutAntiqua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/inknutantiqua/v5/Y4GRYax7VC4ot_qNB4nYpBdaKU2vwrj5bBoIYJNf.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/inknutantiqua/v5/Y4GSYax7VC4ot_qNB4nYpBdaKXUD6pzxRwYB.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/inknutantiqua/v5/Y4GRYax7VC4ot_qNB4nYpBdaKU33w7j5bBoIYJNf.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/inknutantiqua/v5/Y4GRYax7VC4ot_qNB4nYpBdaKU3bxLj5bBoIYJNf.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/inknutantiqua/v5/Y4GRYax7VC4ot_qNB4nYpBdaKU2_xbj5bBoIYJNf.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/inknutantiqua/v5/Y4GRYax7VC4ot_qNB4nYpBdaKU2jxrj5bBoIYJNf.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/inknutantiqua/v5/Y4GRYax7VC4ot_qNB4nYpBdaKU2Hx7j5bBoIYJNf.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'InknutAntiqua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inknut Antiqua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inknut+Antiqua
  static TextTheme inknutAntiquaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inknutAntiqua(textStyle: textTheme?.display4),
      display3: GoogleFonts.inknutAntiqua(textStyle: textTheme?.display3),
      display2: GoogleFonts.inknutAntiqua(textStyle: textTheme?.display2),
      display1: GoogleFonts.inknutAntiqua(textStyle: textTheme?.display1),
      headline: GoogleFonts.inknutAntiqua(textStyle: textTheme?.headline),
      title: GoogleFonts.inknutAntiqua(textStyle: textTheme?.title),
      subhead: GoogleFonts.inknutAntiqua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inknutAntiqua(textStyle: textTheme?.body2),
      body1: GoogleFonts.inknutAntiqua(textStyle: textTheme?.body1),
      caption: GoogleFonts.inknutAntiqua(textStyle: textTheme?.caption),
      button: GoogleFonts.inknutAntiqua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inknutAntiqua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inknutAntiqua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Inria Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inria+Serif
  static TextStyle inriaSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/inriaserif/v1/fC14PYxPY3rXxEndZJAzN3wAVQjFhFyta3xN.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/inriaserif/v1/fC16PYxPY3rXxEndZJAzN3SuT4THjliPbmxN0_E.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/inriaserif/v1/fC1lPYxPY3rXxEndZJAzN0SsfSzNr0Ck.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/inriaserif/v1/fC1nPYxPY3rXxEndZJAzN3SudyjvqlCkcmU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/inriaserif/v1/fC14PYxPY3rXxEndZJAzN3wQUgjFhFyta3xN.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/inriaserif/v1/fC16PYxPY3rXxEndZJAzN3SuT5TAjliPbmxN0_E.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'InriaSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Inria Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Inria+Serif
  static TextTheme inriaSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.inriaSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.inriaSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.inriaSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.inriaSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.inriaSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.inriaSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.inriaSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.inriaSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.inriaSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.inriaSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.inriaSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.inriaSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.inriaSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Irish Grover font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Irish+Grover
  static TextStyle irishGrover({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/irishgrover/v10/buExpoi6YtLz2QW7LA4flVgf-P5Oaiw4cw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IrishGrover',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Irish Grover font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Irish+Grover
  static TextTheme irishGroverTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.irishGrover(textStyle: textTheme?.display4),
      display3: GoogleFonts.irishGrover(textStyle: textTheme?.display3),
      display2: GoogleFonts.irishGrover(textStyle: textTheme?.display2),
      display1: GoogleFonts.irishGrover(textStyle: textTheme?.display1),
      headline: GoogleFonts.irishGrover(textStyle: textTheme?.headline),
      title: GoogleFonts.irishGrover(textStyle: textTheme?.title),
      subhead: GoogleFonts.irishGrover(textStyle: textTheme?.subhead),
      body2: GoogleFonts.irishGrover(textStyle: textTheme?.body2),
      body1: GoogleFonts.irishGrover(textStyle: textTheme?.body1),
      caption: GoogleFonts.irishGrover(textStyle: textTheme?.caption),
      button: GoogleFonts.irishGrover(textStyle: textTheme?.button),
      subtitle: GoogleFonts.irishGrover(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.irishGrover(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Istok Web font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Istok+Web
  static TextStyle istokWeb({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/istokweb/v14/3qTvojGmgSyUukBzKslZAWF-9kIIaQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/istokweb/v14/3qTpojGmgSyUukBzKslpA2t61EcYaQ7F.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/istokweb/v14/3qTqojGmgSyUukBzKslhvU5a_mkUYBfcMw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/istokweb/v14/3qT0ojGmgSyUukBzKslpA1PG-2MQQhLMMygN.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'IstokWeb',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Istok Web font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Istok+Web
  static TextTheme istokWebTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.istokWeb(textStyle: textTheme?.display4),
      display3: GoogleFonts.istokWeb(textStyle: textTheme?.display3),
      display2: GoogleFonts.istokWeb(textStyle: textTheme?.display2),
      display1: GoogleFonts.istokWeb(textStyle: textTheme?.display1),
      headline: GoogleFonts.istokWeb(textStyle: textTheme?.headline),
      title: GoogleFonts.istokWeb(textStyle: textTheme?.title),
      subhead: GoogleFonts.istokWeb(textStyle: textTheme?.subhead),
      body2: GoogleFonts.istokWeb(textStyle: textTheme?.body2),
      body1: GoogleFonts.istokWeb(textStyle: textTheme?.body1),
      caption: GoogleFonts.istokWeb(textStyle: textTheme?.caption),
      button: GoogleFonts.istokWeb(textStyle: textTheme?.button),
      subtitle: GoogleFonts.istokWeb(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.istokWeb(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Italiana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Italiana
  static TextStyle italiana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/italiana/v8/QldNNTtLsx4E__B0XTmRY31Wx7Vv.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Italiana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Italiana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Italiana
  static TextTheme italianaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.italiana(textStyle: textTheme?.display4),
      display3: GoogleFonts.italiana(textStyle: textTheme?.display3),
      display2: GoogleFonts.italiana(textStyle: textTheme?.display2),
      display1: GoogleFonts.italiana(textStyle: textTheme?.display1),
      headline: GoogleFonts.italiana(textStyle: textTheme?.headline),
      title: GoogleFonts.italiana(textStyle: textTheme?.title),
      subhead: GoogleFonts.italiana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.italiana(textStyle: textTheme?.body2),
      body1: GoogleFonts.italiana(textStyle: textTheme?.body1),
      caption: GoogleFonts.italiana(textStyle: textTheme?.caption),
      button: GoogleFonts.italiana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.italiana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.italiana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Italianno font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Italianno
  static TextStyle italianno({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/italianno/v9/dg4n_p3sv6gCJkwzT6Rnj5YpQwM-gg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Italianno',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Italianno font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Italianno
  static TextTheme italiannoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.italianno(textStyle: textTheme?.display4),
      display3: GoogleFonts.italianno(textStyle: textTheme?.display3),
      display2: GoogleFonts.italianno(textStyle: textTheme?.display2),
      display1: GoogleFonts.italianno(textStyle: textTheme?.display1),
      headline: GoogleFonts.italianno(textStyle: textTheme?.headline),
      title: GoogleFonts.italianno(textStyle: textTheme?.title),
      subhead: GoogleFonts.italianno(textStyle: textTheme?.subhead),
      body2: GoogleFonts.italianno(textStyle: textTheme?.body2),
      body1: GoogleFonts.italianno(textStyle: textTheme?.body1),
      caption: GoogleFonts.italianno(textStyle: textTheme?.caption),
      button: GoogleFonts.italianno(textStyle: textTheme?.button),
      subtitle: GoogleFonts.italianno(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.italianno(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Itim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Itim
  static TextStyle itim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/itim/v4/0nknC9ziJOYewARKkc7ZdwU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Itim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Itim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Itim
  static TextTheme itimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.itim(textStyle: textTheme?.display4),
      display3: GoogleFonts.itim(textStyle: textTheme?.display3),
      display2: GoogleFonts.itim(textStyle: textTheme?.display2),
      display1: GoogleFonts.itim(textStyle: textTheme?.display1),
      headline: GoogleFonts.itim(textStyle: textTheme?.headline),
      title: GoogleFonts.itim(textStyle: textTheme?.title),
      subhead: GoogleFonts.itim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.itim(textStyle: textTheme?.body2),
      body1: GoogleFonts.itim(textStyle: textTheme?.body1),
      caption: GoogleFonts.itim(textStyle: textTheme?.caption),
      button: GoogleFonts.itim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.itim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.itim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jacques Francois font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jacques+Francois
  static TextStyle jacquesFrancois({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jacquesfrancois/v7/ZXu9e04ZvKeOOHIe1TMahbcIU2cgmcPqoeRWfbs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JacquesFrancois',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jacques Francois font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jacques+Francois
  static TextTheme jacquesFrancoisTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jacquesFrancois(textStyle: textTheme?.display4),
      display3: GoogleFonts.jacquesFrancois(textStyle: textTheme?.display3),
      display2: GoogleFonts.jacquesFrancois(textStyle: textTheme?.display2),
      display1: GoogleFonts.jacquesFrancois(textStyle: textTheme?.display1),
      headline: GoogleFonts.jacquesFrancois(textStyle: textTheme?.headline),
      title: GoogleFonts.jacquesFrancois(textStyle: textTheme?.title),
      subhead: GoogleFonts.jacquesFrancois(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jacquesFrancois(textStyle: textTheme?.body2),
      body1: GoogleFonts.jacquesFrancois(textStyle: textTheme?.body1),
      caption: GoogleFonts.jacquesFrancois(textStyle: textTheme?.caption),
      button: GoogleFonts.jacquesFrancois(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jacquesFrancois(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jacquesFrancois(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jacques Francois Shadow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jacques+Francois+Shadow
  static TextStyle jacquesFrancoisShadow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jacquesfrancoisshadow/v8/KR1FBtOz8PKTMk-kqdkLVrvR0ECFrB6Pin-2_q8VsHuV5ULS.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JacquesFrancoisShadow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jacques Francois Shadow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jacques+Francois+Shadow
  static TextTheme jacquesFrancoisShadowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.headline),
      title: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.title),
      subhead: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.body2),
      body1: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.body1),
      caption: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.caption),
      button: GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.jacquesFrancoisShadow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jaldi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jaldi
  static TextStyle jaldi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jaldi/v6/or3sQ67z0_CI30NUZpD_B6g8.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/jaldi/v6/or3hQ67z0_CI33voSbT3LLQ1niPn.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jaldi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jaldi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jaldi
  static TextTheme jaldiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jaldi(textStyle: textTheme?.display4),
      display3: GoogleFonts.jaldi(textStyle: textTheme?.display3),
      display2: GoogleFonts.jaldi(textStyle: textTheme?.display2),
      display1: GoogleFonts.jaldi(textStyle: textTheme?.display1),
      headline: GoogleFonts.jaldi(textStyle: textTheme?.headline),
      title: GoogleFonts.jaldi(textStyle: textTheme?.title),
      subhead: GoogleFonts.jaldi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jaldi(textStyle: textTheme?.body2),
      body1: GoogleFonts.jaldi(textStyle: textTheme?.body1),
      caption: GoogleFonts.jaldi(textStyle: textTheme?.caption),
      button: GoogleFonts.jaldi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jaldi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jaldi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jim Nightshade font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jim+Nightshade
  static TextStyle jimNightshade({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jimnightshade/v7/PlIkFlu9Pb08Q8HLM1PxmB0g-OS4V3qKaMxD.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JimNightshade',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jim Nightshade font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jim+Nightshade
  static TextTheme jimNightshadeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jimNightshade(textStyle: textTheme?.display4),
      display3: GoogleFonts.jimNightshade(textStyle: textTheme?.display3),
      display2: GoogleFonts.jimNightshade(textStyle: textTheme?.display2),
      display1: GoogleFonts.jimNightshade(textStyle: textTheme?.display1),
      headline: GoogleFonts.jimNightshade(textStyle: textTheme?.headline),
      title: GoogleFonts.jimNightshade(textStyle: textTheme?.title),
      subhead: GoogleFonts.jimNightshade(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jimNightshade(textStyle: textTheme?.body2),
      body1: GoogleFonts.jimNightshade(textStyle: textTheme?.body1),
      caption: GoogleFonts.jimNightshade(textStyle: textTheme?.caption),
      button: GoogleFonts.jimNightshade(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jimNightshade(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jimNightshade(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jockey One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jockey+One
  static TextStyle jockeyOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jockeyone/v9/HTxpL2g2KjCFj4x8WI6ArIb7HYOk4xc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JockeyOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jockey One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jockey+One
  static TextTheme jockeyOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jockeyOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.jockeyOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.jockeyOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.jockeyOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.jockeyOne(textStyle: textTheme?.headline),
      title: GoogleFonts.jockeyOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.jockeyOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jockeyOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.jockeyOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.jockeyOne(textStyle: textTheme?.caption),
      button: GoogleFonts.jockeyOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jockeyOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jockeyOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jolly Lodger font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jolly+Lodger
  static TextStyle jollyLodger({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jollylodger/v7/BXRsvFTAh_bGkA1uQ48dlB3VWerT3ZyuqA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JollyLodger',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jolly Lodger font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jolly+Lodger
  static TextTheme jollyLodgerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jollyLodger(textStyle: textTheme?.display4),
      display3: GoogleFonts.jollyLodger(textStyle: textTheme?.display3),
      display2: GoogleFonts.jollyLodger(textStyle: textTheme?.display2),
      display1: GoogleFonts.jollyLodger(textStyle: textTheme?.display1),
      headline: GoogleFonts.jollyLodger(textStyle: textTheme?.headline),
      title: GoogleFonts.jollyLodger(textStyle: textTheme?.title),
      subhead: GoogleFonts.jollyLodger(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jollyLodger(textStyle: textTheme?.body2),
      body1: GoogleFonts.jollyLodger(textStyle: textTheme?.body1),
      caption: GoogleFonts.jollyLodger(textStyle: textTheme?.caption),
      button: GoogleFonts.jollyLodger(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jollyLodger(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jollyLodger(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jomhuria font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jomhuria
  static TextStyle jomhuria({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jomhuria/v7/Dxxp8j-TMXf-llKur2b1MOGbC3Dh.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jomhuria',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jomhuria font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jomhuria
  static TextTheme jomhuriaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jomhuria(textStyle: textTheme?.display4),
      display3: GoogleFonts.jomhuria(textStyle: textTheme?.display3),
      display2: GoogleFonts.jomhuria(textStyle: textTheme?.display2),
      display1: GoogleFonts.jomhuria(textStyle: textTheme?.display1),
      headline: GoogleFonts.jomhuria(textStyle: textTheme?.headline),
      title: GoogleFonts.jomhuria(textStyle: textTheme?.title),
      subhead: GoogleFonts.jomhuria(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jomhuria(textStyle: textTheme?.body2),
      body1: GoogleFonts.jomhuria(textStyle: textTheme?.body1),
      caption: GoogleFonts.jomhuria(textStyle: textTheme?.caption),
      button: GoogleFonts.jomhuria(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jomhuria(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jomhuria(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jomolhari font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jomolhari
  static TextStyle jomolhari({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jomolhari/v1/EvONzA1M1Iw_CBd2hsQCF1IZKq5INg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jomolhari',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jomolhari font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jomolhari
  static TextTheme jomolhariTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jomolhari(textStyle: textTheme?.display4),
      display3: GoogleFonts.jomolhari(textStyle: textTheme?.display3),
      display2: GoogleFonts.jomolhari(textStyle: textTheme?.display2),
      display1: GoogleFonts.jomolhari(textStyle: textTheme?.display1),
      headline: GoogleFonts.jomolhari(textStyle: textTheme?.headline),
      title: GoogleFonts.jomolhari(textStyle: textTheme?.title),
      subhead: GoogleFonts.jomolhari(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jomolhari(textStyle: textTheme?.body2),
      body1: GoogleFonts.jomolhari(textStyle: textTheme?.body1),
      caption: GoogleFonts.jomolhari(textStyle: textTheme?.caption),
      button: GoogleFonts.jomolhari(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jomolhari(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jomolhari(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Josefin Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Josefin+Sans
  static TextStyle josefinSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3EZQNVED7rKGKxtqIqX5Ecbnx9Vnksi4M7.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3GZQNVED7rKGKxtqIqX5EUCEQZXH0OjpM75PE.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3FZQNVED7rKGKxtqIqX5Ecpl5dfFcggpoi_Q.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3HZQNVED7rKGKxtqIqX5EUCETRfl0koJ8y_eiS.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3aZQNVED7rKGKxtqIqX5EkCnZ5dHw8iw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3EZQNVED7rKGKxtqIqX5EUCHx9Vnksi4M7.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3FZQNVED7rKGKxtqIqX5Ec0lhdfFcggpoi_Q.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3HZQNVED7rKGKxtqIqX5EUCESleF0koJ8y_eiS.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3FZQNVED7rKGKxtqIqX5EctlldfFcggpoi_Q.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/josefinsans/v14/Qw3HZQNVED7rKGKxtqIqX5EUCETBeV0koJ8y_eiS.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JosefinSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Josefin Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Josefin+Sans
  static TextTheme josefinSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.josefinSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.josefinSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.josefinSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.josefinSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.josefinSans(textStyle: textTheme?.headline),
      title: GoogleFonts.josefinSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.josefinSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.josefinSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.josefinSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.josefinSans(textStyle: textTheme?.caption),
      button: GoogleFonts.josefinSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.josefinSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.josefinSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Josefin Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Josefin+Slab
  static TextStyle josefinSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-nwjwOK3Ps5GSJlNNkMalvyQ6qBM7oPxMX.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-lwjwOK3Ps5GSJlNNkMalnrzbODsrKOgMX95A.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-mwjwOK3Ps5GSJlNNkMalvASyKLuDkNgoO7g.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-kwjwOK3Ps5GSJlNNkMalnrzYGLOrgFA8e7onu.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-5wjwOK3Ps5GSJlNNkMalXrQSuJsv4Pw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-nwjwOK3Ps5GSJlNNkMalnrw6qBM7oPxMX.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-mwjwOK3Ps5GSJlNNkMalvdSqKLuDkNgoO7g.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-kwjwOK3Ps5GSJlNNkMalnrzZyKurgFA8e7onu.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-mwjwOK3Ps5GSJlNNkMalvESuKLuDkNgoO7g.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/josefinslab/v10/lW-kwjwOK3Ps5GSJlNNkMalnrzYWK-rgFA8e7onu.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JosefinSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Josefin Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Josefin+Slab
  static TextTheme josefinSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.josefinSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.josefinSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.josefinSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.josefinSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.josefinSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.josefinSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.josefinSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.josefinSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.josefinSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.josefinSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.josefinSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.josefinSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.josefinSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Joti One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Joti+One
  static TextStyle jotiOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jotione/v8/Z9XVDmdJQAmWm9TwaYTe4u2El6GC.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JotiOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Joti One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Joti+One
  static TextTheme jotiOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jotiOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.jotiOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.jotiOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.jotiOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.jotiOne(textStyle: textTheme?.headline),
      title: GoogleFonts.jotiOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.jotiOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jotiOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.jotiOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.jotiOne(textStyle: textTheme?.caption),
      button: GoogleFonts.jotiOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jotiOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jotiOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jua
  static TextStyle jua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jua/v8/co3KmW9ljjAjc-DZCsKgsg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jua
  static TextTheme juaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jua(textStyle: textTheme?.display4),
      display3: GoogleFonts.jua(textStyle: textTheme?.display3),
      display2: GoogleFonts.jua(textStyle: textTheme?.display2),
      display1: GoogleFonts.jua(textStyle: textTheme?.display1),
      headline: GoogleFonts.jua(textStyle: textTheme?.headline),
      title: GoogleFonts.jua(textStyle: textTheme?.title),
      subhead: GoogleFonts.jua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jua(textStyle: textTheme?.body2),
      body1: GoogleFonts.jua(textStyle: textTheme?.body1),
      caption: GoogleFonts.jua(textStyle: textTheme?.caption),
      button: GoogleFonts.jua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Judson font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Judson
  static TextStyle judson({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/judson/v12/FeVRS0Fbvbc14VxRD7N01bV7kg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/judson/v12/FeVTS0Fbvbc14VxhDblw97BrknZf.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/judson/v12/FeVSS0Fbvbc14Vxps5xQ3Z5nm29Gww.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Judson',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Judson font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Judson
  static TextTheme judsonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.judson(textStyle: textTheme?.display4),
      display3: GoogleFonts.judson(textStyle: textTheme?.display3),
      display2: GoogleFonts.judson(textStyle: textTheme?.display2),
      display1: GoogleFonts.judson(textStyle: textTheme?.display1),
      headline: GoogleFonts.judson(textStyle: textTheme?.headline),
      title: GoogleFonts.judson(textStyle: textTheme?.title),
      subhead: GoogleFonts.judson(textStyle: textTheme?.subhead),
      body2: GoogleFonts.judson(textStyle: textTheme?.body2),
      body1: GoogleFonts.judson(textStyle: textTheme?.body1),
      caption: GoogleFonts.judson(textStyle: textTheme?.caption),
      button: GoogleFonts.judson(textStyle: textTheme?.button),
      subtitle: GoogleFonts.judson(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.judson(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Julee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Julee
  static TextStyle julee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/julee/v9/TuGfUVB3RpZPQ6ZLodgzydtk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Julee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Julee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Julee
  static TextTheme juleeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.julee(textStyle: textTheme?.display4),
      display3: GoogleFonts.julee(textStyle: textTheme?.display3),
      display2: GoogleFonts.julee(textStyle: textTheme?.display2),
      display1: GoogleFonts.julee(textStyle: textTheme?.display1),
      headline: GoogleFonts.julee(textStyle: textTheme?.headline),
      title: GoogleFonts.julee(textStyle: textTheme?.title),
      subhead: GoogleFonts.julee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.julee(textStyle: textTheme?.body2),
      body1: GoogleFonts.julee(textStyle: textTheme?.body1),
      caption: GoogleFonts.julee(textStyle: textTheme?.caption),
      button: GoogleFonts.julee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.julee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.julee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Julius Sans One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Julius+Sans+One
  static TextStyle juliusSansOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/juliussansone/v8/1Pt2g8TAX_SGgBGUi0tGOYEga5W-xXEW6aGXHw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JuliusSansOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Julius Sans One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Julius+Sans+One
  static TextTheme juliusSansOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.juliusSansOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.juliusSansOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.juliusSansOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.juliusSansOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.juliusSansOne(textStyle: textTheme?.headline),
      title: GoogleFonts.juliusSansOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.juliusSansOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.juliusSansOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.juliusSansOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.juliusSansOne(textStyle: textTheme?.caption),
      button: GoogleFonts.juliusSansOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.juliusSansOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.juliusSansOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Junge font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Junge
  static TextStyle junge({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/junge/v7/gokgH670Gl1lUqAdvhB7SnKm.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Junge',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Junge font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Junge
  static TextTheme jungeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.junge(textStyle: textTheme?.display4),
      display3: GoogleFonts.junge(textStyle: textTheme?.display3),
      display2: GoogleFonts.junge(textStyle: textTheme?.display2),
      display1: GoogleFonts.junge(textStyle: textTheme?.display1),
      headline: GoogleFonts.junge(textStyle: textTheme?.headline),
      title: GoogleFonts.junge(textStyle: textTheme?.title),
      subhead: GoogleFonts.junge(textStyle: textTheme?.subhead),
      body2: GoogleFonts.junge(textStyle: textTheme?.body2),
      body1: GoogleFonts.junge(textStyle: textTheme?.body1),
      caption: GoogleFonts.junge(textStyle: textTheme?.caption),
      button: GoogleFonts.junge(textStyle: textTheme?.button),
      subtitle: GoogleFonts.junge(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.junge(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Jura font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jura
  static TextStyle jura({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/jura/v13/z7NOdRfiaC4Vd8hhoPzfb5vBTP0D7auhTfmrH_rt.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/jura/v13/z7NOdRfiaC4Vd8hhoPzfb5vBTP1d7auhTfmrH_rt.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/jura/v13/z7NOdRfiaC4Vd8hhoPzfb5vBTP1v7auhTfmrH_rt.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/jura/v13/z7NOdRfiaC4Vd8hhoPzfb5vBTP2D6quhTfmrH_rt.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/jura/v13/z7NOdRfiaC4Vd8hhoPzfb5vBTP266quhTfmrH_rt.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Jura',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Jura font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Jura
  static TextTheme juraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.jura(textStyle: textTheme?.display4),
      display3: GoogleFonts.jura(textStyle: textTheme?.display3),
      display2: GoogleFonts.jura(textStyle: textTheme?.display2),
      display1: GoogleFonts.jura(textStyle: textTheme?.display1),
      headline: GoogleFonts.jura(textStyle: textTheme?.headline),
      title: GoogleFonts.jura(textStyle: textTheme?.title),
      subhead: GoogleFonts.jura(textStyle: textTheme?.subhead),
      body2: GoogleFonts.jura(textStyle: textTheme?.body2),
      body1: GoogleFonts.jura(textStyle: textTheme?.body1),
      caption: GoogleFonts.jura(textStyle: textTheme?.caption),
      button: GoogleFonts.jura(textStyle: textTheme?.button),
      subtitle: GoogleFonts.jura(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.jura(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Just Another Hand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Just+Another+Hand
  static TextStyle justAnotherHand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/justanotherhand/v11/845CNN4-AJyIGvIou-6yJKyptyOpOcr_BmmlS5aw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JustAnotherHand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Just Another Hand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Just+Another+Hand
  static TextTheme justAnotherHandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.justAnotherHand(textStyle: textTheme?.display4),
      display3: GoogleFonts.justAnotherHand(textStyle: textTheme?.display3),
      display2: GoogleFonts.justAnotherHand(textStyle: textTheme?.display2),
      display1: GoogleFonts.justAnotherHand(textStyle: textTheme?.display1),
      headline: GoogleFonts.justAnotherHand(textStyle: textTheme?.headline),
      title: GoogleFonts.justAnotherHand(textStyle: textTheme?.title),
      subhead: GoogleFonts.justAnotherHand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.justAnotherHand(textStyle: textTheme?.body2),
      body1: GoogleFonts.justAnotherHand(textStyle: textTheme?.body1),
      caption: GoogleFonts.justAnotherHand(textStyle: textTheme?.caption),
      button: GoogleFonts.justAnotherHand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.justAnotherHand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.justAnotherHand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Just Me Again Down Here font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Just+Me+Again+Down+Here
  static TextStyle justMeAgainDownHere({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/justmeagaindownhere/v11/MwQmbgXtz-Wc6RUEGNMc0QpRrfUh2hSdBBMoAuwHvqDwc_fg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'JustMeAgainDownHere',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Just Me Again Down Here font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Just+Me+Again+Down+Here
  static TextTheme justMeAgainDownHereTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.display4),
      display3: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.display3),
      display2: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.display2),
      display1: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.display1),
      headline: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.headline),
      title: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.title),
      subhead: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.subhead),
      body2: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.body2),
      body1: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.body1),
      caption: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.caption),
      button: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.button),
      subtitle: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.justMeAgainDownHere(textStyle: textTheme?.overline),
    );
  }

  /// Applies the K2D font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/K2D
  static TextStyle k2D({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aRnpF2V0ErE6UpvrIw74NL.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/k2d/v3/J7afnpF2V0EjdZ1NtLYS6pNLAjk.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aenpF2V0Erv4QJlJw85ppSGw.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/k2d/v3/J7acnpF2V0EjdZ3hlZY4xJ9CGyAa.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aenpF2V0Er24cJlJw85ppSGw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/k2d/v3/J7acnpF2V0EjdZ2FlpY4xJ9CGyAa.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aTnpF2V0ETd68tnLcg7w.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aRnpF2V0EjdaUpvrIw74NL.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aenpF2V0Erg4YJlJw85ppSGw.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/k2d/v3/J7acnpF2V0EjdZ3dl5Y4xJ9CGyAa.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aenpF2V0Err4EJlJw85ppSGw.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/k2d/v3/J7acnpF2V0EjdZ3xkJY4xJ9CGyAa.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aenpF2V0Ery4AJlJw85ppSGw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/k2d/v3/J7acnpF2V0EjdZ2VkZY4xJ9CGyAa.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/k2d/v3/J7aenpF2V0Er14MJlJw85ppSGw.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/k2d/v3/J7acnpF2V0EjdZ2JkpY4xJ9CGyAa.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'K2D',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the K2D font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/K2D
  static TextTheme k2DTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.k2D(textStyle: textTheme?.display4),
      display3: GoogleFonts.k2D(textStyle: textTheme?.display3),
      display2: GoogleFonts.k2D(textStyle: textTheme?.display2),
      display1: GoogleFonts.k2D(textStyle: textTheme?.display1),
      headline: GoogleFonts.k2D(textStyle: textTheme?.headline),
      title: GoogleFonts.k2D(textStyle: textTheme?.title),
      subhead: GoogleFonts.k2D(textStyle: textTheme?.subhead),
      body2: GoogleFonts.k2D(textStyle: textTheme?.body2),
      body1: GoogleFonts.k2D(textStyle: textTheme?.body1),
      caption: GoogleFonts.k2D(textStyle: textTheme?.caption),
      button: GoogleFonts.k2D(textStyle: textTheme?.button),
      subtitle: GoogleFonts.k2D(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.k2D(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kadwa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kadwa
  static TextStyle kadwa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kadwa/v4/rnCm-x5V0g7iphTHRcc2s2XH.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/kadwa/v4/rnCr-x5V0g7ipix7auM-mHnOSOuk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kadwa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kadwa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kadwa
  static TextTheme kadwaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kadwa(textStyle: textTheme?.display4),
      display3: GoogleFonts.kadwa(textStyle: textTheme?.display3),
      display2: GoogleFonts.kadwa(textStyle: textTheme?.display2),
      display1: GoogleFonts.kadwa(textStyle: textTheme?.display1),
      headline: GoogleFonts.kadwa(textStyle: textTheme?.headline),
      title: GoogleFonts.kadwa(textStyle: textTheme?.title),
      subhead: GoogleFonts.kadwa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kadwa(textStyle: textTheme?.body2),
      body1: GoogleFonts.kadwa(textStyle: textTheme?.body1),
      caption: GoogleFonts.kadwa(textStyle: textTheme?.caption),
      button: GoogleFonts.kadwa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kadwa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kadwa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kalam font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kalam
  static TextStyle kalam({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/kalam/v10/YA9Qr0Wd4kDdMtD6GgLLmCUItqGt.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kalam/v10/YA9dr0Wd4kDdMuhWMibDszkB.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/kalam/v10/YA9Qr0Wd4kDdMtDqHQLLmCUItqGt.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kalam',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kalam font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kalam
  static TextTheme kalamTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kalam(textStyle: textTheme?.display4),
      display3: GoogleFonts.kalam(textStyle: textTheme?.display3),
      display2: GoogleFonts.kalam(textStyle: textTheme?.display2),
      display1: GoogleFonts.kalam(textStyle: textTheme?.display1),
      headline: GoogleFonts.kalam(textStyle: textTheme?.headline),
      title: GoogleFonts.kalam(textStyle: textTheme?.title),
      subhead: GoogleFonts.kalam(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kalam(textStyle: textTheme?.body2),
      body1: GoogleFonts.kalam(textStyle: textTheme?.body1),
      caption: GoogleFonts.kalam(textStyle: textTheme?.caption),
      button: GoogleFonts.kalam(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kalam(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kalam(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kameron font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kameron
  static TextStyle kameron({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kameron/v10/vm82dR7vXErQxuznsL4wL-XIYH8.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/kameron/v10/vm8zdR7vXErQxuzniAIfC-3jfHb--NY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kameron',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kameron font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kameron
  static TextTheme kameronTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kameron(textStyle: textTheme?.display4),
      display3: GoogleFonts.kameron(textStyle: textTheme?.display3),
      display2: GoogleFonts.kameron(textStyle: textTheme?.display2),
      display1: GoogleFonts.kameron(textStyle: textTheme?.display1),
      headline: GoogleFonts.kameron(textStyle: textTheme?.headline),
      title: GoogleFonts.kameron(textStyle: textTheme?.title),
      subhead: GoogleFonts.kameron(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kameron(textStyle: textTheme?.body2),
      body1: GoogleFonts.kameron(textStyle: textTheme?.body1),
      caption: GoogleFonts.kameron(textStyle: textTheme?.caption),
      button: GoogleFonts.kameron(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kameron(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kameron(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kanit font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kanit
  static TextStyle kanit({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKX-Go6G5tXcr72GwWKcaxALFs.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKV-Go6G5tXcraQI2GAdY5FPFtrGw.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKU-Go6G5tXcr5aOiWgX6BJNUJy.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKS-Go6G5tXcraQI82hVaRrMFJyAu4.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKU-Go6G5tXcr4-OSWgX6BJNUJy.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKS-Go6G5tXcraQI6miVaRrMFJyAu4.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKZ-Go6G5tXcoaSEQGodLxA.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKX-Go6G5tXcraQGwWKcaxALFs.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKU-Go6G5tXcr5mOCWgX6BJNUJy.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKS-Go6G5tXcraQI_GjVaRrMFJyAu4.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKU-Go6G5tXcr5KPyWgX6BJNUJy.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKS-Go6G5tXcraQI92kVaRrMFJyAu4.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKU-Go6G5tXcr4uPiWgX6BJNUJy.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKS-Go6G5tXcraQI7mlVaRrMFJyAu4.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKU-Go6G5tXcr4yPSWgX6BJNUJy.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKS-Go6G5tXcraQI6WmVaRrMFJyAu4.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKU-Go6G5tXcr4WPCWgX6BJNUJy.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/kanit/v5/nKKS-Go6G5tXcraQI4GnVaRrMFJyAu4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kanit',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kanit font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kanit
  static TextTheme kanitTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kanit(textStyle: textTheme?.display4),
      display3: GoogleFonts.kanit(textStyle: textTheme?.display3),
      display2: GoogleFonts.kanit(textStyle: textTheme?.display2),
      display1: GoogleFonts.kanit(textStyle: textTheme?.display1),
      headline: GoogleFonts.kanit(textStyle: textTheme?.headline),
      title: GoogleFonts.kanit(textStyle: textTheme?.title),
      subhead: GoogleFonts.kanit(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kanit(textStyle: textTheme?.body2),
      body1: GoogleFonts.kanit(textStyle: textTheme?.body1),
      caption: GoogleFonts.kanit(textStyle: textTheme?.caption),
      button: GoogleFonts.kanit(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kanit(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kanit(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kantumruy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kantumruy
  static TextStyle kantumruy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/kantumruy/v7/syk0-yJ0m7wyVb-f4FOPUtDlpn-UJ1H6Uw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kantumruy/v7/sykx-yJ0m7wyVb-f4FO3_vjBrlSILg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/kantumruy/v7/syk0-yJ0m7wyVb-f4FOPQtflpn-UJ1H6Uw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kantumruy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kantumruy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kantumruy
  static TextTheme kantumruyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kantumruy(textStyle: textTheme?.display4),
      display3: GoogleFonts.kantumruy(textStyle: textTheme?.display3),
      display2: GoogleFonts.kantumruy(textStyle: textTheme?.display2),
      display1: GoogleFonts.kantumruy(textStyle: textTheme?.display1),
      headline: GoogleFonts.kantumruy(textStyle: textTheme?.headline),
      title: GoogleFonts.kantumruy(textStyle: textTheme?.title),
      subhead: GoogleFonts.kantumruy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kantumruy(textStyle: textTheme?.body2),
      body1: GoogleFonts.kantumruy(textStyle: textTheme?.body1),
      caption: GoogleFonts.kantumruy(textStyle: textTheme?.caption),
      button: GoogleFonts.kantumruy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kantumruy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kantumruy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Karla font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Karla
  static TextStyle karla({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/karla/v13/qkBbXvYC6trAT4RSJN225aZO.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/karla/v13/qkBVXvYC6trAT7RQLtmU4LZOgAU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/karla/v13/qkBWXvYC6trAT7zuC_m-zrpHmRzC.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/karla/v13/qkBQXvYC6trAT7RQFmW7xL5lnAzCKNg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Karla',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Karla font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Karla
  static TextTheme karlaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.karla(textStyle: textTheme?.display4),
      display3: GoogleFonts.karla(textStyle: textTheme?.display3),
      display2: GoogleFonts.karla(textStyle: textTheme?.display2),
      display1: GoogleFonts.karla(textStyle: textTheme?.display1),
      headline: GoogleFonts.karla(textStyle: textTheme?.headline),
      title: GoogleFonts.karla(textStyle: textTheme?.title),
      subhead: GoogleFonts.karla(textStyle: textTheme?.subhead),
      body2: GoogleFonts.karla(textStyle: textTheme?.body2),
      body1: GoogleFonts.karla(textStyle: textTheme?.body1),
      caption: GoogleFonts.karla(textStyle: textTheme?.caption),
      button: GoogleFonts.karla(textStyle: textTheme?.button),
      subtitle: GoogleFonts.karla(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.karla(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Karma font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Karma
  static TextStyle karma({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/karma/v10/va9F4kzAzMZRGLjDY8Z_uqzGQC_-.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/karma/v10/va9I4kzAzMZRGIBvS-J3kbDP.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/karma/v10/va9F4kzAzMZRGLibYsZ_uqzGQC_-.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/karma/v10/va9F4kzAzMZRGLi3ZcZ_uqzGQC_-.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/karma/v10/va9F4kzAzMZRGLjTZMZ_uqzGQC_-.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Karma',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Karma font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Karma
  static TextTheme karmaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.karma(textStyle: textTheme?.display4),
      display3: GoogleFonts.karma(textStyle: textTheme?.display3),
      display2: GoogleFonts.karma(textStyle: textTheme?.display2),
      display1: GoogleFonts.karma(textStyle: textTheme?.display1),
      headline: GoogleFonts.karma(textStyle: textTheme?.headline),
      title: GoogleFonts.karma(textStyle: textTheme?.title),
      subhead: GoogleFonts.karma(textStyle: textTheme?.subhead),
      body2: GoogleFonts.karma(textStyle: textTheme?.body2),
      body1: GoogleFonts.karma(textStyle: textTheme?.body1),
      caption: GoogleFonts.karma(textStyle: textTheme?.caption),
      button: GoogleFonts.karma(textStyle: textTheme?.button),
      subtitle: GoogleFonts.karma(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.karma(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Katibeh font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Katibeh
  static TextStyle katibeh({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/katibeh/v7/ZGjXol5MQJog4bxDaC1RVDNdGDs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Katibeh',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Katibeh font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Katibeh
  static TextTheme katibehTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.katibeh(textStyle: textTheme?.display4),
      display3: GoogleFonts.katibeh(textStyle: textTheme?.display3),
      display2: GoogleFonts.katibeh(textStyle: textTheme?.display2),
      display1: GoogleFonts.katibeh(textStyle: textTheme?.display1),
      headline: GoogleFonts.katibeh(textStyle: textTheme?.headline),
      title: GoogleFonts.katibeh(textStyle: textTheme?.title),
      subhead: GoogleFonts.katibeh(textStyle: textTheme?.subhead),
      body2: GoogleFonts.katibeh(textStyle: textTheme?.body2),
      body1: GoogleFonts.katibeh(textStyle: textTheme?.body1),
      caption: GoogleFonts.katibeh(textStyle: textTheme?.caption),
      button: GoogleFonts.katibeh(textStyle: textTheme?.button),
      subtitle: GoogleFonts.katibeh(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.katibeh(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kaushan Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kaushan+Script
  static TextStyle kaushanScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kaushanscript/v8/vm8vdRfvXFLG3OLnsO15WYS5DF7_ytN3M48a.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KaushanScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kaushan Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kaushan+Script
  static TextTheme kaushanScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kaushanScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.kaushanScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.kaushanScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.kaushanScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.kaushanScript(textStyle: textTheme?.headline),
      title: GoogleFonts.kaushanScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.kaushanScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kaushanScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.kaushanScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.kaushanScript(textStyle: textTheme?.caption),
      button: GoogleFonts.kaushanScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kaushanScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kaushanScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kavivanar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kavivanar
  static TextStyle kavivanar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kavivanar/v5/o-0IIpQgyXYSwhxP7_Jb4j5Ba_2c7A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kavivanar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kavivanar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kavivanar
  static TextTheme kavivanarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kavivanar(textStyle: textTheme?.display4),
      display3: GoogleFonts.kavivanar(textStyle: textTheme?.display3),
      display2: GoogleFonts.kavivanar(textStyle: textTheme?.display2),
      display1: GoogleFonts.kavivanar(textStyle: textTheme?.display1),
      headline: GoogleFonts.kavivanar(textStyle: textTheme?.headline),
      title: GoogleFonts.kavivanar(textStyle: textTheme?.title),
      subhead: GoogleFonts.kavivanar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kavivanar(textStyle: textTheme?.body2),
      body1: GoogleFonts.kavivanar(textStyle: textTheme?.body1),
      caption: GoogleFonts.kavivanar(textStyle: textTheme?.caption),
      button: GoogleFonts.kavivanar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kavivanar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kavivanar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kavoon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kavoon
  static TextStyle kavoon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kavoon/v8/pxiFyp4_scRYhlU4NLr6f1pdEQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kavoon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kavoon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kavoon
  static TextTheme kavoonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kavoon(textStyle: textTheme?.display4),
      display3: GoogleFonts.kavoon(textStyle: textTheme?.display3),
      display2: GoogleFonts.kavoon(textStyle: textTheme?.display2),
      display1: GoogleFonts.kavoon(textStyle: textTheme?.display1),
      headline: GoogleFonts.kavoon(textStyle: textTheme?.headline),
      title: GoogleFonts.kavoon(textStyle: textTheme?.title),
      subhead: GoogleFonts.kavoon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kavoon(textStyle: textTheme?.body2),
      body1: GoogleFonts.kavoon(textStyle: textTheme?.body1),
      caption: GoogleFonts.kavoon(textStyle: textTheme?.caption),
      button: GoogleFonts.kavoon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kavoon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kavoon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kdam Thmor font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kdam+Thmor
  static TextStyle kdamThmor({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kdamthmor/v7/MwQzbhjs3veF6QwJVf0JkGMViblPtXs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KdamThmor',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kdam Thmor font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kdam+Thmor
  static TextTheme kdamThmorTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kdamThmor(textStyle: textTheme?.display4),
      display3: GoogleFonts.kdamThmor(textStyle: textTheme?.display3),
      display2: GoogleFonts.kdamThmor(textStyle: textTheme?.display2),
      display1: GoogleFonts.kdamThmor(textStyle: textTheme?.display1),
      headline: GoogleFonts.kdamThmor(textStyle: textTheme?.headline),
      title: GoogleFonts.kdamThmor(textStyle: textTheme?.title),
      subhead: GoogleFonts.kdamThmor(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kdamThmor(textStyle: textTheme?.body2),
      body1: GoogleFonts.kdamThmor(textStyle: textTheme?.body1),
      caption: GoogleFonts.kdamThmor(textStyle: textTheme?.caption),
      button: GoogleFonts.kdamThmor(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kdamThmor(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kdamThmor(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Keania One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Keania+One
  static TextStyle keaniaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/keaniaone/v7/zOL54pXJk65E8pXardnuycRuv-hHkOs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KeaniaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Keania One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Keania+One
  static TextTheme keaniaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.keaniaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.keaniaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.keaniaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.keaniaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.keaniaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.keaniaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.keaniaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.keaniaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.keaniaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.keaniaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.keaniaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.keaniaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.keaniaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kelly Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kelly+Slab
  static TextStyle kellySlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kellyslab/v10/-W_7XJX0Rz3cxUnJC5t6TkMBf50kbiM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KellySlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kelly Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kelly+Slab
  static TextTheme kellySlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kellySlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.kellySlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.kellySlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.kellySlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.kellySlab(textStyle: textTheme?.headline),
      title: GoogleFonts.kellySlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.kellySlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kellySlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.kellySlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.kellySlab(textStyle: textTheme?.caption),
      button: GoogleFonts.kellySlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kellySlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kellySlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kenia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kenia
  static TextStyle kenia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kenia/v11/jizURE5PuHQH9qCONUGswfGM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kenia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kenia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kenia
  static TextTheme keniaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kenia(textStyle: textTheme?.display4),
      display3: GoogleFonts.kenia(textStyle: textTheme?.display3),
      display2: GoogleFonts.kenia(textStyle: textTheme?.display2),
      display1: GoogleFonts.kenia(textStyle: textTheme?.display1),
      headline: GoogleFonts.kenia(textStyle: textTheme?.headline),
      title: GoogleFonts.kenia(textStyle: textTheme?.title),
      subhead: GoogleFonts.kenia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kenia(textStyle: textTheme?.body2),
      body1: GoogleFonts.kenia(textStyle: textTheme?.body1),
      caption: GoogleFonts.kenia(textStyle: textTheme?.caption),
      button: GoogleFonts.kenia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kenia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kenia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Khand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khand
  static TextStyle khand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/khand/v8/TwMN-IINQlQQ0bL5cFE3ZwaH__-C.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/khand/v8/TwMA-IINQlQQ0YpVWHU_TBqO.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/khand/v8/TwMN-IINQlQQ0bKhcVE3ZwaH__-C.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/khand/v8/TwMN-IINQlQQ0bKNdlE3ZwaH__-C.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/khand/v8/TwMN-IINQlQQ0bLpd1E3ZwaH__-C.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Khand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Khand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khand
  static TextTheme khandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.khand(textStyle: textTheme?.display4),
      display3: GoogleFonts.khand(textStyle: textTheme?.display3),
      display2: GoogleFonts.khand(textStyle: textTheme?.display2),
      display1: GoogleFonts.khand(textStyle: textTheme?.display1),
      headline: GoogleFonts.khand(textStyle: textTheme?.headline),
      title: GoogleFonts.khand(textStyle: textTheme?.title),
      subhead: GoogleFonts.khand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.khand(textStyle: textTheme?.body2),
      body1: GoogleFonts.khand(textStyle: textTheme?.body1),
      caption: GoogleFonts.khand(textStyle: textTheme?.caption),
      button: GoogleFonts.khand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.khand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.khand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Khmer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khmer
  static TextStyle khmer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/khmer/v12/MjQImit_vPPwpF-BpN2EeYmD.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Khmer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Khmer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khmer
  static TextTheme khmerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.khmer(textStyle: textTheme?.display4),
      display3: GoogleFonts.khmer(textStyle: textTheme?.display3),
      display2: GoogleFonts.khmer(textStyle: textTheme?.display2),
      display1: GoogleFonts.khmer(textStyle: textTheme?.display1),
      headline: GoogleFonts.khmer(textStyle: textTheme?.headline),
      title: GoogleFonts.khmer(textStyle: textTheme?.title),
      subhead: GoogleFonts.khmer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.khmer(textStyle: textTheme?.body2),
      body1: GoogleFonts.khmer(textStyle: textTheme?.body1),
      caption: GoogleFonts.khmer(textStyle: textTheme?.caption),
      button: GoogleFonts.khmer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.khmer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.khmer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Khula font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khula
  static TextStyle khula({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/khula/v5/OpNPnoEOns3V7G-ljCvUrC59XwXD.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/khula/v5/OpNCnoEOns3V7FcJpA_chzJ0.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/khula/v5/OpNPnoEOns3V7G_RiivUrC59XwXD.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/khula/v5/OpNPnoEOns3V7G-1iyvUrC59XwXD.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/khula/v5/OpNPnoEOns3V7G-piCvUrC59XwXD.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Khula',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Khula font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Khula
  static TextTheme khulaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.khula(textStyle: textTheme?.display4),
      display3: GoogleFonts.khula(textStyle: textTheme?.display3),
      display2: GoogleFonts.khula(textStyle: textTheme?.display2),
      display1: GoogleFonts.khula(textStyle: textTheme?.display1),
      headline: GoogleFonts.khula(textStyle: textTheme?.headline),
      title: GoogleFonts.khula(textStyle: textTheme?.title),
      subhead: GoogleFonts.khula(textStyle: textTheme?.subhead),
      body2: GoogleFonts.khula(textStyle: textTheme?.body2),
      body1: GoogleFonts.khula(textStyle: textTheme?.body1),
      caption: GoogleFonts.khula(textStyle: textTheme?.caption),
      button: GoogleFonts.khula(textStyle: textTheme?.button),
      subtitle: GoogleFonts.khula(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.khula(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kirang Haerang font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kirang+Haerang
  static TextStyle kirangHaerang({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kiranghaerang/v8/E21-_dn_gvvIjhYON1lpIU4-bcqvWPaJq4no.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KirangHaerang',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kirang Haerang font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kirang+Haerang
  static TextTheme kirangHaerangTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kirangHaerang(textStyle: textTheme?.display4),
      display3: GoogleFonts.kirangHaerang(textStyle: textTheme?.display3),
      display2: GoogleFonts.kirangHaerang(textStyle: textTheme?.display2),
      display1: GoogleFonts.kirangHaerang(textStyle: textTheme?.display1),
      headline: GoogleFonts.kirangHaerang(textStyle: textTheme?.headline),
      title: GoogleFonts.kirangHaerang(textStyle: textTheme?.title),
      subhead: GoogleFonts.kirangHaerang(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kirangHaerang(textStyle: textTheme?.body2),
      body1: GoogleFonts.kirangHaerang(textStyle: textTheme?.body1),
      caption: GoogleFonts.kirangHaerang(textStyle: textTheme?.caption),
      button: GoogleFonts.kirangHaerang(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kirangHaerang(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kirangHaerang(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kite One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kite+One
  static TextStyle kiteOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kiteone/v7/70lQu7shLnA_E02vyq1b6HnGO4uA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KiteOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kite One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kite+One
  static TextTheme kiteOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kiteOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.kiteOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.kiteOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.kiteOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.kiteOne(textStyle: textTheme?.headline),
      title: GoogleFonts.kiteOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.kiteOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kiteOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.kiteOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.kiteOne(textStyle: textTheme?.caption),
      button: GoogleFonts.kiteOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kiteOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kiteOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Knewave font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Knewave
  static TextStyle knewave({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/knewave/v8/sykz-yx0lLcxQaSItSq9-trEvlQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Knewave',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Knewave font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Knewave
  static TextTheme knewaveTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.knewave(textStyle: textTheme?.display4),
      display3: GoogleFonts.knewave(textStyle: textTheme?.display3),
      display2: GoogleFonts.knewave(textStyle: textTheme?.display2),
      display1: GoogleFonts.knewave(textStyle: textTheme?.display1),
      headline: GoogleFonts.knewave(textStyle: textTheme?.headline),
      title: GoogleFonts.knewave(textStyle: textTheme?.title),
      subhead: GoogleFonts.knewave(textStyle: textTheme?.subhead),
      body2: GoogleFonts.knewave(textStyle: textTheme?.body2),
      body1: GoogleFonts.knewave(textStyle: textTheme?.body1),
      caption: GoogleFonts.knewave(textStyle: textTheme?.caption),
      button: GoogleFonts.knewave(textStyle: textTheme?.button),
      subtitle: GoogleFonts.knewave(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.knewave(textStyle: textTheme?.overline),
    );
  }

  /// Applies the KoHo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/KoHo
  static TextStyle koHo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/koho/v3/K2FxfZ5fmddNPuE1WJ75JoKhHys.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/koho/v3/K2FzfZ5fmddNNisssJ_zIqCkDyvqZA.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/koho/v3/K2FxfZ5fmddNPoU2WJ75JoKhHys.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/koho/v3/K2FzfZ5fmddNNiss1JzzIqCkDyvqZA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/koho/v3/K2F-fZ5fmddNBikefJbSOos.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/koho/v3/K2FwfZ5fmddNNisUeLTXKou4Bg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/koho/v3/K2FxfZ5fmddNPt03WJ75JoKhHys.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/koho/v3/K2FzfZ5fmddNNissjJ3zIqCkDyvqZA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/koho/v3/K2FxfZ5fmddNPvEwWJ75JoKhHys.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/koho/v3/K2FzfZ5fmddNNissoJrzIqCkDyvqZA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/koho/v3/K2FxfZ5fmddNPpUxWJ75JoKhHys.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/koho/v3/K2FzfZ5fmddNNissxJvzIqCkDyvqZA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KoHo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the KoHo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/KoHo
  static TextTheme koHoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.koHo(textStyle: textTheme?.display4),
      display3: GoogleFonts.koHo(textStyle: textTheme?.display3),
      display2: GoogleFonts.koHo(textStyle: textTheme?.display2),
      display1: GoogleFonts.koHo(textStyle: textTheme?.display1),
      headline: GoogleFonts.koHo(textStyle: textTheme?.headline),
      title: GoogleFonts.koHo(textStyle: textTheme?.title),
      subhead: GoogleFonts.koHo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.koHo(textStyle: textTheme?.body2),
      body1: GoogleFonts.koHo(textStyle: textTheme?.body1),
      caption: GoogleFonts.koHo(textStyle: textTheme?.caption),
      button: GoogleFonts.koHo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.koHo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.koHo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kodchasan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kodchasan
  static TextStyle kodchasan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cX0aUPOAJv9sG4I-DJeR1Cggeqo3eMeoA.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cXqaUPOAJv9sG4I-DJWjUlIgOCs_-YOoIgN.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cX0aUPOAJv9sG4I-DJeI1Oggeqo3eMeoA.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cXqaUPOAJv9sG4I-DJWjUksg-Cs_-YOoIgN.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cXxaUPOAJv9sG4I-DJmj3uEicG01A.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cX3aUPOAJv9sG4I-DJWjXGAq8Sk1PoH.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cX0aUPOAJv9sG4I-DJee1Kggeqo3eMeoA.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cXqaUPOAJv9sG4I-DJWjUl0guCs_-YOoIgN.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cX0aUPOAJv9sG4I-DJeV1Wggeqo3eMeoA.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cXqaUPOAJv9sG4I-DJWjUlYheCs_-YOoIgN.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cX0aUPOAJv9sG4I-DJeM1Sggeqo3eMeoA.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/kodchasan/v3/1cXqaUPOAJv9sG4I-DJWjUk8hOCs_-YOoIgN.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kodchasan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kodchasan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kodchasan
  static TextTheme kodchasanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kodchasan(textStyle: textTheme?.display4),
      display3: GoogleFonts.kodchasan(textStyle: textTheme?.display3),
      display2: GoogleFonts.kodchasan(textStyle: textTheme?.display2),
      display1: GoogleFonts.kodchasan(textStyle: textTheme?.display1),
      headline: GoogleFonts.kodchasan(textStyle: textTheme?.headline),
      title: GoogleFonts.kodchasan(textStyle: textTheme?.title),
      subhead: GoogleFonts.kodchasan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kodchasan(textStyle: textTheme?.body2),
      body1: GoogleFonts.kodchasan(textStyle: textTheme?.body1),
      caption: GoogleFonts.kodchasan(textStyle: textTheme?.caption),
      button: GoogleFonts.kodchasan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kodchasan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kodchasan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kosugi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kosugi
  static TextStyle kosugi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kosugi/v6/pxiFyp4_v8FCjlI4NLr6f1pdEQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kosugi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kosugi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kosugi
  static TextTheme kosugiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kosugi(textStyle: textTheme?.display4),
      display3: GoogleFonts.kosugi(textStyle: textTheme?.display3),
      display2: GoogleFonts.kosugi(textStyle: textTheme?.display2),
      display1: GoogleFonts.kosugi(textStyle: textTheme?.display1),
      headline: GoogleFonts.kosugi(textStyle: textTheme?.headline),
      title: GoogleFonts.kosugi(textStyle: textTheme?.title),
      subhead: GoogleFonts.kosugi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kosugi(textStyle: textTheme?.body2),
      body1: GoogleFonts.kosugi(textStyle: textTheme?.body1),
      caption: GoogleFonts.kosugi(textStyle: textTheme?.caption),
      button: GoogleFonts.kosugi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kosugi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kosugi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kosugi Maru font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kosugi+Maru
  static TextStyle kosugiMaru({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kosugimaru/v6/0nksC9PgP_wGh21A2KeqGiTqivr9iBq_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KosugiMaru',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kosugi Maru font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kosugi+Maru
  static TextTheme kosugiMaruTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kosugiMaru(textStyle: textTheme?.display4),
      display3: GoogleFonts.kosugiMaru(textStyle: textTheme?.display3),
      display2: GoogleFonts.kosugiMaru(textStyle: textTheme?.display2),
      display1: GoogleFonts.kosugiMaru(textStyle: textTheme?.display1),
      headline: GoogleFonts.kosugiMaru(textStyle: textTheme?.headline),
      title: GoogleFonts.kosugiMaru(textStyle: textTheme?.title),
      subhead: GoogleFonts.kosugiMaru(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kosugiMaru(textStyle: textTheme?.body2),
      body1: GoogleFonts.kosugiMaru(textStyle: textTheme?.body1),
      caption: GoogleFonts.kosugiMaru(textStyle: textTheme?.caption),
      button: GoogleFonts.kosugiMaru(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kosugiMaru(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kosugiMaru(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kotta One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kotta+One
  static TextStyle kottaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kottaone/v7/S6u_w41LXzPc_jlfNWqPHA3s5dwt7w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KottaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kotta One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kotta+One
  static TextTheme kottaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kottaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.kottaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.kottaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.kottaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.kottaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.kottaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.kottaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kottaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.kottaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.kottaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.kottaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kottaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kottaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Koulen font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Koulen
  static TextStyle koulen({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/koulen/v13/AMOQz46as3KIBPeWgnA9kuYMUg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Koulen',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Koulen font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Koulen
  static TextTheme koulenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.koulen(textStyle: textTheme?.display4),
      display3: GoogleFonts.koulen(textStyle: textTheme?.display3),
      display2: GoogleFonts.koulen(textStyle: textTheme?.display2),
      display1: GoogleFonts.koulen(textStyle: textTheme?.display1),
      headline: GoogleFonts.koulen(textStyle: textTheme?.headline),
      title: GoogleFonts.koulen(textStyle: textTheme?.title),
      subhead: GoogleFonts.koulen(textStyle: textTheme?.subhead),
      body2: GoogleFonts.koulen(textStyle: textTheme?.body2),
      body1: GoogleFonts.koulen(textStyle: textTheme?.body1),
      caption: GoogleFonts.koulen(textStyle: textTheme?.caption),
      button: GoogleFonts.koulen(textStyle: textTheme?.button),
      subtitle: GoogleFonts.koulen(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.koulen(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kranky font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kranky
  static TextStyle kranky({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kranky/v10/hESw6XVgJzlPsFnMpheEZo_H_w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kranky',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kranky font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kranky
  static TextTheme krankyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kranky(textStyle: textTheme?.display4),
      display3: GoogleFonts.kranky(textStyle: textTheme?.display3),
      display2: GoogleFonts.kranky(textStyle: textTheme?.display2),
      display1: GoogleFonts.kranky(textStyle: textTheme?.display1),
      headline: GoogleFonts.kranky(textStyle: textTheme?.headline),
      title: GoogleFonts.kranky(textStyle: textTheme?.title),
      subhead: GoogleFonts.kranky(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kranky(textStyle: textTheme?.body2),
      body1: GoogleFonts.kranky(textStyle: textTheme?.body1),
      caption: GoogleFonts.kranky(textStyle: textTheme?.caption),
      button: GoogleFonts.kranky(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kranky(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kranky(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kreon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kreon
  static TextStyle kreon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/kreon/v21/t5t9IRIUKY-TFF_LW5lnMR3v2DnvPNimejUfp2dWNg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kreon/v21/t5t9IRIUKY-TFF_LW5lnMR3v2DnvYtimejUfp2dWNg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/kreon/v21/t5t9IRIUKY-TFF_LW5lnMR3v2DnvUNimejUfp2dWNg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/kreon/v21/t5t9IRIUKY-TFF_LW5lnMR3v2DnvvN-mejUfp2dWNg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/kreon/v21/t5t9IRIUKY-TFF_LW5lnMR3v2Dnvhd-mejUfp2dWNg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kreon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kreon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kreon
  static TextTheme kreonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kreon(textStyle: textTheme?.display4),
      display3: GoogleFonts.kreon(textStyle: textTheme?.display3),
      display2: GoogleFonts.kreon(textStyle: textTheme?.display2),
      display1: GoogleFonts.kreon(textStyle: textTheme?.display1),
      headline: GoogleFonts.kreon(textStyle: textTheme?.headline),
      title: GoogleFonts.kreon(textStyle: textTheme?.title),
      subhead: GoogleFonts.kreon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kreon(textStyle: textTheme?.body2),
      body1: GoogleFonts.kreon(textStyle: textTheme?.body1),
      caption: GoogleFonts.kreon(textStyle: textTheme?.caption),
      button: GoogleFonts.kreon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kreon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kreon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kristi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kristi
  static TextStyle kristi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kristi/v11/uK_y4ricdeU6zwdRCh0TMv6EXw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kristi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kristi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kristi
  static TextTheme kristiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kristi(textStyle: textTheme?.display4),
      display3: GoogleFonts.kristi(textStyle: textTheme?.display3),
      display2: GoogleFonts.kristi(textStyle: textTheme?.display2),
      display1: GoogleFonts.kristi(textStyle: textTheme?.display1),
      headline: GoogleFonts.kristi(textStyle: textTheme?.headline),
      title: GoogleFonts.kristi(textStyle: textTheme?.title),
      subhead: GoogleFonts.kristi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kristi(textStyle: textTheme?.body2),
      body1: GoogleFonts.kristi(textStyle: textTheme?.body1),
      caption: GoogleFonts.kristi(textStyle: textTheme?.caption),
      button: GoogleFonts.kristi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kristi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kristi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Krona One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Krona+One
  static TextStyle kronaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kronaone/v8/jAnEgHdjHcjgfIb1ZcUCMY-h3cWkWg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KronaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Krona One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Krona+One
  static TextTheme kronaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kronaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.kronaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.kronaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.kronaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.kronaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.kronaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.kronaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kronaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.kronaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.kronaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.kronaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kronaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kronaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Krub font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Krub
  static TextStyle krub({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/krub/v3/sZlEdRyC6CRYZo47KLF4R6gWaf8.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/krub/v3/sZlGdRyC6CRYbkQiwLByQ4oTef_6gQ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/krub/v3/sZlEdRyC6CRYZuo4KLF4R6gWaf8.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/krub/v3/sZlGdRyC6CRYbkQipLNyQ4oTef_6gQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/krub/v3/sZlLdRyC6CRYXkYQDLlTW6E.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/krub/v3/sZlFdRyC6CRYbkQaCJtWS6EPcA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/krub/v3/sZlEdRyC6CRYZrI5KLF4R6gWaf8.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/krub/v3/sZlGdRyC6CRYbkQi_LJyQ4oTef_6gQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/krub/v3/sZlEdRyC6CRYZp4-KLF4R6gWaf8.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/krub/v3/sZlGdRyC6CRYbkQi0LVyQ4oTef_6gQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/krub/v3/sZlEdRyC6CRYZvo_KLF4R6gWaf8.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/krub/v3/sZlGdRyC6CRYbkQitLRyQ4oTef_6gQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Krub',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Krub font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Krub
  static TextTheme krubTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.krub(textStyle: textTheme?.display4),
      display3: GoogleFonts.krub(textStyle: textTheme?.display3),
      display2: GoogleFonts.krub(textStyle: textTheme?.display2),
      display1: GoogleFonts.krub(textStyle: textTheme?.display1),
      headline: GoogleFonts.krub(textStyle: textTheme?.headline),
      title: GoogleFonts.krub(textStyle: textTheme?.title),
      subhead: GoogleFonts.krub(textStyle: textTheme?.subhead),
      body2: GoogleFonts.krub(textStyle: textTheme?.body2),
      body1: GoogleFonts.krub(textStyle: textTheme?.body1),
      caption: GoogleFonts.krub(textStyle: textTheme?.caption),
      button: GoogleFonts.krub(textStyle: textTheme?.button),
      subtitle: GoogleFonts.krub(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.krub(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kulim Park font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kulim+Park
  static TextStyle kulimPark({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdN49secq3hflz1Uu3IwjJYNwa5aZbUvGjU.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdNm9secq3hflz1Uu3IwhFwUKa9QYZcqCjVVUA.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdN49secq3hflz1Uu3IwjPIOwa5aZbUvGjU.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdNm9secq3hflz1Uu3IwhFwUTaxQYZcqCjVVUA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdN79secq3hflz1Uu3IwtF4m5aZxebw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdN59secq3hflz1Uu3IwhFws4YR0abw2Aw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdN49secq3hflz1Uu3IwjIYIwa5aZbUvGjU.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdNm9secq3hflz1Uu3IwhFwUOapQYZcqCjVVUA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdN49secq3hflz1Uu3IwjOIJwa5aZbUvGjU.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/kulimpark/v1/fdNm9secq3hflz1Uu3IwhFwUXatQYZcqCjVVUA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KulimPark',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kulim Park font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kulim+Park
  static TextTheme kulimParkTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kulimPark(textStyle: textTheme?.display4),
      display3: GoogleFonts.kulimPark(textStyle: textTheme?.display3),
      display2: GoogleFonts.kulimPark(textStyle: textTheme?.display2),
      display1: GoogleFonts.kulimPark(textStyle: textTheme?.display1),
      headline: GoogleFonts.kulimPark(textStyle: textTheme?.headline),
      title: GoogleFonts.kulimPark(textStyle: textTheme?.title),
      subhead: GoogleFonts.kulimPark(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kulimPark(textStyle: textTheme?.body2),
      body1: GoogleFonts.kulimPark(textStyle: textTheme?.body1),
      caption: GoogleFonts.kulimPark(textStyle: textTheme?.caption),
      button: GoogleFonts.kulimPark(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kulimPark(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kulimPark(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kumar One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kumar+One
  static TextStyle kumarOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kumarone/v4/bMr1mS-P958wYi6YaGeGNO6WU3oT0g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KumarOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kumar One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kumar+One
  static TextTheme kumarOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kumarOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.kumarOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.kumarOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.kumarOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.kumarOne(textStyle: textTheme?.headline),
      title: GoogleFonts.kumarOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.kumarOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kumarOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.kumarOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.kumarOne(textStyle: textTheme?.caption),
      button: GoogleFonts.kumarOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kumarOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kumarOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kumar One Outline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kumar+One+Outline
  static TextStyle kumarOneOutline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kumaroneoutline/v5/Noao6VH62pyLP0fsrZ-v18wlUEcX9zDwRQu8EGKF.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'KumarOneOutline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kumar One Outline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kumar+One+Outline
  static TextTheme kumarOneOutlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kumarOneOutline(textStyle: textTheme?.display4),
      display3: GoogleFonts.kumarOneOutline(textStyle: textTheme?.display3),
      display2: GoogleFonts.kumarOneOutline(textStyle: textTheme?.display2),
      display1: GoogleFonts.kumarOneOutline(textStyle: textTheme?.display1),
      headline: GoogleFonts.kumarOneOutline(textStyle: textTheme?.headline),
      title: GoogleFonts.kumarOneOutline(textStyle: textTheme?.title),
      subhead: GoogleFonts.kumarOneOutline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kumarOneOutline(textStyle: textTheme?.body2),
      body1: GoogleFonts.kumarOneOutline(textStyle: textTheme?.body1),
      caption: GoogleFonts.kumarOneOutline(textStyle: textTheme?.caption),
      button: GoogleFonts.kumarOneOutline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kumarOneOutline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kumarOneOutline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Kurale font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kurale
  static TextStyle kurale({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/kurale/v5/4iCs6KV9e9dXjho6eAT3v02QFg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Kurale',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Kurale font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Kurale
  static TextTheme kuraleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.kurale(textStyle: textTheme?.display4),
      display3: GoogleFonts.kurale(textStyle: textTheme?.display3),
      display2: GoogleFonts.kurale(textStyle: textTheme?.display2),
      display1: GoogleFonts.kurale(textStyle: textTheme?.display1),
      headline: GoogleFonts.kurale(textStyle: textTheme?.headline),
      title: GoogleFonts.kurale(textStyle: textTheme?.title),
      subhead: GoogleFonts.kurale(textStyle: textTheme?.subhead),
      body2: GoogleFonts.kurale(textStyle: textTheme?.body2),
      body1: GoogleFonts.kurale(textStyle: textTheme?.body1),
      caption: GoogleFonts.kurale(textStyle: textTheme?.caption),
      button: GoogleFonts.kurale(textStyle: textTheme?.button),
      subtitle: GoogleFonts.kurale(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.kurale(textStyle: textTheme?.overline),
    );
  }

  /// Applies the La Belle Aurore font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/La+Belle+Aurore
  static TextStyle laBelleAurore({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/labelleaurore/v10/RrQIbot8-mNYKnGNDkWlocovHeIIG-eFNVmULg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LaBelleAurore',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the La Belle Aurore font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/La+Belle+Aurore
  static TextTheme laBelleAuroreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.laBelleAurore(textStyle: textTheme?.display4),
      display3: GoogleFonts.laBelleAurore(textStyle: textTheme?.display3),
      display2: GoogleFonts.laBelleAurore(textStyle: textTheme?.display2),
      display1: GoogleFonts.laBelleAurore(textStyle: textTheme?.display1),
      headline: GoogleFonts.laBelleAurore(textStyle: textTheme?.headline),
      title: GoogleFonts.laBelleAurore(textStyle: textTheme?.title),
      subhead: GoogleFonts.laBelleAurore(textStyle: textTheme?.subhead),
      body2: GoogleFonts.laBelleAurore(textStyle: textTheme?.body2),
      body1: GoogleFonts.laBelleAurore(textStyle: textTheme?.body1),
      caption: GoogleFonts.laBelleAurore(textStyle: textTheme?.caption),
      button: GoogleFonts.laBelleAurore(textStyle: textTheme?.button),
      subtitle: GoogleFonts.laBelleAurore(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.laBelleAurore(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lacquer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lacquer
  static TextStyle lacquer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lacquer/v1/EYqzma1QwqpG4_BBB7-AXhttQ5I.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lacquer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lacquer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lacquer
  static TextTheme lacquerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lacquer(textStyle: textTheme?.display4),
      display3: GoogleFonts.lacquer(textStyle: textTheme?.display3),
      display2: GoogleFonts.lacquer(textStyle: textTheme?.display2),
      display1: GoogleFonts.lacquer(textStyle: textTheme?.display1),
      headline: GoogleFonts.lacquer(textStyle: textTheme?.headline),
      title: GoogleFonts.lacquer(textStyle: textTheme?.title),
      subhead: GoogleFonts.lacquer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lacquer(textStyle: textTheme?.body2),
      body1: GoogleFonts.lacquer(textStyle: textTheme?.body1),
      caption: GoogleFonts.lacquer(textStyle: textTheme?.caption),
      button: GoogleFonts.lacquer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lacquer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lacquer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Laila font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Laila
  static TextStyle laila({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/laila/v6/LYjBdG_8nE8jDLzxogNAh14nVcfe.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/laila/v6/LYjMdG_8nE8jDIRdiidIrEIu.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/laila/v6/LYjBdG_8nE8jDLypowNAh14nVcfe.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/laila/v6/LYjBdG_8nE8jDLyFpANAh14nVcfe.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/laila/v6/LYjBdG_8nE8jDLzhpQNAh14nVcfe.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Laila',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Laila font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Laila
  static TextTheme lailaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.laila(textStyle: textTheme?.display4),
      display3: GoogleFonts.laila(textStyle: textTheme?.display3),
      display2: GoogleFonts.laila(textStyle: textTheme?.display2),
      display1: GoogleFonts.laila(textStyle: textTheme?.display1),
      headline: GoogleFonts.laila(textStyle: textTheme?.headline),
      title: GoogleFonts.laila(textStyle: textTheme?.title),
      subhead: GoogleFonts.laila(textStyle: textTheme?.subhead),
      body2: GoogleFonts.laila(textStyle: textTheme?.body2),
      body1: GoogleFonts.laila(textStyle: textTheme?.body1),
      caption: GoogleFonts.laila(textStyle: textTheme?.caption),
      button: GoogleFonts.laila(textStyle: textTheme?.button),
      subtitle: GoogleFonts.laila(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.laila(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lakki Reddy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lakki+Reddy
  static TextStyle lakkiReddy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lakkireddy/v6/S6u5w49MUSzD9jlCPmvLZQfox9k97-xZ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LakkiReddy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lakki Reddy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lakki+Reddy
  static TextTheme lakkiReddyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lakkiReddy(textStyle: textTheme?.display4),
      display3: GoogleFonts.lakkiReddy(textStyle: textTheme?.display3),
      display2: GoogleFonts.lakkiReddy(textStyle: textTheme?.display2),
      display1: GoogleFonts.lakkiReddy(textStyle: textTheme?.display1),
      headline: GoogleFonts.lakkiReddy(textStyle: textTheme?.headline),
      title: GoogleFonts.lakkiReddy(textStyle: textTheme?.title),
      subhead: GoogleFonts.lakkiReddy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lakkiReddy(textStyle: textTheme?.body2),
      body1: GoogleFonts.lakkiReddy(textStyle: textTheme?.body1),
      caption: GoogleFonts.lakkiReddy(textStyle: textTheme?.caption),
      button: GoogleFonts.lakkiReddy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lakkiReddy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lakkiReddy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lalezar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lalezar
  static TextStyle lalezar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lalezar/v6/zrfl0HLVx-HwTP82UaDyIiL0RCg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lalezar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lalezar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lalezar
  static TextTheme lalezarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lalezar(textStyle: textTheme?.display4),
      display3: GoogleFonts.lalezar(textStyle: textTheme?.display3),
      display2: GoogleFonts.lalezar(textStyle: textTheme?.display2),
      display1: GoogleFonts.lalezar(textStyle: textTheme?.display1),
      headline: GoogleFonts.lalezar(textStyle: textTheme?.headline),
      title: GoogleFonts.lalezar(textStyle: textTheme?.title),
      subhead: GoogleFonts.lalezar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lalezar(textStyle: textTheme?.body2),
      body1: GoogleFonts.lalezar(textStyle: textTheme?.body1),
      caption: GoogleFonts.lalezar(textStyle: textTheme?.caption),
      button: GoogleFonts.lalezar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lalezar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lalezar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lancelot font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lancelot
  static TextStyle lancelot({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lancelot/v9/J7acnppxBGtQEulG4JY4xJ9CGyAa.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lancelot',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lancelot font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lancelot
  static TextTheme lancelotTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lancelot(textStyle: textTheme?.display4),
      display3: GoogleFonts.lancelot(textStyle: textTheme?.display3),
      display2: GoogleFonts.lancelot(textStyle: textTheme?.display2),
      display1: GoogleFonts.lancelot(textStyle: textTheme?.display1),
      headline: GoogleFonts.lancelot(textStyle: textTheme?.headline),
      title: GoogleFonts.lancelot(textStyle: textTheme?.title),
      subhead: GoogleFonts.lancelot(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lancelot(textStyle: textTheme?.body2),
      body1: GoogleFonts.lancelot(textStyle: textTheme?.body1),
      caption: GoogleFonts.lancelot(textStyle: textTheme?.caption),
      button: GoogleFonts.lancelot(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lancelot(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lancelot(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lateef font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lateef
  static TextStyle lateef({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lateef/v15/hESw6XVnNCxEvkbMpheEZo_H_w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lateef',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lateef font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lateef
  static TextTheme lateefTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lateef(textStyle: textTheme?.display4),
      display3: GoogleFonts.lateef(textStyle: textTheme?.display3),
      display2: GoogleFonts.lateef(textStyle: textTheme?.display2),
      display1: GoogleFonts.lateef(textStyle: textTheme?.display1),
      headline: GoogleFonts.lateef(textStyle: textTheme?.headline),
      title: GoogleFonts.lateef(textStyle: textTheme?.title),
      subhead: GoogleFonts.lateef(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lateef(textStyle: textTheme?.body2),
      body1: GoogleFonts.lateef(textStyle: textTheme?.body1),
      caption: GoogleFonts.lateef(textStyle: textTheme?.caption),
      button: GoogleFonts.lateef(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lateef(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lateef(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lato font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lato
  static TextStyle lato({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/lato/v16/S6u8w4BMUTPHh30wWyWrFCbw7A.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/lato/v16/S6u-w4BMUTPHjxsIPy-vNiPg7MU0.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/lato/v16/S6u9w4BMUTPHh7USew-FGC_p9dw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/lato/v16/S6u_w4BMUTPHjxsI9w2PHA3s5dwt7w.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lato/v16/S6uyw4BMUTPHvxk6XweuBCY.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/lato/v16/S6u8w4BMUTPHjxswWyWrFCbw7A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/lato/v16/S6u9w4BMUTPHh6UVew-FGC_p9dw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/lato/v16/S6u_w4BMUTPHjxsI5wqPHA3s5dwt7w.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/lato/v16/S6u9w4BMUTPHh50Xew-FGC_p9dw.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/lato/v16/S6u_w4BMUTPHjxsI3wiPHA3s5dwt7w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lato',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lato font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lato
  static TextTheme latoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lato(textStyle: textTheme?.display4),
      display3: GoogleFonts.lato(textStyle: textTheme?.display3),
      display2: GoogleFonts.lato(textStyle: textTheme?.display2),
      display1: GoogleFonts.lato(textStyle: textTheme?.display1),
      headline: GoogleFonts.lato(textStyle: textTheme?.headline),
      title: GoogleFonts.lato(textStyle: textTheme?.title),
      subhead: GoogleFonts.lato(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lato(textStyle: textTheme?.body2),
      body1: GoogleFonts.lato(textStyle: textTheme?.body1),
      caption: GoogleFonts.lato(textStyle: textTheme?.caption),
      button: GoogleFonts.lato(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lato(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lato(textStyle: textTheme?.overline),
    );
  }

  /// Applies the League Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/League+Script
  static TextStyle leagueScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/leaguescript/v11/CSR54zpSlumSWj9CGVsoBZdeaNNUuOwkC2s.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LeagueScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the League Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/League+Script
  static TextTheme leagueScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.leagueScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.leagueScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.leagueScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.leagueScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.leagueScript(textStyle: textTheme?.headline),
      title: GoogleFonts.leagueScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.leagueScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.leagueScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.leagueScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.leagueScript(textStyle: textTheme?.caption),
      button: GoogleFonts.leagueScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.leagueScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.leagueScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Leckerli One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Leckerli+One
  static TextStyle leckerliOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/leckerlione/v10/V8mCoQH8VCsNttEnxnGQ-1itLZxcBtItFw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LeckerliOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Leckerli One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Leckerli+One
  static TextTheme leckerliOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.leckerliOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.leckerliOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.leckerliOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.leckerliOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.leckerliOne(textStyle: textTheme?.headline),
      title: GoogleFonts.leckerliOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.leckerliOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.leckerliOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.leckerliOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.leckerliOne(textStyle: textTheme?.caption),
      button: GoogleFonts.leckerliOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.leckerliOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.leckerliOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ledger font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ledger
  static TextStyle ledger({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ledger/v7/j8_q6-HK1L3if_sxm8DwHTBhHw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ledger',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ledger font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ledger
  static TextTheme ledgerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ledger(textStyle: textTheme?.display4),
      display3: GoogleFonts.ledger(textStyle: textTheme?.display3),
      display2: GoogleFonts.ledger(textStyle: textTheme?.display2),
      display1: GoogleFonts.ledger(textStyle: textTheme?.display1),
      headline: GoogleFonts.ledger(textStyle: textTheme?.headline),
      title: GoogleFonts.ledger(textStyle: textTheme?.title),
      subhead: GoogleFonts.ledger(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ledger(textStyle: textTheme?.body2),
      body1: GoogleFonts.ledger(textStyle: textTheme?.body1),
      caption: GoogleFonts.ledger(textStyle: textTheme?.caption),
      button: GoogleFonts.ledger(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ledger(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ledger(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lekton font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lekton
  static TextStyle lekton({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lekton/v10/SZc43FDmLaWmWpBeXxfonUPL6Q.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/lekton/v10/SZc63FDmLaWmWpBuXR3sv0bb6StO.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/lekton/v10/SZc73FDmLaWmWpBm4zjMlWjX4DJXgQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lekton',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lekton font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lekton
  static TextTheme lektonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lekton(textStyle: textTheme?.display4),
      display3: GoogleFonts.lekton(textStyle: textTheme?.display3),
      display2: GoogleFonts.lekton(textStyle: textTheme?.display2),
      display1: GoogleFonts.lekton(textStyle: textTheme?.display1),
      headline: GoogleFonts.lekton(textStyle: textTheme?.headline),
      title: GoogleFonts.lekton(textStyle: textTheme?.title),
      subhead: GoogleFonts.lekton(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lekton(textStyle: textTheme?.body2),
      body1: GoogleFonts.lekton(textStyle: textTheme?.body1),
      caption: GoogleFonts.lekton(textStyle: textTheme?.caption),
      button: GoogleFonts.lekton(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lekton(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lekton(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lemon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lemon
  static TextStyle lemon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lemon/v8/HI_EiYEVKqRMq0jBSZXAQ4-d.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lemon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lemon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lemon
  static TextTheme lemonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lemon(textStyle: textTheme?.display4),
      display3: GoogleFonts.lemon(textStyle: textTheme?.display3),
      display2: GoogleFonts.lemon(textStyle: textTheme?.display2),
      display1: GoogleFonts.lemon(textStyle: textTheme?.display1),
      headline: GoogleFonts.lemon(textStyle: textTheme?.headline),
      title: GoogleFonts.lemon(textStyle: textTheme?.title),
      subhead: GoogleFonts.lemon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lemon(textStyle: textTheme?.body2),
      body1: GoogleFonts.lemon(textStyle: textTheme?.body1),
      caption: GoogleFonts.lemon(textStyle: textTheme?.caption),
      button: GoogleFonts.lemon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lemon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lemon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lemonada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lemonada
  static TextStyle lemonada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/lemonada/v8/0QI-MXFD9oygTWy_R-FFlwV-bgfR7QJGJOt2mfWc3Z2pTg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lemonada/v8/0QI-MXFD9oygTWy_R-FFlwV-bgfR7QJGeut2mfWc3Z2pTg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/lemonada/v8/0QI-MXFD9oygTWy_R-FFlwV-bgfR7QJGSOt2mfWc3Z2pTg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/lemonada/v8/0QI-MXFD9oygTWy_R-FFlwV-bgfR7QJGpOx2mfWc3Z2pTg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/lemonada/v8/0QI-MXFD9oygTWy_R-FFlwV-bgfR7QJGnex2mfWc3Z2pTg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lemonada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lemonada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lemonada
  static TextTheme lemonadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lemonada(textStyle: textTheme?.display4),
      display3: GoogleFonts.lemonada(textStyle: textTheme?.display3),
      display2: GoogleFonts.lemonada(textStyle: textTheme?.display2),
      display1: GoogleFonts.lemonada(textStyle: textTheme?.display1),
      headline: GoogleFonts.lemonada(textStyle: textTheme?.headline),
      title: GoogleFonts.lemonada(textStyle: textTheme?.title),
      subhead: GoogleFonts.lemonada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lemonada(textStyle: textTheme?.body2),
      body1: GoogleFonts.lemonada(textStyle: textTheme?.body1),
      caption: GoogleFonts.lemonada(textStyle: textTheme?.caption),
      button: GoogleFonts.lemonada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lemonada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lemonada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lexend Deca font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Deca
  static TextStyle lexendDeca({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lexenddeca/v1/K2F1fZFYk-dHSE0UPPuwQ6qgLS76ZHOM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LexendDeca',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lexend Deca font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Deca
  static TextTheme lexendDecaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lexendDeca(textStyle: textTheme?.display4),
      display3: GoogleFonts.lexendDeca(textStyle: textTheme?.display3),
      display2: GoogleFonts.lexendDeca(textStyle: textTheme?.display2),
      display1: GoogleFonts.lexendDeca(textStyle: textTheme?.display1),
      headline: GoogleFonts.lexendDeca(textStyle: textTheme?.headline),
      title: GoogleFonts.lexendDeca(textStyle: textTheme?.title),
      subhead: GoogleFonts.lexendDeca(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lexendDeca(textStyle: textTheme?.body2),
      body1: GoogleFonts.lexendDeca(textStyle: textTheme?.body1),
      caption: GoogleFonts.lexendDeca(textStyle: textTheme?.caption),
      button: GoogleFonts.lexendDeca(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lexendDeca(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lexendDeca(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lexend Exa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Exa
  static TextStyle lexendExa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lexendexa/v1/UMBXrPdOoHOnxExyjdBeWirXArM58BY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LexendExa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lexend Exa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Exa
  static TextTheme lexendExaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lexendExa(textStyle: textTheme?.display4),
      display3: GoogleFonts.lexendExa(textStyle: textTheme?.display3),
      display2: GoogleFonts.lexendExa(textStyle: textTheme?.display2),
      display1: GoogleFonts.lexendExa(textStyle: textTheme?.display1),
      headline: GoogleFonts.lexendExa(textStyle: textTheme?.headline),
      title: GoogleFonts.lexendExa(textStyle: textTheme?.title),
      subhead: GoogleFonts.lexendExa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lexendExa(textStyle: textTheme?.body2),
      body1: GoogleFonts.lexendExa(textStyle: textTheme?.body1),
      caption: GoogleFonts.lexendExa(textStyle: textTheme?.caption),
      button: GoogleFonts.lexendExa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lexendExa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lexendExa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lexend Giga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Giga
  static TextStyle lexendGiga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lexendgiga/v1/PlI5Fl67Mah5Y8yMHE7lkVxEt8CwfGaD.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LexendGiga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lexend Giga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Giga
  static TextTheme lexendGigaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lexendGiga(textStyle: textTheme?.display4),
      display3: GoogleFonts.lexendGiga(textStyle: textTheme?.display3),
      display2: GoogleFonts.lexendGiga(textStyle: textTheme?.display2),
      display1: GoogleFonts.lexendGiga(textStyle: textTheme?.display1),
      headline: GoogleFonts.lexendGiga(textStyle: textTheme?.headline),
      title: GoogleFonts.lexendGiga(textStyle: textTheme?.title),
      subhead: GoogleFonts.lexendGiga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lexendGiga(textStyle: textTheme?.body2),
      body1: GoogleFonts.lexendGiga(textStyle: textTheme?.body1),
      caption: GoogleFonts.lexendGiga(textStyle: textTheme?.caption),
      button: GoogleFonts.lexendGiga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lexendGiga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lexendGiga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lexend Mega font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Mega
  static TextStyle lexendMega({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lexendmega/v1/qFdA35aBi5JtHD41zSTFEv7K6BsAikI7.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LexendMega',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lexend Mega font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Mega
  static TextTheme lexendMegaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lexendMega(textStyle: textTheme?.display4),
      display3: GoogleFonts.lexendMega(textStyle: textTheme?.display3),
      display2: GoogleFonts.lexendMega(textStyle: textTheme?.display2),
      display1: GoogleFonts.lexendMega(textStyle: textTheme?.display1),
      headline: GoogleFonts.lexendMega(textStyle: textTheme?.headline),
      title: GoogleFonts.lexendMega(textStyle: textTheme?.title),
      subhead: GoogleFonts.lexendMega(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lexendMega(textStyle: textTheme?.body2),
      body1: GoogleFonts.lexendMega(textStyle: textTheme?.body1),
      caption: GoogleFonts.lexendMega(textStyle: textTheme?.caption),
      button: GoogleFonts.lexendMega(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lexendMega(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lexendMega(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lexend Peta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Peta
  static TextStyle lexendPeta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lexendpeta/v1/BXRvvFPGjeLPh0kCfI4OkE_1c8Tf1IW3.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LexendPeta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lexend Peta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Peta
  static TextTheme lexendPetaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lexendPeta(textStyle: textTheme?.display4),
      display3: GoogleFonts.lexendPeta(textStyle: textTheme?.display3),
      display2: GoogleFonts.lexendPeta(textStyle: textTheme?.display2),
      display1: GoogleFonts.lexendPeta(textStyle: textTheme?.display1),
      headline: GoogleFonts.lexendPeta(textStyle: textTheme?.headline),
      title: GoogleFonts.lexendPeta(textStyle: textTheme?.title),
      subhead: GoogleFonts.lexendPeta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lexendPeta(textStyle: textTheme?.body2),
      body1: GoogleFonts.lexendPeta(textStyle: textTheme?.body1),
      caption: GoogleFonts.lexendPeta(textStyle: textTheme?.caption),
      button: GoogleFonts.lexendPeta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lexendPeta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lexendPeta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lexend Tera font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Tera
  static TextStyle lexendTera({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lexendtera/v1/RrQUbo98_jt_IXnBPwCWtZhARYMgGtWA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LexendTera',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lexend Tera font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Tera
  static TextTheme lexendTeraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lexendTera(textStyle: textTheme?.display4),
      display3: GoogleFonts.lexendTera(textStyle: textTheme?.display3),
      display2: GoogleFonts.lexendTera(textStyle: textTheme?.display2),
      display1: GoogleFonts.lexendTera(textStyle: textTheme?.display1),
      headline: GoogleFonts.lexendTera(textStyle: textTheme?.headline),
      title: GoogleFonts.lexendTera(textStyle: textTheme?.title),
      subhead: GoogleFonts.lexendTera(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lexendTera(textStyle: textTheme?.body2),
      body1: GoogleFonts.lexendTera(textStyle: textTheme?.body1),
      caption: GoogleFonts.lexendTera(textStyle: textTheme?.caption),
      button: GoogleFonts.lexendTera(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lexendTera(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lexendTera(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lexend Zetta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Zetta
  static TextStyle lexendZetta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lexendzetta/v1/ll87K2KYXje7CdOFnEWcU8soliQejRR7AQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LexendZetta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lexend Zetta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lexend+Zetta
  static TextTheme lexendZettaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lexendZetta(textStyle: textTheme?.display4),
      display3: GoogleFonts.lexendZetta(textStyle: textTheme?.display3),
      display2: GoogleFonts.lexendZetta(textStyle: textTheme?.display2),
      display1: GoogleFonts.lexendZetta(textStyle: textTheme?.display1),
      headline: GoogleFonts.lexendZetta(textStyle: textTheme?.headline),
      title: GoogleFonts.lexendZetta(textStyle: textTheme?.title),
      subhead: GoogleFonts.lexendZetta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lexendZetta(textStyle: textTheme?.body2),
      body1: GoogleFonts.lexendZetta(textStyle: textTheme?.body1),
      caption: GoogleFonts.lexendZetta(textStyle: textTheme?.caption),
      button: GoogleFonts.lexendZetta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lexendZetta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lexendZetta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Barcode 128 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+128
  static TextStyle libreBarcode128({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librebarcode128/v9/cIfnMbdUsUoiW3O_hVviCwVjuLtXeJ_A_gMk0izH.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreBarcode128',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Barcode 128 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+128
  static TextTheme libreBarcode128TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreBarcode128(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreBarcode128(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreBarcode128(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreBarcode128(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreBarcode128(textStyle: textTheme?.headline),
      title: GoogleFonts.libreBarcode128(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreBarcode128(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreBarcode128(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreBarcode128(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreBarcode128(textStyle: textTheme?.caption),
      button: GoogleFonts.libreBarcode128(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreBarcode128(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreBarcode128(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Barcode 128 Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+128+Text
  static TextStyle libreBarcode128Text({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librebarcode128text/v9/fdNv9tubt3ZEnz1Gu3I4-zppwZ9CWZ16Z0w5cV3Y6M90w4k.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreBarcode128Text',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Barcode 128 Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+128+Text
  static TextTheme libreBarcode128TextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.headline),
      title: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.caption),
      button: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreBarcode128Text(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Barcode 39 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+39
  static TextStyle libreBarcode39({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librebarcode39/v9/-nFnOHM08vwC6h8Li1eQnP_AHzI2K_d709jy92k.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreBarcode39',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Barcode 39 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+39
  static TextTheme libreBarcode39TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreBarcode39(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreBarcode39(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreBarcode39(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreBarcode39(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreBarcode39(textStyle: textTheme?.headline),
      title: GoogleFonts.libreBarcode39(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreBarcode39(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreBarcode39(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreBarcode39(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreBarcode39(textStyle: textTheme?.caption),
      button: GoogleFonts.libreBarcode39(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreBarcode39(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreBarcode39(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Barcode 39 Extended font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+39+Extended
  static TextStyle libreBarcode39Extended({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librebarcode39extended/v8/8At7Gt6_O5yNS0-K4Nf5U922qSzhJ3dUdfJpwNUgfNRCOZ1GOBw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreBarcode39Extended',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Barcode 39 Extended font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+39+Extended
  static TextTheme libreBarcode39ExtendedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.headline),
      title: GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.title),
      subhead:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.body1),
      caption:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.caption),
      button: GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.libreBarcode39Extended(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Barcode 39 Extended Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+39+Extended+Text
  static TextStyle libreBarcode39ExtendedText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librebarcode39extendedtext/v8/eLG1P_rwIgOiDA7yrs9LoKaYRVLQ1YldrrOnnL7xPO4jNP68fLIiPopNNA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreBarcode39ExtendedText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Barcode 39 Extended Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+39+Extended+Text
  static TextTheme libreBarcode39ExtendedTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreBarcode39ExtendedText(
          textStyle: textTheme?.display4),
      display3: GoogleFonts.libreBarcode39ExtendedText(
          textStyle: textTheme?.display3),
      display2: GoogleFonts.libreBarcode39ExtendedText(
          textStyle: textTheme?.display2),
      display1: GoogleFonts.libreBarcode39ExtendedText(
          textStyle: textTheme?.display1),
      headline: GoogleFonts.libreBarcode39ExtendedText(
          textStyle: textTheme?.headline),
      title:
          GoogleFonts.libreBarcode39ExtendedText(textStyle: textTheme?.title),
      subhead:
          GoogleFonts.libreBarcode39ExtendedText(textStyle: textTheme?.subhead),
      body2:
          GoogleFonts.libreBarcode39ExtendedText(textStyle: textTheme?.body2),
      body1:
          GoogleFonts.libreBarcode39ExtendedText(textStyle: textTheme?.body1),
      caption:
          GoogleFonts.libreBarcode39ExtendedText(textStyle: textTheme?.caption),
      button:
          GoogleFonts.libreBarcode39ExtendedText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreBarcode39ExtendedText(
          textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreBarcode39ExtendedText(
          textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Barcode 39 Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+39+Text
  static TextStyle libreBarcode39Text({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librebarcode39text/v9/sJoa3KhViNKANw_E3LwoDXvs5Un0HQ1vT-031RRL-9rYaw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreBarcode39Text',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Barcode 39 Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Barcode+39+Text
  static TextTheme libreBarcode39TextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.headline),
      title: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.caption),
      button: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreBarcode39Text(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Baskerville font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Baskerville
  static TextStyle libreBaskerville({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librebaskerville/v7/kmKnZrc3Hgbbcjq75U4uslyuy4kn0pNeYRI4CN2V.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/librebaskerville/v7/kmKhZrc3Hgbbcjq75U4uslyuy4kn0qNcaxYaDc2V2ro.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/librebaskerville/v7/kmKiZrc3Hgbbcjq75U4uslyuy4kn0qviTjYwI8Gcw6Oi.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreBaskerville',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Baskerville font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Baskerville
  static TextTheme libreBaskervilleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreBaskerville(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreBaskerville(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreBaskerville(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreBaskerville(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreBaskerville(textStyle: textTheme?.headline),
      title: GoogleFonts.libreBaskerville(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreBaskerville(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreBaskerville(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreBaskerville(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreBaskerville(textStyle: textTheme?.caption),
      button: GoogleFonts.libreBaskerville(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreBaskerville(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreBaskerville(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Caslon Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Caslon+Display
  static TextStyle libreCaslonDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librecaslondisplay/v1/TuGOUUFxWphYQ6YI6q9Xp61FQzxDRKmzr2lRdRhtCC4d.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreCaslonDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Caslon Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Caslon+Display
  static TextTheme libreCaslonDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreCaslonDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Caslon Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Caslon+Text
  static TextStyle libreCaslonText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librecaslontext/v1/DdT878IGsGw1aF1JU10PUbTvNNaDMcq_3eNrHgO1.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/librecaslontext/v1/DdT678IGsGw1aF1JU10PUbTvNNaDMfq91-dJGxO1q9o.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/librecaslontext/v1/DdT578IGsGw1aF1JU10PUbTvNNaDMfID8sdjNR-8ssPt.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreCaslonText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Caslon Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Caslon+Text
  static TextTheme libreCaslonTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreCaslonText(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreCaslonText(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreCaslonText(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreCaslonText(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreCaslonText(textStyle: textTheme?.headline),
      title: GoogleFonts.libreCaslonText(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreCaslonText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreCaslonText(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreCaslonText(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreCaslonText(textStyle: textTheme?.caption),
      button: GoogleFonts.libreCaslonText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreCaslonText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreCaslonText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Libre Franklin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Franklin
  static TextStyle libreFranklin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizBREVItHgc8qDIbSTKq4XkRi182zIZj1bIkNo.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizHREVItHgc8qDIbSTKq4XkRiUa41YTi3TNgNq55w.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizAREVItHgc8qDIbSTKq4XkRi3Q-hIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizGREVItHgc8qDIbSTKq4XkRiUa4_oyq17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizAREVItHgc8qDIbSTKq4XkRi20-RIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizGREVItHgc8qDIbSTKq4XkRiUa454xq17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizDREVItHgc8qDIbSTKq4XkRhUY0TY7ikbI.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizBREVItHgc8qDIbSTKq4XkRiUa2zIZj1bIkNo.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizAREVItHgc8qDIbSTKq4XkRi3s-BIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizGREVItHgc8qDIbSTKq4XkRiUa48Ywq17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizAREVItHgc8qDIbSTKq4XkRi3A_xIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizGREVItHgc8qDIbSTKq4XkRiUa4-o3q17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizAREVItHgc8qDIbSTKq4XkRi2k_hIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizGREVItHgc8qDIbSTKq4XkRiUa4442q17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizAREVItHgc8qDIbSTKq4XkRi24_RIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizGREVItHgc8qDIbSTKq4XkRiUa45I1q17jjNOg_oc.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizAREVItHgc8qDIbSTKq4XkRi2c_BIzoVrBicOg.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/librefranklin/v4/jizGREVItHgc8qDIbSTKq4XkRiUa47Y0q17jjNOg_oc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LibreFranklin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Libre Franklin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Libre+Franklin
  static TextTheme libreFranklinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.libreFranklin(textStyle: textTheme?.display4),
      display3: GoogleFonts.libreFranklin(textStyle: textTheme?.display3),
      display2: GoogleFonts.libreFranklin(textStyle: textTheme?.display2),
      display1: GoogleFonts.libreFranklin(textStyle: textTheme?.display1),
      headline: GoogleFonts.libreFranklin(textStyle: textTheme?.headline),
      title: GoogleFonts.libreFranklin(textStyle: textTheme?.title),
      subhead: GoogleFonts.libreFranklin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.libreFranklin(textStyle: textTheme?.body2),
      body1: GoogleFonts.libreFranklin(textStyle: textTheme?.body1),
      caption: GoogleFonts.libreFranklin(textStyle: textTheme?.caption),
      button: GoogleFonts.libreFranklin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.libreFranklin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.libreFranklin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Life Savers font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Life+Savers
  static TextStyle lifeSavers({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lifesavers/v10/ZXuie1UftKKabUQMgxAal_lrFgpbuNvB.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/lifesavers/v10/ZXu_e1UftKKabUQMgxAal8HXOS5Tk8fIpPRW.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/lifesavers/v10/ZXu_e1UftKKabUQMgxAal8HLOi5Tk8fIpPRW.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LifeSavers',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Life Savers font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Life+Savers
  static TextTheme lifeSaversTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lifeSavers(textStyle: textTheme?.display4),
      display3: GoogleFonts.lifeSavers(textStyle: textTheme?.display3),
      display2: GoogleFonts.lifeSavers(textStyle: textTheme?.display2),
      display1: GoogleFonts.lifeSavers(textStyle: textTheme?.display1),
      headline: GoogleFonts.lifeSavers(textStyle: textTheme?.headline),
      title: GoogleFonts.lifeSavers(textStyle: textTheme?.title),
      subhead: GoogleFonts.lifeSavers(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lifeSavers(textStyle: textTheme?.body2),
      body1: GoogleFonts.lifeSavers(textStyle: textTheme?.body1),
      caption: GoogleFonts.lifeSavers(textStyle: textTheme?.caption),
      button: GoogleFonts.lifeSavers(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lifeSavers(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lifeSavers(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lilita One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lilita+One
  static TextStyle lilitaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lilitaone/v7/i7dPIFZ9Zz-WBtRtedDbUEZ2RFq7AwU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LilitaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lilita One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lilita+One
  static TextTheme lilitaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lilitaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.lilitaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.lilitaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.lilitaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.lilitaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.lilitaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.lilitaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lilitaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.lilitaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.lilitaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.lilitaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lilitaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lilitaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lily Script One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lily+Script+One
  static TextStyle lilyScriptOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lilyscriptone/v7/LhW9MV7ZMfIPdMxeBjBvFN8SXLS4gsSjQNsRMg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LilyScriptOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lily Script One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lily+Script+One
  static TextTheme lilyScriptOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lilyScriptOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.lilyScriptOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.lilyScriptOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.lilyScriptOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.lilyScriptOne(textStyle: textTheme?.headline),
      title: GoogleFonts.lilyScriptOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.lilyScriptOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lilyScriptOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.lilyScriptOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.lilyScriptOne(textStyle: textTheme?.caption),
      button: GoogleFonts.lilyScriptOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lilyScriptOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lilyScriptOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Limelight font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Limelight
  static TextStyle limelight({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/limelight/v10/XLYkIZL7aopJVbZJHDuYPeNGrnY2TA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Limelight',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Limelight font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Limelight
  static TextTheme limelightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.limelight(textStyle: textTheme?.display4),
      display3: GoogleFonts.limelight(textStyle: textTheme?.display3),
      display2: GoogleFonts.limelight(textStyle: textTheme?.display2),
      display1: GoogleFonts.limelight(textStyle: textTheme?.display1),
      headline: GoogleFonts.limelight(textStyle: textTheme?.headline),
      title: GoogleFonts.limelight(textStyle: textTheme?.title),
      subhead: GoogleFonts.limelight(textStyle: textTheme?.subhead),
      body2: GoogleFonts.limelight(textStyle: textTheme?.body2),
      body1: GoogleFonts.limelight(textStyle: textTheme?.body1),
      caption: GoogleFonts.limelight(textStyle: textTheme?.caption),
      button: GoogleFonts.limelight(textStyle: textTheme?.button),
      subtitle: GoogleFonts.limelight(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.limelight(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Linden Hill font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Linden+Hill
  static TextStyle lindenHill({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lindenhill/v9/-F61fjxoKSg9Yc3hZgO8ygFI7CwC009k.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/lindenhill/v9/-F63fjxoKSg9Yc3hZgO8yjFK5igg1l9kn-s.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LindenHill',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Linden Hill font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Linden+Hill
  static TextTheme lindenHillTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lindenHill(textStyle: textTheme?.display4),
      display3: GoogleFonts.lindenHill(textStyle: textTheme?.display3),
      display2: GoogleFonts.lindenHill(textStyle: textTheme?.display2),
      display1: GoogleFonts.lindenHill(textStyle: textTheme?.display1),
      headline: GoogleFonts.lindenHill(textStyle: textTheme?.headline),
      title: GoogleFonts.lindenHill(textStyle: textTheme?.title),
      subhead: GoogleFonts.lindenHill(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lindenHill(textStyle: textTheme?.body2),
      body1: GoogleFonts.lindenHill(textStyle: textTheme?.body1),
      caption: GoogleFonts.lindenHill(textStyle: textTheme?.caption),
      button: GoogleFonts.lindenHill(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lindenHill(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lindenHill(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Literata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Literata
  static TextStyle literata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/literata/v14/or38Q6P12-iJxAIgLa78DkTtAoDhk0oVpaLVa5RXzC1KOw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/literata/v14/or38Q6P12-iJxAIgLa78DkTtAoDhk0oVl6LVa5RXzC1KOw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/literata/v14/or38Q6P12-iJxAIgLa78DkTtAoDhk0oVe6XVa5RXzC1KOw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/literata/v14/or38Q6P12-iJxAIgLa78DkTtAoDhk0oVQqXVa5RXzC1KOw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/literata/v14/or3yQ6P12-iJxAIgLYT1PLs1a-t7PU0AbeE9KJ5T7ihaO_CS.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/literata/v14/or3yQ6P12-iJxAIgLYT1PLs1a-t7PU0AbeEPKJ5T7ihaO_CS.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/literata/v14/or3yQ6P12-iJxAIgLYT1PLs1a-t7PU0AbeHjL55T7ihaO_CS.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/literata/v14/or3yQ6P12-iJxAIgLYT1PLs1a-t7PU0AbeHaL55T7ihaO_CS.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Literata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Literata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Literata
  static TextTheme literataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.literata(textStyle: textTheme?.display4),
      display3: GoogleFonts.literata(textStyle: textTheme?.display3),
      display2: GoogleFonts.literata(textStyle: textTheme?.display2),
      display1: GoogleFonts.literata(textStyle: textTheme?.display1),
      headline: GoogleFonts.literata(textStyle: textTheme?.headline),
      title: GoogleFonts.literata(textStyle: textTheme?.title),
      subhead: GoogleFonts.literata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.literata(textStyle: textTheme?.body2),
      body1: GoogleFonts.literata(textStyle: textTheme?.body1),
      caption: GoogleFonts.literata(textStyle: textTheme?.caption),
      button: GoogleFonts.literata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.literata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.literata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Liu Jian Mao Cao font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Liu+Jian+Mao+Cao
  static TextStyle liuJianMaoCao({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/liujianmaocao/v5/845DNN84HJrccNonurqXILGpvCOoferVKGWsUo8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LiuJianMaoCao',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Liu Jian Mao Cao font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Liu+Jian+Mao+Cao
  static TextTheme liuJianMaoCaoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.display4),
      display3: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.display3),
      display2: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.display2),
      display1: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.display1),
      headline: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.headline),
      title: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.title),
      subhead: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.subhead),
      body2: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.body2),
      body1: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.body1),
      caption: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.caption),
      button: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.button),
      subtitle: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.liuJianMaoCao(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Livvic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Livvic
  static TextStyle livvic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCr-x1S2hzjrlffC-M-mHnOSOuk.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCt-x1S2hzjrlfXbdtakn3sTfukQHs.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCq-x1S2hzjrlffp8IeslfCQfK9WQ.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCs-x1S2hzjrlfXbdv2s13GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCq-x1S2hzjrlffw8EeslfCQfK9WQ.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCs-x1S2hzjrlfXbduSsF3GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCp-x1S2hzjrlfnb-k6unzeSA.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCr-x1S2hzjrlfXbeM-mHnOSOuk.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCq-x1S2hzjrlffm8AeslfCQfK9WQ.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCs-x1S2hzjrlfXbdvKsV3GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCq-x1S2hzjrlfft8ceslfCQfK9WQ.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCs-x1S2hzjrlfXbdvmtl3GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCq-x1S2hzjrlff08YeslfCQfK9WQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCs-x1S2hzjrlfXbduCt13GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCq-x1S2hzjrlff68QeslfCQfK9WQ.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/livvic/v3/rnCs-x1S2hzjrlfXbdu6tV3GY_etWWIJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Livvic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Livvic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Livvic
  static TextTheme livvicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.livvic(textStyle: textTheme?.display4),
      display3: GoogleFonts.livvic(textStyle: textTheme?.display3),
      display2: GoogleFonts.livvic(textStyle: textTheme?.display2),
      display1: GoogleFonts.livvic(textStyle: textTheme?.display1),
      headline: GoogleFonts.livvic(textStyle: textTheme?.headline),
      title: GoogleFonts.livvic(textStyle: textTheme?.title),
      subhead: GoogleFonts.livvic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.livvic(textStyle: textTheme?.body2),
      body1: GoogleFonts.livvic(textStyle: textTheme?.body1),
      caption: GoogleFonts.livvic(textStyle: textTheme?.caption),
      button: GoogleFonts.livvic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.livvic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.livvic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lobster font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lobster
  static TextStyle lobster({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lobster/v22/neILzCirqoswsqX9_oWsMqEzSJQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lobster',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lobster font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lobster
  static TextTheme lobsterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lobster(textStyle: textTheme?.display4),
      display3: GoogleFonts.lobster(textStyle: textTheme?.display3),
      display2: GoogleFonts.lobster(textStyle: textTheme?.display2),
      display1: GoogleFonts.lobster(textStyle: textTheme?.display1),
      headline: GoogleFonts.lobster(textStyle: textTheme?.headline),
      title: GoogleFonts.lobster(textStyle: textTheme?.title),
      subhead: GoogleFonts.lobster(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lobster(textStyle: textTheme?.body2),
      body1: GoogleFonts.lobster(textStyle: textTheme?.body1),
      caption: GoogleFonts.lobster(textStyle: textTheme?.caption),
      button: GoogleFonts.lobster(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lobster(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lobster(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lobster Two font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lobster+Two
  static TextStyle lobsterTwo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lobstertwo/v12/BngMUXZGTXPUvIoyV6yN59fK7KSJ4ACD.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/lobstertwo/v12/BngOUXZGTXPUvIoyV6yN5-fI5qCr5RCDY_k.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/lobstertwo/v12/BngRUXZGTXPUvIoyV6yN5-92w4CByxyKeuDp.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/lobstertwo/v12/BngTUXZGTXPUvIoyV6yN5-fI3hyEwRiof_DpXMY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LobsterTwo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lobster Two font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lobster+Two
  static TextTheme lobsterTwoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lobsterTwo(textStyle: textTheme?.display4),
      display3: GoogleFonts.lobsterTwo(textStyle: textTheme?.display3),
      display2: GoogleFonts.lobsterTwo(textStyle: textTheme?.display2),
      display1: GoogleFonts.lobsterTwo(textStyle: textTheme?.display1),
      headline: GoogleFonts.lobsterTwo(textStyle: textTheme?.headline),
      title: GoogleFonts.lobsterTwo(textStyle: textTheme?.title),
      subhead: GoogleFonts.lobsterTwo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lobsterTwo(textStyle: textTheme?.body2),
      body1: GoogleFonts.lobsterTwo(textStyle: textTheme?.body1),
      caption: GoogleFonts.lobsterTwo(textStyle: textTheme?.caption),
      button: GoogleFonts.lobsterTwo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lobsterTwo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lobsterTwo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Londrina Outline font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Outline
  static TextStyle londrinaOutline({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/londrinaoutline/v10/C8c44dM8vmb14dfsZxhetg3pDH-SfuoxrSKMDvI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LondrinaOutline',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Londrina Outline font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Outline
  static TextTheme londrinaOutlineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.londrinaOutline(textStyle: textTheme?.display4),
      display3: GoogleFonts.londrinaOutline(textStyle: textTheme?.display3),
      display2: GoogleFonts.londrinaOutline(textStyle: textTheme?.display2),
      display1: GoogleFonts.londrinaOutline(textStyle: textTheme?.display1),
      headline: GoogleFonts.londrinaOutline(textStyle: textTheme?.headline),
      title: GoogleFonts.londrinaOutline(textStyle: textTheme?.title),
      subhead: GoogleFonts.londrinaOutline(textStyle: textTheme?.subhead),
      body2: GoogleFonts.londrinaOutline(textStyle: textTheme?.body2),
      body1: GoogleFonts.londrinaOutline(textStyle: textTheme?.body1),
      caption: GoogleFonts.londrinaOutline(textStyle: textTheme?.caption),
      button: GoogleFonts.londrinaOutline(textStyle: textTheme?.button),
      subtitle: GoogleFonts.londrinaOutline(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.londrinaOutline(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Londrina Shadow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Shadow
  static TextStyle londrinaShadow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/londrinashadow/v9/oPWX_kB4kOQoWNJmjxLV5JuoCUlXRlaSxkrMCQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LondrinaShadow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Londrina Shadow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Shadow
  static TextTheme londrinaShadowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.londrinaShadow(textStyle: textTheme?.display4),
      display3: GoogleFonts.londrinaShadow(textStyle: textTheme?.display3),
      display2: GoogleFonts.londrinaShadow(textStyle: textTheme?.display2),
      display1: GoogleFonts.londrinaShadow(textStyle: textTheme?.display1),
      headline: GoogleFonts.londrinaShadow(textStyle: textTheme?.headline),
      title: GoogleFonts.londrinaShadow(textStyle: textTheme?.title),
      subhead: GoogleFonts.londrinaShadow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.londrinaShadow(textStyle: textTheme?.body2),
      body1: GoogleFonts.londrinaShadow(textStyle: textTheme?.body1),
      caption: GoogleFonts.londrinaShadow(textStyle: textTheme?.caption),
      button: GoogleFonts.londrinaShadow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.londrinaShadow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.londrinaShadow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Londrina Sketch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Sketch
  static TextStyle londrinaSketch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/londrinasketch/v8/c4m41npxGMTnomOHtRU68eIJn8qfWWn5Pos6CA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LondrinaSketch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Londrina Sketch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Sketch
  static TextTheme londrinaSketchTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.londrinaSketch(textStyle: textTheme?.display4),
      display3: GoogleFonts.londrinaSketch(textStyle: textTheme?.display3),
      display2: GoogleFonts.londrinaSketch(textStyle: textTheme?.display2),
      display1: GoogleFonts.londrinaSketch(textStyle: textTheme?.display1),
      headline: GoogleFonts.londrinaSketch(textStyle: textTheme?.headline),
      title: GoogleFonts.londrinaSketch(textStyle: textTheme?.title),
      subhead: GoogleFonts.londrinaSketch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.londrinaSketch(textStyle: textTheme?.body2),
      body1: GoogleFonts.londrinaSketch(textStyle: textTheme?.body1),
      caption: GoogleFonts.londrinaSketch(textStyle: textTheme?.caption),
      button: GoogleFonts.londrinaSketch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.londrinaSketch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.londrinaSketch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Londrina Solid font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Solid
  static TextStyle londrinaSolid({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/londrinasolid/v9/flUjRq6sw40kQEJxWNgkLuudGfs9KBYesZHhV64.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/londrinasolid/v9/flUiRq6sw40kQEJxWNgkLuudGfv1CjY0n53oTrcL.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/londrinasolid/v9/flUhRq6sw40kQEJxWNgkLuudGcNZIhI8tIHh.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/londrinasolid/v9/flUiRq6sw40kQEJxWNgkLuudGfvdDzY0n53oTrcL.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LondrinaSolid',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Londrina Solid font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Londrina+Solid
  static TextTheme londrinaSolidTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.londrinaSolid(textStyle: textTheme?.display4),
      display3: GoogleFonts.londrinaSolid(textStyle: textTheme?.display3),
      display2: GoogleFonts.londrinaSolid(textStyle: textTheme?.display2),
      display1: GoogleFonts.londrinaSolid(textStyle: textTheme?.display1),
      headline: GoogleFonts.londrinaSolid(textStyle: textTheme?.headline),
      title: GoogleFonts.londrinaSolid(textStyle: textTheme?.title),
      subhead: GoogleFonts.londrinaSolid(textStyle: textTheme?.subhead),
      body2: GoogleFonts.londrinaSolid(textStyle: textTheme?.body2),
      body1: GoogleFonts.londrinaSolid(textStyle: textTheme?.body1),
      caption: GoogleFonts.londrinaSolid(textStyle: textTheme?.caption),
      button: GoogleFonts.londrinaSolid(textStyle: textTheme?.button),
      subtitle: GoogleFonts.londrinaSolid(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.londrinaSolid(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Long Cang font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Long+Cang
  static TextStyle longCang({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/longcang/v5/LYjAdGP8kkgoTec8zkRgrXArXN7HWQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LongCang',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Long Cang font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Long+Cang
  static TextTheme longCangTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.longCang(textStyle: textTheme?.display4),
      display3: GoogleFonts.longCang(textStyle: textTheme?.display3),
      display2: GoogleFonts.longCang(textStyle: textTheme?.display2),
      display1: GoogleFonts.longCang(textStyle: textTheme?.display1),
      headline: GoogleFonts.longCang(textStyle: textTheme?.headline),
      title: GoogleFonts.longCang(textStyle: textTheme?.title),
      subhead: GoogleFonts.longCang(textStyle: textTheme?.subhead),
      body2: GoogleFonts.longCang(textStyle: textTheme?.body2),
      body1: GoogleFonts.longCang(textStyle: textTheme?.body1),
      caption: GoogleFonts.longCang(textStyle: textTheme?.caption),
      button: GoogleFonts.longCang(textStyle: textTheme?.button),
      subtitle: GoogleFonts.longCang(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.longCang(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lora font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lora
  static TextStyle lora({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lora/v14/0QIvMX1D_JOuAw3xItNPh_A.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/lora/v14/0QIhMX1D_JOuMw_7JvFKl_C28g.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/lora/v14/0QIgMX1D_JOuO7HeBttkm_mv670.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/lora/v14/0QIiMX1D_JOuMw_Dmt5un9uq-73O-Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lora',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lora font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lora
  static TextTheme loraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lora(textStyle: textTheme?.display4),
      display3: GoogleFonts.lora(textStyle: textTheme?.display3),
      display2: GoogleFonts.lora(textStyle: textTheme?.display2),
      display1: GoogleFonts.lora(textStyle: textTheme?.display1),
      headline: GoogleFonts.lora(textStyle: textTheme?.headline),
      title: GoogleFonts.lora(textStyle: textTheme?.title),
      subhead: GoogleFonts.lora(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lora(textStyle: textTheme?.body2),
      body1: GoogleFonts.lora(textStyle: textTheme?.body1),
      caption: GoogleFonts.lora(textStyle: textTheme?.caption),
      button: GoogleFonts.lora(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lora(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lora(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Love Ya Like A Sister font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Love+Ya+Like+A+Sister
  static TextStyle loveYaLikeASister({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/loveyalikeasister/v10/R70EjzUBlOqPeouhFDfR80-0FhOqJubN-Be78nZcsGGycA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LoveYaLikeASister',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Love Ya Like A Sister font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Love+Ya+Like+A+Sister
  static TextTheme loveYaLikeASisterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.display4),
      display3: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.display3),
      display2: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.display2),
      display1: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.display1),
      headline: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.headline),
      title: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.title),
      subhead: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.subhead),
      body2: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.body2),
      body1: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.body1),
      caption: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.caption),
      button: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.button),
      subtitle: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.loveYaLikeASister(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Loved by the King font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Loved+by+the+King
  static TextStyle lovedbytheKing({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lovedbytheking/v9/Gw6gwdP76VDVJNXerebZxUMeRXUF2PiNlXFu2R64.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LovedbytheKing',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Loved by the King font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Loved+by+the+King
  static TextTheme lovedbytheKingTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lovedbytheKing(textStyle: textTheme?.display4),
      display3: GoogleFonts.lovedbytheKing(textStyle: textTheme?.display3),
      display2: GoogleFonts.lovedbytheKing(textStyle: textTheme?.display2),
      display1: GoogleFonts.lovedbytheKing(textStyle: textTheme?.display1),
      headline: GoogleFonts.lovedbytheKing(textStyle: textTheme?.headline),
      title: GoogleFonts.lovedbytheKing(textStyle: textTheme?.title),
      subhead: GoogleFonts.lovedbytheKing(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lovedbytheKing(textStyle: textTheme?.body2),
      body1: GoogleFonts.lovedbytheKing(textStyle: textTheme?.body1),
      caption: GoogleFonts.lovedbytheKing(textStyle: textTheme?.caption),
      button: GoogleFonts.lovedbytheKing(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lovedbytheKing(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lovedbytheKing(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lovers Quarrel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lovers+Quarrel
  static TextStyle loversQuarrel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/loversquarrel/v7/Yq6N-LSKXTL-5bCy8ksBzpQ_-zAsY7pO6siz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LoversQuarrel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lovers Quarrel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lovers+Quarrel
  static TextTheme loversQuarrelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.loversQuarrel(textStyle: textTheme?.display4),
      display3: GoogleFonts.loversQuarrel(textStyle: textTheme?.display3),
      display2: GoogleFonts.loversQuarrel(textStyle: textTheme?.display2),
      display1: GoogleFonts.loversQuarrel(textStyle: textTheme?.display1),
      headline: GoogleFonts.loversQuarrel(textStyle: textTheme?.headline),
      title: GoogleFonts.loversQuarrel(textStyle: textTheme?.title),
      subhead: GoogleFonts.loversQuarrel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.loversQuarrel(textStyle: textTheme?.body2),
      body1: GoogleFonts.loversQuarrel(textStyle: textTheme?.body1),
      caption: GoogleFonts.loversQuarrel(textStyle: textTheme?.caption),
      button: GoogleFonts.loversQuarrel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.loversQuarrel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.loversQuarrel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Luckiest Guy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Luckiest+Guy
  static TextStyle luckiestGuy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/luckiestguy/v10/_gP_1RrxsjcxVyin9l9n_j2RStR3qDpraA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'LuckiestGuy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Luckiest Guy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Luckiest+Guy
  static TextTheme luckiestGuyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.luckiestGuy(textStyle: textTheme?.display4),
      display3: GoogleFonts.luckiestGuy(textStyle: textTheme?.display3),
      display2: GoogleFonts.luckiestGuy(textStyle: textTheme?.display2),
      display1: GoogleFonts.luckiestGuy(textStyle: textTheme?.display1),
      headline: GoogleFonts.luckiestGuy(textStyle: textTheme?.headline),
      title: GoogleFonts.luckiestGuy(textStyle: textTheme?.title),
      subhead: GoogleFonts.luckiestGuy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.luckiestGuy(textStyle: textTheme?.body2),
      body1: GoogleFonts.luckiestGuy(textStyle: textTheme?.body1),
      caption: GoogleFonts.luckiestGuy(textStyle: textTheme?.caption),
      button: GoogleFonts.luckiestGuy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.luckiestGuy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.luckiestGuy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lusitana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lusitana
  static TextStyle lusitana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lusitana/v7/CSR84z9ShvucWzsMKxhaRuMiSct_.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/lusitana/v7/CSR74z9ShvucWzsMKyDmaccqYtd2vfwk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lusitana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lusitana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lusitana
  static TextTheme lusitanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lusitana(textStyle: textTheme?.display4),
      display3: GoogleFonts.lusitana(textStyle: textTheme?.display3),
      display2: GoogleFonts.lusitana(textStyle: textTheme?.display2),
      display1: GoogleFonts.lusitana(textStyle: textTheme?.display1),
      headline: GoogleFonts.lusitana(textStyle: textTheme?.headline),
      title: GoogleFonts.lusitana(textStyle: textTheme?.title),
      subhead: GoogleFonts.lusitana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lusitana(textStyle: textTheme?.body2),
      body1: GoogleFonts.lusitana(textStyle: textTheme?.body1),
      caption: GoogleFonts.lusitana(textStyle: textTheme?.caption),
      button: GoogleFonts.lusitana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lusitana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lusitana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Lustria font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lustria
  static TextStyle lustria({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/lustria/v7/9oRONYodvDEyjuhOrCg5MtPyAcg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Lustria',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Lustria font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Lustria
  static TextTheme lustriaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.lustria(textStyle: textTheme?.display4),
      display3: GoogleFonts.lustria(textStyle: textTheme?.display3),
      display2: GoogleFonts.lustria(textStyle: textTheme?.display2),
      display1: GoogleFonts.lustria(textStyle: textTheme?.display1),
      headline: GoogleFonts.lustria(textStyle: textTheme?.headline),
      title: GoogleFonts.lustria(textStyle: textTheme?.title),
      subhead: GoogleFonts.lustria(textStyle: textTheme?.subhead),
      body2: GoogleFonts.lustria(textStyle: textTheme?.body2),
      body1: GoogleFonts.lustria(textStyle: textTheme?.body1),
      caption: GoogleFonts.lustria(textStyle: textTheme?.caption),
      button: GoogleFonts.lustria(textStyle: textTheme?.button),
      subtitle: GoogleFonts.lustria(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.lustria(textStyle: textTheme?.overline),
    );
  }

  /// Applies the M PLUS 1p font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/M+PLUS+1p
  static TextStyle mPLUS1p({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/mplus1p/v19/e3tleuShHdiFyPFzBRrQnDQAUW3aq-5N.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/mplus1p/v19/e3tmeuShHdiFyPFzBRrQVBYge0PWovdU4w.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mplus1p/v19/e3tjeuShHdiFyPFzBRro-D4Ec2jKqw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/mplus1p/v19/e3tmeuShHdiFyPFzBRrQDBcge0PWovdU4w.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mplus1p/v19/e3tmeuShHdiFyPFzBRrQRBEge0PWovdU4w.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/mplus1p/v19/e3tmeuShHdiFyPFzBRrQWBIge0PWovdU4w.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/mplus1p/v19/e3tmeuShHdiFyPFzBRrQfBMge0PWovdU4w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MPLUS1p',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the M PLUS 1p font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/M+PLUS+1p
  static TextTheme mPLUS1pTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mPLUS1p(textStyle: textTheme?.display4),
      display3: GoogleFonts.mPLUS1p(textStyle: textTheme?.display3),
      display2: GoogleFonts.mPLUS1p(textStyle: textTheme?.display2),
      display1: GoogleFonts.mPLUS1p(textStyle: textTheme?.display1),
      headline: GoogleFonts.mPLUS1p(textStyle: textTheme?.headline),
      title: GoogleFonts.mPLUS1p(textStyle: textTheme?.title),
      subhead: GoogleFonts.mPLUS1p(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mPLUS1p(textStyle: textTheme?.body2),
      body1: GoogleFonts.mPLUS1p(textStyle: textTheme?.body1),
      caption: GoogleFonts.mPLUS1p(textStyle: textTheme?.caption),
      button: GoogleFonts.mPLUS1p(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mPLUS1p(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mPLUS1p(textStyle: textTheme?.overline),
    );
  }

  /// Applies the M PLUS Rounded 1c font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/M+PLUS+Rounded+1c
  static TextStyle mPLUSRounded1c({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/mplusrounded1c/v10/VdGCAYIAV6gnpUpoWwNkYvrugw9RuM3ixLsg6-av1x0.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/mplusrounded1c/v10/VdGBAYIAV6gnpUpoWwNkYvrugw9RuM0q5psKxeqmzgRK.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mplusrounded1c/v10/VdGEAYIAV6gnpUpoWwNkYvrugw9RuPWGzr8C7vav.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/mplusrounded1c/v10/VdGBAYIAV6gnpUpoWwNkYvrugw9RuM1y55sKxeqmzgRK.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mplusrounded1c/v10/VdGBAYIAV6gnpUpoWwNkYvrugw9RuM064ZsKxeqmzgRK.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/mplusrounded1c/v10/VdGBAYIAV6gnpUpoWwNkYvrugw9RuM0m4psKxeqmzgRK.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/mplusrounded1c/v10/VdGBAYIAV6gnpUpoWwNkYvrugw9RuM0C45sKxeqmzgRK.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MPLUSRounded1c',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the M PLUS Rounded 1c font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/M+PLUS+Rounded+1c
  static TextTheme mPLUSRounded1cTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.display4),
      display3: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.display3),
      display2: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.display2),
      display1: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.display1),
      headline: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.headline),
      title: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.title),
      subhead: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.body2),
      body1: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.body1),
      caption: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.caption),
      button: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mPLUSRounded1c(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ma Shan Zheng font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ma+Shan+Zheng
  static TextStyle maShanZheng({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mashanzheng/v5/NaPecZTRCLxvwo41b4gvzkXaRMTsDIRSfr0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MaShanZheng',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ma Shan Zheng font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ma+Shan+Zheng
  static TextTheme maShanZhengTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.maShanZheng(textStyle: textTheme?.display4),
      display3: GoogleFonts.maShanZheng(textStyle: textTheme?.display3),
      display2: GoogleFonts.maShanZheng(textStyle: textTheme?.display2),
      display1: GoogleFonts.maShanZheng(textStyle: textTheme?.display1),
      headline: GoogleFonts.maShanZheng(textStyle: textTheme?.headline),
      title: GoogleFonts.maShanZheng(textStyle: textTheme?.title),
      subhead: GoogleFonts.maShanZheng(textStyle: textTheme?.subhead),
      body2: GoogleFonts.maShanZheng(textStyle: textTheme?.body2),
      body1: GoogleFonts.maShanZheng(textStyle: textTheme?.body1),
      caption: GoogleFonts.maShanZheng(textStyle: textTheme?.caption),
      button: GoogleFonts.maShanZheng(textStyle: textTheme?.button),
      subtitle: GoogleFonts.maShanZheng(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.maShanZheng(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Macondo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Macondo
  static TextStyle macondo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/macondo/v8/RrQQboN9-iB1IXmOS2XO0LBBd4Y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Macondo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Macondo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Macondo
  static TextTheme macondoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.macondo(textStyle: textTheme?.display4),
      display3: GoogleFonts.macondo(textStyle: textTheme?.display3),
      display2: GoogleFonts.macondo(textStyle: textTheme?.display2),
      display1: GoogleFonts.macondo(textStyle: textTheme?.display1),
      headline: GoogleFonts.macondo(textStyle: textTheme?.headline),
      title: GoogleFonts.macondo(textStyle: textTheme?.title),
      subhead: GoogleFonts.macondo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.macondo(textStyle: textTheme?.body2),
      body1: GoogleFonts.macondo(textStyle: textTheme?.body1),
      caption: GoogleFonts.macondo(textStyle: textTheme?.caption),
      button: GoogleFonts.macondo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.macondo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.macondo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Macondo Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Macondo+Swash+Caps
  static TextStyle macondoSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/macondoswashcaps/v7/6NUL8EaAJgGKZA7lpt941Z9s6ZYgDq6Oekoa_mm5bA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MacondoSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Macondo Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Macondo+Swash+Caps
  static TextTheme macondoSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.macondoSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mada
  static TextStyle mada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/mada/v8/7Au_p_0qnzeSdf3nCCL8zkwMIFg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/mada/v8/7Au_p_0qnzeSdZnkCCL8zkwMIFg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mada/v8/7Auwp_0qnzeSTTXMLCrX0kU.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/mada/v8/7Au_p_0qnzeSdcHlCCL8zkwMIFg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/mada/v8/7Au_p_0qnzeSde3iCCL8zkwMIFg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mada/v8/7Au_p_0qnzeSdYnjCCL8zkwMIFg.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/mada/v8/7Au_p_0qnzeSdbHhCCL8zkwMIFg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mada
  static TextTheme madaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mada(textStyle: textTheme?.display4),
      display3: GoogleFonts.mada(textStyle: textTheme?.display3),
      display2: GoogleFonts.mada(textStyle: textTheme?.display2),
      display1: GoogleFonts.mada(textStyle: textTheme?.display1),
      headline: GoogleFonts.mada(textStyle: textTheme?.headline),
      title: GoogleFonts.mada(textStyle: textTheme?.title),
      subhead: GoogleFonts.mada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mada(textStyle: textTheme?.body2),
      body1: GoogleFonts.mada(textStyle: textTheme?.body1),
      caption: GoogleFonts.mada(textStyle: textTheme?.caption),
      button: GoogleFonts.mada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Magra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Magra
  static TextStyle magra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/magra/v8/uK_94ruaZus72k5xIDMfO-ed.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/magra/v8/uK_w4ruaZus72nbNDxcXEPuUX1ow.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Magra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Magra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Magra
  static TextTheme magraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.magra(textStyle: textTheme?.display4),
      display3: GoogleFonts.magra(textStyle: textTheme?.display3),
      display2: GoogleFonts.magra(textStyle: textTheme?.display2),
      display1: GoogleFonts.magra(textStyle: textTheme?.display1),
      headline: GoogleFonts.magra(textStyle: textTheme?.headline),
      title: GoogleFonts.magra(textStyle: textTheme?.title),
      subhead: GoogleFonts.magra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.magra(textStyle: textTheme?.body2),
      body1: GoogleFonts.magra(textStyle: textTheme?.body1),
      caption: GoogleFonts.magra(textStyle: textTheme?.caption),
      button: GoogleFonts.magra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.magra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.magra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Maiden Orange font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maiden+Orange
  static TextStyle maidenOrange({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/maidenorange/v10/kJE1BuIX7AUmhi2V4m08kb1XjOZdCZS8FY8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MaidenOrange',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Maiden Orange font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maiden+Orange
  static TextTheme maidenOrangeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.maidenOrange(textStyle: textTheme?.display4),
      display3: GoogleFonts.maidenOrange(textStyle: textTheme?.display3),
      display2: GoogleFonts.maidenOrange(textStyle: textTheme?.display2),
      display1: GoogleFonts.maidenOrange(textStyle: textTheme?.display1),
      headline: GoogleFonts.maidenOrange(textStyle: textTheme?.headline),
      title: GoogleFonts.maidenOrange(textStyle: textTheme?.title),
      subhead: GoogleFonts.maidenOrange(textStyle: textTheme?.subhead),
      body2: GoogleFonts.maidenOrange(textStyle: textTheme?.body2),
      body1: GoogleFonts.maidenOrange(textStyle: textTheme?.body1),
      caption: GoogleFonts.maidenOrange(textStyle: textTheme?.caption),
      button: GoogleFonts.maidenOrange(textStyle: textTheme?.button),
      subtitle: GoogleFonts.maidenOrange(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.maidenOrange(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Maitree font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maitree
  static TextStyle maitree({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/maitree/v4/MjQDmil5tffhpBrklhGNWJGovLdh6OE.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/maitree/v4/MjQDmil5tffhpBrklnWOWJGovLdh6OE.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/maitree/v4/MjQGmil5tffhpBrkrtmmfJmDoL4.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/maitree/v4/MjQDmil5tffhpBrkli2PWJGovLdh6OE.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/maitree/v4/MjQDmil5tffhpBrklgGIWJGovLdh6OE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/maitree/v4/MjQDmil5tffhpBrklmWJWJGovLdh6OE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Maitree',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Maitree font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maitree
  static TextTheme maitreeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.maitree(textStyle: textTheme?.display4),
      display3: GoogleFonts.maitree(textStyle: textTheme?.display3),
      display2: GoogleFonts.maitree(textStyle: textTheme?.display2),
      display1: GoogleFonts.maitree(textStyle: textTheme?.display1),
      headline: GoogleFonts.maitree(textStyle: textTheme?.headline),
      title: GoogleFonts.maitree(textStyle: textTheme?.title),
      subhead: GoogleFonts.maitree(textStyle: textTheme?.subhead),
      body2: GoogleFonts.maitree(textStyle: textTheme?.body2),
      body1: GoogleFonts.maitree(textStyle: textTheme?.body1),
      caption: GoogleFonts.maitree(textStyle: textTheme?.caption),
      button: GoogleFonts.maitree(textStyle: textTheme?.button),
      subtitle: GoogleFonts.maitree(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.maitree(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Major Mono Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Major+Mono+Display
  static TextStyle majorMonoDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/majormonodisplay/v4/RWmVoLyb5fEqtsfBX9PDZIGr2tFubRhLCn2QIndPww.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MajorMonoDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Major Mono Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Major+Mono+Display
  static TextTheme majorMonoDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.majorMonoDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mako font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mako
  static TextStyle mako({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mako/v11/H4coBX6Mmc_Z0ST09g478Lo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mako',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mako font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mako
  static TextTheme makoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mako(textStyle: textTheme?.display4),
      display3: GoogleFonts.mako(textStyle: textTheme?.display3),
      display2: GoogleFonts.mako(textStyle: textTheme?.display2),
      display1: GoogleFonts.mako(textStyle: textTheme?.display1),
      headline: GoogleFonts.mako(textStyle: textTheme?.headline),
      title: GoogleFonts.mako(textStyle: textTheme?.title),
      subhead: GoogleFonts.mako(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mako(textStyle: textTheme?.body2),
      body1: GoogleFonts.mako(textStyle: textTheme?.body1),
      caption: GoogleFonts.mako(textStyle: textTheme?.caption),
      button: GoogleFonts.mako(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mako(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mako(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mali font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mali
  static TextStyle mali({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/mali/v3/N0bV2SRONuN4QOLlKlRaJdbWgdY.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/mali/v3/N0bX2SRONuN4SCj8wlVQIfTTkdbJYA.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/mali/v3/N0bV2SRONuN4QIbmKlRaJdbWgdY.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/mali/v3/N0bX2SRONuN4SCj8plZQIfTTkdbJYA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mali/v3/N0ba2SRONuN4eCrODlxxOd8.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/mali/v3/N0bU2SRONuN4SCjECn50Kd_PmA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/mali/v3/N0bV2SRONuN4QN7nKlRaJdbWgdY.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/mali/v3/N0bX2SRONuN4SCj8_ldQIfTTkdbJYA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/mali/v3/N0bV2SRONuN4QPLgKlRaJdbWgdY.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/mali/v3/N0bX2SRONuN4SCj80lBQIfTTkdbJYA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mali/v3/N0bV2SRONuN4QJbhKlRaJdbWgdY.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/mali/v3/N0bX2SRONuN4SCj8tlFQIfTTkdbJYA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mali',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mali font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mali
  static TextTheme maliTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mali(textStyle: textTheme?.display4),
      display3: GoogleFonts.mali(textStyle: textTheme?.display3),
      display2: GoogleFonts.mali(textStyle: textTheme?.display2),
      display1: GoogleFonts.mali(textStyle: textTheme?.display1),
      headline: GoogleFonts.mali(textStyle: textTheme?.headline),
      title: GoogleFonts.mali(textStyle: textTheme?.title),
      subhead: GoogleFonts.mali(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mali(textStyle: textTheme?.body2),
      body1: GoogleFonts.mali(textStyle: textTheme?.body1),
      caption: GoogleFonts.mali(textStyle: textTheme?.caption),
      button: GoogleFonts.mali(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mali(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mali(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mallanna font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mallanna
  static TextStyle mallanna({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mallanna/v7/hv-Vlzx-KEQb84YaDGwzEzRwVvJ-.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mallanna',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mallanna font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mallanna
  static TextTheme mallannaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mallanna(textStyle: textTheme?.display4),
      display3: GoogleFonts.mallanna(textStyle: textTheme?.display3),
      display2: GoogleFonts.mallanna(textStyle: textTheme?.display2),
      display1: GoogleFonts.mallanna(textStyle: textTheme?.display1),
      headline: GoogleFonts.mallanna(textStyle: textTheme?.headline),
      title: GoogleFonts.mallanna(textStyle: textTheme?.title),
      subhead: GoogleFonts.mallanna(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mallanna(textStyle: textTheme?.body2),
      body1: GoogleFonts.mallanna(textStyle: textTheme?.body1),
      caption: GoogleFonts.mallanna(textStyle: textTheme?.caption),
      button: GoogleFonts.mallanna(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mallanna(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mallanna(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mandali font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mandali
  static TextStyle mandali({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mandali/v8/LhWlMVbYOfASNfNUVFk1ZPdcKtA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mandali',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mandali font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mandali
  static TextTheme mandaliTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mandali(textStyle: textTheme?.display4),
      display3: GoogleFonts.mandali(textStyle: textTheme?.display3),
      display2: GoogleFonts.mandali(textStyle: textTheme?.display2),
      display1: GoogleFonts.mandali(textStyle: textTheme?.display1),
      headline: GoogleFonts.mandali(textStyle: textTheme?.headline),
      title: GoogleFonts.mandali(textStyle: textTheme?.title),
      subhead: GoogleFonts.mandali(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mandali(textStyle: textTheme?.body2),
      body1: GoogleFonts.mandali(textStyle: textTheme?.body1),
      caption: GoogleFonts.mandali(textStyle: textTheme?.caption),
      button: GoogleFonts.mandali(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mandali(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mandali(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Manjari font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Manjari
  static TextStyle manjari({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/manjari/v2/k3kSo8UPMOBO2w1UdbroK2vFIaOV8A.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/manjari/v2/k3kQo8UPMOBO2w1UTd7iL0nAMaM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/manjari/v2/k3kVo8UPMOBO2w1UdWLNC0HrLaqM6Q4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Manjari',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Manjari font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Manjari
  static TextTheme manjariTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.manjari(textStyle: textTheme?.display4),
      display3: GoogleFonts.manjari(textStyle: textTheme?.display3),
      display2: GoogleFonts.manjari(textStyle: textTheme?.display2),
      display1: GoogleFonts.manjari(textStyle: textTheme?.display1),
      headline: GoogleFonts.manjari(textStyle: textTheme?.headline),
      title: GoogleFonts.manjari(textStyle: textTheme?.title),
      subhead: GoogleFonts.manjari(textStyle: textTheme?.subhead),
      body2: GoogleFonts.manjari(textStyle: textTheme?.body2),
      body1: GoogleFonts.manjari(textStyle: textTheme?.body1),
      caption: GoogleFonts.manjari(textStyle: textTheme?.caption),
      button: GoogleFonts.manjari(textStyle: textTheme?.button),
      subtitle: GoogleFonts.manjari(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.manjari(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mansalva font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mansalva
  static TextStyle mansalva({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mansalva/v1/aWB4m0aacbtDfvq5NJllI47vdyBg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mansalva',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mansalva font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mansalva
  static TextTheme mansalvaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mansalva(textStyle: textTheme?.display4),
      display3: GoogleFonts.mansalva(textStyle: textTheme?.display3),
      display2: GoogleFonts.mansalva(textStyle: textTheme?.display2),
      display1: GoogleFonts.mansalva(textStyle: textTheme?.display1),
      headline: GoogleFonts.mansalva(textStyle: textTheme?.headline),
      title: GoogleFonts.mansalva(textStyle: textTheme?.title),
      subhead: GoogleFonts.mansalva(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mansalva(textStyle: textTheme?.body2),
      body1: GoogleFonts.mansalva(textStyle: textTheme?.body1),
      caption: GoogleFonts.mansalva(textStyle: textTheme?.caption),
      button: GoogleFonts.mansalva(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mansalva(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mansalva(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Manuale font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Manuale
  static TextStyle manuale({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/manuale/v5/f0Xp0eas_8Z-TFZdHv3mMxFaSqASeeHke7wD1TB_JHHY.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/manuale/v5/f0Xp0eas_8Z-TFZdHv3mMxFaSqASeeHWe7wD1TB_JHHY.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/manuale/v5/f0Xp0eas_8Z-TFZdHv3mMxFaSqASeeE6fLwD1TB_JHHY.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/manuale/v5/f0Xp0eas_8Z-TFZdHv3mMxFaSqASeeEDfLwD1TB_JHHY.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/manuale/v5/f0Xn0eas_8Z-TFZdNPTUzMkzITq8fvQsOFRA3zRdIWHYr8M.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/manuale/v5/f0Xn0eas_8Z-TFZdNPTUzMkzITq8fvQsOGZA3zRdIWHYr8M.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/manuale/v5/f0Xn0eas_8Z-TFZdNPTUzMkzITq8fvQsOIpH3zRdIWHYr8M.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/manuale/v5/f0Xn0eas_8Z-TFZdNPTUzMkzITq8fvQsOLNH3zRdIWHYr8M.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Manuale',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Manuale font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Manuale
  static TextTheme manualeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.manuale(textStyle: textTheme?.display4),
      display3: GoogleFonts.manuale(textStyle: textTheme?.display3),
      display2: GoogleFonts.manuale(textStyle: textTheme?.display2),
      display1: GoogleFonts.manuale(textStyle: textTheme?.display1),
      headline: GoogleFonts.manuale(textStyle: textTheme?.headline),
      title: GoogleFonts.manuale(textStyle: textTheme?.title),
      subhead: GoogleFonts.manuale(textStyle: textTheme?.subhead),
      body2: GoogleFonts.manuale(textStyle: textTheme?.body2),
      body1: GoogleFonts.manuale(textStyle: textTheme?.body1),
      caption: GoogleFonts.manuale(textStyle: textTheme?.caption),
      button: GoogleFonts.manuale(textStyle: textTheme?.button),
      subtitle: GoogleFonts.manuale(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.manuale(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marcellus font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marcellus
  static TextStyle marcellus({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/marcellus/v7/wEO_EBrOk8hQLDvIAF8FUfAL3EsHiA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Marcellus',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marcellus font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marcellus
  static TextTheme marcellusTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marcellus(textStyle: textTheme?.display4),
      display3: GoogleFonts.marcellus(textStyle: textTheme?.display3),
      display2: GoogleFonts.marcellus(textStyle: textTheme?.display2),
      display1: GoogleFonts.marcellus(textStyle: textTheme?.display1),
      headline: GoogleFonts.marcellus(textStyle: textTheme?.headline),
      title: GoogleFonts.marcellus(textStyle: textTheme?.title),
      subhead: GoogleFonts.marcellus(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marcellus(textStyle: textTheme?.body2),
      body1: GoogleFonts.marcellus(textStyle: textTheme?.body1),
      caption: GoogleFonts.marcellus(textStyle: textTheme?.caption),
      button: GoogleFonts.marcellus(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marcellus(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marcellus(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marcellus SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marcellus+SC
  static TextStyle marcellusSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/marcellussc/v7/ke8iOgUHP1dg-Rmi6RWjbLEPgdydGKikhA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MarcellusSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marcellus SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marcellus+SC
  static TextTheme marcellusSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marcellusSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.marcellusSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.marcellusSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.marcellusSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.marcellusSC(textStyle: textTheme?.headline),
      title: GoogleFonts.marcellusSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.marcellusSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marcellusSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.marcellusSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.marcellusSC(textStyle: textTheme?.caption),
      button: GoogleFonts.marcellusSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marcellusSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marcellusSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marck Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marck+Script
  static TextStyle marckScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/marckscript/v10/nwpTtK2oNgBA3Or78gapdwuCzyI-aMPF7Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MarckScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marck Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marck+Script
  static TextTheme marckScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marckScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.marckScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.marckScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.marckScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.marckScript(textStyle: textTheme?.headline),
      title: GoogleFonts.marckScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.marckScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marckScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.marckScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.marckScript(textStyle: textTheme?.caption),
      button: GoogleFonts.marckScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marckScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marckScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Margarine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Margarine
  static TextStyle margarine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/margarine/v8/qkBXXvoE6trLT9Y7YLye5JRLkAXbMQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Margarine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Margarine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Margarine
  static TextTheme margarineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.margarine(textStyle: textTheme?.display4),
      display3: GoogleFonts.margarine(textStyle: textTheme?.display3),
      display2: GoogleFonts.margarine(textStyle: textTheme?.display2),
      display1: GoogleFonts.margarine(textStyle: textTheme?.display1),
      headline: GoogleFonts.margarine(textStyle: textTheme?.headline),
      title: GoogleFonts.margarine(textStyle: textTheme?.title),
      subhead: GoogleFonts.margarine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.margarine(textStyle: textTheme?.body2),
      body1: GoogleFonts.margarine(textStyle: textTheme?.body1),
      caption: GoogleFonts.margarine(textStyle: textTheme?.caption),
      button: GoogleFonts.margarine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.margarine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.margarine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Markazi Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Markazi+Text
  static TextStyle markaziText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/markazitext/v10/sykh-ydym6AtQaiEtX7yhqb_rV1k_81ZVYYZtfSQT4MlBekmJLo.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/markazitext/v10/sykh-ydym6AtQaiEtX7yhqb_rV1k_81ZVYYZtcaQT4MlBekmJLo.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/markazitext/v10/sykh-ydym6AtQaiEtX7yhqb_rV1k_81ZVYYZtSqXT4MlBekmJLo.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/markazitext/v10/sykh-ydym6AtQaiEtX7yhqb_rV1k_81ZVYYZtROXT4MlBekmJLo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MarkaziText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Markazi Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Markazi+Text
  static TextTheme markaziTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.markaziText(textStyle: textTheme?.display4),
      display3: GoogleFonts.markaziText(textStyle: textTheme?.display3),
      display2: GoogleFonts.markaziText(textStyle: textTheme?.display2),
      display1: GoogleFonts.markaziText(textStyle: textTheme?.display1),
      headline: GoogleFonts.markaziText(textStyle: textTheme?.headline),
      title: GoogleFonts.markaziText(textStyle: textTheme?.title),
      subhead: GoogleFonts.markaziText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.markaziText(textStyle: textTheme?.body2),
      body1: GoogleFonts.markaziText(textStyle: textTheme?.body1),
      caption: GoogleFonts.markaziText(textStyle: textTheme?.caption),
      button: GoogleFonts.markaziText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.markaziText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.markaziText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marko One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marko+One
  static TextStyle markoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/markoone/v9/9Btq3DFG0cnVM5lw1haaKpUfrHPzUw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MarkoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marko One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marko+One
  static TextTheme markoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.markoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.markoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.markoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.markoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.markoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.markoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.markoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.markoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.markoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.markoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.markoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.markoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.markoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marmelad font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marmelad
  static TextStyle marmelad({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/marmelad/v9/Qw3eZQdSHj_jK2e-8tFLG-YMC0R8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Marmelad',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marmelad font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marmelad
  static TextTheme marmeladTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marmelad(textStyle: textTheme?.display4),
      display3: GoogleFonts.marmelad(textStyle: textTheme?.display3),
      display2: GoogleFonts.marmelad(textStyle: textTheme?.display2),
      display1: GoogleFonts.marmelad(textStyle: textTheme?.display1),
      headline: GoogleFonts.marmelad(textStyle: textTheme?.headline),
      title: GoogleFonts.marmelad(textStyle: textTheme?.title),
      subhead: GoogleFonts.marmelad(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marmelad(textStyle: textTheme?.body2),
      body1: GoogleFonts.marmelad(textStyle: textTheme?.body1),
      caption: GoogleFonts.marmelad(textStyle: textTheme?.caption),
      button: GoogleFonts.marmelad(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marmelad(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marmelad(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Martel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Martel
  static TextStyle martel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/martel/v4/PN_yRfK9oXHga0XVqekahRbX9vnDzw.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/martel/v4/PN_yRfK9oXHga0XVzeoahRbX9vnDzw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/martel/v4/PN_xRfK9oXHga0XtYcI-jT3L_w.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/martel/v4/PN_yRfK9oXHga0XVuewahRbX9vnDzw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/martel/v4/PN_yRfK9oXHga0XV3e0ahRbX9vnDzw.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/martel/v4/PN_yRfK9oXHga0XVwe4ahRbX9vnDzw.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/martel/v4/PN_yRfK9oXHga0XV5e8ahRbX9vnDzw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Martel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Martel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Martel
  static TextTheme martelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.martel(textStyle: textTheme?.display4),
      display3: GoogleFonts.martel(textStyle: textTheme?.display3),
      display2: GoogleFonts.martel(textStyle: textTheme?.display2),
      display1: GoogleFonts.martel(textStyle: textTheme?.display1),
      headline: GoogleFonts.martel(textStyle: textTheme?.headline),
      title: GoogleFonts.martel(textStyle: textTheme?.title),
      subhead: GoogleFonts.martel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.martel(textStyle: textTheme?.body2),
      body1: GoogleFonts.martel(textStyle: textTheme?.body1),
      caption: GoogleFonts.martel(textStyle: textTheme?.caption),
      button: GoogleFonts.martel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.martel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.martel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Martel Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Martel+Sans
  static TextStyle martelSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/martelsans/v6/h0GxssGi7VdzDgKjM-4d8hAX5suHFUknqMxQ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/martelsans/v6/h0GxssGi7VdzDgKjM-4d8hBz5cuHFUknqMxQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/martelsans/v6/h0GsssGi7VdzDgKjM-4d8ijfze-PPlUu.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/martelsans/v6/h0GxssGi7VdzDgKjM-4d8hAH48uHFUknqMxQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/martelsans/v6/h0GxssGi7VdzDgKjM-4d8hBj4suHFUknqMxQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/martelsans/v6/h0GxssGi7VdzDgKjM-4d8hB_4cuHFUknqMxQ.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/martelsans/v6/h0GxssGi7VdzDgKjM-4d8hBb4MuHFUknqMxQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MartelSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Martel Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Martel+Sans
  static TextTheme martelSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.martelSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.martelSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.martelSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.martelSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.martelSans(textStyle: textTheme?.headline),
      title: GoogleFonts.martelSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.martelSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.martelSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.martelSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.martelSans(textStyle: textTheme?.caption),
      button: GoogleFonts.martelSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.martelSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.martelSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Marvel font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marvel
  static TextStyle marvel({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/marvel/v9/nwpVtKeoNgBV0qaIkV7ED366zg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/marvel/v9/nwpXtKeoNgBV0qa4k1TALXuqzhA7.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/marvel/v9/nwpWtKeoNgBV0qawLXHgB1WmxwkiYQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/marvel/v9/nwpQtKeoNgBV0qa4k2x8Al-i5QwyYdrc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Marvel',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Marvel font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Marvel
  static TextTheme marvelTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.marvel(textStyle: textTheme?.display4),
      display3: GoogleFonts.marvel(textStyle: textTheme?.display3),
      display2: GoogleFonts.marvel(textStyle: textTheme?.display2),
      display1: GoogleFonts.marvel(textStyle: textTheme?.display1),
      headline: GoogleFonts.marvel(textStyle: textTheme?.headline),
      title: GoogleFonts.marvel(textStyle: textTheme?.title),
      subhead: GoogleFonts.marvel(textStyle: textTheme?.subhead),
      body2: GoogleFonts.marvel(textStyle: textTheme?.body2),
      body1: GoogleFonts.marvel(textStyle: textTheme?.body1),
      caption: GoogleFonts.marvel(textStyle: textTheme?.caption),
      button: GoogleFonts.marvel(textStyle: textTheme?.button),
      subtitle: GoogleFonts.marvel(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.marvel(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mate
  static TextStyle mate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mate/v8/m8JdjftRd7WZ2z28WoXSaLU.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/mate/v8/m8JTjftRd7WZ6z-2XqfXeLVdbw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mate
  static TextTheme mateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mate(textStyle: textTheme?.display4),
      display3: GoogleFonts.mate(textStyle: textTheme?.display3),
      display2: GoogleFonts.mate(textStyle: textTheme?.display2),
      display1: GoogleFonts.mate(textStyle: textTheme?.display1),
      headline: GoogleFonts.mate(textStyle: textTheme?.headline),
      title: GoogleFonts.mate(textStyle: textTheme?.title),
      subhead: GoogleFonts.mate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mate(textStyle: textTheme?.body2),
      body1: GoogleFonts.mate(textStyle: textTheme?.body1),
      caption: GoogleFonts.mate(textStyle: textTheme?.caption),
      button: GoogleFonts.mate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mate SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mate+SC
  static TextStyle mateSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/matesc/v8/-nF8OGQ1-uoVr2wKyiXZ95OkJwA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MateSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mate SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mate+SC
  static TextTheme mateSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mateSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.mateSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.mateSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.mateSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.mateSC(textStyle: textTheme?.headline),
      title: GoogleFonts.mateSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.mateSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mateSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.mateSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.mateSC(textStyle: textTheme?.caption),
      button: GoogleFonts.mateSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mateSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mateSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Maven Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maven+Pro
  static TextStyle mavenPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mavenpro/v18/7Auup_AqnyWWAxW2Wk3swUz56MS91Eww8SX25nCpozp5GvU.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/mavenpro/v18/7Auup_AqnyWWAxW2Wk3swUz56MS91Eww8Rf25nCpozp5GvU.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/mavenpro/v18/7Auup_AqnyWWAxW2Wk3swUz56MS91Eww8fvx5nCpozp5GvU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mavenpro/v18/7Auup_AqnyWWAxW2Wk3swUz56MS91Eww8cLx5nCpozp5GvU.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/mavenpro/v18/7Auup_AqnyWWAxW2Wk3swUz56MS91Eww8aXx5nCpozp5GvU.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/mavenpro/v18/7Auup_AqnyWWAxW2Wk3swUz56MS91Eww8Yzx5nCpozp5GvU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MavenPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Maven Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Maven+Pro
  static TextTheme mavenProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mavenPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.mavenPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.mavenPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.mavenPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.mavenPro(textStyle: textTheme?.headline),
      title: GoogleFonts.mavenPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.mavenPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mavenPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.mavenPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.mavenPro(textStyle: textTheme?.caption),
      button: GoogleFonts.mavenPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mavenPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mavenPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the McLaren font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/McLaren
  static TextStyle mcLaren({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mclaren/v7/2EbnL-ZuAXFqZFXISYYf8z2Yt_c.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'McLaren',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the McLaren font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/McLaren
  static TextTheme mcLarenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mcLaren(textStyle: textTheme?.display4),
      display3: GoogleFonts.mcLaren(textStyle: textTheme?.display3),
      display2: GoogleFonts.mcLaren(textStyle: textTheme?.display2),
      display1: GoogleFonts.mcLaren(textStyle: textTheme?.display1),
      headline: GoogleFonts.mcLaren(textStyle: textTheme?.headline),
      title: GoogleFonts.mcLaren(textStyle: textTheme?.title),
      subhead: GoogleFonts.mcLaren(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mcLaren(textStyle: textTheme?.body2),
      body1: GoogleFonts.mcLaren(textStyle: textTheme?.body1),
      caption: GoogleFonts.mcLaren(textStyle: textTheme?.caption),
      button: GoogleFonts.mcLaren(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mcLaren(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mcLaren(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Meddon font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meddon
  static TextStyle meddon({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/meddon/v12/kmK8ZqA2EgDNeHTZhBdB3y_Aow.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Meddon',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Meddon font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meddon
  static TextTheme meddonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.meddon(textStyle: textTheme?.display4),
      display3: GoogleFonts.meddon(textStyle: textTheme?.display3),
      display2: GoogleFonts.meddon(textStyle: textTheme?.display2),
      display1: GoogleFonts.meddon(textStyle: textTheme?.display1),
      headline: GoogleFonts.meddon(textStyle: textTheme?.headline),
      title: GoogleFonts.meddon(textStyle: textTheme?.title),
      subhead: GoogleFonts.meddon(textStyle: textTheme?.subhead),
      body2: GoogleFonts.meddon(textStyle: textTheme?.body2),
      body1: GoogleFonts.meddon(textStyle: textTheme?.body1),
      caption: GoogleFonts.meddon(textStyle: textTheme?.caption),
      button: GoogleFonts.meddon(textStyle: textTheme?.button),
      subtitle: GoogleFonts.meddon(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.meddon(textStyle: textTheme?.overline),
    );
  }

  /// Applies the MedievalSharp font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/MedievalSharp
  static TextStyle medievalSharp({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/medievalsharp/v12/EvOJzAlL3oU5AQl2mP5KdgptAq96MwvXLDk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MedievalSharp',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the MedievalSharp font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/MedievalSharp
  static TextTheme medievalSharpTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.medievalSharp(textStyle: textTheme?.display4),
      display3: GoogleFonts.medievalSharp(textStyle: textTheme?.display3),
      display2: GoogleFonts.medievalSharp(textStyle: textTheme?.display2),
      display1: GoogleFonts.medievalSharp(textStyle: textTheme?.display1),
      headline: GoogleFonts.medievalSharp(textStyle: textTheme?.headline),
      title: GoogleFonts.medievalSharp(textStyle: textTheme?.title),
      subhead: GoogleFonts.medievalSharp(textStyle: textTheme?.subhead),
      body2: GoogleFonts.medievalSharp(textStyle: textTheme?.body2),
      body1: GoogleFonts.medievalSharp(textStyle: textTheme?.body1),
      caption: GoogleFonts.medievalSharp(textStyle: textTheme?.caption),
      button: GoogleFonts.medievalSharp(textStyle: textTheme?.button),
      subtitle: GoogleFonts.medievalSharp(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.medievalSharp(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Medula One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Medula+One
  static TextStyle medulaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/medulaone/v9/YA9Wr0qb5kjJM6l2V0yukiEqs7GtlvY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MedulaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Medula One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Medula+One
  static TextTheme medulaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.medulaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.medulaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.medulaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.medulaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.medulaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.medulaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.medulaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.medulaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.medulaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.medulaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.medulaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.medulaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.medulaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Meera Inimai font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meera+Inimai
  static TextStyle meeraInimai({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/meerainimai/v4/845fNMM5EIqOW5MPuvO3ILep_2jDVevnLQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MeeraInimai',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Meera Inimai font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meera+Inimai
  static TextTheme meeraInimaiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.meeraInimai(textStyle: textTheme?.display4),
      display3: GoogleFonts.meeraInimai(textStyle: textTheme?.display3),
      display2: GoogleFonts.meeraInimai(textStyle: textTheme?.display2),
      display1: GoogleFonts.meeraInimai(textStyle: textTheme?.display1),
      headline: GoogleFonts.meeraInimai(textStyle: textTheme?.headline),
      title: GoogleFonts.meeraInimai(textStyle: textTheme?.title),
      subhead: GoogleFonts.meeraInimai(textStyle: textTheme?.subhead),
      body2: GoogleFonts.meeraInimai(textStyle: textTheme?.body2),
      body1: GoogleFonts.meeraInimai(textStyle: textTheme?.body1),
      caption: GoogleFonts.meeraInimai(textStyle: textTheme?.caption),
      button: GoogleFonts.meeraInimai(textStyle: textTheme?.button),
      subtitle: GoogleFonts.meeraInimai(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.meeraInimai(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Megrim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Megrim
  static TextStyle megrim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/megrim/v10/46kulbz5WjvLqJZlbWXgd0RY1g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Megrim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Megrim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Megrim
  static TextTheme megrimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.megrim(textStyle: textTheme?.display4),
      display3: GoogleFonts.megrim(textStyle: textTheme?.display3),
      display2: GoogleFonts.megrim(textStyle: textTheme?.display2),
      display1: GoogleFonts.megrim(textStyle: textTheme?.display1),
      headline: GoogleFonts.megrim(textStyle: textTheme?.headline),
      title: GoogleFonts.megrim(textStyle: textTheme?.title),
      subhead: GoogleFonts.megrim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.megrim(textStyle: textTheme?.body2),
      body1: GoogleFonts.megrim(textStyle: textTheme?.body1),
      caption: GoogleFonts.megrim(textStyle: textTheme?.caption),
      button: GoogleFonts.megrim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.megrim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.megrim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Meie Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meie+Script
  static TextStyle meieScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/meiescript/v7/_LOImzDK7erRjhunIspaMjxn5IXg0WDz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MeieScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Meie Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Meie+Script
  static TextTheme meieScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.meieScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.meieScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.meieScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.meieScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.meieScript(textStyle: textTheme?.headline),
      title: GoogleFonts.meieScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.meieScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.meieScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.meieScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.meieScript(textStyle: textTheme?.caption),
      button: GoogleFonts.meieScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.meieScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.meieScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Merienda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merienda
  static TextStyle merienda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/merienda/v8/gNMHW3x8Qoy5_mf8uVMCOou6_dvg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/merienda/v8/gNMAW3x8Qoy5_mf8uWu-Fa-y1sfpPES4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Merienda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Merienda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merienda
  static TextTheme meriendaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.merienda(textStyle: textTheme?.display4),
      display3: GoogleFonts.merienda(textStyle: textTheme?.display3),
      display2: GoogleFonts.merienda(textStyle: textTheme?.display2),
      display1: GoogleFonts.merienda(textStyle: textTheme?.display1),
      headline: GoogleFonts.merienda(textStyle: textTheme?.headline),
      title: GoogleFonts.merienda(textStyle: textTheme?.title),
      subhead: GoogleFonts.merienda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.merienda(textStyle: textTheme?.body2),
      body1: GoogleFonts.merienda(textStyle: textTheme?.body1),
      caption: GoogleFonts.merienda(textStyle: textTheme?.caption),
      button: GoogleFonts.merienda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.merienda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.merienda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Merienda One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merienda+One
  static TextStyle meriendaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/meriendaone/v10/H4cgBXaMndbflEq6kyZ1ht6YgoyyYzFzFw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MeriendaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Merienda One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merienda+One
  static TextTheme meriendaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.meriendaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.meriendaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.meriendaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.meriendaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.meriendaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.meriendaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.meriendaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.meriendaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.meriendaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.meriendaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.meriendaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.meriendaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.meriendaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Merriweather font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merriweather
  static TextStyle merriweather({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/merriweather/v21/u-4n0qyriQwlOrhSvowK_l521wRpX837pvjxPA.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/merriweather/v21/u-4l0qyriQwlOrhSvowK_l5-eR7lXcf_hP3hPGWH.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/merriweather/v21/u-440qyriQwlOrhSvowK_l5OeyxNV-bnrw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/merriweather/v21/u-4m0qyriQwlOrhSvowK_l5-eSZJdeP3r-Ho.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/merriweather/v21/u-4n0qyriQwlOrhSvowK_l52xwNpX837pvjxPA.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/merriweather/v21/u-4l0qyriQwlOrhSvowK_l5-eR71Wsf_hP3hPGWH.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/merriweather/v21/u-4n0qyriQwlOrhSvowK_l52_wFpX837pvjxPA.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/merriweather/v21/u-4l0qyriQwlOrhSvowK_l5-eR7NWMf_hP3hPGWH.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Merriweather',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Merriweather font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merriweather
  static TextTheme merriweatherTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.merriweather(textStyle: textTheme?.display4),
      display3: GoogleFonts.merriweather(textStyle: textTheme?.display3),
      display2: GoogleFonts.merriweather(textStyle: textTheme?.display2),
      display1: GoogleFonts.merriweather(textStyle: textTheme?.display1),
      headline: GoogleFonts.merriweather(textStyle: textTheme?.headline),
      title: GoogleFonts.merriweather(textStyle: textTheme?.title),
      subhead: GoogleFonts.merriweather(textStyle: textTheme?.subhead),
      body2: GoogleFonts.merriweather(textStyle: textTheme?.body2),
      body1: GoogleFonts.merriweather(textStyle: textTheme?.body1),
      caption: GoogleFonts.merriweather(textStyle: textTheme?.caption),
      button: GoogleFonts.merriweather(textStyle: textTheme?.button),
      subtitle: GoogleFonts.merriweather(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.merriweather(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Merriweather Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merriweather+Sans
  static TextStyle merriweatherSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/merriweathersans/v11/2-c49IRs1JiJN1FRAMjTN5zd9vgsFH1eYBDD2BdWzIqY.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/merriweathersans/v11/2-c29IRs1JiJN1FRAMjTN5zd9vgsFHXwepzB0hN0yZqYcqw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/merriweathersans/v11/2-c99IRs1JiJN1FRAMjTN5zd9vgsFEXySDTL8wtf.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/merriweathersans/v11/2-c79IRs1JiJN1FRAMjTN5zd9vgsFHXwQjDp9htf1ZM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/merriweathersans/v11/2-c49IRs1JiJN1FRAMjTN5zd9vgsFH1OZxDD2BdWzIqY.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/merriweathersans/v11/2-c29IRs1JiJN1FRAMjTN5zd9vgsFHXweozG0hN0yZqYcqw.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/merriweathersans/v11/2-c49IRs1JiJN1FRAMjTN5zd9vgsFH1SZBDD2BdWzIqY.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/merriweathersans/v11/2-c29IRs1JiJN1FRAMjTN5zd9vgsFHXwepDF0hN0yZqYcqw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MerriweatherSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Merriweather Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Merriweather+Sans
  static TextTheme merriweatherSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.merriweatherSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.merriweatherSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.merriweatherSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.merriweatherSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.merriweatherSans(textStyle: textTheme?.headline),
      title: GoogleFonts.merriweatherSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.merriweatherSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.merriweatherSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.merriweatherSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.merriweatherSans(textStyle: textTheme?.caption),
      button: GoogleFonts.merriweatherSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.merriweatherSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.merriweatherSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Metal font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metal
  static TextStyle metal({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/metal/v12/lW-wwjUJIXTo7i3nnoQAUdN2.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Metal',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Metal font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metal
  static TextTheme metalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.metal(textStyle: textTheme?.display4),
      display3: GoogleFonts.metal(textStyle: textTheme?.display3),
      display2: GoogleFonts.metal(textStyle: textTheme?.display2),
      display1: GoogleFonts.metal(textStyle: textTheme?.display1),
      headline: GoogleFonts.metal(textStyle: textTheme?.headline),
      title: GoogleFonts.metal(textStyle: textTheme?.title),
      subhead: GoogleFonts.metal(textStyle: textTheme?.subhead),
      body2: GoogleFonts.metal(textStyle: textTheme?.body2),
      body1: GoogleFonts.metal(textStyle: textTheme?.body1),
      caption: GoogleFonts.metal(textStyle: textTheme?.caption),
      button: GoogleFonts.metal(textStyle: textTheme?.button),
      subtitle: GoogleFonts.metal(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.metal(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Metal Mania font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metal+Mania
  static TextStyle metalMania({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/metalmania/v9/RWmMoKWb4e8kqMfBUdPFJeXCg6UKDXlq.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MetalMania',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Metal Mania font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metal+Mania
  static TextTheme metalManiaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.metalMania(textStyle: textTheme?.display4),
      display3: GoogleFonts.metalMania(textStyle: textTheme?.display3),
      display2: GoogleFonts.metalMania(textStyle: textTheme?.display2),
      display1: GoogleFonts.metalMania(textStyle: textTheme?.display1),
      headline: GoogleFonts.metalMania(textStyle: textTheme?.headline),
      title: GoogleFonts.metalMania(textStyle: textTheme?.title),
      subhead: GoogleFonts.metalMania(textStyle: textTheme?.subhead),
      body2: GoogleFonts.metalMania(textStyle: textTheme?.body2),
      body1: GoogleFonts.metalMania(textStyle: textTheme?.body1),
      caption: GoogleFonts.metalMania(textStyle: textTheme?.caption),
      button: GoogleFonts.metalMania(textStyle: textTheme?.button),
      subtitle: GoogleFonts.metalMania(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.metalMania(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Metamorphous font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metamorphous
  static TextStyle metamorphous({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/metamorphous/v10/Wnz8HA03aAXcC39ZEX5y1330PCCthTsmaQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Metamorphous',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Metamorphous font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metamorphous
  static TextTheme metamorphousTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.metamorphous(textStyle: textTheme?.display4),
      display3: GoogleFonts.metamorphous(textStyle: textTheme?.display3),
      display2: GoogleFonts.metamorphous(textStyle: textTheme?.display2),
      display1: GoogleFonts.metamorphous(textStyle: textTheme?.display1),
      headline: GoogleFonts.metamorphous(textStyle: textTheme?.headline),
      title: GoogleFonts.metamorphous(textStyle: textTheme?.title),
      subhead: GoogleFonts.metamorphous(textStyle: textTheme?.subhead),
      body2: GoogleFonts.metamorphous(textStyle: textTheme?.body2),
      body1: GoogleFonts.metamorphous(textStyle: textTheme?.body1),
      caption: GoogleFonts.metamorphous(textStyle: textTheme?.caption),
      button: GoogleFonts.metamorphous(textStyle: textTheme?.button),
      subtitle: GoogleFonts.metamorphous(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.metamorphous(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Metrophobic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metrophobic
  static TextStyle metrophobic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/metrophobic/v13/sJoA3LZUhMSAPV_u0qwiAT-J737FPEEL.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Metrophobic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Metrophobic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Metrophobic
  static TextTheme metrophobicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.metrophobic(textStyle: textTheme?.display4),
      display3: GoogleFonts.metrophobic(textStyle: textTheme?.display3),
      display2: GoogleFonts.metrophobic(textStyle: textTheme?.display2),
      display1: GoogleFonts.metrophobic(textStyle: textTheme?.display1),
      headline: GoogleFonts.metrophobic(textStyle: textTheme?.headline),
      title: GoogleFonts.metrophobic(textStyle: textTheme?.title),
      subhead: GoogleFonts.metrophobic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.metrophobic(textStyle: textTheme?.body2),
      body1: GoogleFonts.metrophobic(textStyle: textTheme?.body1),
      caption: GoogleFonts.metrophobic(textStyle: textTheme?.caption),
      button: GoogleFonts.metrophobic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.metrophobic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.metrophobic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Michroma font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Michroma
  static TextStyle michroma({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/michroma/v10/PN_zRfy9qWD8fEagAMg6rzjb_-Da.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Michroma',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Michroma font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Michroma
  static TextTheme michromaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.michroma(textStyle: textTheme?.display4),
      display3: GoogleFonts.michroma(textStyle: textTheme?.display3),
      display2: GoogleFonts.michroma(textStyle: textTheme?.display2),
      display1: GoogleFonts.michroma(textStyle: textTheme?.display1),
      headline: GoogleFonts.michroma(textStyle: textTheme?.headline),
      title: GoogleFonts.michroma(textStyle: textTheme?.title),
      subhead: GoogleFonts.michroma(textStyle: textTheme?.subhead),
      body2: GoogleFonts.michroma(textStyle: textTheme?.body2),
      body1: GoogleFonts.michroma(textStyle: textTheme?.body1),
      caption: GoogleFonts.michroma(textStyle: textTheme?.caption),
      button: GoogleFonts.michroma(textStyle: textTheme?.button),
      subtitle: GoogleFonts.michroma(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.michroma(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Milonga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Milonga
  static TextStyle milonga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/milonga/v7/SZc53FHnIaK9W5kffz3GkUrS8DI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Milonga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Milonga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Milonga
  static TextTheme milongaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.milonga(textStyle: textTheme?.display4),
      display3: GoogleFonts.milonga(textStyle: textTheme?.display3),
      display2: GoogleFonts.milonga(textStyle: textTheme?.display2),
      display1: GoogleFonts.milonga(textStyle: textTheme?.display1),
      headline: GoogleFonts.milonga(textStyle: textTheme?.headline),
      title: GoogleFonts.milonga(textStyle: textTheme?.title),
      subhead: GoogleFonts.milonga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.milonga(textStyle: textTheme?.body2),
      body1: GoogleFonts.milonga(textStyle: textTheme?.body1),
      caption: GoogleFonts.milonga(textStyle: textTheme?.caption),
      button: GoogleFonts.milonga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.milonga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.milonga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miltonian font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miltonian
  static TextStyle miltonian({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/miltonian/v13/zOL-4pbPn6Ne9JqTg9mr6e5As-FeiQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Miltonian',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miltonian font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miltonian
  static TextTheme miltonianTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.miltonian(textStyle: textTheme?.display4),
      display3: GoogleFonts.miltonian(textStyle: textTheme?.display3),
      display2: GoogleFonts.miltonian(textStyle: textTheme?.display2),
      display1: GoogleFonts.miltonian(textStyle: textTheme?.display1),
      headline: GoogleFonts.miltonian(textStyle: textTheme?.headline),
      title: GoogleFonts.miltonian(textStyle: textTheme?.title),
      subhead: GoogleFonts.miltonian(textStyle: textTheme?.subhead),
      body2: GoogleFonts.miltonian(textStyle: textTheme?.body2),
      body1: GoogleFonts.miltonian(textStyle: textTheme?.body1),
      caption: GoogleFonts.miltonian(textStyle: textTheme?.caption),
      button: GoogleFonts.miltonian(textStyle: textTheme?.button),
      subtitle: GoogleFonts.miltonian(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.miltonian(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miltonian Tattoo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miltonian+Tattoo
  static TextStyle miltonianTattoo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/miltoniantattoo/v15/EvOUzBRL0o0kCxF-lcMCQxlpVsA_FwP8MDBku-s.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MiltonianTattoo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miltonian Tattoo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miltonian+Tattoo
  static TextTheme miltonianTattooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.miltonianTattoo(textStyle: textTheme?.display4),
      display3: GoogleFonts.miltonianTattoo(textStyle: textTheme?.display3),
      display2: GoogleFonts.miltonianTattoo(textStyle: textTheme?.display2),
      display1: GoogleFonts.miltonianTattoo(textStyle: textTheme?.display1),
      headline: GoogleFonts.miltonianTattoo(textStyle: textTheme?.headline),
      title: GoogleFonts.miltonianTattoo(textStyle: textTheme?.title),
      subhead: GoogleFonts.miltonianTattoo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.miltonianTattoo(textStyle: textTheme?.body2),
      body1: GoogleFonts.miltonianTattoo(textStyle: textTheme?.body1),
      caption: GoogleFonts.miltonianTattoo(textStyle: textTheme?.caption),
      button: GoogleFonts.miltonianTattoo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.miltonianTattoo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.miltonianTattoo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mina
  static TextStyle mina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mina/v3/-nFzOGc18vARrz9j7i3y65o.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mina/v3/-nF8OGc18vARl4NMyiXZ95OkJwA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mina
  static TextTheme minaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mina(textStyle: textTheme?.display4),
      display3: GoogleFonts.mina(textStyle: textTheme?.display3),
      display2: GoogleFonts.mina(textStyle: textTheme?.display2),
      display1: GoogleFonts.mina(textStyle: textTheme?.display1),
      headline: GoogleFonts.mina(textStyle: textTheme?.headline),
      title: GoogleFonts.mina(textStyle: textTheme?.title),
      subhead: GoogleFonts.mina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mina(textStyle: textTheme?.body2),
      body1: GoogleFonts.mina(textStyle: textTheme?.body1),
      caption: GoogleFonts.mina(textStyle: textTheme?.caption),
      button: GoogleFonts.mina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miniver font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miniver
  static TextStyle miniver({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/miniver/v8/eLGcP-PxIg-5H0vC770Cy8r8fWA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Miniver',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miniver font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miniver
  static TextTheme miniverTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.miniver(textStyle: textTheme?.display4),
      display3: GoogleFonts.miniver(textStyle: textTheme?.display3),
      display2: GoogleFonts.miniver(textStyle: textTheme?.display2),
      display1: GoogleFonts.miniver(textStyle: textTheme?.display1),
      headline: GoogleFonts.miniver(textStyle: textTheme?.headline),
      title: GoogleFonts.miniver(textStyle: textTheme?.title),
      subhead: GoogleFonts.miniver(textStyle: textTheme?.subhead),
      body2: GoogleFonts.miniver(textStyle: textTheme?.body2),
      body1: GoogleFonts.miniver(textStyle: textTheme?.body1),
      caption: GoogleFonts.miniver(textStyle: textTheme?.caption),
      button: GoogleFonts.miniver(textStyle: textTheme?.button),
      subtitle: GoogleFonts.miniver(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.miniver(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miriam Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miriam+Libre
  static TextStyle miriamLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/miriamlibre/v6/DdTh798HsHwubBAqfkcBTL_vYJn_Teun9g.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/miriamlibre/v6/DdT-798HsHwubBAqfkcBTL_X3LbbRcC7_-Z7Hg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MiriamLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miriam Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miriam+Libre
  static TextTheme miriamLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.miriamLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.miriamLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.miriamLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.miriamLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.miriamLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.miriamLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.miriamLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.miriamLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.miriamLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.miriamLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.miriamLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.miriamLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.miriamLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mirza font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mirza
  static TextStyle mirza({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mirza/v7/co3ImWlikiN5EurdKMewsrvI.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/mirza/v7/co3FmWlikiN5EtIpAeO4mafBomDi.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/mirza/v7/co3FmWlikiN5EtIFBuO4mafBomDi.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mirza/v7/co3FmWlikiN5EtJhB-O4mafBomDi.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mirza',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mirza font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mirza
  static TextTheme mirzaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mirza(textStyle: textTheme?.display4),
      display3: GoogleFonts.mirza(textStyle: textTheme?.display3),
      display2: GoogleFonts.mirza(textStyle: textTheme?.display2),
      display1: GoogleFonts.mirza(textStyle: textTheme?.display1),
      headline: GoogleFonts.mirza(textStyle: textTheme?.headline),
      title: GoogleFonts.mirza(textStyle: textTheme?.title),
      subhead: GoogleFonts.mirza(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mirza(textStyle: textTheme?.body2),
      body1: GoogleFonts.mirza(textStyle: textTheme?.body1),
      caption: GoogleFonts.mirza(textStyle: textTheme?.caption),
      button: GoogleFonts.mirza(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mirza(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mirza(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Miss Fajardose font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miss+Fajardose
  static TextStyle missFajardose({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/missfajardose/v9/E21-_dn5gvrawDdPFVl-N0Ajb8qvWPaJq4no.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MissFajardose',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Miss Fajardose font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Miss+Fajardose
  static TextTheme missFajardoseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.missFajardose(textStyle: textTheme?.display4),
      display3: GoogleFonts.missFajardose(textStyle: textTheme?.display3),
      display2: GoogleFonts.missFajardose(textStyle: textTheme?.display2),
      display1: GoogleFonts.missFajardose(textStyle: textTheme?.display1),
      headline: GoogleFonts.missFajardose(textStyle: textTheme?.headline),
      title: GoogleFonts.missFajardose(textStyle: textTheme?.title),
      subhead: GoogleFonts.missFajardose(textStyle: textTheme?.subhead),
      body2: GoogleFonts.missFajardose(textStyle: textTheme?.body2),
      body1: GoogleFonts.missFajardose(textStyle: textTheme?.body1),
      caption: GoogleFonts.missFajardose(textStyle: textTheme?.caption),
      button: GoogleFonts.missFajardose(textStyle: textTheme?.button),
      subtitle: GoogleFonts.missFajardose(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.missFajardose(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mitr font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mitr
  static TextStyle mitr({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/mitr/v5/pxiEypw5ucZF8fMZFJDUc1NECPY.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/mitr/v5/pxiEypw5ucZF8ZcaFJDUc1NECPY.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mitr/v5/pxiLypw5ucZFyTsyMJj_b1o.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/mitr/v5/pxiEypw5ucZF8c8bFJDUc1NECPY.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/mitr/v5/pxiEypw5ucZF8eMcFJDUc1NECPY.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mitr/v5/pxiEypw5ucZF8YcdFJDUc1NECPY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mitr',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mitr font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mitr
  static TextTheme mitrTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mitr(textStyle: textTheme?.display4),
      display3: GoogleFonts.mitr(textStyle: textTheme?.display3),
      display2: GoogleFonts.mitr(textStyle: textTheme?.display2),
      display1: GoogleFonts.mitr(textStyle: textTheme?.display1),
      headline: GoogleFonts.mitr(textStyle: textTheme?.headline),
      title: GoogleFonts.mitr(textStyle: textTheme?.title),
      subhead: GoogleFonts.mitr(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mitr(textStyle: textTheme?.body2),
      body1: GoogleFonts.mitr(textStyle: textTheme?.body1),
      caption: GoogleFonts.mitr(textStyle: textTheme?.caption),
      button: GoogleFonts.mitr(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mitr(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mitr(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Modak font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Modak
  static TextStyle modak({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/modak/v5/EJRYQgs1XtIEsnMH8BVZ76KU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Modak',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Modak font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Modak
  static TextTheme modakTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.modak(textStyle: textTheme?.display4),
      display3: GoogleFonts.modak(textStyle: textTheme?.display3),
      display2: GoogleFonts.modak(textStyle: textTheme?.display2),
      display1: GoogleFonts.modak(textStyle: textTheme?.display1),
      headline: GoogleFonts.modak(textStyle: textTheme?.headline),
      title: GoogleFonts.modak(textStyle: textTheme?.title),
      subhead: GoogleFonts.modak(textStyle: textTheme?.subhead),
      body2: GoogleFonts.modak(textStyle: textTheme?.body2),
      body1: GoogleFonts.modak(textStyle: textTheme?.body1),
      caption: GoogleFonts.modak(textStyle: textTheme?.caption),
      button: GoogleFonts.modak(textStyle: textTheme?.button),
      subtitle: GoogleFonts.modak(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.modak(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Modern Antiqua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Modern+Antiqua
  static TextStyle modernAntiqua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/modernantiqua/v9/NGStv5TIAUg6Iq_RLNo_2dp1sI1Ea2u0c3Gi.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ModernAntiqua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Modern Antiqua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Modern+Antiqua
  static TextTheme modernAntiquaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.modernAntiqua(textStyle: textTheme?.display4),
      display3: GoogleFonts.modernAntiqua(textStyle: textTheme?.display3),
      display2: GoogleFonts.modernAntiqua(textStyle: textTheme?.display2),
      display1: GoogleFonts.modernAntiqua(textStyle: textTheme?.display1),
      headline: GoogleFonts.modernAntiqua(textStyle: textTheme?.headline),
      title: GoogleFonts.modernAntiqua(textStyle: textTheme?.title),
      subhead: GoogleFonts.modernAntiqua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.modernAntiqua(textStyle: textTheme?.body2),
      body1: GoogleFonts.modernAntiqua(textStyle: textTheme?.body1),
      caption: GoogleFonts.modernAntiqua(textStyle: textTheme?.caption),
      button: GoogleFonts.modernAntiqua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.modernAntiqua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.modernAntiqua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mogra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mogra
  static TextStyle mogra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mogra/v6/f0X40eSs8c95TBo4DvLmxtnG.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mogra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mogra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mogra
  static TextTheme mograTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mogra(textStyle: textTheme?.display4),
      display3: GoogleFonts.mogra(textStyle: textTheme?.display3),
      display2: GoogleFonts.mogra(textStyle: textTheme?.display2),
      display1: GoogleFonts.mogra(textStyle: textTheme?.display1),
      headline: GoogleFonts.mogra(textStyle: textTheme?.headline),
      title: GoogleFonts.mogra(textStyle: textTheme?.title),
      subhead: GoogleFonts.mogra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mogra(textStyle: textTheme?.body2),
      body1: GoogleFonts.mogra(textStyle: textTheme?.body1),
      caption: GoogleFonts.mogra(textStyle: textTheme?.caption),
      button: GoogleFonts.mogra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mogra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mogra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Molengo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Molengo
  static TextStyle molengo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/molengo/v10/I_uuMpWeuBzZNBtQbbRQkiCvs5Y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Molengo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Molengo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Molengo
  static TextTheme molengoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.molengo(textStyle: textTheme?.display4),
      display3: GoogleFonts.molengo(textStyle: textTheme?.display3),
      display2: GoogleFonts.molengo(textStyle: textTheme?.display2),
      display1: GoogleFonts.molengo(textStyle: textTheme?.display1),
      headline: GoogleFonts.molengo(textStyle: textTheme?.headline),
      title: GoogleFonts.molengo(textStyle: textTheme?.title),
      subhead: GoogleFonts.molengo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.molengo(textStyle: textTheme?.body2),
      body1: GoogleFonts.molengo(textStyle: textTheme?.body1),
      caption: GoogleFonts.molengo(textStyle: textTheme?.caption),
      button: GoogleFonts.molengo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.molengo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.molengo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Molle font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Molle
  static TextStyle molle({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/molle/v8/E21n_dL5hOXFhWEsXzgmVydREus.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Molle',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Molle font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Molle
  static TextTheme molleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.molle(textStyle: textTheme?.display4),
      display3: GoogleFonts.molle(textStyle: textTheme?.display3),
      display2: GoogleFonts.molle(textStyle: textTheme?.display2),
      display1: GoogleFonts.molle(textStyle: textTheme?.display1),
      headline: GoogleFonts.molle(textStyle: textTheme?.headline),
      title: GoogleFonts.molle(textStyle: textTheme?.title),
      subhead: GoogleFonts.molle(textStyle: textTheme?.subhead),
      body2: GoogleFonts.molle(textStyle: textTheme?.body2),
      body1: GoogleFonts.molle(textStyle: textTheme?.body1),
      caption: GoogleFonts.molle(textStyle: textTheme?.caption),
      button: GoogleFonts.molle(textStyle: textTheme?.button),
      subtitle: GoogleFonts.molle(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.molle(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Monda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monda
  static TextStyle monda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/monda/v9/TK3tWkYFABsmjvpmNBsLvPdG.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/monda/v9/TK3gWkYFABsmjsLaGz8Dl-tPKo2t.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Monda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Monda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monda
  static TextTheme mondaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.monda(textStyle: textTheme?.display4),
      display3: GoogleFonts.monda(textStyle: textTheme?.display3),
      display2: GoogleFonts.monda(textStyle: textTheme?.display2),
      display1: GoogleFonts.monda(textStyle: textTheme?.display1),
      headline: GoogleFonts.monda(textStyle: textTheme?.headline),
      title: GoogleFonts.monda(textStyle: textTheme?.title),
      subhead: GoogleFonts.monda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.monda(textStyle: textTheme?.body2),
      body1: GoogleFonts.monda(textStyle: textTheme?.body1),
      caption: GoogleFonts.monda(textStyle: textTheme?.caption),
      button: GoogleFonts.monda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.monda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.monda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Monofett font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monofett
  static TextStyle monofett({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/monofett/v9/mFTyWbofw6zc9NtnW43SuRwr0VJ7.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Monofett',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Monofett font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monofett
  static TextTheme monofettTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.monofett(textStyle: textTheme?.display4),
      display3: GoogleFonts.monofett(textStyle: textTheme?.display3),
      display2: GoogleFonts.monofett(textStyle: textTheme?.display2),
      display1: GoogleFonts.monofett(textStyle: textTheme?.display1),
      headline: GoogleFonts.monofett(textStyle: textTheme?.headline),
      title: GoogleFonts.monofett(textStyle: textTheme?.title),
      subhead: GoogleFonts.monofett(textStyle: textTheme?.subhead),
      body2: GoogleFonts.monofett(textStyle: textTheme?.body2),
      body1: GoogleFonts.monofett(textStyle: textTheme?.body1),
      caption: GoogleFonts.monofett(textStyle: textTheme?.caption),
      button: GoogleFonts.monofett(textStyle: textTheme?.button),
      subtitle: GoogleFonts.monofett(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.monofett(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Monoton font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monoton
  static TextStyle monoton({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/monoton/v9/5h1aiZUrOngCibe4fkbBQ2S7FU8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Monoton',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Monoton font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monoton
  static TextTheme monotonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.monoton(textStyle: textTheme?.display4),
      display3: GoogleFonts.monoton(textStyle: textTheme?.display3),
      display2: GoogleFonts.monoton(textStyle: textTheme?.display2),
      display1: GoogleFonts.monoton(textStyle: textTheme?.display1),
      headline: GoogleFonts.monoton(textStyle: textTheme?.headline),
      title: GoogleFonts.monoton(textStyle: textTheme?.title),
      subhead: GoogleFonts.monoton(textStyle: textTheme?.subhead),
      body2: GoogleFonts.monoton(textStyle: textTheme?.body2),
      body1: GoogleFonts.monoton(textStyle: textTheme?.body1),
      caption: GoogleFonts.monoton(textStyle: textTheme?.caption),
      button: GoogleFonts.monoton(textStyle: textTheme?.button),
      subtitle: GoogleFonts.monoton(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.monoton(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Monsieur La Doulaise font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monsieur+La+Doulaise
  static TextStyle monsieurLaDoulaise({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/monsieurladoulaise/v8/_Xmz-GY4rjmCbQfc-aPRaa4pqV340p7EZl5ewkEU4HTy.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MonsieurLaDoulaise',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Monsieur La Doulaise font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Monsieur+La+Doulaise
  static TextTheme monsieurLaDoulaiseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.display4),
      display3: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.display3),
      display2: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.display2),
      display1: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.display1),
      headline: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.headline),
      title: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.title),
      subhead: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.subhead),
      body2: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.body2),
      body1: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.body1),
      caption: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.caption),
      button: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.button),
      subtitle: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.monsieurLaDoulaise(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montaga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montaga
  static TextStyle montaga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/montaga/v7/H4cnBX2Ml8rCkEO_0gYQ7LO5mqc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Montaga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montaga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montaga
  static TextTheme montagaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.montaga(textStyle: textTheme?.display4),
      display3: GoogleFonts.montaga(textStyle: textTheme?.display3),
      display2: GoogleFonts.montaga(textStyle: textTheme?.display2),
      display1: GoogleFonts.montaga(textStyle: textTheme?.display1),
      headline: GoogleFonts.montaga(textStyle: textTheme?.headline),
      title: GoogleFonts.montaga(textStyle: textTheme?.title),
      subhead: GoogleFonts.montaga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montaga(textStyle: textTheme?.body2),
      body1: GoogleFonts.montaga(textStyle: textTheme?.body1),
      caption: GoogleFonts.montaga(textStyle: textTheme?.caption),
      button: GoogleFonts.montaga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.montaga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.montaga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montez font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montez
  static TextStyle montez({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/montez/v10/845ZNMk5GoGIX8lm1LDeSd-R_g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Montez',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montez font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montez
  static TextTheme montezTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.montez(textStyle: textTheme?.display4),
      display3: GoogleFonts.montez(textStyle: textTheme?.display3),
      display2: GoogleFonts.montez(textStyle: textTheme?.display2),
      display1: GoogleFonts.montez(textStyle: textTheme?.display1),
      headline: GoogleFonts.montez(textStyle: textTheme?.headline),
      title: GoogleFonts.montez(textStyle: textTheme?.title),
      subhead: GoogleFonts.montez(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montez(textStyle: textTheme?.body2),
      body1: GoogleFonts.montez(textStyle: textTheme?.body1),
      caption: GoogleFonts.montez(textStyle: textTheme?.caption),
      button: GoogleFonts.montez(textStyle: textTheme?.button),
      subtitle: GoogleFonts.montez(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.montez(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montserrat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat
  static TextStyle montserrat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUQjIg1_i6t8kCHKm45_QphziTn89dtpQ.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUOjIg1_i6t8kCHKm459WxZqi7j0dJ9pTOi.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTURjIg1_i6t8kCHKm45_aZA7g7J_950vCo.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUPjIg1_i6t8kCHKm459WxZBg_D-_xxrCq7qg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTURjIg1_i6t8kCHKm45_cJD7g7J_950vCo.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUPjIg1_i6t8kCHKm459WxZYgzD-_xxrCq7qg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUSjIg1_i6t8kCHKm45xW5rygbi49c.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUQjIg1_i6t8kCHKm459WxhziTn89dtpQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTURjIg1_i6t8kCHKm45_ZpC7g7J_950vCo.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUPjIg1_i6t8kCHKm459WxZOg3D-_xxrCq7qg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTURjIg1_i6t8kCHKm45_bZF7g7J_950vCo.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUPjIg1_i6t8kCHKm459WxZFgrD-_xxrCq7qg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTURjIg1_i6t8kCHKm45_dJE7g7J_950vCo.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUPjIg1_i6t8kCHKm459WxZcgvD-_xxrCq7qg.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTURjIg1_i6t8kCHKm45_c5H7g7J_950vCo.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUPjIg1_i6t8kCHKm459WxZbgjD-_xxrCq7qg.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTURjIg1_i6t8kCHKm45_epG7g7J_950vCo.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/montserrat/v14/JTUPjIg1_i6t8kCHKm459WxZSgnD-_xxrCq7qg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Montserrat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montserrat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat
  static TextTheme montserratTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.montserrat(textStyle: textTheme?.display4),
      display3: GoogleFonts.montserrat(textStyle: textTheme?.display3),
      display2: GoogleFonts.montserrat(textStyle: textTheme?.display2),
      display1: GoogleFonts.montserrat(textStyle: textTheme?.display1),
      headline: GoogleFonts.montserrat(textStyle: textTheme?.headline),
      title: GoogleFonts.montserrat(textStyle: textTheme?.title),
      subhead: GoogleFonts.montserrat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montserrat(textStyle: textTheme?.body2),
      body1: GoogleFonts.montserrat(textStyle: textTheme?.body1),
      caption: GoogleFonts.montserrat(textStyle: textTheme?.caption),
      button: GoogleFonts.montserrat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.montserrat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.montserrat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montserrat Alternates font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat+Alternates
  static TextStyle montserratAlternates({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFThWacfw6zH4dthXcyms1lPpC8I_b0juU0xiKfVKphL03l4.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTjWacfw6zH4dthXcyms1lPpC8I_b0juU057p-xIJxp1ml4imo.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTiWacfw6zH4dthXcyms1lPpC8I_b0juU0xJIb1ALZH2mBhkw.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTkWacfw6zH4dthXcyms1lPpC8I_b0juU057p8dAbxD-GVxk3Nd.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTiWacfw6zH4dthXcyms1lPpC8I_b0juU0xQIX1ALZH2mBhkw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTkWacfw6zH4dthXcyms1lPpC8I_b0juU057p95ArxD-GVxk3Nd.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTvWacfw6zH4dthXcyms1lPpC8I_b0juU0J7K3RCJ1b0w.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFThWacfw6zH4dthXcyms1lPpC8I_b0juU057qfVKphL03l4.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTiWacfw6zH4dthXcyms1lPpC8I_b0juU0xGIT1ALZH2mBhkw.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTkWacfw6zH4dthXcyms1lPpC8I_b0juU057p8hA7xD-GVxk3Nd.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTiWacfw6zH4dthXcyms1lPpC8I_b0juU0xNIP1ALZH2mBhkw.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTkWacfw6zH4dthXcyms1lPpC8I_b0juU057p8NBLxD-GVxk3Nd.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTiWacfw6zH4dthXcyms1lPpC8I_b0juU0xUIL1ALZH2mBhkw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTkWacfw6zH4dthXcyms1lPpC8I_b0juU057p9pBbxD-GVxk3Nd.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTiWacfw6zH4dthXcyms1lPpC8I_b0juU0xTIH1ALZH2mBhkw.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTkWacfw6zH4dthXcyms1lPpC8I_b0juU057p91BrxD-GVxk3Nd.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTiWacfw6zH4dthXcyms1lPpC8I_b0juU0xaID1ALZH2mBhkw.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/montserratalternates/v11/mFTkWacfw6zH4dthXcyms1lPpC8I_b0juU057p9RB7xD-GVxk3Nd.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MontserratAlternates',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montserrat Alternates font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat+Alternates
  static TextTheme montserratAlternatesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.headline),
      title: GoogleFonts.montserratAlternates(textStyle: textTheme?.title),
      subhead: GoogleFonts.montserratAlternates(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montserratAlternates(textStyle: textTheme?.body2),
      body1: GoogleFonts.montserratAlternates(textStyle: textTheme?.body1),
      caption: GoogleFonts.montserratAlternates(textStyle: textTheme?.caption),
      button: GoogleFonts.montserratAlternates(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.montserratAlternates(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Montserrat Subrayada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat+Subrayada
  static TextStyle montserratSubrayada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/montserratsubrayada/v9/U9MD6c-o9H7PgjlTHThBnNHGVUORwteQQE8LYuceqGT-.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/montserratsubrayada/v9/U9MM6c-o9H7PgjlTHThBnNHGVUORwteQQHe3TcMWg3j36Ebz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MontserratSubrayada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Montserrat Subrayada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Montserrat+Subrayada
  static TextTheme montserratSubrayadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.montserratSubrayada(textStyle: textTheme?.display4),
      display3: GoogleFonts.montserratSubrayada(textStyle: textTheme?.display3),
      display2: GoogleFonts.montserratSubrayada(textStyle: textTheme?.display2),
      display1: GoogleFonts.montserratSubrayada(textStyle: textTheme?.display1),
      headline: GoogleFonts.montserratSubrayada(textStyle: textTheme?.headline),
      title: GoogleFonts.montserratSubrayada(textStyle: textTheme?.title),
      subhead: GoogleFonts.montserratSubrayada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.montserratSubrayada(textStyle: textTheme?.body2),
      body1: GoogleFonts.montserratSubrayada(textStyle: textTheme?.body1),
      caption: GoogleFonts.montserratSubrayada(textStyle: textTheme?.caption),
      button: GoogleFonts.montserratSubrayada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.montserratSubrayada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.montserratSubrayada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Moul font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Moul
  static TextStyle moul({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/moul/v11/nuF2D__FSo_3E-RYiJCy-00.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Moul',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Moul font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Moul
  static TextTheme moulTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.moul(textStyle: textTheme?.display4),
      display3: GoogleFonts.moul(textStyle: textTheme?.display3),
      display2: GoogleFonts.moul(textStyle: textTheme?.display2),
      display1: GoogleFonts.moul(textStyle: textTheme?.display1),
      headline: GoogleFonts.moul(textStyle: textTheme?.headline),
      title: GoogleFonts.moul(textStyle: textTheme?.title),
      subhead: GoogleFonts.moul(textStyle: textTheme?.subhead),
      body2: GoogleFonts.moul(textStyle: textTheme?.body2),
      body1: GoogleFonts.moul(textStyle: textTheme?.body1),
      caption: GoogleFonts.moul(textStyle: textTheme?.caption),
      button: GoogleFonts.moul(textStyle: textTheme?.button),
      subtitle: GoogleFonts.moul(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.moul(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Moulpali font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Moulpali
  static TextStyle moulpali({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/moulpali/v12/H4ckBXKMl9HagUWymyY6wr-wg763.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Moulpali',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Moulpali font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Moulpali
  static TextTheme moulpaliTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.moulpali(textStyle: textTheme?.display4),
      display3: GoogleFonts.moulpali(textStyle: textTheme?.display3),
      display2: GoogleFonts.moulpali(textStyle: textTheme?.display2),
      display1: GoogleFonts.moulpali(textStyle: textTheme?.display1),
      headline: GoogleFonts.moulpali(textStyle: textTheme?.headline),
      title: GoogleFonts.moulpali(textStyle: textTheme?.title),
      subhead: GoogleFonts.moulpali(textStyle: textTheme?.subhead),
      body2: GoogleFonts.moulpali(textStyle: textTheme?.body2),
      body1: GoogleFonts.moulpali(textStyle: textTheme?.body1),
      caption: GoogleFonts.moulpali(textStyle: textTheme?.caption),
      button: GoogleFonts.moulpali(textStyle: textTheme?.button),
      subtitle: GoogleFonts.moulpali(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.moulpali(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mountains of Christmas font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mountains+of+Christmas
  static TextStyle mountainsofChristmas({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mountainsofchristmas/v12/3y9w6a4zcCnn5X0FDyrKi2ZRUBIy8uxoUo7ePNamMPNpJpc.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mountainsofchristmas/v12/3y9z6a4zcCnn5X0FDyrKi2ZRUBIy8uxoUo7eBGqJFPtCOp6IaEA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MountainsofChristmas',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mountains of Christmas font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mountains+of+Christmas
  static TextTheme mountainsofChristmasTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.headline),
      title: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.title),
      subhead: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.body2),
      body1: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.body1),
      caption: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.caption),
      button: GoogleFonts.mountainsofChristmas(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.mountainsofChristmas(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mouse Memoirs font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mouse+Memoirs
  static TextStyle mouseMemoirs({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mousememoirs/v7/t5tmIRoSNJ-PH0WNNgDYxdSb7TnFrpOHYh4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MouseMemoirs',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mouse Memoirs font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mouse+Memoirs
  static TextTheme mouseMemoirsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mouseMemoirs(textStyle: textTheme?.display4),
      display3: GoogleFonts.mouseMemoirs(textStyle: textTheme?.display3),
      display2: GoogleFonts.mouseMemoirs(textStyle: textTheme?.display2),
      display1: GoogleFonts.mouseMemoirs(textStyle: textTheme?.display1),
      headline: GoogleFonts.mouseMemoirs(textStyle: textTheme?.headline),
      title: GoogleFonts.mouseMemoirs(textStyle: textTheme?.title),
      subhead: GoogleFonts.mouseMemoirs(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mouseMemoirs(textStyle: textTheme?.body2),
      body1: GoogleFonts.mouseMemoirs(textStyle: textTheme?.body1),
      caption: GoogleFonts.mouseMemoirs(textStyle: textTheme?.caption),
      button: GoogleFonts.mouseMemoirs(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mouseMemoirs(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mouseMemoirs(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mr Bedfort font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+Bedfort
  static TextStyle mrBedfort({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mrbedfort/v8/MQpR-WCtNZSWAdTMwBicliq0XZe_Iy8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrBedfort',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mr Bedfort font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+Bedfort
  static TextTheme mrBedfortTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrBedfort(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrBedfort(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrBedfort(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrBedfort(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrBedfort(textStyle: textTheme?.headline),
      title: GoogleFonts.mrBedfort(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrBedfort(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrBedfort(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrBedfort(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrBedfort(textStyle: textTheme?.caption),
      button: GoogleFonts.mrBedfort(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrBedfort(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrBedfort(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mr Dafoe font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+Dafoe
  static TextStyle mrDafoe({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mrdafoe/v8/lJwE-pIzkS5NXuMMrGiqg7MCxz_C.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrDafoe',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mr Dafoe font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+Dafoe
  static TextTheme mrDafoeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrDafoe(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrDafoe(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrDafoe(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrDafoe(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrDafoe(textStyle: textTheme?.headline),
      title: GoogleFonts.mrDafoe(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrDafoe(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrDafoe(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrDafoe(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrDafoe(textStyle: textTheme?.caption),
      button: GoogleFonts.mrDafoe(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrDafoe(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrDafoe(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mr De Haviland font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+De+Haviland
  static TextStyle mrDeHaviland({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mrdehaviland/v8/OpNVnooIhJj96FdB73296ksbOj3C4ULVNTlB.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrDeHaviland',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mr De Haviland font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mr+De+Haviland
  static TextTheme mrDeHavilandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrDeHaviland(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrDeHaviland(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrDeHaviland(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrDeHaviland(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrDeHaviland(textStyle: textTheme?.headline),
      title: GoogleFonts.mrDeHaviland(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrDeHaviland(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrDeHaviland(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrDeHaviland(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrDeHaviland(textStyle: textTheme?.caption),
      button: GoogleFonts.mrDeHaviland(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrDeHaviland(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrDeHaviland(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mrs Saint Delafield font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mrs+Saint+Delafield
  static TextStyle mrsSaintDelafield({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mrssaintdelafield/v7/v6-IGZDIOVXH9xtmTZfRagunqBw5WC62cK4tLsubB2w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrsSaintDelafield',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mrs Saint Delafield font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mrs+Saint+Delafield
  static TextTheme mrsSaintDelafieldTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.headline),
      title: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.caption),
      button: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrsSaintDelafield(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mrs Sheppards font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mrs+Sheppards
  static TextStyle mrsSheppards({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mrssheppards/v8/PN_2Rfm9snC0XUGoEZhb91ig3vjxynMix4Y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MrsSheppards',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mrs Sheppards font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mrs+Sheppards
  static TextTheme mrsSheppardsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mrsSheppards(textStyle: textTheme?.display4),
      display3: GoogleFonts.mrsSheppards(textStyle: textTheme?.display3),
      display2: GoogleFonts.mrsSheppards(textStyle: textTheme?.display2),
      display1: GoogleFonts.mrsSheppards(textStyle: textTheme?.display1),
      headline: GoogleFonts.mrsSheppards(textStyle: textTheme?.headline),
      title: GoogleFonts.mrsSheppards(textStyle: textTheme?.title),
      subhead: GoogleFonts.mrsSheppards(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mrsSheppards(textStyle: textTheme?.body2),
      body1: GoogleFonts.mrsSheppards(textStyle: textTheme?.body1),
      caption: GoogleFonts.mrsSheppards(textStyle: textTheme?.caption),
      button: GoogleFonts.mrsSheppards(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mrsSheppards(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mrsSheppards(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mukta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta
  static TextStyle mukta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/mukta/v7/iJWHBXyXfDDVXbEOjFma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/mukta/v7/iJWHBXyXfDDVXbFqj1ma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mukta/v7/iJWKBXyXfDDVXYnGp32S0H3f.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/mukta/v7/iJWHBXyXfDDVXbEyjlma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/mukta/v7/iJWHBXyXfDDVXbEeiVma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/mukta/v7/iJWHBXyXfDDVXbF6iFma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/mukta/v7/iJWHBXyXfDDVXbFmi1ma-2HW7ZB_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Mukta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mukta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta
  static TextTheme muktaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mukta(textStyle: textTheme?.display4),
      display3: GoogleFonts.mukta(textStyle: textTheme?.display3),
      display2: GoogleFonts.mukta(textStyle: textTheme?.display2),
      display1: GoogleFonts.mukta(textStyle: textTheme?.display1),
      headline: GoogleFonts.mukta(textStyle: textTheme?.headline),
      title: GoogleFonts.mukta(textStyle: textTheme?.title),
      subhead: GoogleFonts.mukta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mukta(textStyle: textTheme?.body2),
      body1: GoogleFonts.mukta(textStyle: textTheme?.body1),
      caption: GoogleFonts.mukta(textStyle: textTheme?.caption),
      button: GoogleFonts.mukta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mukta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mukta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mukta Mahee font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Mahee
  static TextStyle muktaMahee({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/muktamahee/v5/XRXN3IOIi0hcP8iVU67hA9MFcBoHJndqZCsW.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/muktamahee/v5/XRXN3IOIi0hcP8iVU67hA9NhcxoHJndqZCsW.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/muktamahee/v5/XRXQ3IOIi0hcP8iVU67hA-vNWz4PDWtj.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/muktamahee/v5/XRXN3IOIi0hcP8iVU67hA9M5choHJndqZCsW.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/muktamahee/v5/XRXN3IOIi0hcP8iVU67hA9MVdRoHJndqZCsW.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/muktamahee/v5/XRXN3IOIi0hcP8iVU67hA9NxdBoHJndqZCsW.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/muktamahee/v5/XRXN3IOIi0hcP8iVU67hA9NtdxoHJndqZCsW.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MuktaMahee',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mukta Mahee font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Mahee
  static TextTheme muktaMaheeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.muktaMahee(textStyle: textTheme?.display4),
      display3: GoogleFonts.muktaMahee(textStyle: textTheme?.display3),
      display2: GoogleFonts.muktaMahee(textStyle: textTheme?.display2),
      display1: GoogleFonts.muktaMahee(textStyle: textTheme?.display1),
      headline: GoogleFonts.muktaMahee(textStyle: textTheme?.headline),
      title: GoogleFonts.muktaMahee(textStyle: textTheme?.title),
      subhead: GoogleFonts.muktaMahee(textStyle: textTheme?.subhead),
      body2: GoogleFonts.muktaMahee(textStyle: textTheme?.body2),
      body1: GoogleFonts.muktaMahee(textStyle: textTheme?.body1),
      caption: GoogleFonts.muktaMahee(textStyle: textTheme?.caption),
      button: GoogleFonts.muktaMahee(textStyle: textTheme?.button),
      subtitle: GoogleFonts.muktaMahee(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.muktaMahee(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mukta Malar font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Malar
  static TextStyle muktaMalar({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/muktamalar/v6/MCoKzAXyz8LOE2FpJMxZqIMwBtAB62ruoAZW.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/muktamalar/v6/MCoKzAXyz8LOE2FpJMxZqINUBdAB62ruoAZW.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/muktamalar/v6/MCoXzAXyz8LOE2FpJMxZqLv4LfQJwHbn.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/muktamalar/v6/MCoKzAXyz8LOE2FpJMxZqIMMBNAB62ruoAZW.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/muktamalar/v6/MCoKzAXyz8LOE2FpJMxZqIMgA9AB62ruoAZW.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/muktamalar/v6/MCoKzAXyz8LOE2FpJMxZqINEAtAB62ruoAZW.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/muktamalar/v6/MCoKzAXyz8LOE2FpJMxZqINYAdAB62ruoAZW.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MuktaMalar',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mukta Malar font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Malar
  static TextTheme muktaMalarTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.muktaMalar(textStyle: textTheme?.display4),
      display3: GoogleFonts.muktaMalar(textStyle: textTheme?.display3),
      display2: GoogleFonts.muktaMalar(textStyle: textTheme?.display2),
      display1: GoogleFonts.muktaMalar(textStyle: textTheme?.display1),
      headline: GoogleFonts.muktaMalar(textStyle: textTheme?.headline),
      title: GoogleFonts.muktaMalar(textStyle: textTheme?.title),
      subhead: GoogleFonts.muktaMalar(textStyle: textTheme?.subhead),
      body2: GoogleFonts.muktaMalar(textStyle: textTheme?.body2),
      body1: GoogleFonts.muktaMalar(textStyle: textTheme?.body1),
      caption: GoogleFonts.muktaMalar(textStyle: textTheme?.caption),
      button: GoogleFonts.muktaMalar(textStyle: textTheme?.button),
      subtitle: GoogleFonts.muktaMalar(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.muktaMalar(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mukta Vaani font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Vaani
  static TextStyle muktaVaani({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/muktavaani/v7/3JnkSD_-ynaxmxnEfVHPIGXNV8BD-u97MW1a.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/muktavaani/v7/3JnkSD_-ynaxmxnEfVHPIGWpVMBD-u97MW1a.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/muktavaani/v7/3Jn5SD_-ynaxmxnEfVHPIF0FfORL0fNy.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/muktavaani/v7/3JnkSD_-ynaxmxnEfVHPIGXxVcBD-u97MW1a.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/muktavaani/v7/3JnkSD_-ynaxmxnEfVHPIGXdUsBD-u97MW1a.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/muktavaani/v7/3JnkSD_-ynaxmxnEfVHPIGW5U8BD-u97MW1a.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/muktavaani/v7/3JnkSD_-ynaxmxnEfVHPIGWlUMBD-u97MW1a.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MuktaVaani',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mukta Vaani font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mukta+Vaani
  static TextTheme muktaVaaniTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.muktaVaani(textStyle: textTheme?.display4),
      display3: GoogleFonts.muktaVaani(textStyle: textTheme?.display3),
      display2: GoogleFonts.muktaVaani(textStyle: textTheme?.display2),
      display1: GoogleFonts.muktaVaani(textStyle: textTheme?.display1),
      headline: GoogleFonts.muktaVaani(textStyle: textTheme?.headline),
      title: GoogleFonts.muktaVaani(textStyle: textTheme?.title),
      subhead: GoogleFonts.muktaVaani(textStyle: textTheme?.subhead),
      body2: GoogleFonts.muktaVaani(textStyle: textTheme?.body2),
      body1: GoogleFonts.muktaVaani(textStyle: textTheme?.body1),
      caption: GoogleFonts.muktaVaani(textStyle: textTheme?.caption),
      button: GoogleFonts.muktaVaani(textStyle: textTheme?.button),
      subtitle: GoogleFonts.muktaVaani(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.muktaVaani(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Muli font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Muli
  static TextStyle muli({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/muli/v19/7Aulp_0qiz-aVz7u3PJLcUMYOFlOkHkw2-m9x2iC.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/muli/v19/7Aulp_0qiz-aVz7u3PJLcUMYOFmQkHkw2-m9x2iC.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/muli/v19/7Aulp_0qiz-aVz7u3PJLcUMYOFnOkHkw2-m9x2iC.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/muli/v19/7Aulp_0qiz-aVz7u3PJLcUMYOFn8kHkw2-m9x2iC.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/muli/v19/7Aulp_0qiz-aVz7u3PJLcUMYOFkQl3kw2-m9x2iC.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/muli/v19/7Aulp_0qiz-aVz7u3PJLcUMYOFkpl3kw2-m9x2iC.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/muli/v19/7Aulp_0qiz-aVz7u3PJLcUMYOFlOl3kw2-m9x2iC.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/muli/v19/7Aulp_0qiz-aVz7u3PJLcUMYOFlnl3kw2-m9x2iC.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/muli/v19/7Aujp_0qiz-afTfcIyoiGtm2P0wG0xFz0e2fwniCvzM.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/muli/v19/7Aujp_0qiz-afTfcIyoiGtm2P0wG089z0e2fwniCvzM.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/muli/v19/7Aujp_0qiz-afTfcIyoiGtm2P0wG05Fz0e2fwniCvzM.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/muli/v19/7Aujp_0qiz-afTfcIyoiGtm2P0wG06Nz0e2fwniCvzM.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/muli/v19/7Aujp_0qiz-afTfcIyoiGtm2P0wG00900e2fwniCvzM.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/muli/v19/7Aujp_0qiz-afTfcIyoiGtm2P0wG03Z00e2fwniCvzM.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/muli/v19/7Aujp_0qiz-afTfcIyoiGtm2P0wG0xF00e2fwniCvzM.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/muli/v19/7Aujp_0qiz-afTfcIyoiGtm2P0wG0zh00e2fwniCvzM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Muli',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Muli font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Muli
  static TextTheme muliTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.muli(textStyle: textTheme?.display4),
      display3: GoogleFonts.muli(textStyle: textTheme?.display3),
      display2: GoogleFonts.muli(textStyle: textTheme?.display2),
      display1: GoogleFonts.muli(textStyle: textTheme?.display1),
      headline: GoogleFonts.muli(textStyle: textTheme?.headline),
      title: GoogleFonts.muli(textStyle: textTheme?.title),
      subhead: GoogleFonts.muli(textStyle: textTheme?.subhead),
      body2: GoogleFonts.muli(textStyle: textTheme?.body2),
      body1: GoogleFonts.muli(textStyle: textTheme?.body1),
      caption: GoogleFonts.muli(textStyle: textTheme?.caption),
      button: GoogleFonts.muli(textStyle: textTheme?.button),
      subtitle: GoogleFonts.muli(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.muli(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Mystery Quest font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mystery+Quest
  static TextStyle mysteryQuest({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/mysteryquest/v7/-nF6OG414u0E6k0wynSGlujRHwElD_9Qz9E.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'MysteryQuest',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Mystery Quest font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Mystery+Quest
  static TextTheme mysteryQuestTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.mysteryQuest(textStyle: textTheme?.display4),
      display3: GoogleFonts.mysteryQuest(textStyle: textTheme?.display3),
      display2: GoogleFonts.mysteryQuest(textStyle: textTheme?.display2),
      display1: GoogleFonts.mysteryQuest(textStyle: textTheme?.display1),
      headline: GoogleFonts.mysteryQuest(textStyle: textTheme?.headline),
      title: GoogleFonts.mysteryQuest(textStyle: textTheme?.title),
      subhead: GoogleFonts.mysteryQuest(textStyle: textTheme?.subhead),
      body2: GoogleFonts.mysteryQuest(textStyle: textTheme?.body2),
      body1: GoogleFonts.mysteryQuest(textStyle: textTheme?.body1),
      caption: GoogleFonts.mysteryQuest(textStyle: textTheme?.caption),
      button: GoogleFonts.mysteryQuest(textStyle: textTheme?.button),
      subtitle: GoogleFonts.mysteryQuest(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.mysteryQuest(textStyle: textTheme?.overline),
    );
  }

  /// Applies the NTR font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/NTR
  static TextStyle nTR({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ntr/v7/RLpzK5Xy0ZjiGGhs5TA4bg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NTR',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the NTR font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/NTR
  static TextTheme nTRTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nTR(textStyle: textTheme?.display4),
      display3: GoogleFonts.nTR(textStyle: textTheme?.display3),
      display2: GoogleFonts.nTR(textStyle: textTheme?.display2),
      display1: GoogleFonts.nTR(textStyle: textTheme?.display1),
      headline: GoogleFonts.nTR(textStyle: textTheme?.headline),
      title: GoogleFonts.nTR(textStyle: textTheme?.title),
      subhead: GoogleFonts.nTR(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nTR(textStyle: textTheme?.body2),
      body1: GoogleFonts.nTR(textStyle: textTheme?.body1),
      caption: GoogleFonts.nTR(textStyle: textTheme?.caption),
      button: GoogleFonts.nTR(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nTR(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nTR(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Brush Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Brush+Script
  static TextStyle nanumBrushScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nanumbrushscript/v17/wXK2E2wfpokopxzthSqPbcR5_gVaxazyjqBr1lO97Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumBrushScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Brush Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Brush+Script
  static TextTheme nanumBrushScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumBrushScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumBrushScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumBrushScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumBrushScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumBrushScript(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumBrushScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumBrushScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumBrushScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumBrushScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumBrushScript(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumBrushScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumBrushScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumBrushScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Gothic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Gothic
  static TextStyle nanumGothic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nanumgothic/v17/PN_3Rfi-oW3hYwmKDpxS7F_z_tLfxno73g.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/nanumgothic/v17/PN_oRfi-oW3hYwmKDpxS7F_LQv37zlEn14YEUQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/nanumgothic/v17/PN_oRfi-oW3hYwmKDpxS7F_LXv77zlEn14YEUQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumGothic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Gothic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Gothic
  static TextTheme nanumGothicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumGothic(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumGothic(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumGothic(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumGothic(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumGothic(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumGothic(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumGothic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumGothic(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumGothic(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumGothic(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumGothic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumGothic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumGothic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Gothic Coding font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Gothic+Coding
  static TextStyle nanumGothicCoding({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nanumgothiccoding/v14/8QIVdjzHisX_8vv59_xMxtPFW4IXROwsy6QxVs1X7tc.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/nanumgothiccoding/v14/8QIYdjzHisX_8vv59_xMxtPFW4IXROws8xgecsV88t5V9r4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumGothicCoding',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Gothic Coding font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Gothic+Coding
  static TextTheme nanumGothicCodingTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumGothicCoding(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Myeongjo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Myeongjo
  static TextStyle nanumMyeongjo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nanummyeongjo/v15/9Btx3DZF0dXLMZlywRbVRNhxy1LreHQ8juyl.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/nanummyeongjo/v15/9Bty3DZF0dXLMZlywRbVRNhxy2pXV1A0pfCs5Kos.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/nanummyeongjo/v15/9Bty3DZF0dXLMZlywRbVRNhxy2pLVFA0pfCs5Kos.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumMyeongjo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Myeongjo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Myeongjo
  static TextTheme nanumMyeongjoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumMyeongjo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nanum Pen Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Pen+Script
  static TextStyle nanumPenScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nanumpenscript/v15/daaDSSYiLGqEal3MvdA_FOL_3FkN2z7-aMFCcTU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NanumPenScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nanum Pen Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nanum+Pen+Script
  static TextTheme nanumPenScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nanumPenScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.nanumPenScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.nanumPenScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.nanumPenScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.nanumPenScript(textStyle: textTheme?.headline),
      title: GoogleFonts.nanumPenScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.nanumPenScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nanumPenScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.nanumPenScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.nanumPenScript(textStyle: textTheme?.caption),
      button: GoogleFonts.nanumPenScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nanumPenScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nanumPenScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Neucha font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Neucha
  static TextStyle neucha({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/neucha/v11/q5uGsou0JOdh94bvugNsCxVEgA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Neucha',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Neucha font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Neucha
  static TextTheme neuchaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.neucha(textStyle: textTheme?.display4),
      display3: GoogleFonts.neucha(textStyle: textTheme?.display3),
      display2: GoogleFonts.neucha(textStyle: textTheme?.display2),
      display1: GoogleFonts.neucha(textStyle: textTheme?.display1),
      headline: GoogleFonts.neucha(textStyle: textTheme?.headline),
      title: GoogleFonts.neucha(textStyle: textTheme?.title),
      subhead: GoogleFonts.neucha(textStyle: textTheme?.subhead),
      body2: GoogleFonts.neucha(textStyle: textTheme?.body2),
      body1: GoogleFonts.neucha(textStyle: textTheme?.body1),
      caption: GoogleFonts.neucha(textStyle: textTheme?.caption),
      button: GoogleFonts.neucha(textStyle: textTheme?.button),
      subtitle: GoogleFonts.neucha(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.neucha(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Neuton font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Neuton
  static TextStyle neuton({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/neuton/v12/UMBQrPtMoH62xUZKAKkfegD5Drog6Q.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/neuton/v12/UMBQrPtMoH62xUZKZKofegD5Drog6Q.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/neuton/v12/UMBTrPtMoH62xUZyyII7civlBw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/neuton/v12/UMBRrPtMoH62xUZCyog_UC71B6M5.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/neuton/v12/UMBQrPtMoH62xUZKdK0fegD5Drog6Q.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/neuton/v12/UMBQrPtMoH62xUZKaK4fegD5Drog6Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Neuton',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Neuton font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Neuton
  static TextTheme neutonTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.neuton(textStyle: textTheme?.display4),
      display3: GoogleFonts.neuton(textStyle: textTheme?.display3),
      display2: GoogleFonts.neuton(textStyle: textTheme?.display2),
      display1: GoogleFonts.neuton(textStyle: textTheme?.display1),
      headline: GoogleFonts.neuton(textStyle: textTheme?.headline),
      title: GoogleFonts.neuton(textStyle: textTheme?.title),
      subhead: GoogleFonts.neuton(textStyle: textTheme?.subhead),
      body2: GoogleFonts.neuton(textStyle: textTheme?.body2),
      body1: GoogleFonts.neuton(textStyle: textTheme?.body1),
      caption: GoogleFonts.neuton(textStyle: textTheme?.caption),
      button: GoogleFonts.neuton(textStyle: textTheme?.button),
      subtitle: GoogleFonts.neuton(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.neuton(textStyle: textTheme?.overline),
    );
  }

  /// Applies the New Rocker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/New+Rocker
  static TextStyle newRocker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/newrocker/v8/MwQzbhjp3-HImzcCU_cJkGMViblPtXs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NewRocker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the New Rocker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/New+Rocker
  static TextTheme newRockerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.newRocker(textStyle: textTheme?.display4),
      display3: GoogleFonts.newRocker(textStyle: textTheme?.display3),
      display2: GoogleFonts.newRocker(textStyle: textTheme?.display2),
      display1: GoogleFonts.newRocker(textStyle: textTheme?.display1),
      headline: GoogleFonts.newRocker(textStyle: textTheme?.headline),
      title: GoogleFonts.newRocker(textStyle: textTheme?.title),
      subhead: GoogleFonts.newRocker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.newRocker(textStyle: textTheme?.body2),
      body1: GoogleFonts.newRocker(textStyle: textTheme?.body1),
      caption: GoogleFonts.newRocker(textStyle: textTheme?.caption),
      button: GoogleFonts.newRocker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.newRocker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.newRocker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the News Cycle font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/News+Cycle
  static TextStyle newsCycle({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/newscycle/v16/CSR64z1Qlv-GDxkbKVQ_TOcATNt_pOU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/newscycle/v16/CSR54z1Qlv-GDxkbKVQ_dFsvaNNUuOwkC2s.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NewsCycle',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the News Cycle font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/News+Cycle
  static TextTheme newsCycleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.newsCycle(textStyle: textTheme?.display4),
      display3: GoogleFonts.newsCycle(textStyle: textTheme?.display3),
      display2: GoogleFonts.newsCycle(textStyle: textTheme?.display2),
      display1: GoogleFonts.newsCycle(textStyle: textTheme?.display1),
      headline: GoogleFonts.newsCycle(textStyle: textTheme?.headline),
      title: GoogleFonts.newsCycle(textStyle: textTheme?.title),
      subhead: GoogleFonts.newsCycle(textStyle: textTheme?.subhead),
      body2: GoogleFonts.newsCycle(textStyle: textTheme?.body2),
      body1: GoogleFonts.newsCycle(textStyle: textTheme?.body1),
      caption: GoogleFonts.newsCycle(textStyle: textTheme?.caption),
      button: GoogleFonts.newsCycle(textStyle: textTheme?.button),
      subtitle: GoogleFonts.newsCycle(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.newsCycle(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Niconne font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Niconne
  static TextStyle niconne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/niconne/v9/w8gaH2QvRug1_rTfrQut2F4OuOo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Niconne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Niconne font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Niconne
  static TextTheme niconneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.niconne(textStyle: textTheme?.display4),
      display3: GoogleFonts.niconne(textStyle: textTheme?.display3),
      display2: GoogleFonts.niconne(textStyle: textTheme?.display2),
      display1: GoogleFonts.niconne(textStyle: textTheme?.display1),
      headline: GoogleFonts.niconne(textStyle: textTheme?.headline),
      title: GoogleFonts.niconne(textStyle: textTheme?.title),
      subhead: GoogleFonts.niconne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.niconne(textStyle: textTheme?.body2),
      body1: GoogleFonts.niconne(textStyle: textTheme?.body1),
      caption: GoogleFonts.niconne(textStyle: textTheme?.caption),
      button: GoogleFonts.niconne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.niconne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.niconne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Niramit font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Niramit
  static TextStyle niramit({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/niramit/v4/I_urMpWdvgLdNxVLVXx7tiiEr5_BdZ8.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/niramit/v4/I_upMpWdvgLdNxVLXbZiXimOq73EZZ_f6w.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/niramit/v4/I_urMpWdvgLdNxVLVRh4tiiEr5_BdZ8.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/niramit/v4/I_upMpWdvgLdNxVLXbZiOiqOq73EZZ_f6w.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/niramit/v4/I_uuMpWdvgLdNxVLbbRQkiCvs5Y.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/niramit/v4/I_usMpWdvgLdNxVLXbZalgKqo5bYbA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/niramit/v4/I_urMpWdvgLdNxVLVUB5tiiEr5_BdZ8.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/niramit/v4/I_upMpWdvgLdNxVLXbZiYiuOq73EZZ_f6w.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/niramit/v4/I_urMpWdvgLdNxVLVWx-tiiEr5_BdZ8.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/niramit/v4/I_upMpWdvgLdNxVLXbZiTiyOq73EZZ_f6w.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/niramit/v4/I_urMpWdvgLdNxVLVQh_tiiEr5_BdZ8.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/niramit/v4/I_upMpWdvgLdNxVLXbZiKi2Oq73EZZ_f6w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Niramit',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Niramit font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Niramit
  static TextTheme niramitTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.niramit(textStyle: textTheme?.display4),
      display3: GoogleFonts.niramit(textStyle: textTheme?.display3),
      display2: GoogleFonts.niramit(textStyle: textTheme?.display2),
      display1: GoogleFonts.niramit(textStyle: textTheme?.display1),
      headline: GoogleFonts.niramit(textStyle: textTheme?.headline),
      title: GoogleFonts.niramit(textStyle: textTheme?.title),
      subhead: GoogleFonts.niramit(textStyle: textTheme?.subhead),
      body2: GoogleFonts.niramit(textStyle: textTheme?.body2),
      body1: GoogleFonts.niramit(textStyle: textTheme?.body1),
      caption: GoogleFonts.niramit(textStyle: textTheme?.caption),
      button: GoogleFonts.niramit(textStyle: textTheme?.button),
      subtitle: GoogleFonts.niramit(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.niramit(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nixie One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nixie+One
  static TextStyle nixieOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nixieone/v10/lW-8wjkKLXjg5y2o2uUoUOFzpS-yLw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NixieOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nixie One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nixie+One
  static TextTheme nixieOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nixieOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.nixieOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.nixieOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.nixieOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.nixieOne(textStyle: textTheme?.headline),
      title: GoogleFonts.nixieOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.nixieOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nixieOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.nixieOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.nixieOne(textStyle: textTheme?.caption),
      button: GoogleFonts.nixieOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nixieOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nixieOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nobile font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nobile
  static TextStyle nobile({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nobile/v11/m8JTjflSeaOVl1i2XqfXeLVdbw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/nobile/v11/m8JRjflSeaOVl1iGXK3TWrBNb3OD.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/nobile/v11/m8JQjflSeaOVl1iOqo7zcJ5BZmqa3A.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/nobile/v11/m8JWjflSeaOVl1iGXJUnc5RFRG-K3Mud.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/nobile/v11/m8JQjflSeaOVl1iO4ojzcJ5BZmqa3A.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/nobile/v11/m8JWjflSeaOVl1iGXJVvdZRFRG-K3Mud.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Nobile',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nobile font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nobile
  static TextTheme nobileTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nobile(textStyle: textTheme?.display4),
      display3: GoogleFonts.nobile(textStyle: textTheme?.display3),
      display2: GoogleFonts.nobile(textStyle: textTheme?.display2),
      display1: GoogleFonts.nobile(textStyle: textTheme?.display1),
      headline: GoogleFonts.nobile(textStyle: textTheme?.headline),
      title: GoogleFonts.nobile(textStyle: textTheme?.title),
      subhead: GoogleFonts.nobile(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nobile(textStyle: textTheme?.body2),
      body1: GoogleFonts.nobile(textStyle: textTheme?.body1),
      caption: GoogleFonts.nobile(textStyle: textTheme?.caption),
      button: GoogleFonts.nobile(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nobile(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nobile(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nokora font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nokora
  static TextStyle nokora({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nokora/v13/hYkIPuwgTubzaWxQOzoPovZg8Q.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/nokora/v13/hYkLPuwgTubzaWxohxUrqt18-B9Uuw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Nokora',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nokora font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nokora
  static TextTheme nokoraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nokora(textStyle: textTheme?.display4),
      display3: GoogleFonts.nokora(textStyle: textTheme?.display3),
      display2: GoogleFonts.nokora(textStyle: textTheme?.display2),
      display1: GoogleFonts.nokora(textStyle: textTheme?.display1),
      headline: GoogleFonts.nokora(textStyle: textTheme?.headline),
      title: GoogleFonts.nokora(textStyle: textTheme?.title),
      subhead: GoogleFonts.nokora(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nokora(textStyle: textTheme?.body2),
      body1: GoogleFonts.nokora(textStyle: textTheme?.body1),
      caption: GoogleFonts.nokora(textStyle: textTheme?.caption),
      button: GoogleFonts.nokora(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nokora(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nokora(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Norican font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Norican
  static TextStyle norican({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/norican/v8/MwQ2bhXp1eSBqjkPGJJRtGs-lbA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Norican',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Norican font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Norican
  static TextTheme noricanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.norican(textStyle: textTheme?.display4),
      display3: GoogleFonts.norican(textStyle: textTheme?.display3),
      display2: GoogleFonts.norican(textStyle: textTheme?.display2),
      display1: GoogleFonts.norican(textStyle: textTheme?.display1),
      headline: GoogleFonts.norican(textStyle: textTheme?.headline),
      title: GoogleFonts.norican(textStyle: textTheme?.title),
      subhead: GoogleFonts.norican(textStyle: textTheme?.subhead),
      body2: GoogleFonts.norican(textStyle: textTheme?.body2),
      body1: GoogleFonts.norican(textStyle: textTheme?.body1),
      caption: GoogleFonts.norican(textStyle: textTheme?.caption),
      button: GoogleFonts.norican(textStyle: textTheme?.button),
      subtitle: GoogleFonts.norican(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.norican(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nosifer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nosifer
  static TextStyle nosifer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nosifer/v8/ZGjXol5JTp0g5bxZaC1RVDNdGDs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Nosifer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nosifer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nosifer
  static TextTheme nosiferTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nosifer(textStyle: textTheme?.display4),
      display3: GoogleFonts.nosifer(textStyle: textTheme?.display3),
      display2: GoogleFonts.nosifer(textStyle: textTheme?.display2),
      display1: GoogleFonts.nosifer(textStyle: textTheme?.display1),
      headline: GoogleFonts.nosifer(textStyle: textTheme?.headline),
      title: GoogleFonts.nosifer(textStyle: textTheme?.title),
      subhead: GoogleFonts.nosifer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nosifer(textStyle: textTheme?.body2),
      body1: GoogleFonts.nosifer(textStyle: textTheme?.body1),
      caption: GoogleFonts.nosifer(textStyle: textTheme?.caption),
      button: GoogleFonts.nosifer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nosifer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nosifer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Notable font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Notable
  static TextStyle notable({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notable/v4/gNMEW3N_SIqx-WX9-HMoFIez5MI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Notable',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Notable font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Notable
  static TextTheme notableTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notable(textStyle: textTheme?.display4),
      display3: GoogleFonts.notable(textStyle: textTheme?.display3),
      display2: GoogleFonts.notable(textStyle: textTheme?.display2),
      display1: GoogleFonts.notable(textStyle: textTheme?.display1),
      headline: GoogleFonts.notable(textStyle: textTheme?.headline),
      title: GoogleFonts.notable(textStyle: textTheme?.title),
      subhead: GoogleFonts.notable(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notable(textStyle: textTheme?.body2),
      body1: GoogleFonts.notable(textStyle: textTheme?.body1),
      caption: GoogleFonts.notable(textStyle: textTheme?.caption),
      button: GoogleFonts.notable(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notable(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notable(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nothing You Could Do font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nothing+You+Could+Do
  static TextStyle nothingYouCouldDo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nothingyoucoulddo/v9/oY1B8fbBpaP5OX3DtrRYf_Q2BPB1SnfZb0OJl1ol2Ymo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NothingYouCouldDo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nothing You Could Do font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nothing+You+Could+Do
  static TextTheme nothingYouCouldDoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.display4),
      display3: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.display3),
      display2: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.display2),
      display1: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.display1),
      headline: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.headline),
      title: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.title),
      subhead: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.body2),
      body1: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.body1),
      caption: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.caption),
      button: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nothingYouCouldDo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noticia Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noticia+Text
  static TextStyle noticiaText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/noticiatext/v9/VuJ2dNDF2Yv9qppOePKYRP1GYTFZt0rNpQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/noticiatext/v9/VuJodNDF2Yv9qppOePKYRP12YztdlU_dpSjt.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/noticiatext/v9/VuJpdNDF2Yv9qppOePKYRP1-3R59v2HRrDH0eA.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/noticiatext/v9/VuJrdNDF2Yv9qppOePKYRP12YwPhumvVjjTkeMnz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NoticiaText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noticia Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noticia+Text
  static TextTheme noticiaTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.noticiaText(textStyle: textTheme?.display4),
      display3: GoogleFonts.noticiaText(textStyle: textTheme?.display3),
      display2: GoogleFonts.noticiaText(textStyle: textTheme?.display2),
      display1: GoogleFonts.noticiaText(textStyle: textTheme?.display1),
      headline: GoogleFonts.noticiaText(textStyle: textTheme?.headline),
      title: GoogleFonts.noticiaText(textStyle: textTheme?.title),
      subhead: GoogleFonts.noticiaText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.noticiaText(textStyle: textTheme?.body2),
      body1: GoogleFonts.noticiaText(textStyle: textTheme?.body1),
      caption: GoogleFonts.noticiaText(textStyle: textTheme?.caption),
      button: GoogleFonts.noticiaText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.noticiaText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.noticiaText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans
  static TextStyle notoSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notosans/v9/o-0IIpQlx3QUlC5A4PNb4j5Ba_2c7A.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/notosans/v9/o-0OIpQlx3QUlC5A4PNr4DRFSfiM7HBj.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notosans/v9/o-0NIpQlx3QUlC5A4PNjXhFlY9aA5Wl6PQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/notosans/v9/o-0TIpQlx3QUlC5A4PNr4Az5ZtyEx2xqPaif.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans
  static TextTheme notoSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSans(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSans(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Sans HK font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+HK
  static TextStyle notoSansHK({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/notosanshk/v5/nKKO-GM_FYFRJvXzVXaAPe9ZUHp1MOv2ObB7.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notosanshk/v5/nKKP-GM_FYFRJvXzVXaAPe9ZmFhTHMX6MKliqQ.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notosanshk/v5/nKKQ-GM_FYFRJvXzVXaAPe9hMnB3Eu7mOQ.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notosanshk/v5/nKKP-GM_FYFRJvXzVXaAPe9ZwFlTHMX6MKliqQ.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notosanshk/v5/nKKP-GM_FYFRJvXzVXaAPe9ZiF9THMX6MKliqQ.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notosanshk/v5/nKKP-GM_FYFRJvXzVXaAPe9ZsF1THMX6MKliqQ.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSansHK',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Sans HK font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+HK
  static TextTheme notoSansHKTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSansHK(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSansHK(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSansHK(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSansHK(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSansHK(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSansHK(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSansHK(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSansHK(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSansHK(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSansHK(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSansHK(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSansHK(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSansHK(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Sans JP font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+JP
  static TextStyle notoSansJP({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/notosansjp/v24/-F6ofjtqLzI2JPCgQBnw7HFQoggM-FNthvIU.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notosansjp/v24/-F6pfjtqLzI2JPCgQBnw7HFQaioq1H1hj-sNFQ.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notosansjp/v24/-F62fjtqLzI2JPCgQBnw7HFowAIO2lZ9hg.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notosansjp/v24/-F6pfjtqLzI2JPCgQBnw7HFQMisq1H1hj-sNFQ.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notosansjp/v24/-F6pfjtqLzI2JPCgQBnw7HFQei0q1H1hj-sNFQ.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notosansjp/v24/-F6pfjtqLzI2JPCgQBnw7HFQQi8q1H1hj-sNFQ.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSansJP',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Sans JP font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+JP
  static TextTheme notoSansJPTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSansJP(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSansJP(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSansJP(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSansJP(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSansJP(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSansJP(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSansJP(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSansJP(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSansJP(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSansJP(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSansJP(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSansJP(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSansJP(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Sans KR font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+KR
  static TextStyle notoSansKR({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/notosanskr/v12/Pby6FmXiEBPT4ITbgNA5CgmOsn7uwpYcuH8y.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notosanskr/v12/Pby7FmXiEBPT4ITbgNA5CgmOelzI7rgQsWYrzw.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notosanskr/v12/PbykFmXiEBPT4ITbgNA5Cgm20HTs4JMMuA.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notosanskr/v12/Pby7FmXiEBPT4ITbgNA5CgmOIl3I7rgQsWYrzw.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notosanskr/v12/Pby7FmXiEBPT4ITbgNA5CgmOalvI7rgQsWYrzw.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notosanskr/v12/Pby7FmXiEBPT4ITbgNA5CgmOUlnI7rgQsWYrzw.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSansKR',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Sans KR font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+KR
  static TextTheme notoSansKRTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSansKR(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSansKR(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSansKR(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSansKR(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSansKR(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSansKR(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSansKR(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSansKR(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSansKR(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSansKR(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSansKR(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSansKR(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSansKR(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Sans SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+SC
  static TextStyle notoSansSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/notosanssc/v9/k3kJo84MPvpLmixcA63oeALZTYKL2wv287Sb.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notosanssc/v9/k3kIo84MPvpLmixcA63oeALZhaCt9yX6-q2CGg.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notosanssc/v9/k3kXo84MPvpLmixcA63oeALhL4iJ-Q7m8w.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notosanssc/v9/k3kIo84MPvpLmixcA63oeALZ3aGt9yX6-q2CGg.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notosanssc/v9/k3kIo84MPvpLmixcA63oeALZlaet9yX6-q2CGg.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notosanssc/v9/k3kIo84MPvpLmixcA63oeALZraWt9yX6-q2CGg.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSansSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Sans SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+SC
  static TextTheme notoSansSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSansSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSansSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSansSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSansSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSansSC(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSansSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSansSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSansSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSansSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSansSC(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSansSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSansSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSansSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Sans TC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+TC
  static TextStyle notoSansTC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/notosanstc/v9/-nFlOG829Oofr2wohFbTp9i9WyEJIfNZ1sjy.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notosanstc/v9/-nFkOG829Oofr2wohFbTp9i9kwMvDd1V39Hr7g.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notosanstc/v9/-nF7OG829Oofr2wohFbTp9iFOSsLA_ZJ1g.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notosanstc/v9/-nFkOG829Oofr2wohFbTp9i9ywIvDd1V39Hr7g.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notosanstc/v9/-nFkOG829Oofr2wohFbTp9i9gwQvDd1V39Hr7g.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notosanstc/v9/-nFkOG829Oofr2wohFbTp9i9uwYvDd1V39Hr7g.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSansTC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Sans TC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Sans+TC
  static TextTheme notoSansTCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSansTC(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSansTC(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSansTC(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSansTC(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSansTC(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSansTC(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSansTC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSansTC(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSansTC(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSansTC(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSansTC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSansTC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSansTC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif
  static TextStyle notoSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notoserif/v8/ga6Iaw1J5X9T9RW6j9bNTFAcaRi_bMQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/notoserif/v8/ga6Kaw1J5X9T9RW6j9bNfFIWbTq6fMRRMw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notoserif/v8/ga6Law1J5X9T9RW6j9bNdOwzTRCUcM1IKoY.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/notoserif/v8/ga6Vaw1J5X9T9RW6j9bNfFIu0RWedO9NOoYIDg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif
  static TextTheme notoSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Serif JP font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif+JP
  static TextStyle notoSerifJP({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/notoserifjp/v7/xn77YHs72GKoTvER4Gn3b5eMZBaPRkgfU8fEwb0.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notoserifjp/v7/xn77YHs72GKoTvER4Gn3b5eMZHKMRkgfU8fEwb0.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notoserifjp/v7/xn7mYHs72GKoTvER4Gn3b5eMXNikYkY0T84.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notoserifjp/v7/xn77YHs72GKoTvER4Gn3b5eMZCqNRkgfU8fEwb0.otf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/notoserifjp/v7/xn77YHs72GKoTvER4Gn3b5eMZAaKRkgfU8fEwb0.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notoserifjp/v7/xn77YHs72GKoTvER4Gn3b5eMZGKLRkgfU8fEwb0.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notoserifjp/v7/xn77YHs72GKoTvER4Gn3b5eMZFqJRkgfU8fEwb0.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSerifJP',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Serif JP font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif+JP
  static TextTheme notoSerifJPTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSerifJP(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSerifJP(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSerifJP(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSerifJP(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSerifJP(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSerifJP(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSerifJP(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSerifJP(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSerifJP(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSerifJP(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSerifJP(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSerifJP(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSerifJP(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Serif KR font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif+KR
  static TextStyle notoSerifKR({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/notoserifkr/v6/3JnmSDn90Gmq2mr3blnHaTZXTihC8O1ZNH1ahck.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notoserifkr/v6/3JnmSDn90Gmq2mr3blnHaTZXTkxB8O1ZNH1ahck.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notoserifkr/v6/3Jn7SDn90Gmq2mr3blnHaTZXduZp1ONyKHQ.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notoserifkr/v6/3JnmSDn90Gmq2mr3blnHaTZXThRA8O1ZNH1ahck.otf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/notoserifkr/v6/3JnmSDn90Gmq2mr3blnHaTZXTjhH8O1ZNH1ahck.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notoserifkr/v6/3JnmSDn90Gmq2mr3blnHaTZXTlxG8O1ZNH1ahck.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notoserifkr/v6/3JnmSDn90Gmq2mr3blnHaTZXTmRE8O1ZNH1ahck.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSerifKR',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Serif KR font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif+KR
  static TextTheme notoSerifKRTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSerifKR(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSerifKR(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSerifKR(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSerifKR(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSerifKR(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSerifKR(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSerifKR(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSerifKR(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSerifKR(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSerifKR(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSerifKR(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSerifKR(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSerifKR(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Serif SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif+SC
  static TextStyle notoSerifSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/notoserifsc/v6/H4c8BXePl9DZ0Xe7gG9cyOj7mm63SzZBEtERe7U.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notoserifsc/v6/H4c8BXePl9DZ0Xe7gG9cyOj7mgq0SzZBEtERe7U.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notoserifsc/v6/H4chBXePl9DZ0Xe7gG9cyOj7oqCcbzhqDtg.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notoserifsc/v6/H4c8BXePl9DZ0Xe7gG9cyOj7mlK1SzZBEtERe7U.otf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/notoserifsc/v6/H4c8BXePl9DZ0Xe7gG9cyOj7mn6ySzZBEtERe7U.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notoserifsc/v6/H4c8BXePl9DZ0Xe7gG9cyOj7mhqzSzZBEtERe7U.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notoserifsc/v6/H4c8BXePl9DZ0Xe7gG9cyOj7miKxSzZBEtERe7U.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSerifSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Serif SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif+SC
  static TextTheme notoSerifSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSerifSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSerifSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSerifSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSerifSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSerifSC(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSerifSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSerifSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSerifSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSerifSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSerifSC(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSerifSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSerifSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSerifSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Noto Serif TC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif+TC
  static TextStyle notoSerifTC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/notoseriftc/v6/XLY9IZb5bJNDGYxLBibeHZ0Bvr8vbX9GTsoOAX4.otf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/notoseriftc/v6/XLY9IZb5bJNDGYxLBibeHZ0BvtssbX9GTsoOAX4.otf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/notoseriftc/v6/XLYgIZb5bJNDGYxLBibeHZ0BhnEESXFtUsM.otf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/notoseriftc/v6/XLY9IZb5bJNDGYxLBibeHZ0BvoMtbX9GTsoOAX4.otf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/notoseriftc/v6/XLY9IZb5bJNDGYxLBibeHZ0Bvq8qbX9GTsoOAX4.otf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/notoseriftc/v6/XLY9IZb5bJNDGYxLBibeHZ0BvssrbX9GTsoOAX4.otf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/notoseriftc/v6/XLY9IZb5bJNDGYxLBibeHZ0BvvMpbX9GTsoOAX4.otf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NotoSerifTC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Noto Serif TC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Noto+Serif+TC
  static TextTheme notoSerifTCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.notoSerifTC(textStyle: textTheme?.display4),
      display3: GoogleFonts.notoSerifTC(textStyle: textTheme?.display3),
      display2: GoogleFonts.notoSerifTC(textStyle: textTheme?.display2),
      display1: GoogleFonts.notoSerifTC(textStyle: textTheme?.display1),
      headline: GoogleFonts.notoSerifTC(textStyle: textTheme?.headline),
      title: GoogleFonts.notoSerifTC(textStyle: textTheme?.title),
      subhead: GoogleFonts.notoSerifTC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.notoSerifTC(textStyle: textTheme?.body2),
      body1: GoogleFonts.notoSerifTC(textStyle: textTheme?.body1),
      caption: GoogleFonts.notoSerifTC(textStyle: textTheme?.caption),
      button: GoogleFonts.notoSerifTC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.notoSerifTC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.notoSerifTC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Cut font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Cut
  static TextStyle novaCut({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/novacut/v11/KFOkCnSYu8mL-39LkWxPKTM1K9nz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaCut',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Cut font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Cut
  static TextTheme novaCutTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaCut(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaCut(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaCut(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaCut(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaCut(textStyle: textTheme?.headline),
      title: GoogleFonts.novaCut(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaCut(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaCut(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaCut(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaCut(textStyle: textTheme?.caption),
      button: GoogleFonts.novaCut(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaCut(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaCut(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Flat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Flat
  static TextStyle novaFlat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/novaflat/v11/QdVUSTc-JgqpytEbVebEuStkm20oJA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaFlat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Flat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Flat
  static TextTheme novaFlatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaFlat(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaFlat(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaFlat(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaFlat(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaFlat(textStyle: textTheme?.headline),
      title: GoogleFonts.novaFlat(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaFlat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaFlat(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaFlat(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaFlat(textStyle: textTheme?.caption),
      button: GoogleFonts.novaFlat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaFlat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaFlat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Mono
  static TextStyle novaMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/novamono/v10/Cn-0JtiGWQ5Ajb--MRKfYGxYrdM9Sg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Mono
  static TextTheme novaMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaMono(textStyle: textTheme?.headline),
      title: GoogleFonts.novaMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaMono(textStyle: textTheme?.caption),
      button: GoogleFonts.novaMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Oval font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Oval
  static TextStyle novaOval({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/novaoval/v11/jAnEgHdmANHvPenMaswCMY-h3cWkWg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaOval',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Oval font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Oval
  static TextTheme novaOvalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaOval(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaOval(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaOval(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaOval(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaOval(textStyle: textTheme?.headline),
      title: GoogleFonts.novaOval(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaOval(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaOval(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaOval(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaOval(textStyle: textTheme?.caption),
      button: GoogleFonts.novaOval(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaOval(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaOval(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Round font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Round
  static TextStyle novaRound({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/novaround/v11/flU9Rqquw5UhEnlwTJYTYYfeeetYEBc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaRound',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Round font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Round
  static TextTheme novaRoundTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaRound(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaRound(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaRound(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaRound(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaRound(textStyle: textTheme?.headline),
      title: GoogleFonts.novaRound(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaRound(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaRound(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaRound(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaRound(textStyle: textTheme?.caption),
      button: GoogleFonts.novaRound(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaRound(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaRound(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Script
  static TextStyle novaScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/novascript/v12/7Au7p_IpkSWSTWaFWkumvmQNEl0O0kEx.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Script
  static TextTheme novaScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaScript(textStyle: textTheme?.headline),
      title: GoogleFonts.novaScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaScript(textStyle: textTheme?.caption),
      button: GoogleFonts.novaScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Slim font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Slim
  static TextStyle novaSlim({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/novaslim/v11/Z9XUDmZNQAuem8jyZcn-yMOInrib9Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaSlim',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Slim font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Slim
  static TextTheme novaSlimTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaSlim(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaSlim(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaSlim(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaSlim(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaSlim(textStyle: textTheme?.headline),
      title: GoogleFonts.novaSlim(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaSlim(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaSlim(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaSlim(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaSlim(textStyle: textTheme?.caption),
      button: GoogleFonts.novaSlim(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaSlim(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaSlim(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nova Square font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Square
  static TextStyle novaSquare({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/novasquare/v12/RrQUbo9-9DV7b06QHgSWsZhARYMgGtWA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NovaSquare',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nova Square font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nova+Square
  static TextTheme novaSquareTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.novaSquare(textStyle: textTheme?.display4),
      display3: GoogleFonts.novaSquare(textStyle: textTheme?.display3),
      display2: GoogleFonts.novaSquare(textStyle: textTheme?.display2),
      display1: GoogleFonts.novaSquare(textStyle: textTheme?.display1),
      headline: GoogleFonts.novaSquare(textStyle: textTheme?.headline),
      title: GoogleFonts.novaSquare(textStyle: textTheme?.title),
      subhead: GoogleFonts.novaSquare(textStyle: textTheme?.subhead),
      body2: GoogleFonts.novaSquare(textStyle: textTheme?.body2),
      body1: GoogleFonts.novaSquare(textStyle: textTheme?.body1),
      caption: GoogleFonts.novaSquare(textStyle: textTheme?.caption),
      button: GoogleFonts.novaSquare(textStyle: textTheme?.button),
      subtitle: GoogleFonts.novaSquare(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.novaSquare(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Numans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Numans
  static TextStyle numans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/numans/v9/SlGRmQmGupYAfH8IYRggiHVqaQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Numans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Numans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Numans
  static TextTheme numansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.numans(textStyle: textTheme?.display4),
      display3: GoogleFonts.numans(textStyle: textTheme?.display3),
      display2: GoogleFonts.numans(textStyle: textTheme?.display2),
      display1: GoogleFonts.numans(textStyle: textTheme?.display1),
      headline: GoogleFonts.numans(textStyle: textTheme?.headline),
      title: GoogleFonts.numans(textStyle: textTheme?.title),
      subhead: GoogleFonts.numans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.numans(textStyle: textTheme?.body2),
      body1: GoogleFonts.numans(textStyle: textTheme?.body1),
      caption: GoogleFonts.numans(textStyle: textTheme?.caption),
      button: GoogleFonts.numans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.numans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.numans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nunito font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nunito
  static TextStyle nunito({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXW3I6Li01BKofA-sekZuHJeTsfDQ.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXQ3I6Li01BKofIMN5MZ-vNWz4PDWtj.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXW3I6Li01BKofAnsSkZuHJeTsfDQ.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXQ3I6Li01BKofIMN4oZOvNWz4PDWtj.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXV3I6Li01BKof4MuyAbsrVcA.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXX3I6Li01BKofIMOaETM_FcCIG.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXW3I6Li01BKofA6sKkZuHJeTsfDQ.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXQ3I6Li01BKofIMN5cYuvNWz4PDWtj.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXW3I6Li01BKofAjsOkZuHJeTsfDQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXQ3I6Li01BKofIMN44Y-vNWz4PDWtj.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXW3I6Li01BKofAksCkZuHJeTsfDQ.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXQ3I6Li01BKofIMN4kYOvNWz4PDWtj.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXW3I6Li01BKofAtsGkZuHJeTsfDQ.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/nunito/v12/XRXQ3I6Li01BKofIMN4AYevNWz4PDWtj.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Nunito',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nunito font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nunito
  static TextTheme nunitoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nunito(textStyle: textTheme?.display4),
      display3: GoogleFonts.nunito(textStyle: textTheme?.display3),
      display2: GoogleFonts.nunito(textStyle: textTheme?.display2),
      display1: GoogleFonts.nunito(textStyle: textTheme?.display1),
      headline: GoogleFonts.nunito(textStyle: textTheme?.headline),
      title: GoogleFonts.nunito(textStyle: textTheme?.title),
      subhead: GoogleFonts.nunito(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nunito(textStyle: textTheme?.body2),
      body1: GoogleFonts.nunito(textStyle: textTheme?.body1),
      caption: GoogleFonts.nunito(textStyle: textTheme?.caption),
      button: GoogleFonts.nunito(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nunito(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nunito(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Nunito Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nunito+Sans
  static TextStyle nunitoSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe03MImSLYBIv1o4X1M8cc9yAv5qWVAgVol-.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe01MImSLYBIv1o4X1M8cce4GxZrU1QCU5l-06Y.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe03MImSLYBIv1o4X1M8cc8WAf5qWVAgVol-.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe01MImSLYBIv1o4X1M8cce4G3JoU1QCU5l-06Y.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe0qMImSLYBIv1o4X1M8cfe6Kdpickwp.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe0oMImSLYBIv1o4X1M8cce4I95Ad1wpT5A.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe03MImSLYBIv1o4X1M8cc9iB_5qWVAgVol-.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe01MImSLYBIv1o4X1M8cce4GwZuU1QCU5l-06Y.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe03MImSLYBIv1o4X1M8cc8GBv5qWVAgVol-.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe01MImSLYBIv1o4X1M8cce4G2JvU1QCU5l-06Y.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe03MImSLYBIv1o4X1M8cc8aBf5qWVAgVol-.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe01MImSLYBIv1o4X1M8cce4G35sU1QCU5l-06Y.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe03MImSLYBIv1o4X1M8cc8-BP5qWVAgVol-.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/nunitosans/v5/pe01MImSLYBIv1o4X1M8cce4G1ptU1QCU5l-06Y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'NunitoSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Nunito Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Nunito+Sans
  static TextTheme nunitoSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.nunitoSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.nunitoSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.nunitoSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.nunitoSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.nunitoSans(textStyle: textTheme?.headline),
      title: GoogleFonts.nunitoSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.nunitoSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.nunitoSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.nunitoSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.nunitoSans(textStyle: textTheme?.caption),
      button: GoogleFonts.nunitoSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.nunitoSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.nunitoSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Odibee Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Odibee+Sans
  static TextStyle odibeeSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/odibeesans/v1/neIPzCSooYAho6WvjeToRYkyepH9qGsf.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OdibeeSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Odibee Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Odibee+Sans
  static TextTheme odibeeSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.odibeeSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.odibeeSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.odibeeSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.odibeeSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.odibeeSans(textStyle: textTheme?.headline),
      title: GoogleFonts.odibeeSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.odibeeSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.odibeeSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.odibeeSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.odibeeSans(textStyle: textTheme?.caption),
      button: GoogleFonts.odibeeSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.odibeeSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.odibeeSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Odor Mean Chey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Odor+Mean+Chey
  static TextStyle odorMeanChey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/odormeanchey/v11/raxkHiKDttkTe1aOGcJMR1A_4mrY2zqUKafv.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OdorMeanChey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Odor Mean Chey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Odor+Mean+Chey
  static TextTheme odorMeanCheyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.odorMeanChey(textStyle: textTheme?.display4),
      display3: GoogleFonts.odorMeanChey(textStyle: textTheme?.display3),
      display2: GoogleFonts.odorMeanChey(textStyle: textTheme?.display2),
      display1: GoogleFonts.odorMeanChey(textStyle: textTheme?.display1),
      headline: GoogleFonts.odorMeanChey(textStyle: textTheme?.headline),
      title: GoogleFonts.odorMeanChey(textStyle: textTheme?.title),
      subhead: GoogleFonts.odorMeanChey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.odorMeanChey(textStyle: textTheme?.body2),
      body1: GoogleFonts.odorMeanChey(textStyle: textTheme?.body1),
      caption: GoogleFonts.odorMeanChey(textStyle: textTheme?.caption),
      button: GoogleFonts.odorMeanChey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.odorMeanChey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.odorMeanChey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Offside font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Offside
  static TextStyle offside({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/offside/v7/HI_KiYMWKa9QrAykQ5HiRp-dhpQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Offside',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Offside font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Offside
  static TextTheme offsideTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.offside(textStyle: textTheme?.display4),
      display3: GoogleFonts.offside(textStyle: textTheme?.display3),
      display2: GoogleFonts.offside(textStyle: textTheme?.display2),
      display1: GoogleFonts.offside(textStyle: textTheme?.display1),
      headline: GoogleFonts.offside(textStyle: textTheme?.headline),
      title: GoogleFonts.offside(textStyle: textTheme?.title),
      subhead: GoogleFonts.offside(textStyle: textTheme?.subhead),
      body2: GoogleFonts.offside(textStyle: textTheme?.body2),
      body1: GoogleFonts.offside(textStyle: textTheme?.body1),
      caption: GoogleFonts.offside(textStyle: textTheme?.caption),
      button: GoogleFonts.offside(textStyle: textTheme?.button),
      subtitle: GoogleFonts.offside(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.offside(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Old Standard TT font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Old+Standard+TT
  static TextStyle oldStandardTT({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oldstandardtt/v12/MwQubh3o1vLImiwAVvYawgcf2eVurVC5RHdCZg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/oldstandardtt/v12/MwQsbh3o1vLImiwAVvYawgcf2eVer1q9ZnJSZtQG.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/oldstandardtt/v12/MwQrbh3o1vLImiwAVvYawgcf2eVWEX-dTFxeb80flQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OldStandardTT',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Old Standard TT font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Old+Standard+TT
  static TextTheme oldStandardTTTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oldStandardTT(textStyle: textTheme?.display4),
      display3: GoogleFonts.oldStandardTT(textStyle: textTheme?.display3),
      display2: GoogleFonts.oldStandardTT(textStyle: textTheme?.display2),
      display1: GoogleFonts.oldStandardTT(textStyle: textTheme?.display1),
      headline: GoogleFonts.oldStandardTT(textStyle: textTheme?.headline),
      title: GoogleFonts.oldStandardTT(textStyle: textTheme?.title),
      subhead: GoogleFonts.oldStandardTT(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oldStandardTT(textStyle: textTheme?.body2),
      body1: GoogleFonts.oldStandardTT(textStyle: textTheme?.body1),
      caption: GoogleFonts.oldStandardTT(textStyle: textTheme?.caption),
      button: GoogleFonts.oldStandardTT(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oldStandardTT(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oldStandardTT(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oldenburg font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oldenburg
  static TextStyle oldenburg({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oldenburg/v7/fC1jPY5JYWzbywv7c4V6UU6oXyndrw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oldenburg',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oldenburg font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oldenburg
  static TextTheme oldenburgTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oldenburg(textStyle: textTheme?.display4),
      display3: GoogleFonts.oldenburg(textStyle: textTheme?.display3),
      display2: GoogleFonts.oldenburg(textStyle: textTheme?.display2),
      display1: GoogleFonts.oldenburg(textStyle: textTheme?.display1),
      headline: GoogleFonts.oldenburg(textStyle: textTheme?.headline),
      title: GoogleFonts.oldenburg(textStyle: textTheme?.title),
      subhead: GoogleFonts.oldenburg(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oldenburg(textStyle: textTheme?.body2),
      body1: GoogleFonts.oldenburg(textStyle: textTheme?.body1),
      caption: GoogleFonts.oldenburg(textStyle: textTheme?.caption),
      button: GoogleFonts.oldenburg(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oldenburg(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oldenburg(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oleo Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oleo+Script
  static TextStyle oleoScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oleoscript/v8/rax5HieDvtMOe0iICsUccBhasU7Q8Cad.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/oleoscript/v8/raxkHieDvtMOe0iICsUccCDmnmrY2zqUKafv.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OleoScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oleo Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oleo+Script
  static TextTheme oleoScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oleoScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.oleoScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.oleoScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.oleoScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.oleoScript(textStyle: textTheme?.headline),
      title: GoogleFonts.oleoScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.oleoScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oleoScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.oleoScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.oleoScript(textStyle: textTheme?.caption),
      button: GoogleFonts.oleoScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oleoScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oleoScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oleo Script Swash Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oleo+Script+Swash+Caps
  static TextStyle oleoScriptSwashCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oleoscriptswashcaps/v7/Noaj6Vb-w5SFbTTAsZP_7JkCS08K-jCzDn_HMXquSY0Hg90.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/oleoscriptswashcaps/v7/Noag6Vb-w5SFbTTAsZP_7JkCS08K-jCzDn_HCcaBbYUsn9T5dt0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OleoScriptSwashCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oleo Script Swash Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oleo+Script+Swash+Caps
  static TextTheme oleoScriptSwashCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oleoScriptSwashCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Open Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Open+Sans
  static TextStyle openSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/opensans/v17/mem5YaGs126MiZpBA-UN_r8-VeJoCqeDjg.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/opensans/v17/memnYaGs126MiZpBA-UFUKWyV-hsKKKTjrPW.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/opensans/v17/mem8YaGs126MiZpBA-U1UpcaXcl0Aw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/opensans/v17/mem6YaGs126MiZpBA-UFUJ0ef8xkA76a.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/opensans/v17/mem5YaGs126MiZpBA-UNirk-VeJoCqeDjg.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/opensans/v17/memnYaGs126MiZpBA-UFUKXGUehsKKKTjrPW.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/opensans/v17/mem5YaGs126MiZpBA-UN7rg-VeJoCqeDjg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/opensans/v17/memnYaGs126MiZpBA-UFUKWiUOhsKKKTjrPW.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/opensans/v17/mem5YaGs126MiZpBA-UN8rs-VeJoCqeDjg.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/opensans/v17/memnYaGs126MiZpBA-UFUKW-U-hsKKKTjrPW.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OpenSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Open Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Open+Sans
  static TextTheme openSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.openSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.openSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.openSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.openSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.openSans(textStyle: textTheme?.headline),
      title: GoogleFonts.openSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.openSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.openSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.openSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.openSans(textStyle: textTheme?.caption),
      button: GoogleFonts.openSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.openSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.openSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Open Sans Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Open+Sans+Condensed
  static TextStyle openSansCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/opensanscondensed/v14/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff1GhPuLGRpWRyAs.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/opensanscondensed/v14/z7NHdQDnbTkabZAIOl9il_O6KJj73e7Fd_-7suDMQreU2AsJSg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/opensanscondensed/v14/z7NFdQDnbTkabZAIOl9il_O6KJj73e7Ff0GmPuLGRpWRyAs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OpenSansCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Open Sans Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Open+Sans+Condensed
  static TextTheme openSansCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.openSansCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.openSansCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.openSansCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.openSansCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.openSansCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.openSansCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.openSansCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.openSansCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.openSansCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.openSansCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.openSansCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.openSansCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.openSansCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oranienbaum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oranienbaum
  static TextStyle oranienbaum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oranienbaum/v8/OZpHg_txtzZKMuXLIVrx-3zn7kz3dpHc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oranienbaum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oranienbaum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oranienbaum
  static TextTheme oranienbaumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oranienbaum(textStyle: textTheme?.display4),
      display3: GoogleFonts.oranienbaum(textStyle: textTheme?.display3),
      display2: GoogleFonts.oranienbaum(textStyle: textTheme?.display2),
      display1: GoogleFonts.oranienbaum(textStyle: textTheme?.display1),
      headline: GoogleFonts.oranienbaum(textStyle: textTheme?.headline),
      title: GoogleFonts.oranienbaum(textStyle: textTheme?.title),
      subhead: GoogleFonts.oranienbaum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oranienbaum(textStyle: textTheme?.body2),
      body1: GoogleFonts.oranienbaum(textStyle: textTheme?.body1),
      caption: GoogleFonts.oranienbaum(textStyle: textTheme?.caption),
      button: GoogleFonts.oranienbaum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oranienbaum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oranienbaum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Orbitron font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Orbitron
  static TextStyle orbitron({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/orbitron/v14/yMJMMIlzdpvBhQQL_SC3X9yhF25-T1nyGy6xpmIyXjU1pg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/orbitron/v14/yMJMMIlzdpvBhQQL_SC3X9yhF25-T1nyKS6xpmIyXjU1pg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/orbitron/v14/yMJMMIlzdpvBhQQL_SC3X9yhF25-T1nyxSmxpmIyXjU1pg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/orbitron/v14/yMJMMIlzdpvBhQQL_SC3X9yhF25-T1ny_CmxpmIyXjU1pg.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/orbitron/v14/yMJMMIlzdpvBhQQL_SC3X9yhF25-T1nymymxpmIyXjU1pg.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/orbitron/v14/yMJMMIlzdpvBhQQL_SC3X9yhF25-T1nysimxpmIyXjU1pg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Orbitron',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Orbitron font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Orbitron
  static TextTheme orbitronTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.orbitron(textStyle: textTheme?.display4),
      display3: GoogleFonts.orbitron(textStyle: textTheme?.display3),
      display2: GoogleFonts.orbitron(textStyle: textTheme?.display2),
      display1: GoogleFonts.orbitron(textStyle: textTheme?.display1),
      headline: GoogleFonts.orbitron(textStyle: textTheme?.headline),
      title: GoogleFonts.orbitron(textStyle: textTheme?.title),
      subhead: GoogleFonts.orbitron(textStyle: textTheme?.subhead),
      body2: GoogleFonts.orbitron(textStyle: textTheme?.body2),
      body1: GoogleFonts.orbitron(textStyle: textTheme?.body1),
      caption: GoogleFonts.orbitron(textStyle: textTheme?.caption),
      button: GoogleFonts.orbitron(textStyle: textTheme?.button),
      subtitle: GoogleFonts.orbitron(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.orbitron(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oregano font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oregano
  static TextStyle oregano({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oregano/v7/If2IXTPxciS3H4S2kZffPznO3yM.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/oregano/v7/If2KXTPxciS3H4S2oZXVOxvLzyP_qw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oregano',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oregano font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oregano
  static TextTheme oreganoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oregano(textStyle: textTheme?.display4),
      display3: GoogleFonts.oregano(textStyle: textTheme?.display3),
      display2: GoogleFonts.oregano(textStyle: textTheme?.display2),
      display1: GoogleFonts.oregano(textStyle: textTheme?.display1),
      headline: GoogleFonts.oregano(textStyle: textTheme?.headline),
      title: GoogleFonts.oregano(textStyle: textTheme?.title),
      subhead: GoogleFonts.oregano(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oregano(textStyle: textTheme?.body2),
      body1: GoogleFonts.oregano(textStyle: textTheme?.body1),
      caption: GoogleFonts.oregano(textStyle: textTheme?.caption),
      button: GoogleFonts.oregano(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oregano(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oregano(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Orienta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Orienta
  static TextStyle orienta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/orienta/v7/PlI9FlK4Jrl5Y9zNeyeo9HRFhcU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Orienta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Orienta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Orienta
  static TextTheme orientaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.orienta(textStyle: textTheme?.display4),
      display3: GoogleFonts.orienta(textStyle: textTheme?.display3),
      display2: GoogleFonts.orienta(textStyle: textTheme?.display2),
      display1: GoogleFonts.orienta(textStyle: textTheme?.display1),
      headline: GoogleFonts.orienta(textStyle: textTheme?.headline),
      title: GoogleFonts.orienta(textStyle: textTheme?.title),
      subhead: GoogleFonts.orienta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.orienta(textStyle: textTheme?.body2),
      body1: GoogleFonts.orienta(textStyle: textTheme?.body1),
      caption: GoogleFonts.orienta(textStyle: textTheme?.caption),
      button: GoogleFonts.orienta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.orienta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.orienta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Original Surfer font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Original+Surfer
  static TextStyle originalSurfer({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/originalsurfer/v8/RWmQoKGZ9vIirYntXJ3_MbekzNMiDEtvAlaMKw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OriginalSurfer',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Original Surfer font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Original+Surfer
  static TextTheme originalSurferTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.originalSurfer(textStyle: textTheme?.display4),
      display3: GoogleFonts.originalSurfer(textStyle: textTheme?.display3),
      display2: GoogleFonts.originalSurfer(textStyle: textTheme?.display2),
      display1: GoogleFonts.originalSurfer(textStyle: textTheme?.display1),
      headline: GoogleFonts.originalSurfer(textStyle: textTheme?.headline),
      title: GoogleFonts.originalSurfer(textStyle: textTheme?.title),
      subhead: GoogleFonts.originalSurfer(textStyle: textTheme?.subhead),
      body2: GoogleFonts.originalSurfer(textStyle: textTheme?.body2),
      body1: GoogleFonts.originalSurfer(textStyle: textTheme?.body1),
      caption: GoogleFonts.originalSurfer(textStyle: textTheme?.caption),
      button: GoogleFonts.originalSurfer(textStyle: textTheme?.button),
      subtitle: GoogleFonts.originalSurfer(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.originalSurfer(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oswald font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oswald
  static TextStyle oswald({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/oswald/v29/TK3_WkUHHAIjg75cFRf3bXL8LICs13FvgUFoZAaRliE.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/oswald/v29/TK3_WkUHHAIjg75cFRf3bXL8LICs169vgUFoZAaRliE.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oswald/v29/TK3_WkUHHAIjg75cFRf3bXL8LICs1_FvgUFoZAaRliE.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/oswald/v29/TK3_WkUHHAIjg75cFRf3bXL8LICs18NvgUFoZAaRliE.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/oswald/v29/TK3_WkUHHAIjg75cFRf3bXL8LICs1y9ogUFoZAaRliE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/oswald/v29/TK3_WkUHHAIjg75cFRf3bXL8LICs1xZogUFoZAaRliE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oswald',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oswald font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oswald
  static TextTheme oswaldTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oswald(textStyle: textTheme?.display4),
      display3: GoogleFonts.oswald(textStyle: textTheme?.display3),
      display2: GoogleFonts.oswald(textStyle: textTheme?.display2),
      display1: GoogleFonts.oswald(textStyle: textTheme?.display1),
      headline: GoogleFonts.oswald(textStyle: textTheme?.headline),
      title: GoogleFonts.oswald(textStyle: textTheme?.title),
      subhead: GoogleFonts.oswald(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oswald(textStyle: textTheme?.body2),
      body1: GoogleFonts.oswald(textStyle: textTheme?.body1),
      caption: GoogleFonts.oswald(textStyle: textTheme?.caption),
      button: GoogleFonts.oswald(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oswald(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oswald(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Over the Rainbow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Over+the+Rainbow
  static TextStyle overtheRainbow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/overtherainbow/v10/11haGoXG1k_HKhMLUWz7Mc7vvW5upvOm9NA2XG0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OvertheRainbow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Over the Rainbow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Over+the+Rainbow
  static TextTheme overtheRainbowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overtheRainbow(textStyle: textTheme?.display4),
      display3: GoogleFonts.overtheRainbow(textStyle: textTheme?.display3),
      display2: GoogleFonts.overtheRainbow(textStyle: textTheme?.display2),
      display1: GoogleFonts.overtheRainbow(textStyle: textTheme?.display1),
      headline: GoogleFonts.overtheRainbow(textStyle: textTheme?.headline),
      title: GoogleFonts.overtheRainbow(textStyle: textTheme?.title),
      subhead: GoogleFonts.overtheRainbow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overtheRainbow(textStyle: textTheme?.body2),
      body1: GoogleFonts.overtheRainbow(textStyle: textTheme?.body1),
      caption: GoogleFonts.overtheRainbow(textStyle: textTheme?.caption),
      button: GoogleFonts.overtheRainbow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overtheRainbow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overtheRainbow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Overlock font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overlock
  static TextStyle overlock({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/overlock/v9/Z9XVDmdMWRiN1_T9Z4Te4u2El6GC.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/overlock/v9/Z9XTDmdMWRiN1_T9Z7Tc6OmmkrGC7Cs.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/overlock/v9/Z9XSDmdMWRiN1_T9Z7xizcmMvL2L9TLT.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/overlock/v9/Z9XQDmdMWRiN1_T9Z7Tc0FWJtrmp8CLTlNs.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/overlock/v9/Z9XSDmdMWRiN1_T9Z7xaz8mMvL2L9TLT.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/overlock/v9/Z9XQDmdMWRiN1_T9Z7Tc0G2Ltrmp8CLTlNs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Overlock',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Overlock font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overlock
  static TextTheme overlockTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overlock(textStyle: textTheme?.display4),
      display3: GoogleFonts.overlock(textStyle: textTheme?.display3),
      display2: GoogleFonts.overlock(textStyle: textTheme?.display2),
      display1: GoogleFonts.overlock(textStyle: textTheme?.display1),
      headline: GoogleFonts.overlock(textStyle: textTheme?.headline),
      title: GoogleFonts.overlock(textStyle: textTheme?.title),
      subhead: GoogleFonts.overlock(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overlock(textStyle: textTheme?.body2),
      body1: GoogleFonts.overlock(textStyle: textTheme?.body1),
      caption: GoogleFonts.overlock(textStyle: textTheme?.caption),
      button: GoogleFonts.overlock(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overlock(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overlock(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Overlock SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overlock+SC
  static TextStyle overlockSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/overlocksc/v8/1cX3aUHKGZrstGAY8nwVzHGAq8Sk1PoH.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OverlockSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Overlock SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overlock+SC
  static TextTheme overlockSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overlockSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.overlockSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.overlockSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.overlockSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.overlockSC(textStyle: textTheme?.headline),
      title: GoogleFonts.overlockSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.overlockSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overlockSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.overlockSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.overlockSC(textStyle: textTheme?.caption),
      button: GoogleFonts.overlockSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overlockSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overlockSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Overpass font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overpass
  static TextStyle overpass({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdB35WCmI96Ajtm81nGU97gxhcJk1s.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdD35WCmI96Ajtm81Gga7rqwjUMg1siNQ.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdA35WCmI96Ajtm81lqcv7K6BsAikI7.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdC35WCmI96Ajtm81GgaxbL4h8ij1I7LLE.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdA35WCmI96Ajtm81kOcf7K6BsAikI7.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdC35WCmI96Ajtm81Gga3LI4h8ij1I7LLE.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdH35WCmI96Ajtm82GiWdrCwwcJ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdB35WCmI96Ajtm81GgU97gxhcJk1s.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdA35WCmI96Ajtm81l6d_7K6BsAikI7.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdC35WCmI96Ajtm81GgawbO4h8ij1I7LLE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdA35WCmI96Ajtm81kedv7K6BsAikI7.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdC35WCmI96Ajtm81Gga2LP4h8ij1I7LLE.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdA35WCmI96Ajtm81kCdf7K6BsAikI7.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdC35WCmI96Ajtm81Gga37M4h8ij1I7LLE.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdA35WCmI96Ajtm81kmdP7K6BsAikI7.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/overpass/v4/qFdC35WCmI96Ajtm81Gga1rN4h8ij1I7LLE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Overpass',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Overpass font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overpass
  static TextTheme overpassTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overpass(textStyle: textTheme?.display4),
      display3: GoogleFonts.overpass(textStyle: textTheme?.display3),
      display2: GoogleFonts.overpass(textStyle: textTheme?.display2),
      display1: GoogleFonts.overpass(textStyle: textTheme?.display1),
      headline: GoogleFonts.overpass(textStyle: textTheme?.headline),
      title: GoogleFonts.overpass(textStyle: textTheme?.title),
      subhead: GoogleFonts.overpass(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overpass(textStyle: textTheme?.body2),
      body1: GoogleFonts.overpass(textStyle: textTheme?.body1),
      caption: GoogleFonts.overpass(textStyle: textTheme?.caption),
      button: GoogleFonts.overpass(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overpass(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overpass(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Overpass Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overpass+Mono
  static TextStyle overpassMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/overpassmono/v5/_Xm3-H86tzKDdAPa-KPQZ-AC3oSWk_edB3Zf8EQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/overpassmono/v5/_Xmq-H86tzKDdAPa-KPQZ-AC5ii-t_-2G38.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/overpassmono/v5/_Xm3-H86tzKDdAPa-KPQZ-AC3vCQk_edB3Zf8EQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/overpassmono/v5/_Xm3-H86tzKDdAPa-KPQZ-AC3pSRk_edB3Zf8EQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OverpassMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Overpass Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Overpass+Mono
  static TextTheme overpassMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.overpassMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.overpassMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.overpassMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.overpassMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.overpassMono(textStyle: textTheme?.headline),
      title: GoogleFonts.overpassMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.overpassMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.overpassMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.overpassMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.overpassMono(textStyle: textTheme?.caption),
      button: GoogleFonts.overpassMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.overpassMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.overpassMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ovo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ovo
  static TextStyle ovo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ovo/v11/yYLl0h7Wyfzjy4Q5_3WVxA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ovo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ovo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ovo
  static TextTheme ovoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ovo(textStyle: textTheme?.display4),
      display3: GoogleFonts.ovo(textStyle: textTheme?.display3),
      display2: GoogleFonts.ovo(textStyle: textTheme?.display2),
      display1: GoogleFonts.ovo(textStyle: textTheme?.display1),
      headline: GoogleFonts.ovo(textStyle: textTheme?.headline),
      title: GoogleFonts.ovo(textStyle: textTheme?.title),
      subhead: GoogleFonts.ovo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ovo(textStyle: textTheme?.body2),
      body1: GoogleFonts.ovo(textStyle: textTheme?.body1),
      caption: GoogleFonts.ovo(textStyle: textTheme?.caption),
      button: GoogleFonts.ovo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ovo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ovo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oxygen font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oxygen
  static TextStyle oxygen({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/oxygen/v9/2sDcZG1Wl4LcnbuCJW8Db2-4C7wFZQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oxygen/v9/2sDfZG1Wl4Lcnbu6iUcnZ0SkAg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/oxygen/v9/2sDcZG1Wl4LcnbuCNWgDb2-4C7wFZQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Oxygen',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oxygen font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oxygen
  static TextTheme oxygenTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oxygen(textStyle: textTheme?.display4),
      display3: GoogleFonts.oxygen(textStyle: textTheme?.display3),
      display2: GoogleFonts.oxygen(textStyle: textTheme?.display2),
      display1: GoogleFonts.oxygen(textStyle: textTheme?.display1),
      headline: GoogleFonts.oxygen(textStyle: textTheme?.headline),
      title: GoogleFonts.oxygen(textStyle: textTheme?.title),
      subhead: GoogleFonts.oxygen(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oxygen(textStyle: textTheme?.body2),
      body1: GoogleFonts.oxygen(textStyle: textTheme?.body1),
      caption: GoogleFonts.oxygen(textStyle: textTheme?.caption),
      button: GoogleFonts.oxygen(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oxygen(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oxygen(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Oxygen Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oxygen+Mono
  static TextStyle oxygenMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/oxygenmono/v7/h0GsssGg9FxgDgCjLeAd7ijfze-PPlUu.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'OxygenMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Oxygen Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Oxygen+Mono
  static TextTheme oxygenMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.oxygenMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.oxygenMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.oxygenMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.oxygenMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.oxygenMono(textStyle: textTheme?.headline),
      title: GoogleFonts.oxygenMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.oxygenMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.oxygenMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.oxygenMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.oxygenMono(textStyle: textTheme?.caption),
      button: GoogleFonts.oxygenMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.oxygenMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.oxygenMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Mono
  static TextStyle pTMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ptmono/v7/9oRONYoBnWILk-9ArCg5MtPyAcg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Mono
  static TextTheme pTMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTMono(textStyle: textTheme?.headline),
      title: GoogleFonts.pTMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTMono(textStyle: textTheme?.caption),
      button: GoogleFonts.pTMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans
  static TextStyle pTSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ptsans/v11/jizaRExUiTo99u79P0WOxOGMMDQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ptsans/v11/jizYRExUiTo99u79D0eEwMOJIDQA-g.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ptsans/v11/jizfRExUiTo99u79B_mh4OmnLD0Z4zM.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ptsans/v11/jizdRExUiTo99u79D0e8fOytKB8c8zMrig.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans
  static TextTheme pTSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSans(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSans(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Sans Caption font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans+Caption
  static TextStyle pTSansCaption({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ptsanscaption/v12/0FlMVP6Hrxmt7-fsUFhlFXNIlpcqfQXwQy6yxg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ptsanscaption/v12/0FlJVP6Hrxmt7-fsUFhlFXNIlpcSwSrUSwWuz38Tgg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSansCaption',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Sans Caption font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans+Caption
  static TextTheme pTSansCaptionTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSansCaption(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSansCaption(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSansCaption(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSansCaption(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSansCaption(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSansCaption(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSansCaption(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSansCaption(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSansCaption(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSansCaption(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSansCaption(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSansCaption(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSansCaption(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Sans Narrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans+Narrow
  static TextStyle pTSansNarrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ptsansnarrow/v11/BngRUXNadjH0qYEzV7ab-oWlsYCByxyKeuDp.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ptsansnarrow/v11/BngSUXNadjH0qYEzV7ab-oWlsbg95DiCUfzgRd-3.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSansNarrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Sans Narrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Sans+Narrow
  static TextTheme pTSansNarrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSansNarrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSansNarrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSansNarrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSansNarrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSansNarrow(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSansNarrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSansNarrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSansNarrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSansNarrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSansNarrow(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSansNarrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSansNarrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSansNarrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Serif font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Serif
  static TextStyle pTSerif({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ptserif/v11/EJRVQgYoZZY2vCFuvDFRxL6ddjb-.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ptserif/v11/EJRTQgYoZZY2vCFuvAFTzrq_cyb-vco.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ptserif/v11/EJRSQgYoZZY2vCFuvAnt65qVXSr3pNNB.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ptserif/v11/EJRQQgYoZZY2vCFuvAFT9gaQVy7VocNB6Iw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSerif',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Serif font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Serif
  static TextTheme pTSerifTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSerif(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSerif(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSerif(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSerif(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSerif(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSerif(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSerif(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSerif(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSerif(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSerif(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSerif(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSerif(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSerif(textStyle: textTheme?.overline),
    );
  }

  /// Applies the PT Serif Caption font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Serif+Caption
  static TextStyle pTSerifCaption({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ptserifcaption/v11/ieVl2ZhbGCW-JoW6S34pSDpqYKU059WxDCs5cvI.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ptserifcaption/v11/ieVj2ZhbGCW-JoW6S34pSDpqYKU019e7CAk8YvJEeg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PTSerifCaption',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the PT Serif Caption font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/PT+Serif+Caption
  static TextTheme pTSerifCaptionTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pTSerifCaption(textStyle: textTheme?.display4),
      display3: GoogleFonts.pTSerifCaption(textStyle: textTheme?.display3),
      display2: GoogleFonts.pTSerifCaption(textStyle: textTheme?.display2),
      display1: GoogleFonts.pTSerifCaption(textStyle: textTheme?.display1),
      headline: GoogleFonts.pTSerifCaption(textStyle: textTheme?.headline),
      title: GoogleFonts.pTSerifCaption(textStyle: textTheme?.title),
      subhead: GoogleFonts.pTSerifCaption(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pTSerifCaption(textStyle: textTheme?.body2),
      body1: GoogleFonts.pTSerifCaption(textStyle: textTheme?.body1),
      caption: GoogleFonts.pTSerifCaption(textStyle: textTheme?.caption),
      button: GoogleFonts.pTSerifCaption(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pTSerifCaption(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pTSerifCaption(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pacifico font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pacifico
  static TextStyle pacifico({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pacifico/v16/FwZY7-Qmy14u9lezJ96A4sijpFu_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pacifico',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pacifico font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pacifico
  static TextTheme pacificoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pacifico(textStyle: textTheme?.display4),
      display3: GoogleFonts.pacifico(textStyle: textTheme?.display3),
      display2: GoogleFonts.pacifico(textStyle: textTheme?.display2),
      display1: GoogleFonts.pacifico(textStyle: textTheme?.display1),
      headline: GoogleFonts.pacifico(textStyle: textTheme?.headline),
      title: GoogleFonts.pacifico(textStyle: textTheme?.title),
      subhead: GoogleFonts.pacifico(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pacifico(textStyle: textTheme?.body2),
      body1: GoogleFonts.pacifico(textStyle: textTheme?.body1),
      caption: GoogleFonts.pacifico(textStyle: textTheme?.caption),
      button: GoogleFonts.pacifico(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pacifico(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pacifico(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Padauk font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Padauk
  static TextStyle padauk({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/padauk/v6/RrQRboJg-id7OnbBa0_g3LlYbg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/padauk/v6/RrQSboJg-id7Onb512DE1JJEZ4YwGg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Padauk',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Padauk font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Padauk
  static TextTheme padaukTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.padauk(textStyle: textTheme?.display4),
      display3: GoogleFonts.padauk(textStyle: textTheme?.display3),
      display2: GoogleFonts.padauk(textStyle: textTheme?.display2),
      display1: GoogleFonts.padauk(textStyle: textTheme?.display1),
      headline: GoogleFonts.padauk(textStyle: textTheme?.headline),
      title: GoogleFonts.padauk(textStyle: textTheme?.title),
      subhead: GoogleFonts.padauk(textStyle: textTheme?.subhead),
      body2: GoogleFonts.padauk(textStyle: textTheme?.body2),
      body1: GoogleFonts.padauk(textStyle: textTheme?.body1),
      caption: GoogleFonts.padauk(textStyle: textTheme?.caption),
      button: GoogleFonts.padauk(textStyle: textTheme?.button),
      subtitle: GoogleFonts.padauk(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.padauk(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Palanquin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Palanquin
  static TextStyle palanquin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/palanquin/v5/9XUhlJ90n1fBFg7ceXwUEltI7rWmZzTH.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/palanquin/v5/9XUilJ90n1fBFg7ceXwUvnpoxJuqbi3ezg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/palanquin/v5/9XUilJ90n1fBFg7ceXwU2nloxJuqbi3ezg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/palanquin/v5/9XUnlJ90n1fBFg7ceXwsdlFMzLC2Zw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/palanquin/v5/9XUilJ90n1fBFg7ceXwUgnhoxJuqbi3ezg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/palanquin/v5/9XUilJ90n1fBFg7ceXwUrn9oxJuqbi3ezg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/palanquin/v5/9XUilJ90n1fBFg7ceXwUyn5oxJuqbi3ezg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Palanquin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Palanquin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Palanquin
  static TextTheme palanquinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.palanquin(textStyle: textTheme?.display4),
      display3: GoogleFonts.palanquin(textStyle: textTheme?.display3),
      display2: GoogleFonts.palanquin(textStyle: textTheme?.display2),
      display1: GoogleFonts.palanquin(textStyle: textTheme?.display1),
      headline: GoogleFonts.palanquin(textStyle: textTheme?.headline),
      title: GoogleFonts.palanquin(textStyle: textTheme?.title),
      subhead: GoogleFonts.palanquin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.palanquin(textStyle: textTheme?.body2),
      body1: GoogleFonts.palanquin(textStyle: textTheme?.body1),
      caption: GoogleFonts.palanquin(textStyle: textTheme?.caption),
      button: GoogleFonts.palanquin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.palanquin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.palanquin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Palanquin Dark font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Palanquin+Dark
  static TextStyle palanquinDark({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/palanquindark/v6/xn75YHgl1nqmANMB-26xC7yuF_6OTEo9VtfE.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/palanquindark/v6/xn76YHgl1nqmANMB-26xC7yuF8Z6ZW41fcvN2KT4.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/palanquindark/v6/xn76YHgl1nqmANMB-26xC7yuF8ZWYm41fcvN2KT4.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/palanquindark/v6/xn76YHgl1nqmANMB-26xC7yuF8YyY241fcvN2KT4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PalanquinDark',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Palanquin Dark font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Palanquin+Dark
  static TextTheme palanquinDarkTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.palanquinDark(textStyle: textTheme?.display4),
      display3: GoogleFonts.palanquinDark(textStyle: textTheme?.display3),
      display2: GoogleFonts.palanquinDark(textStyle: textTheme?.display2),
      display1: GoogleFonts.palanquinDark(textStyle: textTheme?.display1),
      headline: GoogleFonts.palanquinDark(textStyle: textTheme?.headline),
      title: GoogleFonts.palanquinDark(textStyle: textTheme?.title),
      subhead: GoogleFonts.palanquinDark(textStyle: textTheme?.subhead),
      body2: GoogleFonts.palanquinDark(textStyle: textTheme?.body2),
      body1: GoogleFonts.palanquinDark(textStyle: textTheme?.body1),
      caption: GoogleFonts.palanquinDark(textStyle: textTheme?.caption),
      button: GoogleFonts.palanquinDark(textStyle: textTheme?.button),
      subtitle: GoogleFonts.palanquinDark(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.palanquinDark(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pangolin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pangolin
  static TextStyle pangolin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pangolin/v5/cY9GfjGcW0FPpi-tWPfK5d3aiLBG.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pangolin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pangolin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pangolin
  static TextTheme pangolinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pangolin(textStyle: textTheme?.display4),
      display3: GoogleFonts.pangolin(textStyle: textTheme?.display3),
      display2: GoogleFonts.pangolin(textStyle: textTheme?.display2),
      display1: GoogleFonts.pangolin(textStyle: textTheme?.display1),
      headline: GoogleFonts.pangolin(textStyle: textTheme?.headline),
      title: GoogleFonts.pangolin(textStyle: textTheme?.title),
      subhead: GoogleFonts.pangolin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pangolin(textStyle: textTheme?.body2),
      body1: GoogleFonts.pangolin(textStyle: textTheme?.body1),
      caption: GoogleFonts.pangolin(textStyle: textTheme?.caption),
      button: GoogleFonts.pangolin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pangolin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pangolin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Paprika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Paprika
  static TextStyle paprika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/paprika/v7/8QIJdijZitv49rDfuIgOq7jkAOw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Paprika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Paprika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Paprika
  static TextTheme paprikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.paprika(textStyle: textTheme?.display4),
      display3: GoogleFonts.paprika(textStyle: textTheme?.display3),
      display2: GoogleFonts.paprika(textStyle: textTheme?.display2),
      display1: GoogleFonts.paprika(textStyle: textTheme?.display1),
      headline: GoogleFonts.paprika(textStyle: textTheme?.headline),
      title: GoogleFonts.paprika(textStyle: textTheme?.title),
      subhead: GoogleFonts.paprika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.paprika(textStyle: textTheme?.body2),
      body1: GoogleFonts.paprika(textStyle: textTheme?.body1),
      caption: GoogleFonts.paprika(textStyle: textTheme?.caption),
      button: GoogleFonts.paprika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.paprika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.paprika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Parisienne font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Parisienne
  static TextStyle parisienne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/parisienne/v7/E21i_d3kivvAkxhLEVZpcy96DuKuavM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Parisienne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Parisienne font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Parisienne
  static TextTheme parisienneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.parisienne(textStyle: textTheme?.display4),
      display3: GoogleFonts.parisienne(textStyle: textTheme?.display3),
      display2: GoogleFonts.parisienne(textStyle: textTheme?.display2),
      display1: GoogleFonts.parisienne(textStyle: textTheme?.display1),
      headline: GoogleFonts.parisienne(textStyle: textTheme?.headline),
      title: GoogleFonts.parisienne(textStyle: textTheme?.title),
      subhead: GoogleFonts.parisienne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.parisienne(textStyle: textTheme?.body2),
      body1: GoogleFonts.parisienne(textStyle: textTheme?.body1),
      caption: GoogleFonts.parisienne(textStyle: textTheme?.caption),
      button: GoogleFonts.parisienne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.parisienne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.parisienne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Passero One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Passero+One
  static TextStyle passeroOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/passeroone/v11/JTUTjIko8DOq5FeaeEAjgE5B5Arr-s50.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PasseroOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Passero One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Passero+One
  static TextTheme passeroOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.passeroOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.passeroOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.passeroOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.passeroOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.passeroOne(textStyle: textTheme?.headline),
      title: GoogleFonts.passeroOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.passeroOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.passeroOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.passeroOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.passeroOne(textStyle: textTheme?.caption),
      button: GoogleFonts.passeroOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.passeroOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.passeroOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Passion One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Passion+One
  static TextStyle passionOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/passionone/v10/PbynFmL8HhTPqbjUzux3JHuW_Frg6YoV.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/passionone/v10/Pby6FmL8HhTPqbjUzux3JEMq037owpYcuH8y.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/passionone/v10/Pby6FmL8HhTPqbjUzux3JEMS0X7owpYcuH8y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PassionOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Passion One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Passion+One
  static TextTheme passionOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.passionOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.passionOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.passionOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.passionOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.passionOne(textStyle: textTheme?.headline),
      title: GoogleFonts.passionOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.passionOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.passionOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.passionOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.passionOne(textStyle: textTheme?.caption),
      button: GoogleFonts.passionOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.passionOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.passionOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pathway Gothic One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pathway+Gothic+One
  static TextStyle pathwayGothicOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pathwaygothicone/v8/MwQrbgD32-KAvjkYGNUUxAtW7pEBwx-dTFxeb80flQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PathwayGothicOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pathway Gothic One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pathway+Gothic+One
  static TextTheme pathwayGothicOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.headline),
      title: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.caption),
      button: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pathwayGothicOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Patrick Hand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patrick+Hand
  static TextStyle patrickHand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/patrickhand/v13/LDI1apSQOAYtSuYWp8ZhfYeMWcjKm7sp8g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PatrickHand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Patrick Hand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patrick+Hand
  static TextTheme patrickHandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.patrickHand(textStyle: textTheme?.display4),
      display3: GoogleFonts.patrickHand(textStyle: textTheme?.display3),
      display2: GoogleFonts.patrickHand(textStyle: textTheme?.display2),
      display1: GoogleFonts.patrickHand(textStyle: textTheme?.display1),
      headline: GoogleFonts.patrickHand(textStyle: textTheme?.headline),
      title: GoogleFonts.patrickHand(textStyle: textTheme?.title),
      subhead: GoogleFonts.patrickHand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.patrickHand(textStyle: textTheme?.body2),
      body1: GoogleFonts.patrickHand(textStyle: textTheme?.body1),
      caption: GoogleFonts.patrickHand(textStyle: textTheme?.caption),
      button: GoogleFonts.patrickHand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.patrickHand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.patrickHand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Patrick Hand SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patrick+Hand+SC
  static TextStyle patrickHandSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/patrickhandsc/v7/0nkwC9f7MfsBiWcLtY65AWDK873ViSi6JQc7Vg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PatrickHandSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Patrick Hand SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patrick+Hand+SC
  static TextTheme patrickHandSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.patrickHandSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.patrickHandSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.patrickHandSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.patrickHandSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.patrickHandSC(textStyle: textTheme?.headline),
      title: GoogleFonts.patrickHandSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.patrickHandSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.patrickHandSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.patrickHandSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.patrickHandSC(textStyle: textTheme?.caption),
      button: GoogleFonts.patrickHandSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.patrickHandSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.patrickHandSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pattaya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pattaya
  static TextStyle pattaya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pattaya/v5/ea8ZadcqV_zkHY-XNdCn92ZEmVs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pattaya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pattaya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pattaya
  static TextTheme pattayaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pattaya(textStyle: textTheme?.display4),
      display3: GoogleFonts.pattaya(textStyle: textTheme?.display3),
      display2: GoogleFonts.pattaya(textStyle: textTheme?.display2),
      display1: GoogleFonts.pattaya(textStyle: textTheme?.display1),
      headline: GoogleFonts.pattaya(textStyle: textTheme?.headline),
      title: GoogleFonts.pattaya(textStyle: textTheme?.title),
      subhead: GoogleFonts.pattaya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pattaya(textStyle: textTheme?.body2),
      body1: GoogleFonts.pattaya(textStyle: textTheme?.body1),
      caption: GoogleFonts.pattaya(textStyle: textTheme?.caption),
      button: GoogleFonts.pattaya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pattaya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pattaya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Patua One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patua+One
  static TextStyle patuaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/patuaone/v10/ZXuke1cDvLCKLDcimxBI5PNvNA9LuA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PatuaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Patua One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Patua+One
  static TextTheme patuaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.patuaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.patuaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.patuaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.patuaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.patuaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.patuaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.patuaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.patuaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.patuaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.patuaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.patuaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.patuaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.patuaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pavanam font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pavanam
  static TextStyle pavanam({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pavanam/v4/BXRrvF_aiezLh0xPDOtQ9Wf0QcE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pavanam',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pavanam font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pavanam
  static TextTheme pavanamTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pavanam(textStyle: textTheme?.display4),
      display3: GoogleFonts.pavanam(textStyle: textTheme?.display3),
      display2: GoogleFonts.pavanam(textStyle: textTheme?.display2),
      display1: GoogleFonts.pavanam(textStyle: textTheme?.display1),
      headline: GoogleFonts.pavanam(textStyle: textTheme?.headline),
      title: GoogleFonts.pavanam(textStyle: textTheme?.title),
      subhead: GoogleFonts.pavanam(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pavanam(textStyle: textTheme?.body2),
      body1: GoogleFonts.pavanam(textStyle: textTheme?.body1),
      caption: GoogleFonts.pavanam(textStyle: textTheme?.caption),
      button: GoogleFonts.pavanam(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pavanam(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pavanam(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Paytone One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Paytone+One
  static TextStyle paytoneOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/paytoneone/v12/0nksC9P7MfYHj2oFtYm2CiTqivr9iBq_.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PaytoneOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Paytone One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Paytone+One
  static TextTheme paytoneOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.paytoneOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.paytoneOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.paytoneOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.paytoneOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.paytoneOne(textStyle: textTheme?.headline),
      title: GoogleFonts.paytoneOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.paytoneOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.paytoneOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.paytoneOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.paytoneOne(textStyle: textTheme?.caption),
      button: GoogleFonts.paytoneOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.paytoneOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.paytoneOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Peddana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Peddana
  static TextStyle peddana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/peddana/v7/aFTU7PBhaX89UcKWhh2aBYyMcKw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Peddana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Peddana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Peddana
  static TextTheme peddanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.peddana(textStyle: textTheme?.display4),
      display3: GoogleFonts.peddana(textStyle: textTheme?.display3),
      display2: GoogleFonts.peddana(textStyle: textTheme?.display2),
      display1: GoogleFonts.peddana(textStyle: textTheme?.display1),
      headline: GoogleFonts.peddana(textStyle: textTheme?.headline),
      title: GoogleFonts.peddana(textStyle: textTheme?.title),
      subhead: GoogleFonts.peddana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.peddana(textStyle: textTheme?.body2),
      body1: GoogleFonts.peddana(textStyle: textTheme?.body1),
      caption: GoogleFonts.peddana(textStyle: textTheme?.caption),
      button: GoogleFonts.peddana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.peddana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.peddana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Peralta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Peralta
  static TextStyle peralta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/peralta/v7/hYkJPu0-RP_9d3kRGxAhrv956B8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Peralta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Peralta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Peralta
  static TextTheme peraltaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.peralta(textStyle: textTheme?.display4),
      display3: GoogleFonts.peralta(textStyle: textTheme?.display3),
      display2: GoogleFonts.peralta(textStyle: textTheme?.display2),
      display1: GoogleFonts.peralta(textStyle: textTheme?.display1),
      headline: GoogleFonts.peralta(textStyle: textTheme?.headline),
      title: GoogleFonts.peralta(textStyle: textTheme?.title),
      subhead: GoogleFonts.peralta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.peralta(textStyle: textTheme?.body2),
      body1: GoogleFonts.peralta(textStyle: textTheme?.body1),
      caption: GoogleFonts.peralta(textStyle: textTheme?.caption),
      button: GoogleFonts.peralta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.peralta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.peralta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Permanent Marker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Permanent+Marker
  static TextStyle permanentMarker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/permanentmarker/v9/Fh4uPib9Iyv2ucM6pGQMWimMp004HaqIfrT5nlk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PermanentMarker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Permanent Marker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Permanent+Marker
  static TextTheme permanentMarkerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.permanentMarker(textStyle: textTheme?.display4),
      display3: GoogleFonts.permanentMarker(textStyle: textTheme?.display3),
      display2: GoogleFonts.permanentMarker(textStyle: textTheme?.display2),
      display1: GoogleFonts.permanentMarker(textStyle: textTheme?.display1),
      headline: GoogleFonts.permanentMarker(textStyle: textTheme?.headline),
      title: GoogleFonts.permanentMarker(textStyle: textTheme?.title),
      subhead: GoogleFonts.permanentMarker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.permanentMarker(textStyle: textTheme?.body2),
      body1: GoogleFonts.permanentMarker(textStyle: textTheme?.body1),
      caption: GoogleFonts.permanentMarker(textStyle: textTheme?.caption),
      button: GoogleFonts.permanentMarker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.permanentMarker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.permanentMarker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Petit Formal Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Petit+Formal+Script
  static TextStyle petitFormalScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/petitformalscript/v7/B50TF6xQr2TXJBnGOFME6u5OR83oRP5qoHnqP4gZSiE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PetitFormalScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Petit Formal Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Petit+Formal+Script
  static TextTheme petitFormalScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.petitFormalScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.petitFormalScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.petitFormalScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.petitFormalScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.petitFormalScript(textStyle: textTheme?.headline),
      title: GoogleFonts.petitFormalScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.petitFormalScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.petitFormalScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.petitFormalScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.petitFormalScript(textStyle: textTheme?.caption),
      button: GoogleFonts.petitFormalScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.petitFormalScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.petitFormalScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Petrona font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Petrona
  static TextStyle petrona({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/petrona/v8/mtG64_NXL7bZo9XXsXVStGsRwCU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Petrona',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Petrona font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Petrona
  static TextTheme petronaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.petrona(textStyle: textTheme?.display4),
      display3: GoogleFonts.petrona(textStyle: textTheme?.display3),
      display2: GoogleFonts.petrona(textStyle: textTheme?.display2),
      display1: GoogleFonts.petrona(textStyle: textTheme?.display1),
      headline: GoogleFonts.petrona(textStyle: textTheme?.headline),
      title: GoogleFonts.petrona(textStyle: textTheme?.title),
      subhead: GoogleFonts.petrona(textStyle: textTheme?.subhead),
      body2: GoogleFonts.petrona(textStyle: textTheme?.body2),
      body1: GoogleFonts.petrona(textStyle: textTheme?.body1),
      caption: GoogleFonts.petrona(textStyle: textTheme?.caption),
      button: GoogleFonts.petrona(textStyle: textTheme?.button),
      subtitle: GoogleFonts.petrona(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.petrona(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Philosopher font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Philosopher
  static TextStyle philosopher({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/philosopher/v11/vEFV2_5QCwIS4_Dhez5jcVBpRUwU08qe.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/philosopher/v11/vEFX2_5QCwIS4_Dhez5jcWBrT0g21tqeR7c.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/philosopher/v11/vEFI2_5QCwIS4_Dhez5jcWjVamgc-NaXXq7H.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/philosopher/v11/vEFK2_5QCwIS4_Dhez5jcWBrd_QZ8tK1W77HtMo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Philosopher',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Philosopher font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Philosopher
  static TextTheme philosopherTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.philosopher(textStyle: textTheme?.display4),
      display3: GoogleFonts.philosopher(textStyle: textTheme?.display3),
      display2: GoogleFonts.philosopher(textStyle: textTheme?.display2),
      display1: GoogleFonts.philosopher(textStyle: textTheme?.display1),
      headline: GoogleFonts.philosopher(textStyle: textTheme?.headline),
      title: GoogleFonts.philosopher(textStyle: textTheme?.title),
      subhead: GoogleFonts.philosopher(textStyle: textTheme?.subhead),
      body2: GoogleFonts.philosopher(textStyle: textTheme?.body2),
      body1: GoogleFonts.philosopher(textStyle: textTheme?.body1),
      caption: GoogleFonts.philosopher(textStyle: textTheme?.caption),
      button: GoogleFonts.philosopher(textStyle: textTheme?.button),
      subtitle: GoogleFonts.philosopher(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.philosopher(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Piedra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Piedra
  static TextStyle piedra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/piedra/v8/ke8kOg8aN0Bn7hTunEyHN_M3gA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Piedra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Piedra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Piedra
  static TextTheme piedraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.piedra(textStyle: textTheme?.display4),
      display3: GoogleFonts.piedra(textStyle: textTheme?.display3),
      display2: GoogleFonts.piedra(textStyle: textTheme?.display2),
      display1: GoogleFonts.piedra(textStyle: textTheme?.display1),
      headline: GoogleFonts.piedra(textStyle: textTheme?.headline),
      title: GoogleFonts.piedra(textStyle: textTheme?.title),
      subhead: GoogleFonts.piedra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.piedra(textStyle: textTheme?.body2),
      body1: GoogleFonts.piedra(textStyle: textTheme?.body1),
      caption: GoogleFonts.piedra(textStyle: textTheme?.caption),
      button: GoogleFonts.piedra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.piedra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.piedra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pinyon Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pinyon+Script
  static TextStyle pinyonScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pinyonscript/v9/6xKpdSJbL9-e9LuoeQiDRQR8aOLQO4bhiDY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PinyonScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pinyon Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pinyon+Script
  static TextTheme pinyonScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pinyonScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.pinyonScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.pinyonScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.pinyonScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.pinyonScript(textStyle: textTheme?.headline),
      title: GoogleFonts.pinyonScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.pinyonScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pinyonScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.pinyonScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.pinyonScript(textStyle: textTheme?.caption),
      button: GoogleFonts.pinyonScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pinyonScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pinyonScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pirata One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pirata+One
  static TextStyle pirataOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pirataone/v8/I_urMpiDvgLdLh0fAtoftiiEr5_BdZ8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PirataOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pirata One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pirata+One
  static TextTheme pirataOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pirataOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.pirataOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.pirataOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.pirataOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.pirataOne(textStyle: textTheme?.headline),
      title: GoogleFonts.pirataOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.pirataOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pirataOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.pirataOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.pirataOne(textStyle: textTheme?.caption),
      button: GoogleFonts.pirataOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pirataOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pirataOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Plaster font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Plaster
  static TextStyle plaster({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/plaster/v11/DdTm79QatW80eRh4Ei5JOtLOeLI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Plaster',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Plaster font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Plaster
  static TextTheme plasterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.plaster(textStyle: textTheme?.display4),
      display3: GoogleFonts.plaster(textStyle: textTheme?.display3),
      display2: GoogleFonts.plaster(textStyle: textTheme?.display2),
      display1: GoogleFonts.plaster(textStyle: textTheme?.display1),
      headline: GoogleFonts.plaster(textStyle: textTheme?.headline),
      title: GoogleFonts.plaster(textStyle: textTheme?.title),
      subhead: GoogleFonts.plaster(textStyle: textTheme?.subhead),
      body2: GoogleFonts.plaster(textStyle: textTheme?.body2),
      body1: GoogleFonts.plaster(textStyle: textTheme?.body1),
      caption: GoogleFonts.plaster(textStyle: textTheme?.caption),
      button: GoogleFonts.plaster(textStyle: textTheme?.button),
      subtitle: GoogleFonts.plaster(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.plaster(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Play font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Play
  static TextStyle play({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/play/v11/6aez4K2oVqwIjtI8Hp8Tx3A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/play/v11/6ae84K2oVqwItm4TOpc423nTJTM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Play',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Play font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Play
  static TextTheme playTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.play(textStyle: textTheme?.display4),
      display3: GoogleFonts.play(textStyle: textTheme?.display3),
      display2: GoogleFonts.play(textStyle: textTheme?.display2),
      display1: GoogleFonts.play(textStyle: textTheme?.display1),
      headline: GoogleFonts.play(textStyle: textTheme?.headline),
      title: GoogleFonts.play(textStyle: textTheme?.title),
      subhead: GoogleFonts.play(textStyle: textTheme?.subhead),
      body2: GoogleFonts.play(textStyle: textTheme?.body2),
      body1: GoogleFonts.play(textStyle: textTheme?.body1),
      caption: GoogleFonts.play(textStyle: textTheme?.caption),
      button: GoogleFonts.play(textStyle: textTheme?.button),
      subtitle: GoogleFonts.play(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.play(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Playball font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playball
  static TextStyle playball({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/playball/v9/TK3gWksYAxQ7jbsKcj8Dl-tPKo2t.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Playball',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Playball font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playball
  static TextTheme playballTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.playball(textStyle: textTheme?.display4),
      display3: GoogleFonts.playball(textStyle: textTheme?.display3),
      display2: GoogleFonts.playball(textStyle: textTheme?.display2),
      display1: GoogleFonts.playball(textStyle: textTheme?.display1),
      headline: GoogleFonts.playball(textStyle: textTheme?.headline),
      title: GoogleFonts.playball(textStyle: textTheme?.title),
      subhead: GoogleFonts.playball(textStyle: textTheme?.subhead),
      body2: GoogleFonts.playball(textStyle: textTheme?.body2),
      body1: GoogleFonts.playball(textStyle: textTheme?.body1),
      caption: GoogleFonts.playball(textStyle: textTheme?.caption),
      button: GoogleFonts.playball(textStyle: textTheme?.button),
      subtitle: GoogleFonts.playball(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.playball(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Playfair Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playfair+Display
  static TextStyle playfairDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/playfairdisplay/v18/nuFiD-vYSZviVYUb_rj3ij__anPXPTvSgWE_-xU.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/playfairdisplay/v18/nuFkD-vYSZviVYUb_rj3ij__anPXDTnYhUM66xV7PQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/playfairdisplay/v18/nuFlD-vYSZviVYUb_rj3ij__anPXBYf9pWkU5xxiJKY.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/playfairdisplay/v18/nuFnD-vYSZviVYUb_rj3ij__anPXDTngOWwe4z5nNKaV_w.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/playfairdisplay/v18/nuFlD-vYSZviVYUb_rj3ij__anPXBb__pWkU5xxiJKY.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/playfairdisplay/v18/nuFnD-vYSZviVYUb_rj3ij__anPXDTngAW4e4z5nNKaV_w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PlayfairDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Playfair Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playfair+Display
  static TextTheme playfairDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.playfairDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.playfairDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.playfairDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.playfairDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.playfairDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.playfairDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.playfairDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.playfairDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.playfairDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.playfairDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.playfairDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.playfairDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.playfairDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Playfair Display SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playfair+Display+SC
  static TextStyle playfairDisplaySC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/playfairdisplaysc/v9/ke85OhoaMkR6-hSn7kbHVoFf7ZfgMPr_pb4GEcM2M4s.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/playfairdisplaysc/v9/ke87OhoaMkR6-hSn7kbHVoFf7ZfgMPr_lbwMFeEzI4sNKg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/playfairdisplaysc/v9/ke80OhoaMkR6-hSn7kbHVoFf7ZfgMPr_nQIpNcsdL4IUMyE.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/playfairdisplaysc/v9/ke82OhoaMkR6-hSn7kbHVoFf7ZfgMPr_lbw0qc4XK6ARIyH5IA.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/playfairdisplaysc/v9/ke80OhoaMkR6-hSn7kbHVoFf7ZfgMPr_nTorNcsdL4IUMyE.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/playfairdisplaysc/v9/ke82OhoaMkR6-hSn7kbHVoFf7ZfgMPr_lbw0kcwXK6ARIyH5IA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PlayfairDisplaySC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Playfair Display SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Playfair+Display+SC
  static TextTheme playfairDisplaySCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.display4),
      display3: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.display3),
      display2: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.display2),
      display1: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.display1),
      headline: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.headline),
      title: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.title),
      subhead: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.body2),
      body1: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.body1),
      caption: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.caption),
      button: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.playfairDisplaySC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Podkova font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Podkova
  static TextStyle podkova({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/podkova/v15/K2FufZ1EmftJSV9VQpXb1lo9vC3nZWtFzcU4EoporSHH.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/podkova/v15/K2FufZ1EmftJSV9VQpXb1lo9vC3nZWt3zcU4EoporSHH.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/podkova/v15/K2FufZ1EmftJSV9VQpXb1lo9vC3nZWubysU4EoporSHH.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/podkova/v15/K2FufZ1EmftJSV9VQpXb1lo9vC3nZWuiysU4EoporSHH.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/podkova/v15/K2FufZ1EmftJSV9VQpXb1lo9vC3nZWvFysU4EoporSHH.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Podkova',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Podkova font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Podkova
  static TextTheme podkovaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.podkova(textStyle: textTheme?.display4),
      display3: GoogleFonts.podkova(textStyle: textTheme?.display3),
      display2: GoogleFonts.podkova(textStyle: textTheme?.display2),
      display1: GoogleFonts.podkova(textStyle: textTheme?.display1),
      headline: GoogleFonts.podkova(textStyle: textTheme?.headline),
      title: GoogleFonts.podkova(textStyle: textTheme?.title),
      subhead: GoogleFonts.podkova(textStyle: textTheme?.subhead),
      body2: GoogleFonts.podkova(textStyle: textTheme?.body2),
      body1: GoogleFonts.podkova(textStyle: textTheme?.body1),
      caption: GoogleFonts.podkova(textStyle: textTheme?.caption),
      button: GoogleFonts.podkova(textStyle: textTheme?.button),
      subtitle: GoogleFonts.podkova(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.podkova(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poiret One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poiret+One
  static TextStyle poiretOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/poiretone/v8/UqyVK80NJXN4zfRgbdfbk5lWVscxdKE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PoiretOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poiret One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poiret+One
  static TextTheme poiretOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.poiretOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.poiretOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.poiretOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.poiretOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.poiretOne(textStyle: textTheme?.headline),
      title: GoogleFonts.poiretOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.poiretOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.poiretOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.poiretOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.poiretOne(textStyle: textTheme?.caption),
      button: GoogleFonts.poiretOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.poiretOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.poiretOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poller One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poller+One
  static TextStyle pollerOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pollerone/v9/ahccv82n0TN3gia5E4Bud-lbgUS5u0s.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PollerOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poller One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poller+One
  static TextTheme pollerOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pollerOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.pollerOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.pollerOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.pollerOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.pollerOne(textStyle: textTheme?.headline),
      title: GoogleFonts.pollerOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.pollerOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pollerOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.pollerOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.pollerOne(textStyle: textTheme?.caption),
      button: GoogleFonts.pollerOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pollerOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pollerOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poly font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poly
  static TextStyle poly({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/poly/v10/MQpb-W6wKNitRLCAq2Lpris.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/poly/v10/MQpV-W6wKNitdLKKr0DsviuGWA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Poly',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poly font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poly
  static TextTheme polyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.poly(textStyle: textTheme?.display4),
      display3: GoogleFonts.poly(textStyle: textTheme?.display3),
      display2: GoogleFonts.poly(textStyle: textTheme?.display2),
      display1: GoogleFonts.poly(textStyle: textTheme?.display1),
      headline: GoogleFonts.poly(textStyle: textTheme?.headline),
      title: GoogleFonts.poly(textStyle: textTheme?.title),
      subhead: GoogleFonts.poly(textStyle: textTheme?.subhead),
      body2: GoogleFonts.poly(textStyle: textTheme?.body2),
      body1: GoogleFonts.poly(textStyle: textTheme?.body1),
      caption: GoogleFonts.poly(textStyle: textTheme?.caption),
      button: GoogleFonts.poly(textStyle: textTheme?.button),
      subtitle: GoogleFonts.poly(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.poly(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pompiere font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pompiere
  static TextStyle pompiere({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pompiere/v9/VEMyRoxis5Dwuyeov6Wt5jDtreOL.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pompiere',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pompiere font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pompiere
  static TextTheme pompiereTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pompiere(textStyle: textTheme?.display4),
      display3: GoogleFonts.pompiere(textStyle: textTheme?.display3),
      display2: GoogleFonts.pompiere(textStyle: textTheme?.display2),
      display1: GoogleFonts.pompiere(textStyle: textTheme?.display1),
      headline: GoogleFonts.pompiere(textStyle: textTheme?.headline),
      title: GoogleFonts.pompiere(textStyle: textTheme?.title),
      subhead: GoogleFonts.pompiere(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pompiere(textStyle: textTheme?.body2),
      body1: GoogleFonts.pompiere(textStyle: textTheme?.body1),
      caption: GoogleFonts.pompiere(textStyle: textTheme?.caption),
      button: GoogleFonts.pompiere(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pompiere(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pompiere(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pontano Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pontano+Sans
  static TextStyle pontanoSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pontanosans/v7/qFdD35GdgYR8EzR6oBLDHa3qwjUMg1siNQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PontanoSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pontano Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pontano+Sans
  static TextTheme pontanoSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pontanoSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.pontanoSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.pontanoSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.pontanoSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.pontanoSans(textStyle: textTheme?.headline),
      title: GoogleFonts.pontanoSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.pontanoSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pontanoSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.pontanoSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.pontanoSans(textStyle: textTheme?.caption),
      button: GoogleFonts.pontanoSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pontanoSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pontanoSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poor Story font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poor+Story
  static TextStyle poorStory({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/poorstory/v8/jizfREFUsnUct9P6cDfd4OmnLD0Z4zM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PoorStory',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poor Story font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poor+Story
  static TextTheme poorStoryTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.poorStory(textStyle: textTheme?.display4),
      display3: GoogleFonts.poorStory(textStyle: textTheme?.display3),
      display2: GoogleFonts.poorStory(textStyle: textTheme?.display2),
      display1: GoogleFonts.poorStory(textStyle: textTheme?.display1),
      headline: GoogleFonts.poorStory(textStyle: textTheme?.headline),
      title: GoogleFonts.poorStory(textStyle: textTheme?.title),
      subhead: GoogleFonts.poorStory(textStyle: textTheme?.subhead),
      body2: GoogleFonts.poorStory(textStyle: textTheme?.body2),
      body1: GoogleFonts.poorStory(textStyle: textTheme?.body1),
      caption: GoogleFonts.poorStory(textStyle: textTheme?.caption),
      button: GoogleFonts.poorStory(textStyle: textTheme?.button),
      subtitle: GoogleFonts.poorStory(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.poorStory(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Poppins font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poppins
  static TextStyle poppins({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiGyp8kv8JHgFVrLPTed3FBGPaTSQ.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiAyp8kv8JHgFVrJJLmE3tFOvODSVFF.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiByp8kv8JHgFVrLFj_V1tvFP-KUEg.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiDyp8kv8JHgFVrJJLmv1plEN2PQEhcqw.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiByp8kv8JHgFVrLDz8V1tvFP-KUEg.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiDyp8kv8JHgFVrJJLm21llEN2PQEhcqw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiEyp8kv8JHgFVrFJDUc1NECPY.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiGyp8kv8JHgFVrJJLed3FBGPaTSQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiByp8kv8JHgFVrLGT9V1tvFP-KUEg.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiDyp8kv8JHgFVrJJLmg1hlEN2PQEhcqw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiByp8kv8JHgFVrLEj6V1tvFP-KUEg.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiDyp8kv8JHgFVrJJLmr19lEN2PQEhcqw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiByp8kv8JHgFVrLCz7V1tvFP-KUEg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiDyp8kv8JHgFVrJJLmy15lEN2PQEhcqw.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiByp8kv8JHgFVrLDD4V1tvFP-KUEg.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiDyp8kv8JHgFVrJJLm111lEN2PQEhcqw.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiByp8kv8JHgFVrLBT5V1tvFP-KUEg.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/poppins/v9/pxiDyp8kv8JHgFVrJJLm81xlEN2PQEhcqw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Poppins',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Poppins font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Poppins
  static TextTheme poppinsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.poppins(textStyle: textTheme?.display4),
      display3: GoogleFonts.poppins(textStyle: textTheme?.display3),
      display2: GoogleFonts.poppins(textStyle: textTheme?.display2),
      display1: GoogleFonts.poppins(textStyle: textTheme?.display1),
      headline: GoogleFonts.poppins(textStyle: textTheme?.headline),
      title: GoogleFonts.poppins(textStyle: textTheme?.title),
      subhead: GoogleFonts.poppins(textStyle: textTheme?.subhead),
      body2: GoogleFonts.poppins(textStyle: textTheme?.body2),
      body1: GoogleFonts.poppins(textStyle: textTheme?.body1),
      caption: GoogleFonts.poppins(textStyle: textTheme?.caption),
      button: GoogleFonts.poppins(textStyle: textTheme?.button),
      subtitle: GoogleFonts.poppins(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.poppins(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Port Lligat Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Port+Lligat+Sans
  static TextStyle portLligatSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/portlligatsans/v8/kmKmZrYrGBbdN1aV7Vokow6Lw4s4l7N0Tx4xEcQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PortLligatSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Port Lligat Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Port+Lligat+Sans
  static TextTheme portLligatSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.portLligatSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.portLligatSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.portLligatSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.portLligatSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.portLligatSans(textStyle: textTheme?.headline),
      title: GoogleFonts.portLligatSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.portLligatSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.portLligatSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.portLligatSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.portLligatSans(textStyle: textTheme?.caption),
      button: GoogleFonts.portLligatSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.portLligatSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.portLligatSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Port Lligat Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Port+Lligat+Slab
  static TextStyle portLligatSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/portlligatslab/v8/LDIpaoiQNgArA8kR7ulhZ8P_NYOss7ob9yGLmfI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PortLligatSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Port Lligat Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Port+Lligat+Slab
  static TextTheme portLligatSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.portLligatSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.portLligatSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.portLligatSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.portLligatSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.portLligatSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.portLligatSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.portLligatSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.portLligatSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.portLligatSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.portLligatSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.portLligatSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.portLligatSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.portLligatSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pragati Narrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pragati+Narrow
  static TextStyle pragatiNarrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pragatinarrow/v5/vm8vdRf0T0bS1ffgsPB7WZ-mD17_ytN3M48a.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/pragatinarrow/v5/vm8sdRf0T0bS1ffgsPB7WZ-mD2ZD5fd_GJMTlo_4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PragatiNarrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pragati Narrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pragati+Narrow
  static TextTheme pragatiNarrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pragatiNarrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.pragatiNarrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.pragatiNarrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.pragatiNarrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.pragatiNarrow(textStyle: textTheme?.headline),
      title: GoogleFonts.pragatiNarrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.pragatiNarrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pragatiNarrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.pragatiNarrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.pragatiNarrow(textStyle: textTheme?.caption),
      button: GoogleFonts.pragatiNarrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pragatiNarrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pragatiNarrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Prata font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prata
  static TextStyle prata({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/prata/v10/6xKhdSpbNNCT-vWIAG_5LWwJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Prata',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Prata font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prata
  static TextTheme prataTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prata(textStyle: textTheme?.display4),
      display3: GoogleFonts.prata(textStyle: textTheme?.display3),
      display2: GoogleFonts.prata(textStyle: textTheme?.display2),
      display1: GoogleFonts.prata(textStyle: textTheme?.display1),
      headline: GoogleFonts.prata(textStyle: textTheme?.headline),
      title: GoogleFonts.prata(textStyle: textTheme?.title),
      subhead: GoogleFonts.prata(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prata(textStyle: textTheme?.body2),
      body1: GoogleFonts.prata(textStyle: textTheme?.body1),
      caption: GoogleFonts.prata(textStyle: textTheme?.caption),
      button: GoogleFonts.prata(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prata(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prata(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Preahvihear font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Preahvihear
  static TextStyle preahvihear({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/preahvihear/v11/6NUS8F-dNQeEYhzj7uluxswE49FJf8Wv.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Preahvihear',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Preahvihear font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Preahvihear
  static TextTheme preahvihearTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.preahvihear(textStyle: textTheme?.display4),
      display3: GoogleFonts.preahvihear(textStyle: textTheme?.display3),
      display2: GoogleFonts.preahvihear(textStyle: textTheme?.display2),
      display1: GoogleFonts.preahvihear(textStyle: textTheme?.display1),
      headline: GoogleFonts.preahvihear(textStyle: textTheme?.headline),
      title: GoogleFonts.preahvihear(textStyle: textTheme?.title),
      subhead: GoogleFonts.preahvihear(textStyle: textTheme?.subhead),
      body2: GoogleFonts.preahvihear(textStyle: textTheme?.body2),
      body1: GoogleFonts.preahvihear(textStyle: textTheme?.body1),
      caption: GoogleFonts.preahvihear(textStyle: textTheme?.caption),
      button: GoogleFonts.preahvihear(textStyle: textTheme?.button),
      subtitle: GoogleFonts.preahvihear(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.preahvihear(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Press Start 2P font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Press+Start+2P
  static TextStyle pressStart2P({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pressstart2p/v8/e3t4euO8T-267oIAQAu6jDQyK0nSgPJE4580.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PressStart2P',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Press Start 2P font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Press+Start+2P
  static TextTheme pressStart2PTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pressStart2P(textStyle: textTheme?.display4),
      display3: GoogleFonts.pressStart2P(textStyle: textTheme?.display3),
      display2: GoogleFonts.pressStart2P(textStyle: textTheme?.display2),
      display1: GoogleFonts.pressStart2P(textStyle: textTheme?.display1),
      headline: GoogleFonts.pressStart2P(textStyle: textTheme?.headline),
      title: GoogleFonts.pressStart2P(textStyle: textTheme?.title),
      subhead: GoogleFonts.pressStart2P(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pressStart2P(textStyle: textTheme?.body2),
      body1: GoogleFonts.pressStart2P(textStyle: textTheme?.body1),
      caption: GoogleFonts.pressStart2P(textStyle: textTheme?.caption),
      button: GoogleFonts.pressStart2P(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pressStart2P(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pressStart2P(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Pridi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pridi
  static TextStyle pridi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/pridi/v5/2sDdZG5JnZLfkc1SiE0jRUG0AqUc.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/pridi/v5/2sDdZG5JnZLfkc02i00jRUG0AqUc.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/pridi/v5/2sDQZG5JnZLfkfWao2krbl29.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/pridi/v5/2sDdZG5JnZLfkc1uik0jRUG0AqUc.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/pridi/v5/2sDdZG5JnZLfkc1CjU0jRUG0AqUc.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/pridi/v5/2sDdZG5JnZLfkc0mjE0jRUG0AqUc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Pridi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Pridi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Pridi
  static TextTheme pridiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.pridi(textStyle: textTheme?.display4),
      display3: GoogleFonts.pridi(textStyle: textTheme?.display3),
      display2: GoogleFonts.pridi(textStyle: textTheme?.display2),
      display1: GoogleFonts.pridi(textStyle: textTheme?.display1),
      headline: GoogleFonts.pridi(textStyle: textTheme?.headline),
      title: GoogleFonts.pridi(textStyle: textTheme?.title),
      subhead: GoogleFonts.pridi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.pridi(textStyle: textTheme?.body2),
      body1: GoogleFonts.pridi(textStyle: textTheme?.body1),
      caption: GoogleFonts.pridi(textStyle: textTheme?.caption),
      button: GoogleFonts.pridi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.pridi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.pridi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Princess Sofia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Princess+Sofia
  static TextStyle princessSofia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/princesssofia/v8/qWczB6yguIb8DZ_GXZst16n7GRz7mDUoupoI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PrincessSofia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Princess Sofia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Princess+Sofia
  static TextTheme princessSofiaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.princessSofia(textStyle: textTheme?.display4),
      display3: GoogleFonts.princessSofia(textStyle: textTheme?.display3),
      display2: GoogleFonts.princessSofia(textStyle: textTheme?.display2),
      display1: GoogleFonts.princessSofia(textStyle: textTheme?.display1),
      headline: GoogleFonts.princessSofia(textStyle: textTheme?.headline),
      title: GoogleFonts.princessSofia(textStyle: textTheme?.title),
      subhead: GoogleFonts.princessSofia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.princessSofia(textStyle: textTheme?.body2),
      body1: GoogleFonts.princessSofia(textStyle: textTheme?.body1),
      caption: GoogleFonts.princessSofia(textStyle: textTheme?.caption),
      button: GoogleFonts.princessSofia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.princessSofia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.princessSofia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Prociono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prociono
  static TextStyle prociono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/prociono/v9/r05YGLlR-KxAf9GGO8upyDYtStiJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Prociono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Prociono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prociono
  static TextTheme procionoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prociono(textStyle: textTheme?.display4),
      display3: GoogleFonts.prociono(textStyle: textTheme?.display3),
      display2: GoogleFonts.prociono(textStyle: textTheme?.display2),
      display1: GoogleFonts.prociono(textStyle: textTheme?.display1),
      headline: GoogleFonts.prociono(textStyle: textTheme?.headline),
      title: GoogleFonts.prociono(textStyle: textTheme?.title),
      subhead: GoogleFonts.prociono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prociono(textStyle: textTheme?.body2),
      body1: GoogleFonts.prociono(textStyle: textTheme?.body1),
      caption: GoogleFonts.prociono(textStyle: textTheme?.caption),
      button: GoogleFonts.prociono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prociono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prociono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Prompt font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prompt
  static TextStyle prompt({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_9XJnvUD7dzB2CA9oYREcjeo0k.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_7XJnvUD7dzB2KZeJ8TkMBf50kbiM.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_8XJnvUD7dzB2Cr_s4bmkvc5Q9dw.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_6XJnvUD7dzB2KZeLQb2MrUZEtdzow.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_8XJnvUD7dzB2Cy_g4bmkvc5Q9dw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_6XJnvUD7dzB2KZeK0bGMrUZEtdzow.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/prompt/v4/-W__XJnvUD7dzB26Z9AcZkIzeg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_9XJnvUD7dzB2KZdoYREcjeo0k.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_8XJnvUD7dzB2Ck_k4bmkvc5Q9dw.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_6XJnvUD7dzB2KZeLsbWMrUZEtdzow.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_8XJnvUD7dzB2Cv_44bmkvc5Q9dw.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_6XJnvUD7dzB2KZeLAamMrUZEtdzow.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_8XJnvUD7dzB2C2_84bmkvc5Q9dw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_6XJnvUD7dzB2KZeKka2MrUZEtdzow.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_8XJnvUD7dzB2Cx_w4bmkvc5Q9dw.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_6XJnvUD7dzB2KZeK4aGMrUZEtdzow.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_8XJnvUD7dzB2C4_04bmkvc5Q9dw.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/prompt/v4/-W_6XJnvUD7dzB2KZeKcaWMrUZEtdzow.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Prompt',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Prompt font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prompt
  static TextTheme promptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prompt(textStyle: textTheme?.display4),
      display3: GoogleFonts.prompt(textStyle: textTheme?.display3),
      display2: GoogleFonts.prompt(textStyle: textTheme?.display2),
      display1: GoogleFonts.prompt(textStyle: textTheme?.display1),
      headline: GoogleFonts.prompt(textStyle: textTheme?.headline),
      title: GoogleFonts.prompt(textStyle: textTheme?.title),
      subhead: GoogleFonts.prompt(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prompt(textStyle: textTheme?.body2),
      body1: GoogleFonts.prompt(textStyle: textTheme?.body1),
      caption: GoogleFonts.prompt(textStyle: textTheme?.caption),
      button: GoogleFonts.prompt(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prompt(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prompt(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Prosto One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prosto+One
  static TextStyle prostoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/prostoone/v8/OpNJno4VhNfK-RgpwWWxpipfWhXD00c.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ProstoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Prosto One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Prosto+One
  static TextTheme prostoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prostoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.prostoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.prostoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.prostoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.prostoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.prostoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.prostoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prostoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.prostoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.prostoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.prostoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prostoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prostoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Proza Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Proza+Libre
  static TextStyle prozaLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjGdGHgj0k1DIQRyUEyyHovftvXWYyz.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjEdGHgj0k1DIQRyUEyyEotdN_1XJyz7zc.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjbdGHgj0k1DIQRyUEyyELbV__fcpC69i6N.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjZdGHgj0k1DIQRyUEyyEotTCvceJSY8z6Np1k.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjbdGHgj0k1DIQRyUEyyEL3UP_fcpC69i6N.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjZdGHgj0k1DIQRyUEyyEotTAfbeJSY8z6Np1k.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjbdGHgj0k1DIQRyUEyyEKTUf_fcpC69i6N.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjZdGHgj0k1DIQRyUEyyEotTGPaeJSY8z6Np1k.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjbdGHgj0k1DIQRyUEyyEKPUv_fcpC69i6N.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/prozalibre/v4/LYjZdGHgj0k1DIQRyUEyyEotTH_ZeJSY8z6Np1k.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ProzaLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Proza Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Proza+Libre
  static TextTheme prozaLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.prozaLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.prozaLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.prozaLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.prozaLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.prozaLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.prozaLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.prozaLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.prozaLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.prozaLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.prozaLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.prozaLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.prozaLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.prozaLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Public Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Public+Sans
  static TextStyle publicSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymuFpi5ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymulpm5ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymuSJm5ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymuFpm5ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymuJJm5ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymuyJ65ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymu8Z65ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymulp65ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwGs572Xtc6ZYQws9YVwllKVG8qX1oyOymuv565ww0pX189fg.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673tpRgQctfVotfj7j.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673trRgActfVotfj7j.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673toPgActfVotfj7j.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673tpRgActfVotfj7j.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673tpjgActfVotfj7j.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673tqPhwctfVotfj7j.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673tq2hwctfVotfj7j.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673trRhwctfVotfj7j.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/publicsans/v2/ijwAs572Xtc6ZYQws9YVwnNDZpDyNjGolS673tr4hwctfVotfj7j.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PublicSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Public Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Public+Sans
  static TextTheme publicSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.publicSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.publicSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.publicSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.publicSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.publicSans(textStyle: textTheme?.headline),
      title: GoogleFonts.publicSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.publicSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.publicSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.publicSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.publicSans(textStyle: textTheme?.caption),
      button: GoogleFonts.publicSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.publicSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.publicSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Puritan font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Puritan
  static TextStyle puritan({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/puritan/v11/845YNMgkAJ2VTtIo9JrwRdaI50M.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/puritan/v11/845aNMgkAJ2VTtIoxJj6QfSN90PfXA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/puritan/v11/845dNMgkAJ2VTtIozCbfYd6j-0rGRes.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/puritan/v11/845fNMgkAJ2VTtIoxJjC_dup_2jDVevnLQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Puritan',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Puritan font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Puritan
  static TextTheme puritanTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.puritan(textStyle: textTheme?.display4),
      display3: GoogleFonts.puritan(textStyle: textTheme?.display3),
      display2: GoogleFonts.puritan(textStyle: textTheme?.display2),
      display1: GoogleFonts.puritan(textStyle: textTheme?.display1),
      headline: GoogleFonts.puritan(textStyle: textTheme?.headline),
      title: GoogleFonts.puritan(textStyle: textTheme?.title),
      subhead: GoogleFonts.puritan(textStyle: textTheme?.subhead),
      body2: GoogleFonts.puritan(textStyle: textTheme?.body2),
      body1: GoogleFonts.puritan(textStyle: textTheme?.body1),
      caption: GoogleFonts.puritan(textStyle: textTheme?.caption),
      button: GoogleFonts.puritan(textStyle: textTheme?.button),
      subtitle: GoogleFonts.puritan(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.puritan(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Purple Purse font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Purple+Purse
  static TextStyle purplePurse({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/purplepurse/v8/qWctB66gv53iAp-Vfs4My6qyeBb_ujA4ug.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'PurplePurse',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Purple Purse font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Purple+Purse
  static TextTheme purplePurseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.purplePurse(textStyle: textTheme?.display4),
      display3: GoogleFonts.purplePurse(textStyle: textTheme?.display3),
      display2: GoogleFonts.purplePurse(textStyle: textTheme?.display2),
      display1: GoogleFonts.purplePurse(textStyle: textTheme?.display1),
      headline: GoogleFonts.purplePurse(textStyle: textTheme?.headline),
      title: GoogleFonts.purplePurse(textStyle: textTheme?.title),
      subhead: GoogleFonts.purplePurse(textStyle: textTheme?.subhead),
      body2: GoogleFonts.purplePurse(textStyle: textTheme?.body2),
      body1: GoogleFonts.purplePurse(textStyle: textTheme?.body1),
      caption: GoogleFonts.purplePurse(textStyle: textTheme?.caption),
      button: GoogleFonts.purplePurse(textStyle: textTheme?.button),
      subtitle: GoogleFonts.purplePurse(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.purplePurse(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quando font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quando
  static TextStyle quando({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/quando/v8/xMQVuFNaVa6YuW0pC6WzKX_QmA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quando',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quando font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quando
  static TextTheme quandoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quando(textStyle: textTheme?.display4),
      display3: GoogleFonts.quando(textStyle: textTheme?.display3),
      display2: GoogleFonts.quando(textStyle: textTheme?.display2),
      display1: GoogleFonts.quando(textStyle: textTheme?.display1),
      headline: GoogleFonts.quando(textStyle: textTheme?.headline),
      title: GoogleFonts.quando(textStyle: textTheme?.title),
      subhead: GoogleFonts.quando(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quando(textStyle: textTheme?.body2),
      body1: GoogleFonts.quando(textStyle: textTheme?.body1),
      caption: GoogleFonts.quando(textStyle: textTheme?.caption),
      button: GoogleFonts.quando(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quando(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quando(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quantico font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quantico
  static TextStyle quantico({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/quantico/v9/rax-HiSdp9cPL3KIF4xsLjxSmlLZ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/quantico/v9/rax4HiSdp9cPL3KIF7xuJDhwn0LZ6T8.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/quantico/v9/rax5HiSdp9cPL3KIF7TQARhasU7Q8Cad.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/quantico/v9/rax7HiSdp9cPL3KIF7xuHIRfu0ry9TadML4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quantico',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quantico font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quantico
  static TextTheme quanticoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quantico(textStyle: textTheme?.display4),
      display3: GoogleFonts.quantico(textStyle: textTheme?.display3),
      display2: GoogleFonts.quantico(textStyle: textTheme?.display2),
      display1: GoogleFonts.quantico(textStyle: textTheme?.display1),
      headline: GoogleFonts.quantico(textStyle: textTheme?.headline),
      title: GoogleFonts.quantico(textStyle: textTheme?.title),
      subhead: GoogleFonts.quantico(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quantico(textStyle: textTheme?.body2),
      body1: GoogleFonts.quantico(textStyle: textTheme?.body1),
      caption: GoogleFonts.quantico(textStyle: textTheme?.caption),
      button: GoogleFonts.quantico(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quantico(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quantico(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quattrocento font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quattrocento
  static TextStyle quattrocento({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/quattrocento/v11/OZpEg_xvsDZQL_LKIF7q4jPHxGL7f4jFuA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/quattrocento/v11/OZpbg_xvsDZQL_LKIF7q4jP_eE3fd6PZsXcM9w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quattrocento',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quattrocento font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quattrocento
  static TextTheme quattrocentoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quattrocento(textStyle: textTheme?.display4),
      display3: GoogleFonts.quattrocento(textStyle: textTheme?.display3),
      display2: GoogleFonts.quattrocento(textStyle: textTheme?.display2),
      display1: GoogleFonts.quattrocento(textStyle: textTheme?.display1),
      headline: GoogleFonts.quattrocento(textStyle: textTheme?.headline),
      title: GoogleFonts.quattrocento(textStyle: textTheme?.title),
      subhead: GoogleFonts.quattrocento(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quattrocento(textStyle: textTheme?.body2),
      body1: GoogleFonts.quattrocento(textStyle: textTheme?.body1),
      caption: GoogleFonts.quattrocento(textStyle: textTheme?.caption),
      button: GoogleFonts.quattrocento(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quattrocento(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quattrocento(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quattrocento Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quattrocento+Sans
  static TextStyle quattrocentoSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/quattrocentosans/v12/va9c4lja2NVIDdIAAoMR5MfuElaRB3zOvU7eHGHJ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/quattrocentosans/v12/va9a4lja2NVIDdIAAoMR5MfuElaRB0zMt0r8GXHJkLI.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/quattrocentosans/v12/va9Z4lja2NVIDdIAAoMR5MfuElaRB0RykmrWN33AiasJ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/quattrocentosans/v12/va9X4lja2NVIDdIAAoMR5MfuElaRB0zMj_bTPXnijLsJV7E.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'QuattrocentoSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quattrocento Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quattrocento+Sans
  static TextTheme quattrocentoSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quattrocentoSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.quattrocentoSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.quattrocentoSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.quattrocentoSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.quattrocentoSans(textStyle: textTheme?.headline),
      title: GoogleFonts.quattrocentoSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.quattrocentoSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quattrocentoSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.quattrocentoSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.quattrocentoSans(textStyle: textTheme?.caption),
      button: GoogleFonts.quattrocentoSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quattrocentoSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quattrocentoSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Questrial font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Questrial
  static TextStyle questrial({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/questrial/v9/QdVUSTchPBm7nuUeVf7EuStkm20oJA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Questrial',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Questrial font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Questrial
  static TextTheme questrialTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.questrial(textStyle: textTheme?.display4),
      display3: GoogleFonts.questrial(textStyle: textTheme?.display3),
      display2: GoogleFonts.questrial(textStyle: textTheme?.display2),
      display1: GoogleFonts.questrial(textStyle: textTheme?.display1),
      headline: GoogleFonts.questrial(textStyle: textTheme?.headline),
      title: GoogleFonts.questrial(textStyle: textTheme?.title),
      subhead: GoogleFonts.questrial(textStyle: textTheme?.subhead),
      body2: GoogleFonts.questrial(textStyle: textTheme?.body2),
      body1: GoogleFonts.questrial(textStyle: textTheme?.body1),
      caption: GoogleFonts.questrial(textStyle: textTheme?.caption),
      button: GoogleFonts.questrial(textStyle: textTheme?.button),
      subtitle: GoogleFonts.questrial(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.questrial(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quicksand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quicksand
  static TextStyle quicksand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/quicksand/v19/6xK-dSZaM9iE8KbpRA_LJ3z8mH9BOJvgkKEo18G0wx40QDw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/quicksand/v19/6xK-dSZaM9iE8KbpRA_LJ3z8mH9BOJvgkP8o18G0wx40QDw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/quicksand/v19/6xK-dSZaM9iE8KbpRA_LJ3z8mH9BOJvgkM0o18G0wx40QDw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/quicksand/v19/6xK-dSZaM9iE8KbpRA_LJ3z8mH9BOJvgkCEv18G0wx40QDw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/quicksand/v19/6xK-dSZaM9iE8KbpRA_LJ3z8mH9BOJvgkBgv18G0wx40QDw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quicksand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quicksand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quicksand
  static TextTheme quicksandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quicksand(textStyle: textTheme?.display4),
      display3: GoogleFonts.quicksand(textStyle: textTheme?.display3),
      display2: GoogleFonts.quicksand(textStyle: textTheme?.display2),
      display1: GoogleFonts.quicksand(textStyle: textTheme?.display1),
      headline: GoogleFonts.quicksand(textStyle: textTheme?.headline),
      title: GoogleFonts.quicksand(textStyle: textTheme?.title),
      subhead: GoogleFonts.quicksand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quicksand(textStyle: textTheme?.body2),
      body1: GoogleFonts.quicksand(textStyle: textTheme?.body1),
      caption: GoogleFonts.quicksand(textStyle: textTheme?.caption),
      button: GoogleFonts.quicksand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quicksand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quicksand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Quintessential font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quintessential
  static TextStyle quintessential({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/quintessential/v7/fdNn9sOGq31Yjnh3qWU14DdtjY5wS7kmAyxM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Quintessential',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Quintessential font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Quintessential
  static TextTheme quintessentialTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.quintessential(textStyle: textTheme?.display4),
      display3: GoogleFonts.quintessential(textStyle: textTheme?.display3),
      display2: GoogleFonts.quintessential(textStyle: textTheme?.display2),
      display1: GoogleFonts.quintessential(textStyle: textTheme?.display1),
      headline: GoogleFonts.quintessential(textStyle: textTheme?.headline),
      title: GoogleFonts.quintessential(textStyle: textTheme?.title),
      subhead: GoogleFonts.quintessential(textStyle: textTheme?.subhead),
      body2: GoogleFonts.quintessential(textStyle: textTheme?.body2),
      body1: GoogleFonts.quintessential(textStyle: textTheme?.body1),
      caption: GoogleFonts.quintessential(textStyle: textTheme?.caption),
      button: GoogleFonts.quintessential(textStyle: textTheme?.button),
      subtitle: GoogleFonts.quintessential(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.quintessential(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Qwigley font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Qwigley
  static TextStyle qwigley({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/qwigley/v9/1cXzaU3UGJb5tGoCuVxsi1mBmcE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Qwigley',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Qwigley font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Qwigley
  static TextTheme qwigleyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.qwigley(textStyle: textTheme?.display4),
      display3: GoogleFonts.qwigley(textStyle: textTheme?.display3),
      display2: GoogleFonts.qwigley(textStyle: textTheme?.display2),
      display1: GoogleFonts.qwigley(textStyle: textTheme?.display1),
      headline: GoogleFonts.qwigley(textStyle: textTheme?.headline),
      title: GoogleFonts.qwigley(textStyle: textTheme?.title),
      subhead: GoogleFonts.qwigley(textStyle: textTheme?.subhead),
      body2: GoogleFonts.qwigley(textStyle: textTheme?.body2),
      body1: GoogleFonts.qwigley(textStyle: textTheme?.body1),
      caption: GoogleFonts.qwigley(textStyle: textTheme?.caption),
      button: GoogleFonts.qwigley(textStyle: textTheme?.button),
      subtitle: GoogleFonts.qwigley(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.qwigley(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Racing Sans One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Racing+Sans+One
  static TextStyle racingSansOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/racingsansone/v7/sykr-yRtm7EvTrXNxkv5jfKKyDCwL3rmWpIBtA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RacingSansOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Racing Sans One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Racing+Sans+One
  static TextTheme racingSansOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.racingSansOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.racingSansOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.racingSansOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.racingSansOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.racingSansOne(textStyle: textTheme?.headline),
      title: GoogleFonts.racingSansOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.racingSansOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.racingSansOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.racingSansOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.racingSansOne(textStyle: textTheme?.caption),
      button: GoogleFonts.racingSansOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.racingSansOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.racingSansOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Radley font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Radley
  static TextStyle radley({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/radley/v14/LYjDdGzinEIjCN19oAlEpVs3VQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/radley/v14/LYjBdGzinEIjCN1NogNAh14nVcfe.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Radley',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Radley font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Radley
  static TextTheme radleyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.radley(textStyle: textTheme?.display4),
      display3: GoogleFonts.radley(textStyle: textTheme?.display3),
      display2: GoogleFonts.radley(textStyle: textTheme?.display2),
      display1: GoogleFonts.radley(textStyle: textTheme?.display1),
      headline: GoogleFonts.radley(textStyle: textTheme?.headline),
      title: GoogleFonts.radley(textStyle: textTheme?.title),
      subhead: GoogleFonts.radley(textStyle: textTheme?.subhead),
      body2: GoogleFonts.radley(textStyle: textTheme?.body2),
      body1: GoogleFonts.radley(textStyle: textTheme?.body1),
      caption: GoogleFonts.radley(textStyle: textTheme?.caption),
      button: GoogleFonts.radley(textStyle: textTheme?.button),
      subtitle: GoogleFonts.radley(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.radley(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rajdhani font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rajdhani
  static TextStyle rajdhani({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/rajdhani/v9/LDI2apCSOBg7S-QT7pasEcOsc-bGkqIw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rajdhani/v9/LDIxapCSOBg7S-QT7q4AOeekWPrP.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/rajdhani/v9/LDI2apCSOBg7S-QT7pb0EMOsc-bGkqIw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/rajdhani/v9/LDI2apCSOBg7S-QT7pbYF8Osc-bGkqIw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/rajdhani/v9/LDI2apCSOBg7S-QT7pa8FsOsc-bGkqIw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rajdhani',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rajdhani font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rajdhani
  static TextTheme rajdhaniTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rajdhani(textStyle: textTheme?.display4),
      display3: GoogleFonts.rajdhani(textStyle: textTheme?.display3),
      display2: GoogleFonts.rajdhani(textStyle: textTheme?.display2),
      display1: GoogleFonts.rajdhani(textStyle: textTheme?.display1),
      headline: GoogleFonts.rajdhani(textStyle: textTheme?.headline),
      title: GoogleFonts.rajdhani(textStyle: textTheme?.title),
      subhead: GoogleFonts.rajdhani(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rajdhani(textStyle: textTheme?.body2),
      body1: GoogleFonts.rajdhani(textStyle: textTheme?.body1),
      caption: GoogleFonts.rajdhani(textStyle: textTheme?.caption),
      button: GoogleFonts.rajdhani(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rajdhani(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rajdhani(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rakkas font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rakkas
  static TextStyle rakkas({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rakkas/v7/Qw3cZQlNHiblL3j_lttPOeMcCw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rakkas',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rakkas font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rakkas
  static TextTheme rakkasTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rakkas(textStyle: textTheme?.display4),
      display3: GoogleFonts.rakkas(textStyle: textTheme?.display3),
      display2: GoogleFonts.rakkas(textStyle: textTheme?.display2),
      display1: GoogleFonts.rakkas(textStyle: textTheme?.display1),
      headline: GoogleFonts.rakkas(textStyle: textTheme?.headline),
      title: GoogleFonts.rakkas(textStyle: textTheme?.title),
      subhead: GoogleFonts.rakkas(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rakkas(textStyle: textTheme?.body2),
      body1: GoogleFonts.rakkas(textStyle: textTheme?.body1),
      caption: GoogleFonts.rakkas(textStyle: textTheme?.caption),
      button: GoogleFonts.rakkas(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rakkas(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rakkas(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Raleway font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Raleway
  static TextStyle raleway({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptsg8zYS_SKggPNwE4ISotrDfGGxA.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptqg8zYS_SKggPNyCgwLoFvL_SWxEMT.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwOIpaqFFAfif3Vo.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptpg8zYS_SKggPNyCgwgqBPBdqazVoK4A.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwIYqaqFFAfif3Vo.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptpg8zYS_SKggPNyCgw5qNPBdqazVoK4A.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptug8zYS_SKggPN-CoCTqluHfE.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptsg8zYS_SKggPNyCgISotrDfGGxA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwN4raqFFAfif3Vo.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptpg8zYS_SKggPNyCgwvqJPBdqazVoK4A.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwPIsaqFFAfif3Vo.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptpg8zYS_SKggPNyCgwkqVPBdqazVoK4A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwJYtaqFFAfif3Vo.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptpg8zYS_SKggPNyCgw9qRPBdqazVoK4A.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwIouaqFFAfif3Vo.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptpg8zYS_SKggPNyCgw6qdPBdqazVoK4A.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwK4vaqFFAfif3Vo.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/raleway/v14/1Ptpg8zYS_SKggPNyCgwzqZPBdqazVoK4A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Raleway',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Raleway font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Raleway
  static TextTheme ralewayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.raleway(textStyle: textTheme?.display4),
      display3: GoogleFonts.raleway(textStyle: textTheme?.display3),
      display2: GoogleFonts.raleway(textStyle: textTheme?.display2),
      display1: GoogleFonts.raleway(textStyle: textTheme?.display1),
      headline: GoogleFonts.raleway(textStyle: textTheme?.headline),
      title: GoogleFonts.raleway(textStyle: textTheme?.title),
      subhead: GoogleFonts.raleway(textStyle: textTheme?.subhead),
      body2: GoogleFonts.raleway(textStyle: textTheme?.body2),
      body1: GoogleFonts.raleway(textStyle: textTheme?.body1),
      caption: GoogleFonts.raleway(textStyle: textTheme?.caption),
      button: GoogleFonts.raleway(textStyle: textTheme?.button),
      subtitle: GoogleFonts.raleway(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.raleway(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Raleway Dots font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Raleway+Dots
  static TextStyle ralewayDots({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ralewaydots/v7/6NUR8FifJg6AfQvzpshgwJ8kyf9Fdty2ew.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RalewayDots',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Raleway Dots font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Raleway+Dots
  static TextTheme ralewayDotsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ralewayDots(textStyle: textTheme?.display4),
      display3: GoogleFonts.ralewayDots(textStyle: textTheme?.display3),
      display2: GoogleFonts.ralewayDots(textStyle: textTheme?.display2),
      display1: GoogleFonts.ralewayDots(textStyle: textTheme?.display1),
      headline: GoogleFonts.ralewayDots(textStyle: textTheme?.headline),
      title: GoogleFonts.ralewayDots(textStyle: textTheme?.title),
      subhead: GoogleFonts.ralewayDots(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ralewayDots(textStyle: textTheme?.body2),
      body1: GoogleFonts.ralewayDots(textStyle: textTheme?.body1),
      caption: GoogleFonts.ralewayDots(textStyle: textTheme?.caption),
      button: GoogleFonts.ralewayDots(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ralewayDots(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ralewayDots(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ramabhadra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ramabhadra
  static TextStyle ramabhadra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ramabhadra/v9/EYq2maBOwqRW9P1SQ83LehNGX5uWw3o.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ramabhadra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ramabhadra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ramabhadra
  static TextTheme ramabhadraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ramabhadra(textStyle: textTheme?.display4),
      display3: GoogleFonts.ramabhadra(textStyle: textTheme?.display3),
      display2: GoogleFonts.ramabhadra(textStyle: textTheme?.display2),
      display1: GoogleFonts.ramabhadra(textStyle: textTheme?.display1),
      headline: GoogleFonts.ramabhadra(textStyle: textTheme?.headline),
      title: GoogleFonts.ramabhadra(textStyle: textTheme?.title),
      subhead: GoogleFonts.ramabhadra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ramabhadra(textStyle: textTheme?.body2),
      body1: GoogleFonts.ramabhadra(textStyle: textTheme?.body1),
      caption: GoogleFonts.ramabhadra(textStyle: textTheme?.caption),
      button: GoogleFonts.ramabhadra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ramabhadra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ramabhadra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ramaraja font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ramaraja
  static TextStyle ramaraja({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ramaraja/v4/SlGTmQearpYAYG1CABIkqnB6aSQU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ramaraja',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ramaraja font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ramaraja
  static TextTheme ramarajaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ramaraja(textStyle: textTheme?.display4),
      display3: GoogleFonts.ramaraja(textStyle: textTheme?.display3),
      display2: GoogleFonts.ramaraja(textStyle: textTheme?.display2),
      display1: GoogleFonts.ramaraja(textStyle: textTheme?.display1),
      headline: GoogleFonts.ramaraja(textStyle: textTheme?.headline),
      title: GoogleFonts.ramaraja(textStyle: textTheme?.title),
      subhead: GoogleFonts.ramaraja(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ramaraja(textStyle: textTheme?.body2),
      body1: GoogleFonts.ramaraja(textStyle: textTheme?.body1),
      caption: GoogleFonts.ramaraja(textStyle: textTheme?.caption),
      button: GoogleFonts.ramaraja(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ramaraja(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ramaraja(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rambla font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rambla
  static TextStyle rambla({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rambla/v7/snfrs0ip98hx6mr0I7IONthkwQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/rambla/v7/snfps0ip98hx6mrEIbgKFN10wYKa.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/rambla/v7/snfos0ip98hx6mrMn50qPvN4yJuDYQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/rambla/v7/snfus0ip98hx6mrEIYC2O_l86p6TYS-Y.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rambla',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rambla font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rambla
  static TextTheme ramblaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rambla(textStyle: textTheme?.display4),
      display3: GoogleFonts.rambla(textStyle: textTheme?.display3),
      display2: GoogleFonts.rambla(textStyle: textTheme?.display2),
      display1: GoogleFonts.rambla(textStyle: textTheme?.display1),
      headline: GoogleFonts.rambla(textStyle: textTheme?.headline),
      title: GoogleFonts.rambla(textStyle: textTheme?.title),
      subhead: GoogleFonts.rambla(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rambla(textStyle: textTheme?.body2),
      body1: GoogleFonts.rambla(textStyle: textTheme?.body1),
      caption: GoogleFonts.rambla(textStyle: textTheme?.caption),
      button: GoogleFonts.rambla(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rambla(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rambla(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rammetto One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rammetto+One
  static TextStyle rammettoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rammettoone/v8/LhWiMV3HOfMbMetJG3lQDpp9Mvuciu-_SQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RammettoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rammetto One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rammetto+One
  static TextTheme rammettoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rammettoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.rammettoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.rammettoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.rammettoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.rammettoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.rammettoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.rammettoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rammettoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.rammettoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.rammettoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.rammettoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rammettoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rammettoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ranchers font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ranchers
  static TextStyle ranchers({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ranchers/v7/zrfm0H3Lx-P2Xvs2AoDYDC79XTHv.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ranchers',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ranchers font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ranchers
  static TextTheme ranchersTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ranchers(textStyle: textTheme?.display4),
      display3: GoogleFonts.ranchers(textStyle: textTheme?.display3),
      display2: GoogleFonts.ranchers(textStyle: textTheme?.display2),
      display1: GoogleFonts.ranchers(textStyle: textTheme?.display1),
      headline: GoogleFonts.ranchers(textStyle: textTheme?.headline),
      title: GoogleFonts.ranchers(textStyle: textTheme?.title),
      subhead: GoogleFonts.ranchers(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ranchers(textStyle: textTheme?.body2),
      body1: GoogleFonts.ranchers(textStyle: textTheme?.body1),
      caption: GoogleFonts.ranchers(textStyle: textTheme?.caption),
      button: GoogleFonts.ranchers(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ranchers(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ranchers(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rancho font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rancho
  static TextStyle rancho({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rancho/v10/46kulbzmXjLaqZRlbWXgd0RY1g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rancho',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rancho font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rancho
  static TextTheme ranchoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rancho(textStyle: textTheme?.display4),
      display3: GoogleFonts.rancho(textStyle: textTheme?.display3),
      display2: GoogleFonts.rancho(textStyle: textTheme?.display2),
      display1: GoogleFonts.rancho(textStyle: textTheme?.display1),
      headline: GoogleFonts.rancho(textStyle: textTheme?.headline),
      title: GoogleFonts.rancho(textStyle: textTheme?.title),
      subhead: GoogleFonts.rancho(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rancho(textStyle: textTheme?.body2),
      body1: GoogleFonts.rancho(textStyle: textTheme?.body1),
      caption: GoogleFonts.rancho(textStyle: textTheme?.caption),
      button: GoogleFonts.rancho(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rancho(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rancho(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ranga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ranga
  static TextStyle ranga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ranga/v5/C8ct4cYisGb28p6CLDwZwmGE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ranga/v5/C8cg4cYisGb28qY-AxgR6X2NZAn2.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ranga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ranga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ranga
  static TextTheme rangaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ranga(textStyle: textTheme?.display4),
      display3: GoogleFonts.ranga(textStyle: textTheme?.display3),
      display2: GoogleFonts.ranga(textStyle: textTheme?.display2),
      display1: GoogleFonts.ranga(textStyle: textTheme?.display1),
      headline: GoogleFonts.ranga(textStyle: textTheme?.headline),
      title: GoogleFonts.ranga(textStyle: textTheme?.title),
      subhead: GoogleFonts.ranga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ranga(textStyle: textTheme?.body2),
      body1: GoogleFonts.ranga(textStyle: textTheme?.body1),
      caption: GoogleFonts.ranga(textStyle: textTheme?.caption),
      button: GoogleFonts.ranga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ranga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ranga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rasa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rasa
  static TextStyle rasa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/rasa/v5/xn7gYHIn1mWmdg52sgC7S9XdZN8.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rasa/v5/xn7vYHIn1mWmTqJelgiQV9w.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/rasa/v5/xn7gYHIn1mWmdlZ3sgC7S9XdZN8.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/rasa/v5/xn7gYHIn1mWmdnpwsgC7S9XdZN8.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/rasa/v5/xn7gYHIn1mWmdh5xsgC7S9XdZN8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rasa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rasa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rasa
  static TextTheme rasaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rasa(textStyle: textTheme?.display4),
      display3: GoogleFonts.rasa(textStyle: textTheme?.display3),
      display2: GoogleFonts.rasa(textStyle: textTheme?.display2),
      display1: GoogleFonts.rasa(textStyle: textTheme?.display1),
      headline: GoogleFonts.rasa(textStyle: textTheme?.headline),
      title: GoogleFonts.rasa(textStyle: textTheme?.title),
      subhead: GoogleFonts.rasa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rasa(textStyle: textTheme?.body2),
      body1: GoogleFonts.rasa(textStyle: textTheme?.body1),
      caption: GoogleFonts.rasa(textStyle: textTheme?.caption),
      button: GoogleFonts.rasa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rasa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rasa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rationale font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rationale
  static TextStyle rationale({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rationale/v11/9XUnlJ92n0_JFxHIfHcsdlFMzLC2Zw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rationale',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rationale font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rationale
  static TextTheme rationaleTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rationale(textStyle: textTheme?.display4),
      display3: GoogleFonts.rationale(textStyle: textTheme?.display3),
      display2: GoogleFonts.rationale(textStyle: textTheme?.display2),
      display1: GoogleFonts.rationale(textStyle: textTheme?.display1),
      headline: GoogleFonts.rationale(textStyle: textTheme?.headline),
      title: GoogleFonts.rationale(textStyle: textTheme?.title),
      subhead: GoogleFonts.rationale(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rationale(textStyle: textTheme?.body2),
      body1: GoogleFonts.rationale(textStyle: textTheme?.body1),
      caption: GoogleFonts.rationale(textStyle: textTheme?.caption),
      button: GoogleFonts.rationale(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rationale(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rationale(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ravi Prakash font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ravi+Prakash
  static TextStyle raviPrakash({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/raviprakash/v6/gokpH6fsDkVrF9Bv9X8SOAKHmNZEq6TTFw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RaviPrakash',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ravi Prakash font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ravi+Prakash
  static TextTheme raviPrakashTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.raviPrakash(textStyle: textTheme?.display4),
      display3: GoogleFonts.raviPrakash(textStyle: textTheme?.display3),
      display2: GoogleFonts.raviPrakash(textStyle: textTheme?.display2),
      display1: GoogleFonts.raviPrakash(textStyle: textTheme?.display1),
      headline: GoogleFonts.raviPrakash(textStyle: textTheme?.headline),
      title: GoogleFonts.raviPrakash(textStyle: textTheme?.title),
      subhead: GoogleFonts.raviPrakash(textStyle: textTheme?.subhead),
      body2: GoogleFonts.raviPrakash(textStyle: textTheme?.body2),
      body1: GoogleFonts.raviPrakash(textStyle: textTheme?.body1),
      caption: GoogleFonts.raviPrakash(textStyle: textTheme?.caption),
      button: GoogleFonts.raviPrakash(textStyle: textTheme?.button),
      subtitle: GoogleFonts.raviPrakash(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.raviPrakash(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Red Hat Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Red+Hat+Display
  static TextStyle redHatDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/redhatdisplay/v3/8vIQ7wUr0m80wwYf0QCXZzYzUoTQ-jSgZYvdCQ.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/redhatdisplay/v3/8vIS7wUr0m80wwYf0QCXZzYzUoTg-D6kR47NCV5Z.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/redhatdisplay/v3/8vIV7wUr0m80wwYf0QCXZzYzUoToDh2EbaDBAEdAbw.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/redhatdisplay/v3/8vIX7wUr0m80wwYf0QCXZzYzUoTg-AZQbqrFIkJQb7zU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/redhatdisplay/v3/8vIV7wUr0m80wwYf0QCXZzYzUoToRhuEbaDBAEdAbw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/redhatdisplay/v3/8vIX7wUr0m80wwYf0QCXZzYzUoTg-AYYaKrFIkJQb7zU.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/redhatdisplay/v3/8vIV7wUr0m80wwYf0QCXZzYzUoTofhmEbaDBAEdAbw.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/redhatdisplay/v3/8vIX7wUr0m80wwYf0QCXZzYzUoTg-AYgaqrFIkJQb7zU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RedHatDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Red Hat Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Red+Hat+Display
  static TextTheme redHatDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.redHatDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.redHatDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.redHatDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.redHatDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.redHatDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.redHatDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.redHatDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.redHatDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.redHatDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.redHatDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.redHatDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.redHatDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.redHatDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Red Hat Text font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Red+Hat+Text
  static TextStyle redHatText({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/redhattext/v2/RrQXbohi_ic6B3yVSzGBrMxgb60sE8yZPA.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/redhattext/v2/RrQJbohi_ic6B3yVSzGBrMxQbacoMcmJPECN.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/redhattext/v2/RrQIbohi_ic6B3yVSzGBrMxYm4QIG-eFNVmULg.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/redhattext/v2/RrQKbohi_ic6B3yVSzGBrMxQbZ_cGO2BF1yELmgy.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/redhattext/v2/RrQIbohi_ic6B3yVSzGBrMxY04IIG-eFNVmULg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/redhattext/v2/RrQKbohi_ic6B3yVSzGBrMxQbZ-UHu2BF1yELmgy.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RedHatText',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Red Hat Text font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Red+Hat+Text
  static TextTheme redHatTextTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.redHatText(textStyle: textTheme?.display4),
      display3: GoogleFonts.redHatText(textStyle: textTheme?.display3),
      display2: GoogleFonts.redHatText(textStyle: textTheme?.display2),
      display1: GoogleFonts.redHatText(textStyle: textTheme?.display1),
      headline: GoogleFonts.redHatText(textStyle: textTheme?.headline),
      title: GoogleFonts.redHatText(textStyle: textTheme?.title),
      subhead: GoogleFonts.redHatText(textStyle: textTheme?.subhead),
      body2: GoogleFonts.redHatText(textStyle: textTheme?.body2),
      body1: GoogleFonts.redHatText(textStyle: textTheme?.body1),
      caption: GoogleFonts.redHatText(textStyle: textTheme?.caption),
      button: GoogleFonts.redHatText(textStyle: textTheme?.button),
      subtitle: GoogleFonts.redHatText(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.redHatText(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Redressed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Redressed
  static TextStyle redressed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/redressed/v10/x3dickHUbrmJ7wMy9MsBfPACvy_1BA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Redressed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Redressed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Redressed
  static TextTheme redressedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.redressed(textStyle: textTheme?.display4),
      display3: GoogleFonts.redressed(textStyle: textTheme?.display3),
      display2: GoogleFonts.redressed(textStyle: textTheme?.display2),
      display1: GoogleFonts.redressed(textStyle: textTheme?.display1),
      headline: GoogleFonts.redressed(textStyle: textTheme?.headline),
      title: GoogleFonts.redressed(textStyle: textTheme?.title),
      subhead: GoogleFonts.redressed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.redressed(textStyle: textTheme?.body2),
      body1: GoogleFonts.redressed(textStyle: textTheme?.body1),
      caption: GoogleFonts.redressed(textStyle: textTheme?.caption),
      button: GoogleFonts.redressed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.redressed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.redressed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Reem Kufi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Reem+Kufi
  static TextStyle reemKufi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/reemkufi/v7/2sDcZGJLip7W2J7v7wQDb2-4C7wFZQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ReemKufi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Reem Kufi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Reem+Kufi
  static TextTheme reemKufiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.reemKufi(textStyle: textTheme?.display4),
      display3: GoogleFonts.reemKufi(textStyle: textTheme?.display3),
      display2: GoogleFonts.reemKufi(textStyle: textTheme?.display2),
      display1: GoogleFonts.reemKufi(textStyle: textTheme?.display1),
      headline: GoogleFonts.reemKufi(textStyle: textTheme?.headline),
      title: GoogleFonts.reemKufi(textStyle: textTheme?.title),
      subhead: GoogleFonts.reemKufi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.reemKufi(textStyle: textTheme?.body2),
      body1: GoogleFonts.reemKufi(textStyle: textTheme?.body1),
      caption: GoogleFonts.reemKufi(textStyle: textTheme?.caption),
      button: GoogleFonts.reemKufi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.reemKufi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.reemKufi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Reenie Beanie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Reenie+Beanie
  static TextStyle reenieBeanie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/reeniebeanie/v10/z7NSdR76eDkaJKZJFkkjuvWxbP2_qoOgf_w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ReenieBeanie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Reenie Beanie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Reenie+Beanie
  static TextTheme reenieBeanieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.reenieBeanie(textStyle: textTheme?.display4),
      display3: GoogleFonts.reenieBeanie(textStyle: textTheme?.display3),
      display2: GoogleFonts.reenieBeanie(textStyle: textTheme?.display2),
      display1: GoogleFonts.reenieBeanie(textStyle: textTheme?.display1),
      headline: GoogleFonts.reenieBeanie(textStyle: textTheme?.headline),
      title: GoogleFonts.reenieBeanie(textStyle: textTheme?.title),
      subhead: GoogleFonts.reenieBeanie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.reenieBeanie(textStyle: textTheme?.body2),
      body1: GoogleFonts.reenieBeanie(textStyle: textTheme?.body1),
      caption: GoogleFonts.reenieBeanie(textStyle: textTheme?.caption),
      button: GoogleFonts.reenieBeanie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.reenieBeanie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.reenieBeanie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Revalia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Revalia
  static TextStyle revalia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/revalia/v7/WwkexPimBE2-4ZPEeVruNIgJSNM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Revalia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Revalia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Revalia
  static TextTheme revaliaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.revalia(textStyle: textTheme?.display4),
      display3: GoogleFonts.revalia(textStyle: textTheme?.display3),
      display2: GoogleFonts.revalia(textStyle: textTheme?.display2),
      display1: GoogleFonts.revalia(textStyle: textTheme?.display1),
      headline: GoogleFonts.revalia(textStyle: textTheme?.headline),
      title: GoogleFonts.revalia(textStyle: textTheme?.title),
      subhead: GoogleFonts.revalia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.revalia(textStyle: textTheme?.body2),
      body1: GoogleFonts.revalia(textStyle: textTheme?.body1),
      caption: GoogleFonts.revalia(textStyle: textTheme?.caption),
      button: GoogleFonts.revalia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.revalia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.revalia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rhodium Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rhodium+Libre
  static TextStyle rhodiumLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rhodiumlibre/v4/1q2AY5adA0tn_ukeHcQHqpx6pETLeo2gm2U.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RhodiumLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rhodium Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rhodium+Libre
  static TextTheme rhodiumLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rhodiumLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.rhodiumLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.rhodiumLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.rhodiumLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.rhodiumLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.rhodiumLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.rhodiumLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rhodiumLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.rhodiumLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.rhodiumLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.rhodiumLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rhodiumLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rhodiumLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ribeye font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ribeye
  static TextStyle ribeye({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ribeye/v8/L0x8DFMxk1MP9R3RvPCmRSlUig.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ribeye',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ribeye font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ribeye
  static TextTheme ribeyeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ribeye(textStyle: textTheme?.display4),
      display3: GoogleFonts.ribeye(textStyle: textTheme?.display3),
      display2: GoogleFonts.ribeye(textStyle: textTheme?.display2),
      display1: GoogleFonts.ribeye(textStyle: textTheme?.display1),
      headline: GoogleFonts.ribeye(textStyle: textTheme?.headline),
      title: GoogleFonts.ribeye(textStyle: textTheme?.title),
      subhead: GoogleFonts.ribeye(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ribeye(textStyle: textTheme?.body2),
      body1: GoogleFonts.ribeye(textStyle: textTheme?.body1),
      caption: GoogleFonts.ribeye(textStyle: textTheme?.caption),
      button: GoogleFonts.ribeye(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ribeye(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ribeye(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ribeye Marrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ribeye+Marrow
  static TextStyle ribeyeMarrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ribeyemarrow/v9/GFDsWApshnqMRO2JdtRZ2d0vEAwTVWgKdtw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RibeyeMarrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ribeye Marrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ribeye+Marrow
  static TextTheme ribeyeMarrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.headline),
      title: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.caption),
      button: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ribeyeMarrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Righteous font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Righteous
  static TextStyle righteous({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/righteous/v8/1cXxaUPXBpj2rGoU7C9mj3uEicG01A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Righteous',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Righteous font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Righteous
  static TextTheme righteousTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.righteous(textStyle: textTheme?.display4),
      display3: GoogleFonts.righteous(textStyle: textTheme?.display3),
      display2: GoogleFonts.righteous(textStyle: textTheme?.display2),
      display1: GoogleFonts.righteous(textStyle: textTheme?.display1),
      headline: GoogleFonts.righteous(textStyle: textTheme?.headline),
      title: GoogleFonts.righteous(textStyle: textTheme?.title),
      subhead: GoogleFonts.righteous(textStyle: textTheme?.subhead),
      body2: GoogleFonts.righteous(textStyle: textTheme?.body2),
      body1: GoogleFonts.righteous(textStyle: textTheme?.body1),
      caption: GoogleFonts.righteous(textStyle: textTheme?.caption),
      button: GoogleFonts.righteous(textStyle: textTheme?.button),
      subtitle: GoogleFonts.righteous(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.righteous(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Risque font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Risque
  static TextStyle risque({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/risque/v7/VdGfAZUfHosahXxoCUYVBJ-T5g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Risque',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Risque font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Risque
  static TextTheme risqueTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.risque(textStyle: textTheme?.display4),
      display3: GoogleFonts.risque(textStyle: textTheme?.display3),
      display2: GoogleFonts.risque(textStyle: textTheme?.display2),
      display1: GoogleFonts.risque(textStyle: textTheme?.display1),
      headline: GoogleFonts.risque(textStyle: textTheme?.headline),
      title: GoogleFonts.risque(textStyle: textTheme?.title),
      subhead: GoogleFonts.risque(textStyle: textTheme?.subhead),
      body2: GoogleFonts.risque(textStyle: textTheme?.body2),
      body1: GoogleFonts.risque(textStyle: textTheme?.body1),
      caption: GoogleFonts.risque(textStyle: textTheme?.caption),
      button: GoogleFonts.risque(textStyle: textTheme?.button),
      subtitle: GoogleFonts.risque(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.risque(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Roboto font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto
  static TextStyle roboto({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1MmgWxPKTM1K9nz.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOiCnqEu92Fr1Mu51QrIzcXLsnzjYk.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmSU5vAx05IsDqlA.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TjARc9AMX6lJBP.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Me5WZLCzYlKw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOkCnqEu92Fr1Mu52xPKTM1K9nz.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmEU9vAx05IsDqlA.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51S7ABc9AMX6lJBP.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmWUlvAx05IsDqlA.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TzBhc9AMX6lJBP.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOlCnqEu92Fr1MmYUtvAx05IsDqlA.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/roboto/v20/KFOjCnqEu92Fr1Mu51TLBBc9AMX6lJBP.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Roboto',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Roboto font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto
  static TextTheme robotoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.roboto(textStyle: textTheme?.display4),
      display3: GoogleFonts.roboto(textStyle: textTheme?.display3),
      display2: GoogleFonts.roboto(textStyle: textTheme?.display2),
      display1: GoogleFonts.roboto(textStyle: textTheme?.display1),
      headline: GoogleFonts.roboto(textStyle: textTheme?.headline),
      title: GoogleFonts.roboto(textStyle: textTheme?.title),
      subhead: GoogleFonts.roboto(textStyle: textTheme?.subhead),
      body2: GoogleFonts.roboto(textStyle: textTheme?.body2),
      body1: GoogleFonts.roboto(textStyle: textTheme?.body1),
      caption: GoogleFonts.roboto(textStyle: textTheme?.caption),
      button: GoogleFonts.roboto(textStyle: textTheme?.button),
      subtitle: GoogleFonts.roboto(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.roboto(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Roboto Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Condensed
  static TextStyle robotoCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/robotocondensed/v18/ieVi2ZhZI2eCN5jzbjEETS9weq8-33mZKCMSbvtdYyQ.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/robotocondensed/v18/ieVg2ZhZI2eCN5jzbjEETS9weq8-19eDpCEYatlYcyRi4A.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/robotocondensed/v18/ieVl2ZhZI2eCN5jzbjEETS9weq8-59WxDCs5cvI.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/robotocondensed/v18/ieVj2ZhZI2eCN5jzbjEETS9weq8-19e7CAk8YvJEeg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/robotocondensed/v18/ieVi2ZhZI2eCN5jzbjEETS9weq8-32meKCMSbvtdYyQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/robotocondensed/v18/ieVg2ZhZI2eCN5jzbjEETS9weq8-19eDtCYYatlYcyRi4A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RobotoCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Roboto Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Condensed
  static TextTheme robotoCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.robotoCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.robotoCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.robotoCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.robotoCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.robotoCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.robotoCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.robotoCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.robotoCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.robotoCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.robotoCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.robotoCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.robotoCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.robotoCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Roboto Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Mono
  static TextStyle robotoMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0x7DF4xlVMF-BfR8bXMIjAoq3qcW7KCG1w.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0xlDF4xlVMF-BfR8bXMIjhOkx6WX5CHC1wnFw.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0xkDF4xlVMF-BfR8bXMIjDgiVq2db6LAkU-.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0xmDF4xlVMF-BfR8bXMIjhOk9a0f7qpB1U-Drg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0x5DF4xlVMF-BfR8bXMIghMoX6-XqKC.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0x7DF4xlVMF-BfR8bXMIjhOq3qcW7KCG1w.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0xkDF4xlVMF-BfR8bXMIjC4iFq2db6LAkU-.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0xmDF4xlVMF-BfR8bXMIjhOk461f7qpB1U-Drg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0xkDF4xlVMF-BfR8bXMIjDwjlq2db6LAkU-.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/robotomono/v7/L0xmDF4xlVMF-BfR8bXMIjhOk8azf7qpB1U-Drg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RobotoMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Roboto Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Mono
  static TextTheme robotoMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.robotoMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.robotoMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.robotoMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.robotoMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.robotoMono(textStyle: textTheme?.headline),
      title: GoogleFonts.robotoMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.robotoMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.robotoMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.robotoMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.robotoMono(textStyle: textTheme?.caption),
      button: GoogleFonts.robotoMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.robotoMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.robotoMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Roboto Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Slab
  static TextStyle robotoSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjojIWWaG5iddG-1A.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjoDISWaG5iddG-1A.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjo0oSWaG5iddG-1A.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjojISWaG5iddG-1A.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjovoSWaG5iddG-1A.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjoUoOWaG5iddG-1A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjoa4OWaG5iddG-1A.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjoDIOWaG5iddG-1A.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/robotoslab/v10/BngbUXZYTXPIvIBgJJSb6s3BzlRRfKOFbvjoJYOWaG5iddG-1A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RobotoSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Roboto Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Roboto+Slab
  static TextTheme robotoSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.robotoSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.robotoSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.robotoSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.robotoSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.robotoSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.robotoSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.robotoSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.robotoSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.robotoSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.robotoSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.robotoSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.robotoSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.robotoSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rochester font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rochester
  static TextStyle rochester({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rochester/v10/6ae-4KCqVa4Zy6Fif-Uy31vWNTMwoQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rochester',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rochester font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rochester
  static TextTheme rochesterTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rochester(textStyle: textTheme?.display4),
      display3: GoogleFonts.rochester(textStyle: textTheme?.display3),
      display2: GoogleFonts.rochester(textStyle: textTheme?.display2),
      display1: GoogleFonts.rochester(textStyle: textTheme?.display1),
      headline: GoogleFonts.rochester(textStyle: textTheme?.headline),
      title: GoogleFonts.rochester(textStyle: textTheme?.title),
      subhead: GoogleFonts.rochester(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rochester(textStyle: textTheme?.body2),
      body1: GoogleFonts.rochester(textStyle: textTheme?.body1),
      caption: GoogleFonts.rochester(textStyle: textTheme?.caption),
      button: GoogleFonts.rochester(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rochester(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rochester(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rock Salt font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rock+Salt
  static TextStyle rockSalt({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rocksalt/v10/MwQ0bhv11fWD6QsAVOZbsEk7hbBWrA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RockSalt',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rock Salt font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rock+Salt
  static TextTheme rockSaltTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rockSalt(textStyle: textTheme?.display4),
      display3: GoogleFonts.rockSalt(textStyle: textTheme?.display3),
      display2: GoogleFonts.rockSalt(textStyle: textTheme?.display2),
      display1: GoogleFonts.rockSalt(textStyle: textTheme?.display1),
      headline: GoogleFonts.rockSalt(textStyle: textTheme?.headline),
      title: GoogleFonts.rockSalt(textStyle: textTheme?.title),
      subhead: GoogleFonts.rockSalt(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rockSalt(textStyle: textTheme?.body2),
      body1: GoogleFonts.rockSalt(textStyle: textTheme?.body1),
      caption: GoogleFonts.rockSalt(textStyle: textTheme?.caption),
      button: GoogleFonts.rockSalt(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rockSalt(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rockSalt(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rokkitt font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rokkitt
  static TextStyle rokkitt({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1rydpDLE76HvN6n.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1pyd5DLE76HvN6n.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1qsd5DLE76HvN6n.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1ryd5DLE76HvN6n.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1rAd5DLE76HvN6n.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1oscJDLE76HvN6n.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1oVcJDLE76HvN6n.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1pycJDLE76HvN6n.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/rokkitt/v17/qFdb35qfgYFjGy5hukqqhw5XeRgdi1pbcJDLE76HvN6n.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rokkitt',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rokkitt font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rokkitt
  static TextTheme rokkittTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rokkitt(textStyle: textTheme?.display4),
      display3: GoogleFonts.rokkitt(textStyle: textTheme?.display3),
      display2: GoogleFonts.rokkitt(textStyle: textTheme?.display2),
      display1: GoogleFonts.rokkitt(textStyle: textTheme?.display1),
      headline: GoogleFonts.rokkitt(textStyle: textTheme?.headline),
      title: GoogleFonts.rokkitt(textStyle: textTheme?.title),
      subhead: GoogleFonts.rokkitt(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rokkitt(textStyle: textTheme?.body2),
      body1: GoogleFonts.rokkitt(textStyle: textTheme?.body1),
      caption: GoogleFonts.rokkitt(textStyle: textTheme?.caption),
      button: GoogleFonts.rokkitt(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rokkitt(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rokkitt(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Romanesco font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Romanesco
  static TextStyle romanesco({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/romanesco/v8/w8gYH2ozQOY7_r_J7mSn3HwLqOqSBg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Romanesco',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Romanesco font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Romanesco
  static TextTheme romanescoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.romanesco(textStyle: textTheme?.display4),
      display3: GoogleFonts.romanesco(textStyle: textTheme?.display3),
      display2: GoogleFonts.romanesco(textStyle: textTheme?.display2),
      display1: GoogleFonts.romanesco(textStyle: textTheme?.display1),
      headline: GoogleFonts.romanesco(textStyle: textTheme?.headline),
      title: GoogleFonts.romanesco(textStyle: textTheme?.title),
      subhead: GoogleFonts.romanesco(textStyle: textTheme?.subhead),
      body2: GoogleFonts.romanesco(textStyle: textTheme?.body2),
      body1: GoogleFonts.romanesco(textStyle: textTheme?.body1),
      caption: GoogleFonts.romanesco(textStyle: textTheme?.caption),
      button: GoogleFonts.romanesco(textStyle: textTheme?.button),
      subtitle: GoogleFonts.romanesco(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.romanesco(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ropa Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ropa+Sans
  static TextStyle ropaSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ropasans/v9/EYqxmaNOzLlWtsZSScyKWjloU5KP2g.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ropasans/v9/EYq3maNOzLlWtsZSScy6WDNscZef2mNE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RopaSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ropa Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ropa+Sans
  static TextTheme ropaSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ropaSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.ropaSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.ropaSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.ropaSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.ropaSans(textStyle: textTheme?.headline),
      title: GoogleFonts.ropaSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.ropaSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ropaSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.ropaSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.ropaSans(textStyle: textTheme?.caption),
      button: GoogleFonts.ropaSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ropaSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ropaSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rosario font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rosario
  static TextStyle rosario({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/rosario/v16/xfuu0WDhWW_fOEoY8l_VPNZfB7jPM69GCWczd-YnOzUD.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rosario/v16/xfuu0WDhWW_fOEoY8l_VPNZfB7jPM68YCWczd-YnOzUD.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/rosario/v16/xfuu0WDhWW_fOEoY8l_VPNZfB7jPM68qCWczd-YnOzUD.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/rosario/v16/xfuu0WDhWW_fOEoY8l_VPNZfB7jPM6_GDmczd-YnOzUD.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/rosario/v16/xfuu0WDhWW_fOEoY8l_VPNZfB7jPM6__Dmczd-YnOzUD.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/rosario/v16/xfug0WDhWW_fOEoY2Fbnww42bCJhNLrQStFwfeIFPiUDn08.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/rosario/v16/xfug0WDhWW_fOEoY2Fbnww42bCJhNLrQSo9wfeIFPiUDn08.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/rosario/v16/xfug0WDhWW_fOEoY2Fbnww42bCJhNLrQSr1wfeIFPiUDn08.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/rosario/v16/xfug0WDhWW_fOEoY2Fbnww42bCJhNLrQSlF3feIFPiUDn08.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/rosario/v16/xfug0WDhWW_fOEoY2Fbnww42bCJhNLrQSmh3feIFPiUDn08.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rosario',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rosario font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rosario
  static TextTheme rosarioTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rosario(textStyle: textTheme?.display4),
      display3: GoogleFonts.rosario(textStyle: textTheme?.display3),
      display2: GoogleFonts.rosario(textStyle: textTheme?.display2),
      display1: GoogleFonts.rosario(textStyle: textTheme?.display1),
      headline: GoogleFonts.rosario(textStyle: textTheme?.headline),
      title: GoogleFonts.rosario(textStyle: textTheme?.title),
      subhead: GoogleFonts.rosario(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rosario(textStyle: textTheme?.body2),
      body1: GoogleFonts.rosario(textStyle: textTheme?.body1),
      caption: GoogleFonts.rosario(textStyle: textTheme?.caption),
      button: GoogleFonts.rosario(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rosario(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rosario(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rosarivo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rosarivo
  static TextStyle rosarivo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rosarivo/v7/PlI-Fl2lO6N9f8HaNAeC2nhMnNy5.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/rosarivo/v7/PlI4Fl2lO6N9f8HaNDeA0Hxumcy5ZX8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rosarivo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rosarivo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rosarivo
  static TextTheme rosarivoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rosarivo(textStyle: textTheme?.display4),
      display3: GoogleFonts.rosarivo(textStyle: textTheme?.display3),
      display2: GoogleFonts.rosarivo(textStyle: textTheme?.display2),
      display1: GoogleFonts.rosarivo(textStyle: textTheme?.display1),
      headline: GoogleFonts.rosarivo(textStyle: textTheme?.headline),
      title: GoogleFonts.rosarivo(textStyle: textTheme?.title),
      subhead: GoogleFonts.rosarivo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rosarivo(textStyle: textTheme?.body2),
      body1: GoogleFonts.rosarivo(textStyle: textTheme?.body1),
      caption: GoogleFonts.rosarivo(textStyle: textTheme?.caption),
      button: GoogleFonts.rosarivo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rosarivo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rosarivo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rouge Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rouge+Script
  static TextStyle rougeScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rougescript/v8/LYjFdGbiklMoCIQOw1Ep3S4PVPXbUJWq9g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RougeScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rouge Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rouge+Script
  static TextTheme rougeScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rougeScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.rougeScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.rougeScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.rougeScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.rougeScript(textStyle: textTheme?.headline),
      title: GoogleFonts.rougeScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.rougeScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rougeScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.rougeScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.rougeScript(textStyle: textTheme?.caption),
      button: GoogleFonts.rougeScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rougeScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rougeScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rozha One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rozha+One
  static TextStyle rozhaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rozhaone/v7/AlZy_zVFtYP12Zncg2khdXf4XB0Tow.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RozhaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rozha One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rozha+One
  static TextTheme rozhaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rozhaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.rozhaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.rozhaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.rozhaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.rozhaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.rozhaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.rozhaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rozhaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.rozhaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.rozhaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.rozhaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rozhaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rozhaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rubik font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rubik
  static TextStyle rubik({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWHBXyIfDnIV7Fqj1ma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWBBXyIfDnIV7nEldWY8WX06IB_18o.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWKBXyIfDnIV4nGp32S0H3f.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWEBXyIfDnIV7nErXmw1W3f9Ik.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWHBXyIfDnIV7Eyjlma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWBBXyIfDnIV7nElY2Z8WX06IB_18o.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWHBXyIfDnIV7F6iFma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWBBXyIfDnIV7nElcWf8WX06IB_18o.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWHBXyIfDnIV7FCilma-2HW7ZB_.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/rubik/v9/iJWBBXyIfDnIV7nElf2d8WX06IB_18o.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rubik',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rubik font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rubik
  static TextTheme rubikTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rubik(textStyle: textTheme?.display4),
      display3: GoogleFonts.rubik(textStyle: textTheme?.display3),
      display2: GoogleFonts.rubik(textStyle: textTheme?.display2),
      display1: GoogleFonts.rubik(textStyle: textTheme?.display1),
      headline: GoogleFonts.rubik(textStyle: textTheme?.headline),
      title: GoogleFonts.rubik(textStyle: textTheme?.title),
      subhead: GoogleFonts.rubik(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rubik(textStyle: textTheme?.body2),
      body1: GoogleFonts.rubik(textStyle: textTheme?.body1),
      caption: GoogleFonts.rubik(textStyle: textTheme?.caption),
      button: GoogleFonts.rubik(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rubik(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rubik(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rubik Mono One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rubik+Mono+One
  static TextStyle rubikMonoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rubikmonoone/v8/UqyJK8kPP3hjw6ANTdfRk9YSN-8wRqQrc_j9.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RubikMonoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rubik Mono One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rubik+Mono+One
  static TextTheme rubikMonoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rubikMonoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.rubikMonoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.rubikMonoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.rubikMonoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.rubikMonoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.rubikMonoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.rubikMonoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rubikMonoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.rubikMonoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.rubikMonoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.rubikMonoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rubikMonoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rubikMonoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruda font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruda
  static TextStyle ruda({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ruda/v11/k3kfo8YQJOpFmn8XadbJM0A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ruda/v11/k3kQo8YQJOpFosM4Td7iL0nAMaM.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/ruda/v11/k3kQo8YQJOpFovs6Td7iL0nAMaM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ruda',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruda font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruda
  static TextTheme rudaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ruda(textStyle: textTheme?.display4),
      display3: GoogleFonts.ruda(textStyle: textTheme?.display3),
      display2: GoogleFonts.ruda(textStyle: textTheme?.display2),
      display1: GoogleFonts.ruda(textStyle: textTheme?.display1),
      headline: GoogleFonts.ruda(textStyle: textTheme?.headline),
      title: GoogleFonts.ruda(textStyle: textTheme?.title),
      subhead: GoogleFonts.ruda(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ruda(textStyle: textTheme?.body2),
      body1: GoogleFonts.ruda(textStyle: textTheme?.body1),
      caption: GoogleFonts.ruda(textStyle: textTheme?.caption),
      button: GoogleFonts.ruda(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ruda(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ruda(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rufina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rufina
  static TextStyle rufina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rufina/v7/Yq6V-LyURyLy-aKyoxRktOdClg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/rufina/v7/Yq6W-LyURyLy-aKKHztAvMxenxE0SA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rufina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rufina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rufina
  static TextTheme rufinaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rufina(textStyle: textTheme?.display4),
      display3: GoogleFonts.rufina(textStyle: textTheme?.display3),
      display2: GoogleFonts.rufina(textStyle: textTheme?.display2),
      display1: GoogleFonts.rufina(textStyle: textTheme?.display1),
      headline: GoogleFonts.rufina(textStyle: textTheme?.headline),
      title: GoogleFonts.rufina(textStyle: textTheme?.title),
      subhead: GoogleFonts.rufina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rufina(textStyle: textTheme?.body2),
      body1: GoogleFonts.rufina(textStyle: textTheme?.body1),
      caption: GoogleFonts.rufina(textStyle: textTheme?.caption),
      button: GoogleFonts.rufina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rufina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rufina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruge Boogie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruge+Boogie
  static TextStyle rugeBoogie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rugeboogie/v10/JIA3UVFwbHRF_GIWSMhKNROiPzUveSxy.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RugeBoogie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruge Boogie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruge+Boogie
  static TextTheme rugeBoogieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rugeBoogie(textStyle: textTheme?.display4),
      display3: GoogleFonts.rugeBoogie(textStyle: textTheme?.display3),
      display2: GoogleFonts.rugeBoogie(textStyle: textTheme?.display2),
      display1: GoogleFonts.rugeBoogie(textStyle: textTheme?.display1),
      headline: GoogleFonts.rugeBoogie(textStyle: textTheme?.headline),
      title: GoogleFonts.rugeBoogie(textStyle: textTheme?.title),
      subhead: GoogleFonts.rugeBoogie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rugeBoogie(textStyle: textTheme?.body2),
      body1: GoogleFonts.rugeBoogie(textStyle: textTheme?.body1),
      caption: GoogleFonts.rugeBoogie(textStyle: textTheme?.caption),
      button: GoogleFonts.rugeBoogie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rugeBoogie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rugeBoogie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruluko font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruluko
  static TextStyle ruluko({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ruluko/v7/xMQVuFNZVaODtm0pC6WzKX_QmA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ruluko',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruluko font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruluko
  static TextTheme rulukoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ruluko(textStyle: textTheme?.display4),
      display3: GoogleFonts.ruluko(textStyle: textTheme?.display3),
      display2: GoogleFonts.ruluko(textStyle: textTheme?.display2),
      display1: GoogleFonts.ruluko(textStyle: textTheme?.display1),
      headline: GoogleFonts.ruluko(textStyle: textTheme?.headline),
      title: GoogleFonts.ruluko(textStyle: textTheme?.title),
      subhead: GoogleFonts.ruluko(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ruluko(textStyle: textTheme?.body2),
      body1: GoogleFonts.ruluko(textStyle: textTheme?.body1),
      caption: GoogleFonts.ruluko(textStyle: textTheme?.caption),
      button: GoogleFonts.ruluko(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ruluko(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ruluko(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rum Raisin font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rum+Raisin
  static TextStyle rumRaisin({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rumraisin/v7/nwpRtKu3Ih8D5avB4h2uJ3-IywA7eMM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RumRaisin',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rum Raisin font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rum+Raisin
  static TextTheme rumRaisinTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rumRaisin(textStyle: textTheme?.display4),
      display3: GoogleFonts.rumRaisin(textStyle: textTheme?.display3),
      display2: GoogleFonts.rumRaisin(textStyle: textTheme?.display2),
      display1: GoogleFonts.rumRaisin(textStyle: textTheme?.display1),
      headline: GoogleFonts.rumRaisin(textStyle: textTheme?.headline),
      title: GoogleFonts.rumRaisin(textStyle: textTheme?.title),
      subhead: GoogleFonts.rumRaisin(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rumRaisin(textStyle: textTheme?.body2),
      body1: GoogleFonts.rumRaisin(textStyle: textTheme?.body1),
      caption: GoogleFonts.rumRaisin(textStyle: textTheme?.caption),
      button: GoogleFonts.rumRaisin(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rumRaisin(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rumRaisin(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruslan Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruslan+Display
  static TextStyle ruslanDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ruslandisplay/v10/Gw6jwczl81XcIZuckK_e3UpfdzxrldyFvm1n.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RuslanDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruslan Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruslan+Display
  static TextTheme ruslanDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ruslanDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.ruslanDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.ruslanDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.ruslanDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.ruslanDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.ruslanDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.ruslanDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ruslanDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.ruslanDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.ruslanDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.ruslanDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ruslanDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ruslanDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Russo One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Russo+One
  static TextStyle russoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/russoone/v8/Z9XUDmZRWg6M1LvRYsH-yMOInrib9Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'RussoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Russo One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Russo+One
  static TextTheme russoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.russoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.russoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.russoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.russoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.russoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.russoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.russoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.russoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.russoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.russoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.russoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.russoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.russoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ruthie font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruthie
  static TextStyle ruthie({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ruthie/v10/gokvH63sGkdqXuU9lD53Q2u_mQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ruthie',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ruthie font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ruthie
  static TextTheme ruthieTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ruthie(textStyle: textTheme?.display4),
      display3: GoogleFonts.ruthie(textStyle: textTheme?.display3),
      display2: GoogleFonts.ruthie(textStyle: textTheme?.display2),
      display1: GoogleFonts.ruthie(textStyle: textTheme?.display1),
      headline: GoogleFonts.ruthie(textStyle: textTheme?.headline),
      title: GoogleFonts.ruthie(textStyle: textTheme?.title),
      subhead: GoogleFonts.ruthie(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ruthie(textStyle: textTheme?.body2),
      body1: GoogleFonts.ruthie(textStyle: textTheme?.body1),
      caption: GoogleFonts.ruthie(textStyle: textTheme?.caption),
      button: GoogleFonts.ruthie(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ruthie(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ruthie(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Rye font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rye
  static TextStyle rye({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/rye/v7/r05XGLJT86YDFpTsXOqx4w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Rye',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Rye font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Rye
  static TextTheme ryeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.rye(textStyle: textTheme?.display4),
      display3: GoogleFonts.rye(textStyle: textTheme?.display3),
      display2: GoogleFonts.rye(textStyle: textTheme?.display2),
      display1: GoogleFonts.rye(textStyle: textTheme?.display1),
      headline: GoogleFonts.rye(textStyle: textTheme?.headline),
      title: GoogleFonts.rye(textStyle: textTheme?.title),
      subhead: GoogleFonts.rye(textStyle: textTheme?.subhead),
      body2: GoogleFonts.rye(textStyle: textTheme?.body2),
      body1: GoogleFonts.rye(textStyle: textTheme?.body1),
      caption: GoogleFonts.rye(textStyle: textTheme?.caption),
      button: GoogleFonts.rye(textStyle: textTheme?.button),
      subtitle: GoogleFonts.rye(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.rye(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sacramento font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sacramento
  static TextStyle sacramento({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sacramento/v7/buEzpo6gcdjy0EiZMBUG0CoV_NxLeiw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sacramento',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sacramento font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sacramento
  static TextTheme sacramentoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sacramento(textStyle: textTheme?.display4),
      display3: GoogleFonts.sacramento(textStyle: textTheme?.display3),
      display2: GoogleFonts.sacramento(textStyle: textTheme?.display2),
      display1: GoogleFonts.sacramento(textStyle: textTheme?.display1),
      headline: GoogleFonts.sacramento(textStyle: textTheme?.headline),
      title: GoogleFonts.sacramento(textStyle: textTheme?.title),
      subhead: GoogleFonts.sacramento(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sacramento(textStyle: textTheme?.body2),
      body1: GoogleFonts.sacramento(textStyle: textTheme?.body1),
      caption: GoogleFonts.sacramento(textStyle: textTheme?.caption),
      button: GoogleFonts.sacramento(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sacramento(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sacramento(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sahitya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sahitya
  static TextStyle sahitya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sahitya/v4/6qLAKZkOuhnuqlJAaScFPywEDnI.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sahitya/v4/6qLFKZkOuhnuqlJAUZsqGyQvEnvSexI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sahitya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sahitya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sahitya
  static TextTheme sahityaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sahitya(textStyle: textTheme?.display4),
      display3: GoogleFonts.sahitya(textStyle: textTheme?.display3),
      display2: GoogleFonts.sahitya(textStyle: textTheme?.display2),
      display1: GoogleFonts.sahitya(textStyle: textTheme?.display1),
      headline: GoogleFonts.sahitya(textStyle: textTheme?.headline),
      title: GoogleFonts.sahitya(textStyle: textTheme?.title),
      subhead: GoogleFonts.sahitya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sahitya(textStyle: textTheme?.body2),
      body1: GoogleFonts.sahitya(textStyle: textTheme?.body1),
      caption: GoogleFonts.sahitya(textStyle: textTheme?.caption),
      button: GoogleFonts.sahitya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sahitya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sahitya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sail font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sail
  static TextStyle sail({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sail/v10/DPEjYwiBxwYJFBTDADYAbvw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sail',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sail font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sail
  static TextTheme sailTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sail(textStyle: textTheme?.display4),
      display3: GoogleFonts.sail(textStyle: textTheme?.display3),
      display2: GoogleFonts.sail(textStyle: textTheme?.display2),
      display1: GoogleFonts.sail(textStyle: textTheme?.display1),
      headline: GoogleFonts.sail(textStyle: textTheme?.headline),
      title: GoogleFonts.sail(textStyle: textTheme?.title),
      subhead: GoogleFonts.sail(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sail(textStyle: textTheme?.body2),
      body1: GoogleFonts.sail(textStyle: textTheme?.body1),
      caption: GoogleFonts.sail(textStyle: textTheme?.caption),
      button: GoogleFonts.sail(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sail(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sail(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Saira font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira
  static TextStyle saira({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/saira/v4/mem-Ya2wxmKQyNFETZY_VrUfTck.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/saira/v4/mem9Ya2wxmKQyNHobLYVeLkWVNBt.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/saira/v4/mem9Ya2wxmKQyNGMb7YVeLkWVNBt.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/saira/v4/memwYa2wxmKQyOkgR5IdU6Uf.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/saira/v4/mem9Ya2wxmKQyNHUbrYVeLkWVNBt.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/saira/v4/mem9Ya2wxmKQyNH4abYVeLkWVNBt.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/saira/v4/mem9Ya2wxmKQyNGcaLYVeLkWVNBt.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/saira/v4/mem9Ya2wxmKQyNGAa7YVeLkWVNBt.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/saira/v4/mem9Ya2wxmKQyNGkarYVeLkWVNBt.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Saira',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Saira font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira
  static TextTheme sairaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.saira(textStyle: textTheme?.display4),
      display3: GoogleFonts.saira(textStyle: textTheme?.display3),
      display2: GoogleFonts.saira(textStyle: textTheme?.display2),
      display1: GoogleFonts.saira(textStyle: textTheme?.display1),
      headline: GoogleFonts.saira(textStyle: textTheme?.headline),
      title: GoogleFonts.saira(textStyle: textTheme?.title),
      subhead: GoogleFonts.saira(textStyle: textTheme?.subhead),
      body2: GoogleFonts.saira(textStyle: textTheme?.body2),
      body1: GoogleFonts.saira(textStyle: textTheme?.body1),
      caption: GoogleFonts.saira(textStyle: textTheme?.caption),
      button: GoogleFonts.saira(textStyle: textTheme?.button),
      subtitle: GoogleFonts.saira(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.saira(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Saira Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Condensed
  static TextStyle sairaCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJRMQgErUN8XuHNEtX81i9TmEkrnwetA2omSrzS8.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJRLQgErUN8XuHNEtX81i9TmEkrnbcpg8Keepi2lHw.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJRLQgErUN8XuHNEtX81i9TmEkrnCclg8Keepi2lHw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJROQgErUN8XuHNEtX81i9TmEkrfpeFE-IyCrw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJRLQgErUN8XuHNEtX81i9TmEkrnUchg8Keepi2lHw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJRLQgErUN8XuHNEtX81i9TmEkrnfc9g8Keepi2lHw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJRLQgErUN8XuHNEtX81i9TmEkrnGc5g8Keepi2lHw.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJRLQgErUN8XuHNEtX81i9TmEkrnBc1g8Keepi2lHw.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/sairacondensed/v5/EJRLQgErUN8XuHNEtX81i9TmEkrnIcxg8Keepi2lHw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SairaCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Saira Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Condensed
  static TextTheme sairaCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sairaCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.sairaCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.sairaCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.sairaCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.sairaCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.sairaCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.sairaCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sairaCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.sairaCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.sairaCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.sairaCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sairaCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sairaCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Saira Extra Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Extra+Condensed
  static TextStyle sairaExtraCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFsOHYr-vcC7h8MklGBkrvmUG9rbpkisrTri0jx9i5ss3a3.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFvOHYr-vcC7h8MklGBkrvmUG9rbpkisrTrJ2nR3ABgum-uoQ.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFvOHYr-vcC7h8MklGBkrvmUG9rbpkisrTrQ2rR3ABgum-uoQ.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFiOHYr-vcC7h8MklGBkrvmUG9rbpkisrTT70L11Ct8sw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFvOHYr-vcC7h8MklGBkrvmUG9rbpkisrTrG2vR3ABgum-uoQ.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFvOHYr-vcC7h8MklGBkrvmUG9rbpkisrTrN2zR3ABgum-uoQ.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFvOHYr-vcC7h8MklGBkrvmUG9rbpkisrTrU23R3ABgum-uoQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFvOHYr-vcC7h8MklGBkrvmUG9rbpkisrTrT27R3ABgum-uoQ.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/sairaextracondensed/v5/-nFvOHYr-vcC7h8MklGBkrvmUG9rbpkisrTra2_R3ABgum-uoQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SairaExtraCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Saira Extra Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Extra+Condensed
  static TextTheme sairaExtraCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sairaExtraCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Saira Semi Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Semi+Condensed
  static TextStyle sairaSemiCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MN6c-2-nnJkHxyCjRcnMHcWVWV1cWRRXdvaOM8rXT-8V8.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MM6c-2-nnJkHxyCjRcnMHcWVWV1cWRRXfDScMWg3j36Ebz.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MM6c-2-nnJkHxyCjRcnMHcWVWV1cWRRXenSsMWg3j36Ebz.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MD6c-2-nnJkHxyCjRcnMHcWVWV1cWRRU8LYuceqGT-.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MM6c-2-nnJkHxyCjRcnMHcWVWV1cWRRXf_S8MWg3j36Ebz.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MM6c-2-nnJkHxyCjRcnMHcWVWV1cWRRXfTTMMWg3j36Ebz.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MM6c-2-nnJkHxyCjRcnMHcWVWV1cWRRXe3TcMWg3j36Ebz.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MM6c-2-nnJkHxyCjRcnMHcWVWV1cWRRXerTsMWg3j36Ebz.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/sairasemicondensed/v5/U9MM6c-2-nnJkHxyCjRcnMHcWVWV1cWRRXePT8MWg3j36Ebz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SairaSemiCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Saira Semi Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Semi+Condensed
  static TextTheme sairaSemiCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sairaSemiCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Saira Stencil One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Stencil+One
  static TextStyle sairaStencilOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sairastencilone/v1/SLXSc03I6HkvZGJ1GvvipLoYSTEL9AsMawif2YQ2.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SairaStencilOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Saira Stencil One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Saira+Stencil+One
  static TextTheme sairaStencilOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sairaStencilOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.sairaStencilOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.sairaStencilOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.sairaStencilOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.sairaStencilOne(textStyle: textTheme?.headline),
      title: GoogleFonts.sairaStencilOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.sairaStencilOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sairaStencilOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.sairaStencilOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.sairaStencilOne(textStyle: textTheme?.caption),
      button: GoogleFonts.sairaStencilOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sairaStencilOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sairaStencilOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Salsa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Salsa
  static TextStyle salsa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/salsa/v9/gNMKW3FiRpKj-imY8ncKEZez.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Salsa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Salsa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Salsa
  static TextTheme salsaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.salsa(textStyle: textTheme?.display4),
      display3: GoogleFonts.salsa(textStyle: textTheme?.display3),
      display2: GoogleFonts.salsa(textStyle: textTheme?.display2),
      display1: GoogleFonts.salsa(textStyle: textTheme?.display1),
      headline: GoogleFonts.salsa(textStyle: textTheme?.headline),
      title: GoogleFonts.salsa(textStyle: textTheme?.title),
      subhead: GoogleFonts.salsa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.salsa(textStyle: textTheme?.body2),
      body1: GoogleFonts.salsa(textStyle: textTheme?.body1),
      caption: GoogleFonts.salsa(textStyle: textTheme?.caption),
      button: GoogleFonts.salsa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.salsa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.salsa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sanchez font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sanchez
  static TextStyle sanchez({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sanchez/v7/Ycm2sZJORluHnXbITm5b_BwE1l0.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/sanchez/v7/Ycm0sZJORluHnXbIfmxR-D4Bxl3gkw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sanchez',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sanchez font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sanchez
  static TextTheme sanchezTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sanchez(textStyle: textTheme?.display4),
      display3: GoogleFonts.sanchez(textStyle: textTheme?.display3),
      display2: GoogleFonts.sanchez(textStyle: textTheme?.display2),
      display1: GoogleFonts.sanchez(textStyle: textTheme?.display1),
      headline: GoogleFonts.sanchez(textStyle: textTheme?.headline),
      title: GoogleFonts.sanchez(textStyle: textTheme?.title),
      subhead: GoogleFonts.sanchez(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sanchez(textStyle: textTheme?.body2),
      body1: GoogleFonts.sanchez(textStyle: textTheme?.body1),
      caption: GoogleFonts.sanchez(textStyle: textTheme?.caption),
      button: GoogleFonts.sanchez(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sanchez(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sanchez(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sancreek font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sancreek
  static TextStyle sancreek({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sancreek/v10/pxiHypAnsdxUm159X7D-XV9NEe-K.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sancreek',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sancreek font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sancreek
  static TextTheme sancreekTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sancreek(textStyle: textTheme?.display4),
      display3: GoogleFonts.sancreek(textStyle: textTheme?.display3),
      display2: GoogleFonts.sancreek(textStyle: textTheme?.display2),
      display1: GoogleFonts.sancreek(textStyle: textTheme?.display1),
      headline: GoogleFonts.sancreek(textStyle: textTheme?.headline),
      title: GoogleFonts.sancreek(textStyle: textTheme?.title),
      subhead: GoogleFonts.sancreek(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sancreek(textStyle: textTheme?.body2),
      body1: GoogleFonts.sancreek(textStyle: textTheme?.body1),
      caption: GoogleFonts.sancreek(textStyle: textTheme?.caption),
      button: GoogleFonts.sancreek(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sancreek(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sancreek(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sansita font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sansita
  static TextStyle sansita({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sansita/v4/QldONTRRphEb_-V7HBm7TXFf3qw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/sansita/v4/QldMNTRRphEb_-V7LBuxSVNazqx2xg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sansita/v4/QldLNTRRphEb_-V7JKWUaXl0wqVv3_g.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/sansita/v4/QldJNTRRphEb_-V7LBuJ9Xx-xodqz_joDQ.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/sansita/v4/QldLNTRRphEb_-V7JLmXaXl0wqVv3_g.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/sansita/v4/QldJNTRRphEb_-V7LBuJ6X9-xodqz_joDQ.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/sansita/v4/QldLNTRRphEb_-V7JJ2WaXl0wqVv3_g.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/sansita/v4/QldJNTRRphEb_-V7LBuJzX5-xodqz_joDQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sansita',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sansita font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sansita
  static TextTheme sansitaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sansita(textStyle: textTheme?.display4),
      display3: GoogleFonts.sansita(textStyle: textTheme?.display3),
      display2: GoogleFonts.sansita(textStyle: textTheme?.display2),
      display1: GoogleFonts.sansita(textStyle: textTheme?.display1),
      headline: GoogleFonts.sansita(textStyle: textTheme?.headline),
      title: GoogleFonts.sansita(textStyle: textTheme?.title),
      subhead: GoogleFonts.sansita(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sansita(textStyle: textTheme?.body2),
      body1: GoogleFonts.sansita(textStyle: textTheme?.body1),
      caption: GoogleFonts.sansita(textStyle: textTheme?.caption),
      button: GoogleFonts.sansita(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sansita(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sansita(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sarabun font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarabun
  static TextStyle sarabun({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVhJx26TKEr37c9YHZJmnYI5gnOpg.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVnJx26TKEr37c9aBBx_nwMxAzephhN.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVmJx26TKEr37c9YNpoulwm6gDXvwE.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVkJx26TKEr37c9aBBxUl0s7iLSrwFUlw.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVmJx26TKEr37c9YL5rulwm6gDXvwE.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVkJx26TKEr37c9aBBxNl4s7iLSrwFUlw.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVjJx26TKEr37c9WBJDnlQN9gk.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVhJx26TKEr37c9aBBJmnYI5gnOpg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVmJx26TKEr37c9YOZqulwm6gDXvwE.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVkJx26TKEr37c9aBBxbl8s7iLSrwFUlw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVmJx26TKEr37c9YMptulwm6gDXvwE.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVkJx26TKEr37c9aBBxQlgs7iLSrwFUlw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVmJx26TKEr37c9YK5sulwm6gDXvwE.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVkJx26TKEr37c9aBBxJlks7iLSrwFUlw.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVmJx26TKEr37c9YLJvulwm6gDXvwE.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/sarabun/v7/DtVkJx26TKEr37c9aBBxOlos7iLSrwFUlw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sarabun',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sarabun font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarabun
  static TextTheme sarabunTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sarabun(textStyle: textTheme?.display4),
      display3: GoogleFonts.sarabun(textStyle: textTheme?.display3),
      display2: GoogleFonts.sarabun(textStyle: textTheme?.display2),
      display1: GoogleFonts.sarabun(textStyle: textTheme?.display1),
      headline: GoogleFonts.sarabun(textStyle: textTheme?.headline),
      title: GoogleFonts.sarabun(textStyle: textTheme?.title),
      subhead: GoogleFonts.sarabun(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sarabun(textStyle: textTheme?.body2),
      body1: GoogleFonts.sarabun(textStyle: textTheme?.body1),
      caption: GoogleFonts.sarabun(textStyle: textTheme?.caption),
      button: GoogleFonts.sarabun(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sarabun(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sarabun(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sarala font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarala
  static TextStyle sarala({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sarala/v4/uK_y4riEZv4o1w9RCh0TMv6EXw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sarala/v4/uK_x4riEZv4o1w9ptjI3OtWYVkMpXA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sarala',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sarala font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarala
  static TextTheme saralaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sarala(textStyle: textTheme?.display4),
      display3: GoogleFonts.sarala(textStyle: textTheme?.display3),
      display2: GoogleFonts.sarala(textStyle: textTheme?.display2),
      display1: GoogleFonts.sarala(textStyle: textTheme?.display1),
      headline: GoogleFonts.sarala(textStyle: textTheme?.headline),
      title: GoogleFonts.sarala(textStyle: textTheme?.title),
      subhead: GoogleFonts.sarala(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sarala(textStyle: textTheme?.body2),
      body1: GoogleFonts.sarala(textStyle: textTheme?.body1),
      caption: GoogleFonts.sarala(textStyle: textTheme?.caption),
      button: GoogleFonts.sarala(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sarala(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sarala(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sarina font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarina
  static TextStyle sarina({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sarina/v8/-F6wfjF3ITQwasLhLkDUriBQxw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sarina',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sarina font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarina
  static TextTheme sarinaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sarina(textStyle: textTheme?.display4),
      display3: GoogleFonts.sarina(textStyle: textTheme?.display3),
      display2: GoogleFonts.sarina(textStyle: textTheme?.display2),
      display1: GoogleFonts.sarina(textStyle: textTheme?.display1),
      headline: GoogleFonts.sarina(textStyle: textTheme?.headline),
      title: GoogleFonts.sarina(textStyle: textTheme?.title),
      subhead: GoogleFonts.sarina(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sarina(textStyle: textTheme?.body2),
      body1: GoogleFonts.sarina(textStyle: textTheme?.body1),
      caption: GoogleFonts.sarina(textStyle: textTheme?.caption),
      button: GoogleFonts.sarina(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sarina(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sarina(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sarpanch font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarpanch
  static TextStyle sarpanch({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sarpanch/v5/hESy6Xt4NCpRuk6Pzh2ARIrX_20n.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/sarpanch/v5/hES16Xt4NCpRuk6PziV0ba7f1HEuRHkM.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/sarpanch/v5/hES16Xt4NCpRuk6PziVYaq7f1HEuRHkM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sarpanch/v5/hES16Xt4NCpRuk6PziU8a67f1HEuRHkM.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/sarpanch/v5/hES16Xt4NCpRuk6PziUgaK7f1HEuRHkM.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/sarpanch/v5/hES16Xt4NCpRuk6PziUEaa7f1HEuRHkM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sarpanch',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sarpanch font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sarpanch
  static TextTheme sarpanchTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sarpanch(textStyle: textTheme?.display4),
      display3: GoogleFonts.sarpanch(textStyle: textTheme?.display3),
      display2: GoogleFonts.sarpanch(textStyle: textTheme?.display2),
      display1: GoogleFonts.sarpanch(textStyle: textTheme?.display1),
      headline: GoogleFonts.sarpanch(textStyle: textTheme?.headline),
      title: GoogleFonts.sarpanch(textStyle: textTheme?.title),
      subhead: GoogleFonts.sarpanch(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sarpanch(textStyle: textTheme?.body2),
      body1: GoogleFonts.sarpanch(textStyle: textTheme?.body1),
      caption: GoogleFonts.sarpanch(textStyle: textTheme?.caption),
      button: GoogleFonts.sarpanch(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sarpanch(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sarpanch(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Satisfy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Satisfy
  static TextStyle satisfy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/satisfy/v10/rP2Hp2yn6lkG50LoOZSCHBeHFl0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Satisfy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Satisfy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Satisfy
  static TextTheme satisfyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.satisfy(textStyle: textTheme?.display4),
      display3: GoogleFonts.satisfy(textStyle: textTheme?.display3),
      display2: GoogleFonts.satisfy(textStyle: textTheme?.display2),
      display1: GoogleFonts.satisfy(textStyle: textTheme?.display1),
      headline: GoogleFonts.satisfy(textStyle: textTheme?.headline),
      title: GoogleFonts.satisfy(textStyle: textTheme?.title),
      subhead: GoogleFonts.satisfy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.satisfy(textStyle: textTheme?.body2),
      body1: GoogleFonts.satisfy(textStyle: textTheme?.body1),
      caption: GoogleFonts.satisfy(textStyle: textTheme?.caption),
      button: GoogleFonts.satisfy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.satisfy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.satisfy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sawarabi Gothic font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sawarabi+Gothic
  static TextStyle sawarabiGothic({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sawarabigothic/v8/x3d4ckfVaqqa-BEj-I9mE65u3k3NBSk3E2YljQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SawarabiGothic',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sawarabi Gothic font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sawarabi+Gothic
  static TextTheme sawarabiGothicTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sawarabiGothic(textStyle: textTheme?.display4),
      display3: GoogleFonts.sawarabiGothic(textStyle: textTheme?.display3),
      display2: GoogleFonts.sawarabiGothic(textStyle: textTheme?.display2),
      display1: GoogleFonts.sawarabiGothic(textStyle: textTheme?.display1),
      headline: GoogleFonts.sawarabiGothic(textStyle: textTheme?.headline),
      title: GoogleFonts.sawarabiGothic(textStyle: textTheme?.title),
      subhead: GoogleFonts.sawarabiGothic(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sawarabiGothic(textStyle: textTheme?.body2),
      body1: GoogleFonts.sawarabiGothic(textStyle: textTheme?.body1),
      caption: GoogleFonts.sawarabiGothic(textStyle: textTheme?.caption),
      button: GoogleFonts.sawarabiGothic(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sawarabiGothic(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sawarabiGothic(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sawarabi Mincho font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sawarabi+Mincho
  static TextStyle sawarabiMincho({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sawarabimincho/v10/8QIRdiDaitzr7brc8ahpxt6GcIJTLahP46UDUw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SawarabiMincho',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sawarabi Mincho font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sawarabi+Mincho
  static TextTheme sawarabiMinchoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sawarabiMincho(textStyle: textTheme?.display4),
      display3: GoogleFonts.sawarabiMincho(textStyle: textTheme?.display3),
      display2: GoogleFonts.sawarabiMincho(textStyle: textTheme?.display2),
      display1: GoogleFonts.sawarabiMincho(textStyle: textTheme?.display1),
      headline: GoogleFonts.sawarabiMincho(textStyle: textTheme?.headline),
      title: GoogleFonts.sawarabiMincho(textStyle: textTheme?.title),
      subhead: GoogleFonts.sawarabiMincho(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sawarabiMincho(textStyle: textTheme?.body2),
      body1: GoogleFonts.sawarabiMincho(textStyle: textTheme?.body1),
      caption: GoogleFonts.sawarabiMincho(textStyle: textTheme?.caption),
      button: GoogleFonts.sawarabiMincho(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sawarabiMincho(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sawarabiMincho(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Scada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scada
  static TextStyle scada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/scada/v8/RLpxK5Pv5qumeWJoxzUobkvv.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/scada/v8/RLp_K5Pv5qumeVJqzTEKa1vvffg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/scada/v8/RLp8K5Pv5qumeVrU6BEgRVfmZOE5.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/scada/v8/RLp6K5Pv5qumeVJq9Y0lT1PEYfE5p6g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Scada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Scada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scada
  static TextTheme scadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.scada(textStyle: textTheme?.display4),
      display3: GoogleFonts.scada(textStyle: textTheme?.display3),
      display2: GoogleFonts.scada(textStyle: textTheme?.display2),
      display1: GoogleFonts.scada(textStyle: textTheme?.display1),
      headline: GoogleFonts.scada(textStyle: textTheme?.headline),
      title: GoogleFonts.scada(textStyle: textTheme?.title),
      subhead: GoogleFonts.scada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.scada(textStyle: textTheme?.body2),
      body1: GoogleFonts.scada(textStyle: textTheme?.body1),
      caption: GoogleFonts.scada(textStyle: textTheme?.caption),
      button: GoogleFonts.scada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.scada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.scada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Scheherazade font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scheherazade
  static TextStyle scheherazade({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/scheherazade/v17/YA9Ur0yF4ETZN60keViq1kQgt5OohvbJ9A.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/scheherazade/v17/YA9Lr0yF4ETZN60keViq1kQYC7yMjt3V_dB0Yw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Scheherazade',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Scheherazade font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scheherazade
  static TextTheme scheherazadeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.scheherazade(textStyle: textTheme?.display4),
      display3: GoogleFonts.scheherazade(textStyle: textTheme?.display3),
      display2: GoogleFonts.scheherazade(textStyle: textTheme?.display2),
      display1: GoogleFonts.scheherazade(textStyle: textTheme?.display1),
      headline: GoogleFonts.scheherazade(textStyle: textTheme?.headline),
      title: GoogleFonts.scheherazade(textStyle: textTheme?.title),
      subhead: GoogleFonts.scheherazade(textStyle: textTheme?.subhead),
      body2: GoogleFonts.scheherazade(textStyle: textTheme?.body2),
      body1: GoogleFonts.scheherazade(textStyle: textTheme?.body1),
      caption: GoogleFonts.scheherazade(textStyle: textTheme?.caption),
      button: GoogleFonts.scheherazade(textStyle: textTheme?.button),
      subtitle: GoogleFonts.scheherazade(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.scheherazade(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Schoolbell font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Schoolbell
  static TextStyle schoolbell({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/schoolbell/v10/92zQtBZWOrcgoe-fgnJIVxIQ6mRqfiQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Schoolbell',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Schoolbell font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Schoolbell
  static TextTheme schoolbellTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.schoolbell(textStyle: textTheme?.display4),
      display3: GoogleFonts.schoolbell(textStyle: textTheme?.display3),
      display2: GoogleFonts.schoolbell(textStyle: textTheme?.display2),
      display1: GoogleFonts.schoolbell(textStyle: textTheme?.display1),
      headline: GoogleFonts.schoolbell(textStyle: textTheme?.headline),
      title: GoogleFonts.schoolbell(textStyle: textTheme?.title),
      subhead: GoogleFonts.schoolbell(textStyle: textTheme?.subhead),
      body2: GoogleFonts.schoolbell(textStyle: textTheme?.body2),
      body1: GoogleFonts.schoolbell(textStyle: textTheme?.body1),
      caption: GoogleFonts.schoolbell(textStyle: textTheme?.caption),
      button: GoogleFonts.schoolbell(textStyle: textTheme?.button),
      subtitle: GoogleFonts.schoolbell(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.schoolbell(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Scope One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scope+One
  static TextStyle scopeOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/scopeone/v6/WBLnrEXKYFlGHrOKmGD1W0_MJMGxiQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ScopeOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Scope One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Scope+One
  static TextTheme scopeOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.scopeOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.scopeOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.scopeOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.scopeOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.scopeOne(textStyle: textTheme?.headline),
      title: GoogleFonts.scopeOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.scopeOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.scopeOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.scopeOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.scopeOne(textStyle: textTheme?.caption),
      button: GoogleFonts.scopeOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.scopeOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.scopeOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Seaweed Script font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Seaweed+Script
  static TextStyle seaweedScript({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/seaweedscript/v7/bx6cNx6Tne2pxOATYE8C_Rsoe0WJ-KcGVbLW.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SeaweedScript',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Seaweed Script font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Seaweed+Script
  static TextTheme seaweedScriptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.seaweedScript(textStyle: textTheme?.display4),
      display3: GoogleFonts.seaweedScript(textStyle: textTheme?.display3),
      display2: GoogleFonts.seaweedScript(textStyle: textTheme?.display2),
      display1: GoogleFonts.seaweedScript(textStyle: textTheme?.display1),
      headline: GoogleFonts.seaweedScript(textStyle: textTheme?.headline),
      title: GoogleFonts.seaweedScript(textStyle: textTheme?.title),
      subhead: GoogleFonts.seaweedScript(textStyle: textTheme?.subhead),
      body2: GoogleFonts.seaweedScript(textStyle: textTheme?.body2),
      body1: GoogleFonts.seaweedScript(textStyle: textTheme?.body1),
      caption: GoogleFonts.seaweedScript(textStyle: textTheme?.caption),
      button: GoogleFonts.seaweedScript(textStyle: textTheme?.button),
      subtitle: GoogleFonts.seaweedScript(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.seaweedScript(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Secular One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Secular+One
  static TextStyle secularOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/secularone/v4/8QINdiTajsj_87rMuMdKypDlMul7LJpK.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SecularOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Secular One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Secular+One
  static TextTheme secularOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.secularOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.secularOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.secularOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.secularOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.secularOne(textStyle: textTheme?.headline),
      title: GoogleFonts.secularOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.secularOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.secularOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.secularOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.secularOne(textStyle: textTheme?.caption),
      button: GoogleFonts.secularOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.secularOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.secularOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sedgwick Ave font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sedgwick+Ave
  static TextStyle sedgwickAve({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sedgwickave/v5/uK_04rKEYuguzAcSYRdWTJq8Xmg1Vcf5JA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SedgwickAve',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sedgwick Ave font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sedgwick+Ave
  static TextTheme sedgwickAveTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sedgwickAve(textStyle: textTheme?.display4),
      display3: GoogleFonts.sedgwickAve(textStyle: textTheme?.display3),
      display2: GoogleFonts.sedgwickAve(textStyle: textTheme?.display2),
      display1: GoogleFonts.sedgwickAve(textStyle: textTheme?.display1),
      headline: GoogleFonts.sedgwickAve(textStyle: textTheme?.headline),
      title: GoogleFonts.sedgwickAve(textStyle: textTheme?.title),
      subhead: GoogleFonts.sedgwickAve(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sedgwickAve(textStyle: textTheme?.body2),
      body1: GoogleFonts.sedgwickAve(textStyle: textTheme?.body1),
      caption: GoogleFonts.sedgwickAve(textStyle: textTheme?.caption),
      button: GoogleFonts.sedgwickAve(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sedgwickAve(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sedgwickAve(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sedgwick Ave Display font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sedgwick+Ave+Display
  static TextStyle sedgwickAveDisplay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sedgwickavedisplay/v5/xfuu0XPgU3jZPUoUo3ScvmPi-NapQ8OxM2czd-YnOzUD.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SedgwickAveDisplay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sedgwick Ave Display font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sedgwick+Ave+Display
  static TextTheme sedgwickAveDisplayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.display4),
      display3: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.display3),
      display2: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.display2),
      display1: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.display1),
      headline: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.headline),
      title: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.title),
      subhead: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.body2),
      body1: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.body1),
      caption: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.caption),
      button: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sedgwickAveDisplay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sevillana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sevillana
  static TextStyle sevillana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sevillana/v8/KFOlCnWFscmDt1Bfiy1vAx05IsDqlA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sevillana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sevillana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sevillana
  static TextTheme sevillanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sevillana(textStyle: textTheme?.display4),
      display3: GoogleFonts.sevillana(textStyle: textTheme?.display3),
      display2: GoogleFonts.sevillana(textStyle: textTheme?.display2),
      display1: GoogleFonts.sevillana(textStyle: textTheme?.display1),
      headline: GoogleFonts.sevillana(textStyle: textTheme?.headline),
      title: GoogleFonts.sevillana(textStyle: textTheme?.title),
      subhead: GoogleFonts.sevillana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sevillana(textStyle: textTheme?.body2),
      body1: GoogleFonts.sevillana(textStyle: textTheme?.body1),
      caption: GoogleFonts.sevillana(textStyle: textTheme?.caption),
      button: GoogleFonts.sevillana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sevillana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sevillana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Seymour One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Seymour+One
  static TextStyle seymourOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/seymourone/v7/4iCp6Khla9xbjQpoWGGd0myIPYBvgpUI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SeymourOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Seymour One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Seymour+One
  static TextTheme seymourOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.seymourOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.seymourOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.seymourOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.seymourOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.seymourOne(textStyle: textTheme?.headline),
      title: GoogleFonts.seymourOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.seymourOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.seymourOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.seymourOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.seymourOne(textStyle: textTheme?.caption),
      button: GoogleFonts.seymourOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.seymourOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.seymourOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shadows Into Light font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shadows+Into+Light
  static TextStyle shadowsIntoLight({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/shadowsintolight/v9/UqyNK9UOIntux_czAvDQx_ZcHqZXBNQDcsr4xzSMYA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShadowsIntoLight',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shadows Into Light font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shadows+Into+Light
  static TextTheme shadowsIntoLightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.display4),
      display3: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.display3),
      display2: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.display2),
      display1: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.display1),
      headline: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.headline),
      title: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.title),
      subhead: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.body2),
      body1: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.body1),
      caption: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.caption),
      button: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shadowsIntoLight(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shadows Into Light Two font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shadows+Into+Light+Two
  static TextStyle shadowsIntoLightTwo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/shadowsintolighttwo/v7/4iC86LVlZsRSjQhpWGedwyOoW-0A6_kpsyNmlAvNGLNnIF0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShadowsIntoLightTwo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shadows Into Light Two font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shadows+Into+Light+Two
  static TextTheme shadowsIntoLightTwoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.display4),
      display3: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.display3),
      display2: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.display2),
      display1: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.display1),
      headline: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.headline),
      title: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.title),
      subhead: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.body2),
      body1: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.body1),
      caption: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.caption),
      button: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shadowsIntoLightTwo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shanti font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shanti
  static TextStyle shanti({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/shanti/v11/t5thIREMM4uSDgzgU0ezpKfwzA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Shanti',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shanti font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shanti
  static TextTheme shantiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shanti(textStyle: textTheme?.display4),
      display3: GoogleFonts.shanti(textStyle: textTheme?.display3),
      display2: GoogleFonts.shanti(textStyle: textTheme?.display2),
      display1: GoogleFonts.shanti(textStyle: textTheme?.display1),
      headline: GoogleFonts.shanti(textStyle: textTheme?.headline),
      title: GoogleFonts.shanti(textStyle: textTheme?.title),
      subhead: GoogleFonts.shanti(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shanti(textStyle: textTheme?.body2),
      body1: GoogleFonts.shanti(textStyle: textTheme?.body1),
      caption: GoogleFonts.shanti(textStyle: textTheme?.caption),
      button: GoogleFonts.shanti(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shanti(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shanti(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Share font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share
  static TextStyle share({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/share/v10/i7dEIFliZjKNF5VNHLq2cV5d.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/share/v10/i7dKIFliZjKNF6VPFr6UdE5dWFM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/share/v10/i7dJIFliZjKNF63xM56-WkJUQUq7.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/share/v10/i7dPIFliZjKNF6VPLgK7UEZ2RFq7AwU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Share',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Share font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share
  static TextTheme shareTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.share(textStyle: textTheme?.display4),
      display3: GoogleFonts.share(textStyle: textTheme?.display3),
      display2: GoogleFonts.share(textStyle: textTheme?.display2),
      display1: GoogleFonts.share(textStyle: textTheme?.display1),
      headline: GoogleFonts.share(textStyle: textTheme?.headline),
      title: GoogleFonts.share(textStyle: textTheme?.title),
      subhead: GoogleFonts.share(textStyle: textTheme?.subhead),
      body2: GoogleFonts.share(textStyle: textTheme?.body2),
      body1: GoogleFonts.share(textStyle: textTheme?.body1),
      caption: GoogleFonts.share(textStyle: textTheme?.caption),
      button: GoogleFonts.share(textStyle: textTheme?.button),
      subtitle: GoogleFonts.share(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.share(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Share Tech font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share+Tech
  static TextStyle shareTech({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sharetech/v9/7cHtv4Uyi5K0OeZ7bohUwHoDmTcibrA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShareTech',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Share Tech font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share+Tech
  static TextTheme shareTechTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shareTech(textStyle: textTheme?.display4),
      display3: GoogleFonts.shareTech(textStyle: textTheme?.display3),
      display2: GoogleFonts.shareTech(textStyle: textTheme?.display2),
      display1: GoogleFonts.shareTech(textStyle: textTheme?.display1),
      headline: GoogleFonts.shareTech(textStyle: textTheme?.headline),
      title: GoogleFonts.shareTech(textStyle: textTheme?.title),
      subhead: GoogleFonts.shareTech(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shareTech(textStyle: textTheme?.body2),
      body1: GoogleFonts.shareTech(textStyle: textTheme?.body1),
      caption: GoogleFonts.shareTech(textStyle: textTheme?.caption),
      button: GoogleFonts.shareTech(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shareTech(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shareTech(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Share Tech Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share+Tech+Mono
  static TextStyle shareTechMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sharetechmono/v9/J7aHnp1uDWRBEqV98dVQztYldFc7pAsEIc3Xew.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShareTechMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Share Tech Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Share+Tech+Mono
  static TextTheme shareTechMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shareTechMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.shareTechMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.shareTechMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.shareTechMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.shareTechMono(textStyle: textTheme?.headline),
      title: GoogleFonts.shareTechMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.shareTechMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shareTechMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.shareTechMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.shareTechMono(textStyle: textTheme?.caption),
      button: GoogleFonts.shareTechMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shareTechMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shareTechMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shojumaru font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shojumaru
  static TextStyle shojumaru({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/shojumaru/v7/rax_HiWfutkLLnaKCtlMBBJek0vA8A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Shojumaru',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shojumaru font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shojumaru
  static TextTheme shojumaruTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shojumaru(textStyle: textTheme?.display4),
      display3: GoogleFonts.shojumaru(textStyle: textTheme?.display3),
      display2: GoogleFonts.shojumaru(textStyle: textTheme?.display2),
      display1: GoogleFonts.shojumaru(textStyle: textTheme?.display1),
      headline: GoogleFonts.shojumaru(textStyle: textTheme?.headline),
      title: GoogleFonts.shojumaru(textStyle: textTheme?.title),
      subhead: GoogleFonts.shojumaru(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shojumaru(textStyle: textTheme?.body2),
      body1: GoogleFonts.shojumaru(textStyle: textTheme?.body1),
      caption: GoogleFonts.shojumaru(textStyle: textTheme?.caption),
      button: GoogleFonts.shojumaru(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shojumaru(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shojumaru(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Short Stack font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Short+Stack
  static TextStyle shortStack({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/shortstack/v9/bMrzmS2X6p0jZC6EcmPFX-SScX8D0nq6.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ShortStack',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Short Stack font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Short+Stack
  static TextTheme shortStackTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shortStack(textStyle: textTheme?.display4),
      display3: GoogleFonts.shortStack(textStyle: textTheme?.display3),
      display2: GoogleFonts.shortStack(textStyle: textTheme?.display2),
      display1: GoogleFonts.shortStack(textStyle: textTheme?.display1),
      headline: GoogleFonts.shortStack(textStyle: textTheme?.headline),
      title: GoogleFonts.shortStack(textStyle: textTheme?.title),
      subhead: GoogleFonts.shortStack(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shortStack(textStyle: textTheme?.body2),
      body1: GoogleFonts.shortStack(textStyle: textTheme?.body1),
      caption: GoogleFonts.shortStack(textStyle: textTheme?.caption),
      button: GoogleFonts.shortStack(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shortStack(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shortStack(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Shrikhand font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shrikhand
  static TextStyle shrikhand({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/shrikhand/v5/a8IbNovtLWfR7T7bMJwbBIiQ0zhMtA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Shrikhand',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Shrikhand font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Shrikhand
  static TextTheme shrikhandTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.shrikhand(textStyle: textTheme?.display4),
      display3: GoogleFonts.shrikhand(textStyle: textTheme?.display3),
      display2: GoogleFonts.shrikhand(textStyle: textTheme?.display2),
      display1: GoogleFonts.shrikhand(textStyle: textTheme?.display1),
      headline: GoogleFonts.shrikhand(textStyle: textTheme?.headline),
      title: GoogleFonts.shrikhand(textStyle: textTheme?.title),
      subhead: GoogleFonts.shrikhand(textStyle: textTheme?.subhead),
      body2: GoogleFonts.shrikhand(textStyle: textTheme?.body2),
      body1: GoogleFonts.shrikhand(textStyle: textTheme?.body1),
      caption: GoogleFonts.shrikhand(textStyle: textTheme?.caption),
      button: GoogleFonts.shrikhand(textStyle: textTheme?.button),
      subtitle: GoogleFonts.shrikhand(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.shrikhand(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Siemreap font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Siemreap
  static TextStyle siemreap({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/siemreap/v12/Gg82N5oFbgLvHAfNl2YbnA8DLXpe.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Siemreap',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Siemreap font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Siemreap
  static TextTheme siemreapTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.siemreap(textStyle: textTheme?.display4),
      display3: GoogleFonts.siemreap(textStyle: textTheme?.display3),
      display2: GoogleFonts.siemreap(textStyle: textTheme?.display2),
      display1: GoogleFonts.siemreap(textStyle: textTheme?.display1),
      headline: GoogleFonts.siemreap(textStyle: textTheme?.headline),
      title: GoogleFonts.siemreap(textStyle: textTheme?.title),
      subhead: GoogleFonts.siemreap(textStyle: textTheme?.subhead),
      body2: GoogleFonts.siemreap(textStyle: textTheme?.body2),
      body1: GoogleFonts.siemreap(textStyle: textTheme?.body1),
      caption: GoogleFonts.siemreap(textStyle: textTheme?.caption),
      button: GoogleFonts.siemreap(textStyle: textTheme?.button),
      subtitle: GoogleFonts.siemreap(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.siemreap(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sigmar One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sigmar+One
  static TextStyle sigmarOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sigmarone/v10/co3DmWZ8kjZuErj9Ta3dk6Pjp3Di8U0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SigmarOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sigmar One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sigmar+One
  static TextTheme sigmarOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sigmarOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.sigmarOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.sigmarOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.sigmarOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.sigmarOne(textStyle: textTheme?.headline),
      title: GoogleFonts.sigmarOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.sigmarOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sigmarOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.sigmarOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.sigmarOne(textStyle: textTheme?.caption),
      button: GoogleFonts.sigmarOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sigmarOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sigmarOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Signika font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Signika
  static TextStyle signika({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/signika/v10/vEFU2_JTCgwQ5ejvE_oEI3BDa0AdytM.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/signika/v10/vEFR2_JTCgwQ5ejvK1YsB3hod0k.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/signika/v10/vEFU2_JTCgwQ5ejvE44CI3BDa0AdytM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/signika/v10/vEFU2_JTCgwQ5ejvE-oDI3BDa0AdytM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Signika',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Signika font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Signika
  static TextTheme signikaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.signika(textStyle: textTheme?.display4),
      display3: GoogleFonts.signika(textStyle: textTheme?.display3),
      display2: GoogleFonts.signika(textStyle: textTheme?.display2),
      display1: GoogleFonts.signika(textStyle: textTheme?.display1),
      headline: GoogleFonts.signika(textStyle: textTheme?.headline),
      title: GoogleFonts.signika(textStyle: textTheme?.title),
      subhead: GoogleFonts.signika(textStyle: textTheme?.subhead),
      body2: GoogleFonts.signika(textStyle: textTheme?.body2),
      body1: GoogleFonts.signika(textStyle: textTheme?.body1),
      caption: GoogleFonts.signika(textStyle: textTheme?.caption),
      button: GoogleFonts.signika(textStyle: textTheme?.button),
      subtitle: GoogleFonts.signika(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.signika(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Signika Negative font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Signika+Negative
  static TextStyle signikaNegative({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/signikanegative/v10/E217_cfngu7HiRpPX3ZpNE4kY5zKal6DipHD6z_iXAs.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/signikanegative/v10/E218_cfngu7HiRpPX3ZpNE4kY5zKUvKrrpno9zY.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/signikanegative/v10/E217_cfngu7HiRpPX3ZpNE4kY5zKaiqFipHD6z_iXAs.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/signikanegative/v10/E217_cfngu7HiRpPX3ZpNE4kY5zKak6EipHD6z_iXAs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SignikaNegative',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Signika Negative font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Signika+Negative
  static TextTheme signikaNegativeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.signikaNegative(textStyle: textTheme?.display4),
      display3: GoogleFonts.signikaNegative(textStyle: textTheme?.display3),
      display2: GoogleFonts.signikaNegative(textStyle: textTheme?.display2),
      display1: GoogleFonts.signikaNegative(textStyle: textTheme?.display1),
      headline: GoogleFonts.signikaNegative(textStyle: textTheme?.headline),
      title: GoogleFonts.signikaNegative(textStyle: textTheme?.title),
      subhead: GoogleFonts.signikaNegative(textStyle: textTheme?.subhead),
      body2: GoogleFonts.signikaNegative(textStyle: textTheme?.body2),
      body1: GoogleFonts.signikaNegative(textStyle: textTheme?.body1),
      caption: GoogleFonts.signikaNegative(textStyle: textTheme?.caption),
      button: GoogleFonts.signikaNegative(textStyle: textTheme?.button),
      subtitle: GoogleFonts.signikaNegative(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.signikaNegative(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Simonetta font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Simonetta
  static TextStyle simonetta({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/simonetta/v10/x3dickHVYrCU5BU15c4BfPACvy_1BA.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/simonetta/v10/x3dkckHVYrCU5BU15c4xfvoGnSrlBBsy.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/simonetta/v10/x3dnckHVYrCU5BU15c45-N0mtwTpDQIrGg.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/simonetta/v10/x3d5ckHVYrCU5BU15c4xfsKCsA7tLwc7Gn88.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Simonetta',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Simonetta font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Simonetta
  static TextTheme simonettaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.simonetta(textStyle: textTheme?.display4),
      display3: GoogleFonts.simonetta(textStyle: textTheme?.display3),
      display2: GoogleFonts.simonetta(textStyle: textTheme?.display2),
      display1: GoogleFonts.simonetta(textStyle: textTheme?.display1),
      headline: GoogleFonts.simonetta(textStyle: textTheme?.headline),
      title: GoogleFonts.simonetta(textStyle: textTheme?.title),
      subhead: GoogleFonts.simonetta(textStyle: textTheme?.subhead),
      body2: GoogleFonts.simonetta(textStyle: textTheme?.body2),
      body1: GoogleFonts.simonetta(textStyle: textTheme?.body1),
      caption: GoogleFonts.simonetta(textStyle: textTheme?.caption),
      button: GoogleFonts.simonetta(textStyle: textTheme?.button),
      subtitle: GoogleFonts.simonetta(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.simonetta(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Single Day font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Single+Day
  static TextStyle singleDay({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/singleday/v1/LYjHdGDjlEgoAcF95EI5jVoFUNfeQJU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SingleDay',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Single Day font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Single+Day
  static TextTheme singleDayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.singleDay(textStyle: textTheme?.display4),
      display3: GoogleFonts.singleDay(textStyle: textTheme?.display3),
      display2: GoogleFonts.singleDay(textStyle: textTheme?.display2),
      display1: GoogleFonts.singleDay(textStyle: textTheme?.display1),
      headline: GoogleFonts.singleDay(textStyle: textTheme?.headline),
      title: GoogleFonts.singleDay(textStyle: textTheme?.title),
      subhead: GoogleFonts.singleDay(textStyle: textTheme?.subhead),
      body2: GoogleFonts.singleDay(textStyle: textTheme?.body2),
      body1: GoogleFonts.singleDay(textStyle: textTheme?.body1),
      caption: GoogleFonts.singleDay(textStyle: textTheme?.caption),
      button: GoogleFonts.singleDay(textStyle: textTheme?.button),
      subtitle: GoogleFonts.singleDay(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.singleDay(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sintony font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sintony
  static TextStyle sintony({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sintony/v7/XoHm2YDqR7-98cVUITQnu98ojjs.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sintony/v7/XoHj2YDqR7-98cVUGYgIn9cDkjLp6C8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sintony',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sintony font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sintony
  static TextTheme sintonyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sintony(textStyle: textTheme?.display4),
      display3: GoogleFonts.sintony(textStyle: textTheme?.display3),
      display2: GoogleFonts.sintony(textStyle: textTheme?.display2),
      display1: GoogleFonts.sintony(textStyle: textTheme?.display1),
      headline: GoogleFonts.sintony(textStyle: textTheme?.headline),
      title: GoogleFonts.sintony(textStyle: textTheme?.title),
      subhead: GoogleFonts.sintony(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sintony(textStyle: textTheme?.body2),
      body1: GoogleFonts.sintony(textStyle: textTheme?.body1),
      caption: GoogleFonts.sintony(textStyle: textTheme?.caption),
      button: GoogleFonts.sintony(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sintony(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sintony(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sirin Stencil font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sirin+Stencil
  static TextStyle sirinStencil({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sirinstencil/v8/mem4YaWwznmLx-lzGfN7MdRydchGBq6al6o.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SirinStencil',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sirin Stencil font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sirin+Stencil
  static TextTheme sirinStencilTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sirinStencil(textStyle: textTheme?.display4),
      display3: GoogleFonts.sirinStencil(textStyle: textTheme?.display3),
      display2: GoogleFonts.sirinStencil(textStyle: textTheme?.display2),
      display1: GoogleFonts.sirinStencil(textStyle: textTheme?.display1),
      headline: GoogleFonts.sirinStencil(textStyle: textTheme?.headline),
      title: GoogleFonts.sirinStencil(textStyle: textTheme?.title),
      subhead: GoogleFonts.sirinStencil(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sirinStencil(textStyle: textTheme?.body2),
      body1: GoogleFonts.sirinStencil(textStyle: textTheme?.body1),
      caption: GoogleFonts.sirinStencil(textStyle: textTheme?.caption),
      button: GoogleFonts.sirinStencil(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sirinStencil(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sirinStencil(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Six Caps font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Six+Caps
  static TextStyle sixCaps({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sixcaps/v10/6ae_4KGrU7VR7bNmabcS9XXaPCop.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SixCaps',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Six Caps font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Six+Caps
  static TextTheme sixCapsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sixCaps(textStyle: textTheme?.display4),
      display3: GoogleFonts.sixCaps(textStyle: textTheme?.display3),
      display2: GoogleFonts.sixCaps(textStyle: textTheme?.display2),
      display1: GoogleFonts.sixCaps(textStyle: textTheme?.display1),
      headline: GoogleFonts.sixCaps(textStyle: textTheme?.headline),
      title: GoogleFonts.sixCaps(textStyle: textTheme?.title),
      subhead: GoogleFonts.sixCaps(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sixCaps(textStyle: textTheme?.body2),
      body1: GoogleFonts.sixCaps(textStyle: textTheme?.body1),
      caption: GoogleFonts.sixCaps(textStyle: textTheme?.caption),
      button: GoogleFonts.sixCaps(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sixCaps(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sixCaps(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Skranji font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Skranji
  static TextStyle skranji({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/skranji/v7/OZpDg_dtriVFNerMYzuuklTm3Ek.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/skranji/v7/OZpGg_dtriVFNerMW4eBtlzNwED-b4g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Skranji',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Skranji font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Skranji
  static TextTheme skranjiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.skranji(textStyle: textTheme?.display4),
      display3: GoogleFonts.skranji(textStyle: textTheme?.display3),
      display2: GoogleFonts.skranji(textStyle: textTheme?.display2),
      display1: GoogleFonts.skranji(textStyle: textTheme?.display1),
      headline: GoogleFonts.skranji(textStyle: textTheme?.headline),
      title: GoogleFonts.skranji(textStyle: textTheme?.title),
      subhead: GoogleFonts.skranji(textStyle: textTheme?.subhead),
      body2: GoogleFonts.skranji(textStyle: textTheme?.body2),
      body1: GoogleFonts.skranji(textStyle: textTheme?.body1),
      caption: GoogleFonts.skranji(textStyle: textTheme?.caption),
      button: GoogleFonts.skranji(textStyle: textTheme?.button),
      subtitle: GoogleFonts.skranji(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.skranji(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Slabo 13px font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slabo+13px
  static TextStyle slabo13px({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/slabo13px/v7/11hEGp_azEvXZUdSBzzRcKer2wkYnvI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Slabo13px',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Slabo 13px font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slabo+13px
  static TextTheme slabo13pxTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.slabo13px(textStyle: textTheme?.display4),
      display3: GoogleFonts.slabo13px(textStyle: textTheme?.display3),
      display2: GoogleFonts.slabo13px(textStyle: textTheme?.display2),
      display1: GoogleFonts.slabo13px(textStyle: textTheme?.display1),
      headline: GoogleFonts.slabo13px(textStyle: textTheme?.headline),
      title: GoogleFonts.slabo13px(textStyle: textTheme?.title),
      subhead: GoogleFonts.slabo13px(textStyle: textTheme?.subhead),
      body2: GoogleFonts.slabo13px(textStyle: textTheme?.body2),
      body1: GoogleFonts.slabo13px(textStyle: textTheme?.body1),
      caption: GoogleFonts.slabo13px(textStyle: textTheme?.caption),
      button: GoogleFonts.slabo13px(textStyle: textTheme?.button),
      subtitle: GoogleFonts.slabo13px(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.slabo13px(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Slabo 27px font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slabo+27px
  static TextStyle slabo27px({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/slabo27px/v6/mFT0WbgBwKPR_Z4hGN2qsxgJ1EJ7i90.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Slabo27px',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Slabo 27px font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slabo+27px
  static TextTheme slabo27pxTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.slabo27px(textStyle: textTheme?.display4),
      display3: GoogleFonts.slabo27px(textStyle: textTheme?.display3),
      display2: GoogleFonts.slabo27px(textStyle: textTheme?.display2),
      display1: GoogleFonts.slabo27px(textStyle: textTheme?.display1),
      headline: GoogleFonts.slabo27px(textStyle: textTheme?.headline),
      title: GoogleFonts.slabo27px(textStyle: textTheme?.title),
      subhead: GoogleFonts.slabo27px(textStyle: textTheme?.subhead),
      body2: GoogleFonts.slabo27px(textStyle: textTheme?.body2),
      body1: GoogleFonts.slabo27px(textStyle: textTheme?.body1),
      caption: GoogleFonts.slabo27px(textStyle: textTheme?.caption),
      button: GoogleFonts.slabo27px(textStyle: textTheme?.button),
      subtitle: GoogleFonts.slabo27px(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.slabo27px(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Slackey font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slackey
  static TextStyle slackey({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/slackey/v10/N0bV2SdQO-5yM0-dKlRaJdbWgdY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Slackey',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Slackey font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Slackey
  static TextTheme slackeyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.slackey(textStyle: textTheme?.display4),
      display3: GoogleFonts.slackey(textStyle: textTheme?.display3),
      display2: GoogleFonts.slackey(textStyle: textTheme?.display2),
      display1: GoogleFonts.slackey(textStyle: textTheme?.display1),
      headline: GoogleFonts.slackey(textStyle: textTheme?.headline),
      title: GoogleFonts.slackey(textStyle: textTheme?.title),
      subhead: GoogleFonts.slackey(textStyle: textTheme?.subhead),
      body2: GoogleFonts.slackey(textStyle: textTheme?.body2),
      body1: GoogleFonts.slackey(textStyle: textTheme?.body1),
      caption: GoogleFonts.slackey(textStyle: textTheme?.caption),
      button: GoogleFonts.slackey(textStyle: textTheme?.button),
      subtitle: GoogleFonts.slackey(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.slackey(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Smokum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Smokum
  static TextStyle smokum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/smokum/v10/TK3iWkUbAhopmrdGHjUHte5fKg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Smokum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Smokum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Smokum
  static TextTheme smokumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.smokum(textStyle: textTheme?.display4),
      display3: GoogleFonts.smokum(textStyle: textTheme?.display3),
      display2: GoogleFonts.smokum(textStyle: textTheme?.display2),
      display1: GoogleFonts.smokum(textStyle: textTheme?.display1),
      headline: GoogleFonts.smokum(textStyle: textTheme?.headline),
      title: GoogleFonts.smokum(textStyle: textTheme?.title),
      subhead: GoogleFonts.smokum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.smokum(textStyle: textTheme?.body2),
      body1: GoogleFonts.smokum(textStyle: textTheme?.body1),
      caption: GoogleFonts.smokum(textStyle: textTheme?.caption),
      button: GoogleFonts.smokum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.smokum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.smokum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Smythe font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Smythe
  static TextStyle smythe({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/smythe/v10/MwQ3bhT01--coT1BOLh_uGInjA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Smythe',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Smythe font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Smythe
  static TextTheme smytheTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.smythe(textStyle: textTheme?.display4),
      display3: GoogleFonts.smythe(textStyle: textTheme?.display3),
      display2: GoogleFonts.smythe(textStyle: textTheme?.display2),
      display1: GoogleFonts.smythe(textStyle: textTheme?.display1),
      headline: GoogleFonts.smythe(textStyle: textTheme?.headline),
      title: GoogleFonts.smythe(textStyle: textTheme?.title),
      subhead: GoogleFonts.smythe(textStyle: textTheme?.subhead),
      body2: GoogleFonts.smythe(textStyle: textTheme?.body2),
      body1: GoogleFonts.smythe(textStyle: textTheme?.body1),
      caption: GoogleFonts.smythe(textStyle: textTheme?.caption),
      button: GoogleFonts.smythe(textStyle: textTheme?.button),
      subtitle: GoogleFonts.smythe(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.smythe(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sniglet font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sniglet
  static TextStyle sniglet({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sniglet/v11/cIf9MaFLtkE3UjaJxCmrYGkHgIs.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/sniglet/v11/cIf4MaFLtkE3UjaJ_ImHRGEsnIJkWL4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sniglet',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sniglet font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sniglet
  static TextTheme snigletTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sniglet(textStyle: textTheme?.display4),
      display3: GoogleFonts.sniglet(textStyle: textTheme?.display3),
      display2: GoogleFonts.sniglet(textStyle: textTheme?.display2),
      display1: GoogleFonts.sniglet(textStyle: textTheme?.display1),
      headline: GoogleFonts.sniglet(textStyle: textTheme?.headline),
      title: GoogleFonts.sniglet(textStyle: textTheme?.title),
      subhead: GoogleFonts.sniglet(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sniglet(textStyle: textTheme?.body2),
      body1: GoogleFonts.sniglet(textStyle: textTheme?.body1),
      caption: GoogleFonts.sniglet(textStyle: textTheme?.caption),
      button: GoogleFonts.sniglet(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sniglet(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sniglet(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Snippet font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Snippet
  static TextStyle snippet({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/snippet/v9/bWt47f7XfQH9Gupu2v_Afcp9QWc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Snippet',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Snippet font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Snippet
  static TextTheme snippetTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.snippet(textStyle: textTheme?.display4),
      display3: GoogleFonts.snippet(textStyle: textTheme?.display3),
      display2: GoogleFonts.snippet(textStyle: textTheme?.display2),
      display1: GoogleFonts.snippet(textStyle: textTheme?.display1),
      headline: GoogleFonts.snippet(textStyle: textTheme?.headline),
      title: GoogleFonts.snippet(textStyle: textTheme?.title),
      subhead: GoogleFonts.snippet(textStyle: textTheme?.subhead),
      body2: GoogleFonts.snippet(textStyle: textTheme?.body2),
      body1: GoogleFonts.snippet(textStyle: textTheme?.body1),
      caption: GoogleFonts.snippet(textStyle: textTheme?.caption),
      button: GoogleFonts.snippet(textStyle: textTheme?.button),
      subtitle: GoogleFonts.snippet(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.snippet(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Snowburst One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Snowburst+One
  static TextStyle snowburstOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/snowburstone/v7/MQpS-WezKdujBsXY3B7I-UT7eZ-UPyacPbo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SnowburstOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Snowburst One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Snowburst+One
  static TextTheme snowburstOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.snowburstOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.snowburstOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.snowburstOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.snowburstOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.snowburstOne(textStyle: textTheme?.headline),
      title: GoogleFonts.snowburstOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.snowburstOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.snowburstOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.snowburstOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.snowburstOne(textStyle: textTheme?.caption),
      button: GoogleFonts.snowburstOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.snowburstOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.snowburstOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sofadi One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sofadi+One
  static TextStyle sofadiOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sofadione/v8/JIA2UVBxdnVBuElZaMFGcDOIETkmYDU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SofadiOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sofadi One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sofadi+One
  static TextTheme sofadiOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sofadiOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.sofadiOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.sofadiOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.sofadiOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.sofadiOne(textStyle: textTheme?.headline),
      title: GoogleFonts.sofadiOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.sofadiOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sofadiOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.sofadiOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.sofadiOne(textStyle: textTheme?.caption),
      button: GoogleFonts.sofadiOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sofadiOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sofadiOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sofia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sofia
  static TextStyle sofia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sofia/v8/8QIHdirahM3j_vu-sowsrqjk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sofia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sofia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sofia
  static TextTheme sofiaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sofia(textStyle: textTheme?.display4),
      display3: GoogleFonts.sofia(textStyle: textTheme?.display3),
      display2: GoogleFonts.sofia(textStyle: textTheme?.display2),
      display1: GoogleFonts.sofia(textStyle: textTheme?.display1),
      headline: GoogleFonts.sofia(textStyle: textTheme?.headline),
      title: GoogleFonts.sofia(textStyle: textTheme?.title),
      subhead: GoogleFonts.sofia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sofia(textStyle: textTheme?.body2),
      body1: GoogleFonts.sofia(textStyle: textTheme?.body1),
      caption: GoogleFonts.sofia(textStyle: textTheme?.caption),
      button: GoogleFonts.sofia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sofia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sofia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Solway font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Solway
  static TextStyle solway({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/solway/v1/AMOTz46Cs2uTAOCuLlgZms0QW3mqyg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/solway/v1/AMOQz46Cs2uTAOCWgnA9kuYMUg.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/solway/v1/AMOTz46Cs2uTAOCudlkZms0QW3mqyg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/solway/v1/AMOTz46Cs2uTAOCuPl8Zms0QW3mqyg.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/solway/v1/AMOTz46Cs2uTAOCuIlwZms0QW3mqyg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Solway',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Solway font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Solway
  static TextTheme solwayTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.solway(textStyle: textTheme?.display4),
      display3: GoogleFonts.solway(textStyle: textTheme?.display3),
      display2: GoogleFonts.solway(textStyle: textTheme?.display2),
      display1: GoogleFonts.solway(textStyle: textTheme?.display1),
      headline: GoogleFonts.solway(textStyle: textTheme?.headline),
      title: GoogleFonts.solway(textStyle: textTheme?.title),
      subhead: GoogleFonts.solway(textStyle: textTheme?.subhead),
      body2: GoogleFonts.solway(textStyle: textTheme?.body2),
      body1: GoogleFonts.solway(textStyle: textTheme?.body1),
      caption: GoogleFonts.solway(textStyle: textTheme?.caption),
      button: GoogleFonts.solway(textStyle: textTheme?.button),
      subtitle: GoogleFonts.solway(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.solway(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Song Myung font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Song+Myung
  static TextStyle songMyung({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/songmyung/v8/1cX2aUDWAJH5-EIC7DIhr1GqhcitzeM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SongMyung',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Song Myung font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Song+Myung
  static TextTheme songMyungTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.songMyung(textStyle: textTheme?.display4),
      display3: GoogleFonts.songMyung(textStyle: textTheme?.display3),
      display2: GoogleFonts.songMyung(textStyle: textTheme?.display2),
      display1: GoogleFonts.songMyung(textStyle: textTheme?.display1),
      headline: GoogleFonts.songMyung(textStyle: textTheme?.headline),
      title: GoogleFonts.songMyung(textStyle: textTheme?.title),
      subhead: GoogleFonts.songMyung(textStyle: textTheme?.subhead),
      body2: GoogleFonts.songMyung(textStyle: textTheme?.body2),
      body1: GoogleFonts.songMyung(textStyle: textTheme?.body1),
      caption: GoogleFonts.songMyung(textStyle: textTheme?.caption),
      button: GoogleFonts.songMyung(textStyle: textTheme?.button),
      subtitle: GoogleFonts.songMyung(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.songMyung(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sonsie One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sonsie+One
  static TextStyle sonsieOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sonsieone/v8/PbymFmP_EAnPqbKaoc18YVu80lbp8JM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SonsieOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sonsie One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sonsie+One
  static TextTheme sonsieOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sonsieOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.sonsieOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.sonsieOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.sonsieOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.sonsieOne(textStyle: textTheme?.headline),
      title: GoogleFonts.sonsieOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.sonsieOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sonsieOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.sonsieOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.sonsieOne(textStyle: textTheme?.caption),
      button: GoogleFonts.sonsieOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sonsieOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sonsieOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sorts Mill Goudy font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sorts+Mill+Goudy
  static TextStyle sortsMillGoudy({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sortsmillgoudy/v9/Qw3GZR9MED_6PSuS_50nEaVrfzgEXH0OjpM75PE.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/sortsmillgoudy/v9/Qw3AZR9MED_6PSuS_50nEaVrfzgEbH8EirE-9PGLfQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SortsMillGoudy',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sorts Mill Goudy font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sorts+Mill+Goudy
  static TextTheme sortsMillGoudyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.display4),
      display3: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.display3),
      display2: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.display2),
      display1: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.display1),
      headline: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.headline),
      title: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.title),
      subhead: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.body2),
      body1: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.body1),
      caption: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.caption),
      button: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sortsMillGoudy(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Source Code Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Code+Pro
  static TextStyle sourceCodePro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_XiYsKILxRpg3hIP6sJ7fM7Pqt8srztO0rzmmkDQ.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_ViYsKILxRpg3hIP6sJ7fM7PqlONMbtecv7Gy0DRzS.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_XiYsKILxRpg3hIP6sJ7fM7PqtlsnztO0rzmmkDQ.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_ViYsKILxRpg3hIP6sJ7fM7PqlONN_tucv7Gy0DRzS.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_SiYsKILxRpg3hIP6sJ7fM7PqVOuHXvMY3xw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_QiYsKILxRpg3hIP6sJ7fM7PqlOOvTnsMnx3C9.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_XiYsKILxRpg3hIP6sJ7fM7PqtzsjztO0rzmmkDQ.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_ViYsKILxRpg3hIP6sJ7fM7PqlONMnt-cv7Gy0DRzS.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_XiYsKILxRpg3hIP6sJ7fM7Pqt4s_ztO0rzmmkDQ.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_ViYsKILxRpg3hIP6sJ7fM7PqlONMLsOcv7Gy0DRzS.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_XiYsKILxRpg3hIP6sJ7fM7Pqths7ztO0rzmmkDQ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_ViYsKILxRpg3hIP6sJ7fM7PqlONNvsecv7Gy0DRzS.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_XiYsKILxRpg3hIP6sJ7fM7PqtvszztO0rzmmkDQ.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/sourcecodepro/v11/HI_ViYsKILxRpg3hIP6sJ7fM7PqlONNXs-cv7Gy0DRzS.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SourceCodePro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Source Code Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Code+Pro
  static TextTheme sourceCodeProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sourceCodePro(textStyle: textTheme?.display4),
      display3: GoogleFonts.sourceCodePro(textStyle: textTheme?.display3),
      display2: GoogleFonts.sourceCodePro(textStyle: textTheme?.display2),
      display1: GoogleFonts.sourceCodePro(textStyle: textTheme?.display1),
      headline: GoogleFonts.sourceCodePro(textStyle: textTheme?.headline),
      title: GoogleFonts.sourceCodePro(textStyle: textTheme?.title),
      subhead: GoogleFonts.sourceCodePro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sourceCodePro(textStyle: textTheme?.body2),
      body1: GoogleFonts.sourceCodePro(textStyle: textTheme?.body1),
      caption: GoogleFonts.sourceCodePro(textStyle: textTheme?.caption),
      button: GoogleFonts.sourceCodePro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sourceCodePro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sourceCodePro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Source Sans Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Sans+Pro
  static TextStyle sourceSansPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKydSBYKcSV-LCoeQqfX1RYOo3i94_AkB1v_8CGxg.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKwdSBYKcSV-LCoeQqfX1RYOo3qPZYokRdr3cWWxg40.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKydSBYKcSV-LCoeQqfX1RYOo3ik4zAkB1v_8CGxg.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKwdSBYKcSV-LCoeQqfX1RYOo3qPZZMkhdr3cWWxg40.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xK3dSBYKcSV-LCoeQqfX1RYOo3aP6TkmDZz9g.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xK1dSBYKcSV-LCoeQqfX1RYOo3qPa7gujNj9tmf.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rAkB1v_8CGxg.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKwdSBYKcSV-LCoeQqfX1RYOo3qPZY4lBdr3cWWxg40.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vAkB1v_8CGxg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKwdSBYKcSV-LCoeQqfX1RYOo3qPZZclRdr3cWWxg40.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKydSBYKcSV-LCoeQqfX1RYOo3iu4nAkB1v_8CGxg.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/sourcesanspro/v13/6xKwdSBYKcSV-LCoeQqfX1RYOo3qPZZklxdr3cWWxg40.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SourceSansPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Source Sans Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Sans+Pro
  static TextTheme sourceSansProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sourceSansPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.sourceSansPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.sourceSansPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.sourceSansPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.sourceSansPro(textStyle: textTheme?.headline),
      title: GoogleFonts.sourceSansPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.sourceSansPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sourceSansPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.sourceSansPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.sourceSansPro(textStyle: textTheme?.caption),
      button: GoogleFonts.sourceSansPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sourceSansPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sourceSansPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Source Serif Pro font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Serif+Pro
  static TextStyle sourceSerifPro({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sourceserifpro/v7/neIQzD-0qpwxpaWvjeD0X88SAOeaiXM0oSOL2Yw.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/sourceserifpro/v7/neIXzD-0qpwxpaWvjeD0X88SAOeasasahSugxYUvZrI.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sourceserifpro/v7/neIXzD-0qpwxpaWvjeD0X88SAOeasc8bhSugxYUvZrI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SourceSerifPro',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Source Serif Pro font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Source+Serif+Pro
  static TextTheme sourceSerifProTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sourceSerifPro(textStyle: textTheme?.display4),
      display3: GoogleFonts.sourceSerifPro(textStyle: textTheme?.display3),
      display2: GoogleFonts.sourceSerifPro(textStyle: textTheme?.display2),
      display1: GoogleFonts.sourceSerifPro(textStyle: textTheme?.display1),
      headline: GoogleFonts.sourceSerifPro(textStyle: textTheme?.headline),
      title: GoogleFonts.sourceSerifPro(textStyle: textTheme?.title),
      subhead: GoogleFonts.sourceSerifPro(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sourceSerifPro(textStyle: textTheme?.body2),
      body1: GoogleFonts.sourceSerifPro(textStyle: textTheme?.body1),
      caption: GoogleFonts.sourceSerifPro(textStyle: textTheme?.caption),
      button: GoogleFonts.sourceSerifPro(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sourceSerifPro(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sourceSerifPro(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Space Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Space+Mono
  static TextStyle spaceMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/spacemono/v5/i7dPIFZifjKcF5UAWdDRUEZ2RFq7AwU.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/spacemono/v5/i7dNIFZifjKcF5UAWdDRYER8QHi-EwWMbg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/spacemono/v5/i7dMIFZifjKcF5UAWdDRaPpZYFKQHwyVd3U.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/spacemono/v5/i7dSIFZifjKcF5UAWdDRYERE_FeaGy6QZ3WfYg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SpaceMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Space Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Space+Mono
  static TextTheme spaceMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spaceMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.spaceMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.spaceMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.spaceMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.spaceMono(textStyle: textTheme?.headline),
      title: GoogleFonts.spaceMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.spaceMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spaceMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.spaceMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.spaceMono(textStyle: textTheme?.caption),
      button: GoogleFonts.spaceMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spaceMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spaceMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Special Elite font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Special+Elite
  static TextStyle specialElite({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/specialelite/v10/XLYgIZbkc4JPUL5CVArUVL0nhncESXFtUsM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SpecialElite',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Special Elite font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Special+Elite
  static TextTheme specialEliteTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.specialElite(textStyle: textTheme?.display4),
      display3: GoogleFonts.specialElite(textStyle: textTheme?.display3),
      display2: GoogleFonts.specialElite(textStyle: textTheme?.display2),
      display1: GoogleFonts.specialElite(textStyle: textTheme?.display1),
      headline: GoogleFonts.specialElite(textStyle: textTheme?.headline),
      title: GoogleFonts.specialElite(textStyle: textTheme?.title),
      subhead: GoogleFonts.specialElite(textStyle: textTheme?.subhead),
      body2: GoogleFonts.specialElite(textStyle: textTheme?.body2),
      body1: GoogleFonts.specialElite(textStyle: textTheme?.body1),
      caption: GoogleFonts.specialElite(textStyle: textTheme?.caption),
      button: GoogleFonts.specialElite(textStyle: textTheme?.button),
      subtitle: GoogleFonts.specialElite(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.specialElite(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spectral font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spectral
  static TextStyle spectral({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCs-xNNww_2s0amA9v2s13GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCu-xNNww_2s0amA9M8qrXHafOPXHIJErY.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCs-xNNww_2s0amA9uSsF3GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCu-xNNww_2s0amA9M8qtHEafOPXHIJErY.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCr-xNNww_2s0amA-M-mHnOSOuk.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCt-xNNww_2s0amA9M8kn3sTfukQHs.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCs-xNNww_2s0amA9vKsV3GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCu-xNNww_2s0amA9M8qonFafOPXHIJErY.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCs-xNNww_2s0amA9vmtl3GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCu-xNNww_2s0amA9M8qqXCafOPXHIJErY.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCs-xNNww_2s0amA9uCt13GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCu-xNNww_2s0amA9M8qsHDafOPXHIJErY.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCs-xNNww_2s0amA9uetF3GY_etWWIJ.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/spectral/v6/rnCu-xNNww_2s0amA9M8qt3AafOPXHIJErY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Spectral',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spectral font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spectral
  static TextTheme spectralTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spectral(textStyle: textTheme?.display4),
      display3: GoogleFonts.spectral(textStyle: textTheme?.display3),
      display2: GoogleFonts.spectral(textStyle: textTheme?.display2),
      display1: GoogleFonts.spectral(textStyle: textTheme?.display1),
      headline: GoogleFonts.spectral(textStyle: textTheme?.headline),
      title: GoogleFonts.spectral(textStyle: textTheme?.title),
      subhead: GoogleFonts.spectral(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spectral(textStyle: textTheme?.body2),
      body1: GoogleFonts.spectral(textStyle: textTheme?.body1),
      caption: GoogleFonts.spectral(textStyle: textTheme?.caption),
      button: GoogleFonts.spectral(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spectral(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spectral(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spectral SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spectral+SC
  static TextStyle spectralSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk0ALCRZonmalTgyPmRfs1qwkTXPYeVXJZB.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk2ALCRZonmalTgyPmRfsWg26zWN4O3WYZB_sU.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk0ALCRZonmalTgyPmRfs0OwUTXPYeVXJZB.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk2ALCRZonmalTgyPmRfsWg28jVN4O3WYZB_sU.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/spectralsc/v5/KtkpALCRZonmalTgyPmRfvWi6WDfFpuc.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/spectralsc/v5/KtkrALCRZonmalTgyPmRfsWg42T9E4ucRY8.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk0ALCRZonmalTgyPmRfs1WwETXPYeVXJZB.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk2ALCRZonmalTgyPmRfsWg25DUN4O3WYZB_sU.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk0ALCRZonmalTgyPmRfs16x0TXPYeVXJZB.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk2ALCRZonmalTgyPmRfsWg27zTN4O3WYZB_sU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk0ALCRZonmalTgyPmRfs0exkTXPYeVXJZB.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk2ALCRZonmalTgyPmRfsWg29jSN4O3WYZB_sU.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk0ALCRZonmalTgyPmRfs0CxUTXPYeVXJZB.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/spectralsc/v5/Ktk2ALCRZonmalTgyPmRfsWg28TRN4O3WYZB_sU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SpectralSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spectral SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spectral+SC
  static TextTheme spectralSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spectralSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.spectralSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.spectralSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.spectralSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.spectralSC(textStyle: textTheme?.headline),
      title: GoogleFonts.spectralSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.spectralSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spectralSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.spectralSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.spectralSC(textStyle: textTheme?.caption),
      button: GoogleFonts.spectralSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spectralSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spectralSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spicy Rice font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spicy+Rice
  static TextStyle spicyRice({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/spicyrice/v8/uK_24rSEd-Uqwk4jY1RyGv-2WkowRcc.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SpicyRice',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spicy Rice font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spicy+Rice
  static TextTheme spicyRiceTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spicyRice(textStyle: textTheme?.display4),
      display3: GoogleFonts.spicyRice(textStyle: textTheme?.display3),
      display2: GoogleFonts.spicyRice(textStyle: textTheme?.display2),
      display1: GoogleFonts.spicyRice(textStyle: textTheme?.display1),
      headline: GoogleFonts.spicyRice(textStyle: textTheme?.headline),
      title: GoogleFonts.spicyRice(textStyle: textTheme?.title),
      subhead: GoogleFonts.spicyRice(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spicyRice(textStyle: textTheme?.body2),
      body1: GoogleFonts.spicyRice(textStyle: textTheme?.body1),
      caption: GoogleFonts.spicyRice(textStyle: textTheme?.caption),
      button: GoogleFonts.spicyRice(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spicyRice(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spicyRice(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spinnaker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spinnaker
  static TextStyle spinnaker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/spinnaker/v11/w8gYH2oyX-I0_rvR6Hmn3HwLqOqSBg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Spinnaker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spinnaker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spinnaker
  static TextTheme spinnakerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spinnaker(textStyle: textTheme?.display4),
      display3: GoogleFonts.spinnaker(textStyle: textTheme?.display3),
      display2: GoogleFonts.spinnaker(textStyle: textTheme?.display2),
      display1: GoogleFonts.spinnaker(textStyle: textTheme?.display1),
      headline: GoogleFonts.spinnaker(textStyle: textTheme?.headline),
      title: GoogleFonts.spinnaker(textStyle: textTheme?.title),
      subhead: GoogleFonts.spinnaker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spinnaker(textStyle: textTheme?.body2),
      body1: GoogleFonts.spinnaker(textStyle: textTheme?.body1),
      caption: GoogleFonts.spinnaker(textStyle: textTheme?.caption),
      button: GoogleFonts.spinnaker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spinnaker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spinnaker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Spirax font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spirax
  static TextStyle spirax({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/spirax/v8/buE3poKgYNLy0F3cXktt-Csn-Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Spirax',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Spirax font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Spirax
  static TextTheme spiraxTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.spirax(textStyle: textTheme?.display4),
      display3: GoogleFonts.spirax(textStyle: textTheme?.display3),
      display2: GoogleFonts.spirax(textStyle: textTheme?.display2),
      display1: GoogleFonts.spirax(textStyle: textTheme?.display1),
      headline: GoogleFonts.spirax(textStyle: textTheme?.headline),
      title: GoogleFonts.spirax(textStyle: textTheme?.title),
      subhead: GoogleFonts.spirax(textStyle: textTheme?.subhead),
      body2: GoogleFonts.spirax(textStyle: textTheme?.body2),
      body1: GoogleFonts.spirax(textStyle: textTheme?.body1),
      caption: GoogleFonts.spirax(textStyle: textTheme?.caption),
      button: GoogleFonts.spirax(textStyle: textTheme?.button),
      subtitle: GoogleFonts.spirax(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.spirax(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Squada One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Squada+One
  static TextStyle squadaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/squadaone/v8/BCasqZ8XsOrx4mcOk6MtWaA8WDBkHgs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SquadaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Squada One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Squada+One
  static TextTheme squadaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.squadaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.squadaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.squadaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.squadaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.squadaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.squadaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.squadaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.squadaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.squadaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.squadaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.squadaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.squadaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.squadaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sree Krushnadevaraya font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sree+Krushnadevaraya
  static TextStyle sreeKrushnadevaraya({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sreekrushnadevaraya/v7/R70FjzQeifmPepmyQQjQ9kvwMkWYPfTA_EWb2FhQuXir.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SreeKrushnadevaraya',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sree Krushnadevaraya font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sree+Krushnadevaraya
  static TextTheme sreeKrushnadevarayaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.display4),
      display3: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.display3),
      display2: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.display2),
      display1: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.display1),
      headline: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.headline),
      title: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.title),
      subhead: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.body2),
      body1: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.body1),
      caption: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.caption),
      button: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sreeKrushnadevaraya(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sriracha font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sriracha
  static TextStyle sriracha({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sriracha/v4/0nkrC9D4IuYBgWcI9ObYRQDioeb0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sriracha',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sriracha font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sriracha
  static TextTheme srirachaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sriracha(textStyle: textTheme?.display4),
      display3: GoogleFonts.sriracha(textStyle: textTheme?.display3),
      display2: GoogleFonts.sriracha(textStyle: textTheme?.display2),
      display1: GoogleFonts.sriracha(textStyle: textTheme?.display1),
      headline: GoogleFonts.sriracha(textStyle: textTheme?.headline),
      title: GoogleFonts.sriracha(textStyle: textTheme?.title),
      subhead: GoogleFonts.sriracha(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sriracha(textStyle: textTheme?.body2),
      body1: GoogleFonts.sriracha(textStyle: textTheme?.body1),
      caption: GoogleFonts.sriracha(textStyle: textTheme?.caption),
      button: GoogleFonts.sriracha(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sriracha(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sriracha(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Srisakdi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Srisakdi
  static TextStyle srisakdi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/srisakdi/v3/yMJRMIlvdpDbkB0A-jq8fSx5i814.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/srisakdi/v3/yMJWMIlvdpDbkB0A-gIAUghxoNFxW0Hz.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Srisakdi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Srisakdi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Srisakdi
  static TextTheme srisakdiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.srisakdi(textStyle: textTheme?.display4),
      display3: GoogleFonts.srisakdi(textStyle: textTheme?.display3),
      display2: GoogleFonts.srisakdi(textStyle: textTheme?.display2),
      display1: GoogleFonts.srisakdi(textStyle: textTheme?.display1),
      headline: GoogleFonts.srisakdi(textStyle: textTheme?.headline),
      title: GoogleFonts.srisakdi(textStyle: textTheme?.title),
      subhead: GoogleFonts.srisakdi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.srisakdi(textStyle: textTheme?.body2),
      body1: GoogleFonts.srisakdi(textStyle: textTheme?.body1),
      caption: GoogleFonts.srisakdi(textStyle: textTheme?.caption),
      button: GoogleFonts.srisakdi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.srisakdi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.srisakdi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Staatliches font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Staatliches
  static TextStyle staatliches({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/staatliches/v3/HI_OiY8KO6hCsQSoAPmtMbectJG9O9PS.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Staatliches',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Staatliches font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Staatliches
  static TextTheme staatlichesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.staatliches(textStyle: textTheme?.display4),
      display3: GoogleFonts.staatliches(textStyle: textTheme?.display3),
      display2: GoogleFonts.staatliches(textStyle: textTheme?.display2),
      display1: GoogleFonts.staatliches(textStyle: textTheme?.display1),
      headline: GoogleFonts.staatliches(textStyle: textTheme?.headline),
      title: GoogleFonts.staatliches(textStyle: textTheme?.title),
      subhead: GoogleFonts.staatliches(textStyle: textTheme?.subhead),
      body2: GoogleFonts.staatliches(textStyle: textTheme?.body2),
      body1: GoogleFonts.staatliches(textStyle: textTheme?.body1),
      caption: GoogleFonts.staatliches(textStyle: textTheme?.caption),
      button: GoogleFonts.staatliches(textStyle: textTheme?.button),
      subtitle: GoogleFonts.staatliches(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.staatliches(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stalemate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stalemate
  static TextStyle stalemate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/stalemate/v7/taiIGmZ_EJq97-UfkZRpuqSs8ZQpaQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Stalemate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stalemate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stalemate
  static TextTheme stalemateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stalemate(textStyle: textTheme?.display4),
      display3: GoogleFonts.stalemate(textStyle: textTheme?.display3),
      display2: GoogleFonts.stalemate(textStyle: textTheme?.display2),
      display1: GoogleFonts.stalemate(textStyle: textTheme?.display1),
      headline: GoogleFonts.stalemate(textStyle: textTheme?.headline),
      title: GoogleFonts.stalemate(textStyle: textTheme?.title),
      subhead: GoogleFonts.stalemate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stalemate(textStyle: textTheme?.body2),
      body1: GoogleFonts.stalemate(textStyle: textTheme?.body1),
      caption: GoogleFonts.stalemate(textStyle: textTheme?.caption),
      button: GoogleFonts.stalemate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stalemate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stalemate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stalinist One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stalinist+One
  static TextStyle stalinistOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/stalinistone/v25/MQpS-WezM9W4Dd7D3B7I-UT7eZ-UPyacPbo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'StalinistOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stalinist One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stalinist+One
  static TextTheme stalinistOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stalinistOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.stalinistOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.stalinistOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.stalinistOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.stalinistOne(textStyle: textTheme?.headline),
      title: GoogleFonts.stalinistOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.stalinistOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stalinistOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.stalinistOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.stalinistOne(textStyle: textTheme?.caption),
      button: GoogleFonts.stalinistOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stalinistOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stalinistOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stardos Stencil font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stardos+Stencil
  static TextStyle stardosStencil({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/stardosstencil/v10/X7n94bcuGPC8hrvEOHXOgaKCc2TR71R3tiSx0g.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/stardosstencil/v10/X7n44bcuGPC8hrvEOHXOgaKCc2TpU3tTvg-t29HSHw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'StardosStencil',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stardos Stencil font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stardos+Stencil
  static TextTheme stardosStencilTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stardosStencil(textStyle: textTheme?.display4),
      display3: GoogleFonts.stardosStencil(textStyle: textTheme?.display3),
      display2: GoogleFonts.stardosStencil(textStyle: textTheme?.display2),
      display1: GoogleFonts.stardosStencil(textStyle: textTheme?.display1),
      headline: GoogleFonts.stardosStencil(textStyle: textTheme?.headline),
      title: GoogleFonts.stardosStencil(textStyle: textTheme?.title),
      subhead: GoogleFonts.stardosStencil(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stardosStencil(textStyle: textTheme?.body2),
      body1: GoogleFonts.stardosStencil(textStyle: textTheme?.body1),
      caption: GoogleFonts.stardosStencil(textStyle: textTheme?.caption),
      button: GoogleFonts.stardosStencil(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stardosStencil(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stardosStencil(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stint Ultra Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stint+Ultra+Condensed
  static TextStyle stintUltraCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/stintultracondensed/v8/-W_gXIrsVjjeyEnPC45qD2NoFPtBE0xCh2A-qhUO2cNvdg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'StintUltraCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stint Ultra Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stint+Ultra+Condensed
  static TextTheme stintUltraCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stintUltraCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stint Ultra Expanded font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stint+Ultra+Expanded
  static TextStyle stintUltraExpanded({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/stintultraexpanded/v7/CSRg4yNNh-GbW3o3JkwoDcdvMKMf0oBAd0qoATQkWwam.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'StintUltraExpanded',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stint Ultra Expanded font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stint+Ultra+Expanded
  static TextTheme stintUltraExpandedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.display4),
      display3: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.display3),
      display2: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.display2),
      display1: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.display1),
      headline: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.headline),
      title: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.title),
      subhead: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.body2),
      body1: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.body1),
      caption: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.caption),
      button: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stintUltraExpanded(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stoke font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stoke
  static TextStyle stoke({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/stoke/v9/z7NXdRb7aTMfKNvFVgxC_pjcTeWU.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/stoke/v9/z7NadRb7aTMfKONpfihK1YTV.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Stoke',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stoke font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stoke
  static TextTheme stokeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stoke(textStyle: textTheme?.display4),
      display3: GoogleFonts.stoke(textStyle: textTheme?.display3),
      display2: GoogleFonts.stoke(textStyle: textTheme?.display2),
      display1: GoogleFonts.stoke(textStyle: textTheme?.display1),
      headline: GoogleFonts.stoke(textStyle: textTheme?.headline),
      title: GoogleFonts.stoke(textStyle: textTheme?.title),
      subhead: GoogleFonts.stoke(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stoke(textStyle: textTheme?.body2),
      body1: GoogleFonts.stoke(textStyle: textTheme?.body1),
      caption: GoogleFonts.stoke(textStyle: textTheme?.caption),
      button: GoogleFonts.stoke(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stoke(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stoke(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Strait font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Strait
  static TextStyle strait({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/strait/v7/DtViJxy6WaEr1LZzeDhtkl0U7w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Strait',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Strait font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Strait
  static TextTheme straitTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.strait(textStyle: textTheme?.display4),
      display3: GoogleFonts.strait(textStyle: textTheme?.display3),
      display2: GoogleFonts.strait(textStyle: textTheme?.display2),
      display1: GoogleFonts.strait(textStyle: textTheme?.display1),
      headline: GoogleFonts.strait(textStyle: textTheme?.headline),
      title: GoogleFonts.strait(textStyle: textTheme?.title),
      subhead: GoogleFonts.strait(textStyle: textTheme?.subhead),
      body2: GoogleFonts.strait(textStyle: textTheme?.body2),
      body1: GoogleFonts.strait(textStyle: textTheme?.body1),
      caption: GoogleFonts.strait(textStyle: textTheme?.caption),
      button: GoogleFonts.strait(textStyle: textTheme?.button),
      subtitle: GoogleFonts.strait(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.strait(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Stylish font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stylish
  static TextStyle stylish({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/stylish/v8/m8JSjfhPYriQkk7-fo35dLxEdmo.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Stylish',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Stylish font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Stylish
  static TextTheme stylishTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.stylish(textStyle: textTheme?.display4),
      display3: GoogleFonts.stylish(textStyle: textTheme?.display3),
      display2: GoogleFonts.stylish(textStyle: textTheme?.display2),
      display1: GoogleFonts.stylish(textStyle: textTheme?.display1),
      headline: GoogleFonts.stylish(textStyle: textTheme?.headline),
      title: GoogleFonts.stylish(textStyle: textTheme?.title),
      subhead: GoogleFonts.stylish(textStyle: textTheme?.subhead),
      body2: GoogleFonts.stylish(textStyle: textTheme?.body2),
      body1: GoogleFonts.stylish(textStyle: textTheme?.body1),
      caption: GoogleFonts.stylish(textStyle: textTheme?.caption),
      button: GoogleFonts.stylish(textStyle: textTheme?.button),
      subtitle: GoogleFonts.stylish(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.stylish(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sue Ellen Francisco font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sue+Ellen+Francisco
  static TextStyle sueEllenFrancisco({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sueellenfrancisco/v10/wXK3E20CsoJ9j1DDkjHcQ5ZL8xRaxru9ropF2lqk9H4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SueEllenFrancisco',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sue Ellen Francisco font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sue+Ellen+Francisco
  static TextTheme sueEllenFranciscoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.display4),
      display3: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.display3),
      display2: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.display2),
      display1: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.display1),
      headline: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.headline),
      title: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.title),
      subhead: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.body2),
      body1: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.body1),
      caption: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.caption),
      button: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sueEllenFrancisco(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Suez One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suez+One
  static TextStyle suezOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/suezone/v4/taiJGmd_EZ6rqscQgNFJkIqg-I0w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SuezOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Suez One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suez+One
  static TextTheme suezOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.suezOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.suezOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.suezOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.suezOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.suezOne(textStyle: textTheme?.headline),
      title: GoogleFonts.suezOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.suezOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.suezOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.suezOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.suezOne(textStyle: textTheme?.caption),
      button: GoogleFonts.suezOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.suezOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.suezOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sulphur Point font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sulphur+Point
  static TextStyle sulphurPoint({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/sulphurpoint/v1/RLpkK5vv8KaycDcazWFPBj2afVU6n6kFUHPIFaU.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sulphurpoint/v1/RLp5K5vv8KaycDcazWFPBj2aRfkSu6EuTHo.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sulphurpoint/v1/RLpkK5vv8KaycDcazWFPBj2afUU9n6kFUHPIFaU.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SulphurPoint',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sulphur Point font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sulphur+Point
  static TextTheme sulphurPointTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sulphurPoint(textStyle: textTheme?.display4),
      display3: GoogleFonts.sulphurPoint(textStyle: textTheme?.display3),
      display2: GoogleFonts.sulphurPoint(textStyle: textTheme?.display2),
      display1: GoogleFonts.sulphurPoint(textStyle: textTheme?.display1),
      headline: GoogleFonts.sulphurPoint(textStyle: textTheme?.headline),
      title: GoogleFonts.sulphurPoint(textStyle: textTheme?.title),
      subhead: GoogleFonts.sulphurPoint(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sulphurPoint(textStyle: textTheme?.body2),
      body1: GoogleFonts.sulphurPoint(textStyle: textTheme?.body1),
      caption: GoogleFonts.sulphurPoint(textStyle: textTheme?.caption),
      button: GoogleFonts.sulphurPoint(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sulphurPoint(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sulphurPoint(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sumana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sumana
  static TextStyle sumana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sumana/v4/4UaDrE5TqRBjGj-G8Bji76zR4w.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sumana/v4/4UaArE5TqRBjGj--TDfG54fN6ppsKg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sumana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sumana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sumana
  static TextTheme sumanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sumana(textStyle: textTheme?.display4),
      display3: GoogleFonts.sumana(textStyle: textTheme?.display3),
      display2: GoogleFonts.sumana(textStyle: textTheme?.display2),
      display1: GoogleFonts.sumana(textStyle: textTheme?.display1),
      headline: GoogleFonts.sumana(textStyle: textTheme?.headline),
      title: GoogleFonts.sumana(textStyle: textTheme?.title),
      subhead: GoogleFonts.sumana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sumana(textStyle: textTheme?.body2),
      body1: GoogleFonts.sumana(textStyle: textTheme?.body1),
      caption: GoogleFonts.sumana(textStyle: textTheme?.caption),
      button: GoogleFonts.sumana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sumana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sumana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sunflower font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sunflower
  static TextStyle sunflower({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/sunflower/v9/RWmPoKeF8fUjqIj7Vc-06MfiqYsGBGBzCw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/sunflower/v9/RWmPoKeF8fUjqIj7Vc-0sMbiqYsGBGBzCw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sunflower/v9/RWmPoKeF8fUjqIj7Vc-0-MDiqYsGBGBzCw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sunflower',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sunflower font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sunflower
  static TextTheme sunflowerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sunflower(textStyle: textTheme?.display4),
      display3: GoogleFonts.sunflower(textStyle: textTheme?.display3),
      display2: GoogleFonts.sunflower(textStyle: textTheme?.display2),
      display1: GoogleFonts.sunflower(textStyle: textTheme?.display1),
      headline: GoogleFonts.sunflower(textStyle: textTheme?.headline),
      title: GoogleFonts.sunflower(textStyle: textTheme?.title),
      subhead: GoogleFonts.sunflower(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sunflower(textStyle: textTheme?.body2),
      body1: GoogleFonts.sunflower(textStyle: textTheme?.body1),
      caption: GoogleFonts.sunflower(textStyle: textTheme?.caption),
      button: GoogleFonts.sunflower(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sunflower(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sunflower(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sunshiney font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sunshiney
  static TextStyle sunshiney({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sunshiney/v10/LDIwapGTLBwsS-wT4vcgE8moUePWkg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sunshiney',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sunshiney font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sunshiney
  static TextTheme sunshineyTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sunshiney(textStyle: textTheme?.display4),
      display3: GoogleFonts.sunshiney(textStyle: textTheme?.display3),
      display2: GoogleFonts.sunshiney(textStyle: textTheme?.display2),
      display1: GoogleFonts.sunshiney(textStyle: textTheme?.display1),
      headline: GoogleFonts.sunshiney(textStyle: textTheme?.headline),
      title: GoogleFonts.sunshiney(textStyle: textTheme?.title),
      subhead: GoogleFonts.sunshiney(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sunshiney(textStyle: textTheme?.body2),
      body1: GoogleFonts.sunshiney(textStyle: textTheme?.body1),
      caption: GoogleFonts.sunshiney(textStyle: textTheme?.caption),
      button: GoogleFonts.sunshiney(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sunshiney(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sunshiney(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Supermercado One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Supermercado+One
  static TextStyle supermercadoOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/supermercadoone/v9/OpNXnpQWg8jc_xps_Gi14kVVEXOn60b3MClBRTs.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SupermercadoOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Supermercado One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Supermercado+One
  static TextTheme supermercadoOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.supermercadoOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.supermercadoOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.supermercadoOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.supermercadoOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.supermercadoOne(textStyle: textTheme?.headline),
      title: GoogleFonts.supermercadoOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.supermercadoOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.supermercadoOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.supermercadoOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.supermercadoOne(textStyle: textTheme?.caption),
      button: GoogleFonts.supermercadoOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.supermercadoOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.supermercadoOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Sura font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sura
  static TextStyle sura({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/sura/v4/SZc23FL5PbyzFf5UWzXtjUM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/sura/v4/SZc53FL5PbyzLUJ7fz3GkUrS8DI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Sura',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Sura font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Sura
  static TextTheme suraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.sura(textStyle: textTheme?.display4),
      display3: GoogleFonts.sura(textStyle: textTheme?.display3),
      display2: GoogleFonts.sura(textStyle: textTheme?.display2),
      display1: GoogleFonts.sura(textStyle: textTheme?.display1),
      headline: GoogleFonts.sura(textStyle: textTheme?.headline),
      title: GoogleFonts.sura(textStyle: textTheme?.title),
      subhead: GoogleFonts.sura(textStyle: textTheme?.subhead),
      body2: GoogleFonts.sura(textStyle: textTheme?.body2),
      body1: GoogleFonts.sura(textStyle: textTheme?.body1),
      caption: GoogleFonts.sura(textStyle: textTheme?.caption),
      button: GoogleFonts.sura(textStyle: textTheme?.button),
      subtitle: GoogleFonts.sura(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.sura(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Suranna font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suranna
  static TextStyle suranna({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/suranna/v7/gokuH6ztGkFjWe58tBRZT2KmgP0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Suranna',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Suranna font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suranna
  static TextTheme surannaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.suranna(textStyle: textTheme?.display4),
      display3: GoogleFonts.suranna(textStyle: textTheme?.display3),
      display2: GoogleFonts.suranna(textStyle: textTheme?.display2),
      display1: GoogleFonts.suranna(textStyle: textTheme?.display1),
      headline: GoogleFonts.suranna(textStyle: textTheme?.headline),
      title: GoogleFonts.suranna(textStyle: textTheme?.title),
      subhead: GoogleFonts.suranna(textStyle: textTheme?.subhead),
      body2: GoogleFonts.suranna(textStyle: textTheme?.body2),
      body1: GoogleFonts.suranna(textStyle: textTheme?.body1),
      caption: GoogleFonts.suranna(textStyle: textTheme?.caption),
      button: GoogleFonts.suranna(textStyle: textTheme?.button),
      subtitle: GoogleFonts.suranna(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.suranna(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Suravaram font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suravaram
  static TextStyle suravaram({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/suravaram/v6/_gP61R_usiY7SCym4xIAi261Qv9roQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Suravaram',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Suravaram font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suravaram
  static TextTheme suravaramTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.suravaram(textStyle: textTheme?.display4),
      display3: GoogleFonts.suravaram(textStyle: textTheme?.display3),
      display2: GoogleFonts.suravaram(textStyle: textTheme?.display2),
      display1: GoogleFonts.suravaram(textStyle: textTheme?.display1),
      headline: GoogleFonts.suravaram(textStyle: textTheme?.headline),
      title: GoogleFonts.suravaram(textStyle: textTheme?.title),
      subhead: GoogleFonts.suravaram(textStyle: textTheme?.subhead),
      body2: GoogleFonts.suravaram(textStyle: textTheme?.body2),
      body1: GoogleFonts.suravaram(textStyle: textTheme?.body1),
      caption: GoogleFonts.suravaram(textStyle: textTheme?.caption),
      button: GoogleFonts.suravaram(textStyle: textTheme?.button),
      subtitle: GoogleFonts.suravaram(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.suravaram(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Suwannaphum font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suwannaphum
  static TextStyle suwannaphum({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/suwannaphum/v13/jAnCgHV7GtDvc8jbe8hXXIWl_8C0Wg2V.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Suwannaphum',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Suwannaphum font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Suwannaphum
  static TextTheme suwannaphumTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.suwannaphum(textStyle: textTheme?.display4),
      display3: GoogleFonts.suwannaphum(textStyle: textTheme?.display3),
      display2: GoogleFonts.suwannaphum(textStyle: textTheme?.display2),
      display1: GoogleFonts.suwannaphum(textStyle: textTheme?.display1),
      headline: GoogleFonts.suwannaphum(textStyle: textTheme?.headline),
      title: GoogleFonts.suwannaphum(textStyle: textTheme?.title),
      subhead: GoogleFonts.suwannaphum(textStyle: textTheme?.subhead),
      body2: GoogleFonts.suwannaphum(textStyle: textTheme?.body2),
      body1: GoogleFonts.suwannaphum(textStyle: textTheme?.body1),
      caption: GoogleFonts.suwannaphum(textStyle: textTheme?.caption),
      button: GoogleFonts.suwannaphum(textStyle: textTheme?.button),
      subtitle: GoogleFonts.suwannaphum(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.suwannaphum(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Swanky and Moo Moo font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Swanky+and+Moo+Moo
  static TextStyle swankyandMooMoo({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/swankyandmoomoo/v9/flUlRrKz24IuWVI_WJYTYcqbEsMUZ3kUtbPkR64SYQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'SwankyandMooMoo',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Swanky and Moo Moo font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Swanky+and+Moo+Moo
  static TextTheme swankyandMooMooTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.display4),
      display3: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.display3),
      display2: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.display2),
      display1: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.display1),
      headline: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.headline),
      title: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.title),
      subhead: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.subhead),
      body2: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.body2),
      body1: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.body1),
      caption: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.caption),
      button: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.button),
      subtitle: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.swankyandMooMoo(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Syncopate font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Syncopate
  static TextStyle syncopate({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/syncopate/v11/pe0sMIuPIYBCpEV5eFdyAv2-C99ycg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/syncopate/v11/pe0pMIuPIYBCpEV5eFdKvtKaA_Rue1UwVg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Syncopate',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Syncopate font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Syncopate
  static TextTheme syncopateTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.syncopate(textStyle: textTheme?.display4),
      display3: GoogleFonts.syncopate(textStyle: textTheme?.display3),
      display2: GoogleFonts.syncopate(textStyle: textTheme?.display2),
      display1: GoogleFonts.syncopate(textStyle: textTheme?.display1),
      headline: GoogleFonts.syncopate(textStyle: textTheme?.headline),
      title: GoogleFonts.syncopate(textStyle: textTheme?.title),
      subhead: GoogleFonts.syncopate(textStyle: textTheme?.subhead),
      body2: GoogleFonts.syncopate(textStyle: textTheme?.body2),
      body1: GoogleFonts.syncopate(textStyle: textTheme?.body1),
      caption: GoogleFonts.syncopate(textStyle: textTheme?.caption),
      button: GoogleFonts.syncopate(textStyle: textTheme?.button),
      subtitle: GoogleFonts.syncopate(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.syncopate(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tajawal font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tajawal
  static TextStyle tajawal({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/tajawal/v3/Iurf6YBj_oCad4k1l_6gLrZjiLlJ-G0.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/tajawal/v3/Iurf6YBj_oCad4k1l5qjLrZjiLlJ-G0.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tajawal/v3/Iura6YBj_oCad4k1rzaLCr5IlLA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/tajawal/v3/Iurf6YBj_oCad4k1l8KiLrZjiLlJ-G0.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/tajawal/v3/Iurf6YBj_oCad4k1l4qkLrZjiLlJ-G0.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/tajawal/v3/Iurf6YBj_oCad4k1l5anLrZjiLlJ-G0.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/tajawal/v3/Iurf6YBj_oCad4k1l7KmLrZjiLlJ-G0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tajawal',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tajawal font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tajawal
  static TextTheme tajawalTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tajawal(textStyle: textTheme?.display4),
      display3: GoogleFonts.tajawal(textStyle: textTheme?.display3),
      display2: GoogleFonts.tajawal(textStyle: textTheme?.display2),
      display1: GoogleFonts.tajawal(textStyle: textTheme?.display1),
      headline: GoogleFonts.tajawal(textStyle: textTheme?.headline),
      title: GoogleFonts.tajawal(textStyle: textTheme?.title),
      subhead: GoogleFonts.tajawal(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tajawal(textStyle: textTheme?.body2),
      body1: GoogleFonts.tajawal(textStyle: textTheme?.body1),
      caption: GoogleFonts.tajawal(textStyle: textTheme?.caption),
      button: GoogleFonts.tajawal(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tajawal(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tajawal(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tangerine font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tangerine
  static TextStyle tangerine({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tangerine/v11/IurY6Y5j_oScZZow4VOBDpxNhLBQ4Q.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/tangerine/v11/Iurd6Y5j_oScZZow4VO5srNpjJtM6G0t9w.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tangerine',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tangerine font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tangerine
  static TextTheme tangerineTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tangerine(textStyle: textTheme?.display4),
      display3: GoogleFonts.tangerine(textStyle: textTheme?.display3),
      display2: GoogleFonts.tangerine(textStyle: textTheme?.display2),
      display1: GoogleFonts.tangerine(textStyle: textTheme?.display1),
      headline: GoogleFonts.tangerine(textStyle: textTheme?.headline),
      title: GoogleFonts.tangerine(textStyle: textTheme?.title),
      subhead: GoogleFonts.tangerine(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tangerine(textStyle: textTheme?.body2),
      body1: GoogleFonts.tangerine(textStyle: textTheme?.body1),
      caption: GoogleFonts.tangerine(textStyle: textTheme?.caption),
      button: GoogleFonts.tangerine(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tangerine(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tangerine(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Taprom font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Taprom
  static TextStyle taprom({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/taprom/v11/UcCn3F82JHycULbFQyk3-0kvHg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Taprom',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Taprom font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Taprom
  static TextTheme tapromTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.taprom(textStyle: textTheme?.display4),
      display3: GoogleFonts.taprom(textStyle: textTheme?.display3),
      display2: GoogleFonts.taprom(textStyle: textTheme?.display2),
      display1: GoogleFonts.taprom(textStyle: textTheme?.display1),
      headline: GoogleFonts.taprom(textStyle: textTheme?.headline),
      title: GoogleFonts.taprom(textStyle: textTheme?.title),
      subhead: GoogleFonts.taprom(textStyle: textTheme?.subhead),
      body2: GoogleFonts.taprom(textStyle: textTheme?.body2),
      body1: GoogleFonts.taprom(textStyle: textTheme?.body1),
      caption: GoogleFonts.taprom(textStyle: textTheme?.caption),
      button: GoogleFonts.taprom(textStyle: textTheme?.button),
      subtitle: GoogleFonts.taprom(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.taprom(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tauri font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tauri
  static TextStyle tauri({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tauri/v8/TwMA-IISS0AM3IpVWHU_TBqO.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tauri',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tauri font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tauri
  static TextTheme tauriTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tauri(textStyle: textTheme?.display4),
      display3: GoogleFonts.tauri(textStyle: textTheme?.display3),
      display2: GoogleFonts.tauri(textStyle: textTheme?.display2),
      display1: GoogleFonts.tauri(textStyle: textTheme?.display1),
      headline: GoogleFonts.tauri(textStyle: textTheme?.headline),
      title: GoogleFonts.tauri(textStyle: textTheme?.title),
      subhead: GoogleFonts.tauri(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tauri(textStyle: textTheme?.body2),
      body1: GoogleFonts.tauri(textStyle: textTheme?.body1),
      caption: GoogleFonts.tauri(textStyle: textTheme?.caption),
      button: GoogleFonts.tauri(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tauri(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tauri(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Taviraj font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Taviraj
  static TextStyle taviraj({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcbv8Cj3ylylTXzRIorV8N1jU2gog.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcdv8Cj3ylylTXzTOwTM8lxr0iwolLl.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahccv8Cj3ylylTXzRCYKd-lbgUS5u0s.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcev8Cj3ylylTXzTOwTn-hRhWa8q0v8ag.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahccv8Cj3ylylTXzREIJd-lbgUS5u0s.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcev8Cj3ylylTXzTOwT--tRhWa8q0v8ag.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcZv8Cj3ylylTXzfO4hU-FwnU0.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcbv8Cj3ylylTXzTOwrV8N1jU2gog.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahccv8Cj3ylylTXzRBoId-lbgUS5u0s.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcev8Cj3ylylTXzTOwTo-pRhWa8q0v8ag.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahccv8Cj3ylylTXzRDYPd-lbgUS5u0s.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcev8Cj3ylylTXzTOwTj-1RhWa8q0v8ag.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahccv8Cj3ylylTXzRFIOd-lbgUS5u0s.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcev8Cj3ylylTXzTOwT6-xRhWa8q0v8ag.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahccv8Cj3ylylTXzRE4Nd-lbgUS5u0s.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcev8Cj3ylylTXzTOwT9-9RhWa8q0v8ag.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahccv8Cj3ylylTXzRGoMd-lbgUS5u0s.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/taviraj/v5/ahcev8Cj3ylylTXzTOwT0-5RhWa8q0v8ag.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Taviraj',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Taviraj font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Taviraj
  static TextTheme tavirajTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.taviraj(textStyle: textTheme?.display4),
      display3: GoogleFonts.taviraj(textStyle: textTheme?.display3),
      display2: GoogleFonts.taviraj(textStyle: textTheme?.display2),
      display1: GoogleFonts.taviraj(textStyle: textTheme?.display1),
      headline: GoogleFonts.taviraj(textStyle: textTheme?.headline),
      title: GoogleFonts.taviraj(textStyle: textTheme?.title),
      subhead: GoogleFonts.taviraj(textStyle: textTheme?.subhead),
      body2: GoogleFonts.taviraj(textStyle: textTheme?.body2),
      body1: GoogleFonts.taviraj(textStyle: textTheme?.body1),
      caption: GoogleFonts.taviraj(textStyle: textTheme?.caption),
      button: GoogleFonts.taviraj(textStyle: textTheme?.button),
      subtitle: GoogleFonts.taviraj(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.taviraj(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Teko font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Teko
  static TextStyle teko({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/teko/v9/LYjCdG7kmE0gdQhfgCNqqVIuTN4.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/teko/v9/LYjNdG7kmE0gTaR3pCtBtVs.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/teko/v9/LYjCdG7kmE0gdVBegCNqqVIuTN4.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/teko/v9/LYjCdG7kmE0gdXxZgCNqqVIuTN4.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/teko/v9/LYjCdG7kmE0gdRhYgCNqqVIuTN4.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Teko',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Teko font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Teko
  static TextTheme tekoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.teko(textStyle: textTheme?.display4),
      display3: GoogleFonts.teko(textStyle: textTheme?.display3),
      display2: GoogleFonts.teko(textStyle: textTheme?.display2),
      display1: GoogleFonts.teko(textStyle: textTheme?.display1),
      headline: GoogleFonts.teko(textStyle: textTheme?.headline),
      title: GoogleFonts.teko(textStyle: textTheme?.title),
      subhead: GoogleFonts.teko(textStyle: textTheme?.subhead),
      body2: GoogleFonts.teko(textStyle: textTheme?.body2),
      body1: GoogleFonts.teko(textStyle: textTheme?.body1),
      caption: GoogleFonts.teko(textStyle: textTheme?.caption),
      button: GoogleFonts.teko(textStyle: textTheme?.button),
      subtitle: GoogleFonts.teko(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.teko(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Telex font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Telex
  static TextStyle telex({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/telex/v8/ieVw2Y1fKWmIO9fTB1piKFIf.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Telex',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Telex font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Telex
  static TextTheme telexTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.telex(textStyle: textTheme?.display4),
      display3: GoogleFonts.telex(textStyle: textTheme?.display3),
      display2: GoogleFonts.telex(textStyle: textTheme?.display2),
      display1: GoogleFonts.telex(textStyle: textTheme?.display1),
      headline: GoogleFonts.telex(textStyle: textTheme?.headline),
      title: GoogleFonts.telex(textStyle: textTheme?.title),
      subhead: GoogleFonts.telex(textStyle: textTheme?.subhead),
      body2: GoogleFonts.telex(textStyle: textTheme?.body2),
      body1: GoogleFonts.telex(textStyle: textTheme?.body1),
      caption: GoogleFonts.telex(textStyle: textTheme?.caption),
      button: GoogleFonts.telex(textStyle: textTheme?.button),
      subtitle: GoogleFonts.telex(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.telex(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tenali Ramakrishna font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tenali+Ramakrishna
  static TextStyle tenaliRamakrishna({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tenaliramakrishna/v6/raxgHj6Yt9gAN3LLKs0BZVMo8jmwn1-8KJXqUFFvtA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TenaliRamakrishna',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tenali Ramakrishna font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tenali+Ramakrishna
  static TextTheme tenaliRamakrishnaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.display4),
      display3: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.display3),
      display2: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.display2),
      display1: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.display1),
      headline: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.headline),
      title: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.title),
      subhead: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.body2),
      body1: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.body1),
      caption: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.caption),
      button: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tenaliRamakrishna(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tenor Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tenor+Sans
  static TextStyle tenorSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tenorsans/v11/bx6ANxqUneKx06UkIXISr3JyC22IyqI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TenorSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tenor Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tenor+Sans
  static TextTheme tenorSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tenorSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.tenorSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.tenorSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.tenorSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.tenorSans(textStyle: textTheme?.headline),
      title: GoogleFonts.tenorSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.tenorSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tenorSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.tenorSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.tenorSans(textStyle: textTheme?.caption),
      button: GoogleFonts.tenorSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tenorSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tenorSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Text Me One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Text+Me+One
  static TextStyle textMeOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/textmeone/v7/i7dOIFdlayuLUvgoFvHQFWZcalayGhyV.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TextMeOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Text Me One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Text+Me+One
  static TextTheme textMeOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.textMeOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.textMeOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.textMeOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.textMeOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.textMeOne(textStyle: textTheme?.headline),
      title: GoogleFonts.textMeOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.textMeOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.textMeOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.textMeOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.textMeOne(textStyle: textTheme?.caption),
      button: GoogleFonts.textMeOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.textMeOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.textMeOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Thasadith font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Thasadith
  static TextStyle thasadith({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/thasadith/v3/mtG44_1TIqPYrd_f5R1YsEkU0CWuFw.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/thasadith/v3/mtG-4_1TIqPYrd_f5R1oskMQ8iC-F1ZE.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/thasadith/v3/mtG94_1TIqPYrd_f5R1gDGYw2A6yHk9d8w.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/thasadith/v3/mtGj4_1TIqPYrd_f5R1osnus3QS2PEpN8zxA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Thasadith',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Thasadith font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Thasadith
  static TextTheme thasadithTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.thasadith(textStyle: textTheme?.display4),
      display3: GoogleFonts.thasadith(textStyle: textTheme?.display3),
      display2: GoogleFonts.thasadith(textStyle: textTheme?.display2),
      display1: GoogleFonts.thasadith(textStyle: textTheme?.display1),
      headline: GoogleFonts.thasadith(textStyle: textTheme?.headline),
      title: GoogleFonts.thasadith(textStyle: textTheme?.title),
      subhead: GoogleFonts.thasadith(textStyle: textTheme?.subhead),
      body2: GoogleFonts.thasadith(textStyle: textTheme?.body2),
      body1: GoogleFonts.thasadith(textStyle: textTheme?.body1),
      caption: GoogleFonts.thasadith(textStyle: textTheme?.caption),
      button: GoogleFonts.thasadith(textStyle: textTheme?.button),
      subtitle: GoogleFonts.thasadith(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.thasadith(textStyle: textTheme?.overline),
    );
  }

  /// Applies the The Girl Next Door font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/The+Girl+Next+Door
  static TextStyle theGirlNextDoor({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/thegirlnextdoor/v10/pe0zMJCIMIsBjFxqYBIcZ6_OI5oFHCYIV7t7w6bE2A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TheGirlNextDoor',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the The Girl Next Door font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/The+Girl+Next+Door
  static TextTheme theGirlNextDoorTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.display4),
      display3: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.display3),
      display2: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.display2),
      display1: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.display1),
      headline: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.headline),
      title: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.title),
      subhead: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.subhead),
      body2: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.body2),
      body1: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.body1),
      caption: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.caption),
      button: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.button),
      subtitle: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.theGirlNextDoor(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tienne font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tienne
  static TextStyle tienne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tienne/v12/AYCKpX7pe9YCRP0LkEPHSFNyxw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/tienne/v12/AYCJpX7pe9YCRP0zLGzjQHhuzvef5Q.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/tienne/v12/AYCJpX7pe9YCRP0zFG7jQHhuzvef5Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tienne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tienne font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tienne
  static TextTheme tienneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tienne(textStyle: textTheme?.display4),
      display3: GoogleFonts.tienne(textStyle: textTheme?.display3),
      display2: GoogleFonts.tienne(textStyle: textTheme?.display2),
      display1: GoogleFonts.tienne(textStyle: textTheme?.display1),
      headline: GoogleFonts.tienne(textStyle: textTheme?.headline),
      title: GoogleFonts.tienne(textStyle: textTheme?.title),
      subhead: GoogleFonts.tienne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tienne(textStyle: textTheme?.body2),
      body1: GoogleFonts.tienne(textStyle: textTheme?.body1),
      caption: GoogleFonts.tienne(textStyle: textTheme?.caption),
      button: GoogleFonts.tienne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tienne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tienne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tillana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tillana
  static TextStyle tillana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tillana/v5/VuJxdNvf35P4qJ1OeKbXOIFneRo.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/tillana/v5/VuJ0dNvf35P4qJ1OQFL-HIlMZRNcp0o.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/tillana/v5/VuJ0dNvf35P4qJ1OQH75HIlMZRNcp0o.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/tillana/v5/VuJ0dNvf35P4qJ1OQBr4HIlMZRNcp0o.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/tillana/v5/VuJ0dNvf35P4qJ1OQAb7HIlMZRNcp0o.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tillana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tillana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tillana
  static TextTheme tillanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tillana(textStyle: textTheme?.display4),
      display3: GoogleFonts.tillana(textStyle: textTheme?.display3),
      display2: GoogleFonts.tillana(textStyle: textTheme?.display2),
      display1: GoogleFonts.tillana(textStyle: textTheme?.display1),
      headline: GoogleFonts.tillana(textStyle: textTheme?.headline),
      title: GoogleFonts.tillana(textStyle: textTheme?.title),
      subhead: GoogleFonts.tillana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tillana(textStyle: textTheme?.body2),
      body1: GoogleFonts.tillana(textStyle: textTheme?.body1),
      caption: GoogleFonts.tillana(textStyle: textTheme?.caption),
      button: GoogleFonts.tillana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tillana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tillana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Timmana font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Timmana
  static TextStyle timmana({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/timmana/v4/6xKvdShfL9yK-rvpCmvbKHwJUOM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Timmana',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Timmana font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Timmana
  static TextTheme timmanaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.timmana(textStyle: textTheme?.display4),
      display3: GoogleFonts.timmana(textStyle: textTheme?.display3),
      display2: GoogleFonts.timmana(textStyle: textTheme?.display2),
      display1: GoogleFonts.timmana(textStyle: textTheme?.display1),
      headline: GoogleFonts.timmana(textStyle: textTheme?.headline),
      title: GoogleFonts.timmana(textStyle: textTheme?.title),
      subhead: GoogleFonts.timmana(textStyle: textTheme?.subhead),
      body2: GoogleFonts.timmana(textStyle: textTheme?.body2),
      body1: GoogleFonts.timmana(textStyle: textTheme?.body1),
      caption: GoogleFonts.timmana(textStyle: textTheme?.caption),
      button: GoogleFonts.timmana(textStyle: textTheme?.button),
      subtitle: GoogleFonts.timmana(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.timmana(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tinos font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tinos
  static TextStyle tinos({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tinos/v13/buE4poGnedXvwgX8dGVh8TI-.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/tinos/v13/buE2poGnedXvwjX-fmFD9CI-4NU.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/tinos/v13/buE1poGnedXvwj1AW0Fp2i43-cxL.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/tinos/v13/buEzpoGnedXvwjX-Rt1s0CoV_NxLeiw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tinos',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tinos font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tinos
  static TextTheme tinosTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tinos(textStyle: textTheme?.display4),
      display3: GoogleFonts.tinos(textStyle: textTheme?.display3),
      display2: GoogleFonts.tinos(textStyle: textTheme?.display2),
      display1: GoogleFonts.tinos(textStyle: textTheme?.display1),
      headline: GoogleFonts.tinos(textStyle: textTheme?.headline),
      title: GoogleFonts.tinos(textStyle: textTheme?.title),
      subhead: GoogleFonts.tinos(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tinos(textStyle: textTheme?.body2),
      body1: GoogleFonts.tinos(textStyle: textTheme?.body1),
      caption: GoogleFonts.tinos(textStyle: textTheme?.caption),
      button: GoogleFonts.tinos(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tinos(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tinos(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Titan One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Titan+One
  static TextStyle titanOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/titanone/v7/mFTzWbsGxbbS_J5cQcjykzIn2Etikg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TitanOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Titan One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Titan+One
  static TextTheme titanOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.titanOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.titanOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.titanOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.titanOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.titanOne(textStyle: textTheme?.headline),
      title: GoogleFonts.titanOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.titanOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.titanOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.titanOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.titanOne(textStyle: textTheme?.caption),
      button: GoogleFonts.titanOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.titanOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.titanOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Titillium Web font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Titillium+Web
  static TextStyle titilliumWeb({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffAzHKIx5YrSYqWM.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPFcZTIAOhVxoMyOr9n_E7fdMbewI1zZpaduWMmxA.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffGjEKIx5YrSYqWM.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPFcZTIAOhVxoMyOr9n_E7fdMbepI5zZpaduWMmxA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPecZTIAOhVxoMyOr9n_E7fRMTsDIRSfr0.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPAcZTIAOhVxoMyOr9n_E7fdMbmCKZXbr2BsA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffBzCKIx5YrSYqWM.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPFcZTIAOhVxoMyOr9n_E7fdMbe0IhzZpaduWMmxA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffHjDKIx5YrSYqWM.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPFcZTIAOhVxoMyOr9n_E7fdMbetIlzZpaduWMmxA.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/titilliumweb/v8/NaPDcZTIAOhVxoMyOr9n_E7ffEDBKIx5YrSYqWM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TitilliumWeb',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Titillium Web font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Titillium+Web
  static TextTheme titilliumWebTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.titilliumWeb(textStyle: textTheme?.display4),
      display3: GoogleFonts.titilliumWeb(textStyle: textTheme?.display3),
      display2: GoogleFonts.titilliumWeb(textStyle: textTheme?.display2),
      display1: GoogleFonts.titilliumWeb(textStyle: textTheme?.display1),
      headline: GoogleFonts.titilliumWeb(textStyle: textTheme?.headline),
      title: GoogleFonts.titilliumWeb(textStyle: textTheme?.title),
      subhead: GoogleFonts.titilliumWeb(textStyle: textTheme?.subhead),
      body2: GoogleFonts.titilliumWeb(textStyle: textTheme?.body2),
      body1: GoogleFonts.titilliumWeb(textStyle: textTheme?.body1),
      caption: GoogleFonts.titilliumWeb(textStyle: textTheme?.caption),
      button: GoogleFonts.titilliumWeb(textStyle: textTheme?.button),
      subtitle: GoogleFonts.titilliumWeb(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.titilliumWeb(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tomorrow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tomorrow
  static TextStyle tomorrow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLgrETNbFtZCeGqgR2xe2XiKMiokE4.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLirETNbFtZCeGqgRXXQwHoLOqtgE5h0A.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLhrETNbFtZCeGqgR0dWkXIBsShiVd4.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLjrETNbFtZCeGqgRXXQ63JDMCDjEd4yVY.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLhrETNbFtZCeGqgR15WUXIBsShiVd4.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLjrETNbFtZCeGqgRXXQ8nKDMCDjEd4yVY.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLmrETNbFtZCeGqgSXVcWHALdio.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLgrETNbFtZCeGqgRXXe2XiKMiokE4.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLhrETNbFtZCeGqgR0hWEXIBsShiVd4.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLjrETNbFtZCeGqgRXXQ5HLDMCDjEd4yVY.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLhrETNbFtZCeGqgR0NX0XIBsShiVd4.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLjrETNbFtZCeGqgRXXQ73MDMCDjEd4yVY.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLhrETNbFtZCeGqgR1pXkXIBsShiVd4.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLjrETNbFtZCeGqgRXXQ9nNDMCDjEd4yVY.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLhrETNbFtZCeGqgR11XUXIBsShiVd4.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLjrETNbFtZCeGqgRXXQ8XODMCDjEd4yVY.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLhrETNbFtZCeGqgR1RXEXIBsShiVd4.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/tomorrow/v2/WBLjrETNbFtZCeGqgRXXQ-HPDMCDjEd4yVY.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Tomorrow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tomorrow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tomorrow
  static TextTheme tomorrowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tomorrow(textStyle: textTheme?.display4),
      display3: GoogleFonts.tomorrow(textStyle: textTheme?.display3),
      display2: GoogleFonts.tomorrow(textStyle: textTheme?.display2),
      display1: GoogleFonts.tomorrow(textStyle: textTheme?.display1),
      headline: GoogleFonts.tomorrow(textStyle: textTheme?.headline),
      title: GoogleFonts.tomorrow(textStyle: textTheme?.title),
      subhead: GoogleFonts.tomorrow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tomorrow(textStyle: textTheme?.body2),
      body1: GoogleFonts.tomorrow(textStyle: textTheme?.body1),
      caption: GoogleFonts.tomorrow(textStyle: textTheme?.caption),
      button: GoogleFonts.tomorrow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tomorrow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tomorrow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trade Winds font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trade+Winds
  static TextStyle tradeWinds({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tradewinds/v8/AYCPpXPpYNIIT7h8-QenM3Jq7PKP5Z_G.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TradeWinds',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trade Winds font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trade+Winds
  static TextTheme tradeWindsTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tradeWinds(textStyle: textTheme?.display4),
      display3: GoogleFonts.tradeWinds(textStyle: textTheme?.display3),
      display2: GoogleFonts.tradeWinds(textStyle: textTheme?.display2),
      display1: GoogleFonts.tradeWinds(textStyle: textTheme?.display1),
      headline: GoogleFonts.tradeWinds(textStyle: textTheme?.headline),
      title: GoogleFonts.tradeWinds(textStyle: textTheme?.title),
      subhead: GoogleFonts.tradeWinds(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tradeWinds(textStyle: textTheme?.body2),
      body1: GoogleFonts.tradeWinds(textStyle: textTheme?.body1),
      caption: GoogleFonts.tradeWinds(textStyle: textTheme?.caption),
      button: GoogleFonts.tradeWinds(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tradeWinds(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tradeWinds(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trirong font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trirong
  static TextStyle trirong({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3EqXNgp8wxdOdOl-go3YRl6ujngw.ttf',
      GoogleFontsVariant.fromString('100italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3CqXNgp8wxdOdOn44QuY5hyO33g8IY.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3DqXNgp8wxdOdOl0QJ_a5L5uH-mts.ttf',
      GoogleFontsVariant.fromString('200italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3BqXNgp8wxdOdOn44QFa9B4sP7itsB5g.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3DqXNgp8wxdOdOlyAK_a5L5uH-mts.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3BqXNgp8wxdOdOn44QcaxB4sP7itsB5g.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3GqXNgp8wxdOdOr4wi2aZg-ug.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3EqXNgp8wxdOdOn44o3YRl6ujngw.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3DqXNgp8wxdOdOl3gL_a5L5uH-mts.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3BqXNgp8wxdOdOn44QKa1B4sP7itsB5g.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3DqXNgp8wxdOdOl1QM_a5L5uH-mts.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3BqXNgp8wxdOdOn44QBapB4sP7itsB5g.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3DqXNgp8wxdOdOlzAN_a5L5uH-mts.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3BqXNgp8wxdOdOn44QYatB4sP7itsB5g.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3DqXNgp8wxdOdOlywO_a5L5uH-mts.ttf',
      GoogleFontsVariant.fromString('800italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3BqXNgp8wxdOdOn44QfahB4sP7itsB5g.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3DqXNgp8wxdOdOlwgP_a5L5uH-mts.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/trirong/v5/7r3BqXNgp8wxdOdOn44QWalB4sP7itsB5g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Trirong',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trirong font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trirong
  static TextTheme trirongTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.trirong(textStyle: textTheme?.display4),
      display3: GoogleFonts.trirong(textStyle: textTheme?.display3),
      display2: GoogleFonts.trirong(textStyle: textTheme?.display2),
      display1: GoogleFonts.trirong(textStyle: textTheme?.display1),
      headline: GoogleFonts.trirong(textStyle: textTheme?.headline),
      title: GoogleFonts.trirong(textStyle: textTheme?.title),
      subhead: GoogleFonts.trirong(textStyle: textTheme?.subhead),
      body2: GoogleFonts.trirong(textStyle: textTheme?.body2),
      body1: GoogleFonts.trirong(textStyle: textTheme?.body1),
      caption: GoogleFonts.trirong(textStyle: textTheme?.caption),
      button: GoogleFonts.trirong(textStyle: textTheme?.button),
      subtitle: GoogleFonts.trirong(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.trirong(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trocchi font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trocchi
  static TextStyle trocchi({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/trocchi/v8/qWcqB6WkuIDxDZLcDrtUvMeTYD0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Trocchi',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trocchi font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trocchi
  static TextTheme trocchiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.trocchi(textStyle: textTheme?.display4),
      display3: GoogleFonts.trocchi(textStyle: textTheme?.display3),
      display2: GoogleFonts.trocchi(textStyle: textTheme?.display2),
      display1: GoogleFonts.trocchi(textStyle: textTheme?.display1),
      headline: GoogleFonts.trocchi(textStyle: textTheme?.headline),
      title: GoogleFonts.trocchi(textStyle: textTheme?.title),
      subhead: GoogleFonts.trocchi(textStyle: textTheme?.subhead),
      body2: GoogleFonts.trocchi(textStyle: textTheme?.body2),
      body1: GoogleFonts.trocchi(textStyle: textTheme?.body1),
      caption: GoogleFonts.trocchi(textStyle: textTheme?.caption),
      button: GoogleFonts.trocchi(textStyle: textTheme?.button),
      subtitle: GoogleFonts.trocchi(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.trocchi(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trochut font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trochut
  static TextStyle trochut({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/trochut/v7/CHyjV-fDDlP9bDIw5nSIfVIPLns.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/trochut/v7/CHyhV-fDDlP9bDIw1naCeXAKPns8jw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/trochut/v7/CHymV-fDDlP9bDIw3sinWVokMnIllmA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Trochut',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trochut font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trochut
  static TextTheme trochutTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.trochut(textStyle: textTheme?.display4),
      display3: GoogleFonts.trochut(textStyle: textTheme?.display3),
      display2: GoogleFonts.trochut(textStyle: textTheme?.display2),
      display1: GoogleFonts.trochut(textStyle: textTheme?.display1),
      headline: GoogleFonts.trochut(textStyle: textTheme?.headline),
      title: GoogleFonts.trochut(textStyle: textTheme?.title),
      subhead: GoogleFonts.trochut(textStyle: textTheme?.subhead),
      body2: GoogleFonts.trochut(textStyle: textTheme?.body2),
      body1: GoogleFonts.trochut(textStyle: textTheme?.body1),
      caption: GoogleFonts.trochut(textStyle: textTheme?.caption),
      button: GoogleFonts.trochut(textStyle: textTheme?.button),
      subtitle: GoogleFonts.trochut(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.trochut(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Trykker font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trykker
  static TextStyle trykker({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/trykker/v8/KtktALyWZJXudUPzhNnoOd2j22U.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Trykker',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Trykker font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Trykker
  static TextTheme trykkerTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.trykker(textStyle: textTheme?.display4),
      display3: GoogleFonts.trykker(textStyle: textTheme?.display3),
      display2: GoogleFonts.trykker(textStyle: textTheme?.display2),
      display1: GoogleFonts.trykker(textStyle: textTheme?.display1),
      headline: GoogleFonts.trykker(textStyle: textTheme?.headline),
      title: GoogleFonts.trykker(textStyle: textTheme?.title),
      subhead: GoogleFonts.trykker(textStyle: textTheme?.subhead),
      body2: GoogleFonts.trykker(textStyle: textTheme?.body2),
      body1: GoogleFonts.trykker(textStyle: textTheme?.body1),
      caption: GoogleFonts.trykker(textStyle: textTheme?.caption),
      button: GoogleFonts.trykker(textStyle: textTheme?.button),
      subtitle: GoogleFonts.trykker(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.trykker(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Tulpen One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tulpen+One
  static TextStyle tulpenOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/tulpenone/v9/dFa6ZfeC474skLgesc0CWj0w_HyIRlE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TulpenOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Tulpen One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Tulpen+One
  static TextTheme tulpenOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.tulpenOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.tulpenOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.tulpenOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.tulpenOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.tulpenOne(textStyle: textTheme?.headline),
      title: GoogleFonts.tulpenOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.tulpenOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.tulpenOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.tulpenOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.tulpenOne(textStyle: textTheme?.caption),
      button: GoogleFonts.tulpenOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.tulpenOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.tulpenOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Turret Road font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Turret+Road
  static TextStyle turretRoad({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/turretroad/v1/pxidypMgpcBFjE84Zv-fE0ONEdeLYk1Mq3ap.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/turretroad/v1/pxidypMgpcBFjE84Zv-fE0PpEteLYk1Mq3ap.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/turretroad/v1/pxiAypMgpcBFjE84Zv-fE3tFOvODSVFF.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/turretroad/v1/pxidypMgpcBFjE84Zv-fE0OxE9eLYk1Mq3ap.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/turretroad/v1/pxidypMgpcBFjE84Zv-fE0P5FdeLYk1Mq3ap.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/turretroad/v1/pxidypMgpcBFjE84Zv-fE0PlFteLYk1Mq3ap.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'TurretRoad',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Turret Road font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Turret+Road
  static TextTheme turretRoadTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.turretRoad(textStyle: textTheme?.display4),
      display3: GoogleFonts.turretRoad(textStyle: textTheme?.display3),
      display2: GoogleFonts.turretRoad(textStyle: textTheme?.display2),
      display1: GoogleFonts.turretRoad(textStyle: textTheme?.display1),
      headline: GoogleFonts.turretRoad(textStyle: textTheme?.headline),
      title: GoogleFonts.turretRoad(textStyle: textTheme?.title),
      subhead: GoogleFonts.turretRoad(textStyle: textTheme?.subhead),
      body2: GoogleFonts.turretRoad(textStyle: textTheme?.body2),
      body1: GoogleFonts.turretRoad(textStyle: textTheme?.body1),
      caption: GoogleFonts.turretRoad(textStyle: textTheme?.caption),
      button: GoogleFonts.turretRoad(textStyle: textTheme?.button),
      subtitle: GoogleFonts.turretRoad(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.turretRoad(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ubuntu font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu
  static TextStyle ubuntu({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/ubuntu/v14/4iCv6KVjbNBYlgoC1CzTt2aMH4V_gg.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/ubuntu/v14/4iCp6KVjbNBYlgoKejZftWyIPYBvgpUI.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ubuntu/v14/4iCs6KVjbNBYlgo6eAT3v02QFg.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ubuntu/v14/4iCu6KVjbNBYlgoKeg7znUiAFpxm.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/ubuntu/v14/4iCv6KVjbNBYlgoCjC3Tt2aMH4V_gg.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/ubuntu/v14/4iCp6KVjbNBYlgoKejYHtGyIPYBvgpUI.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ubuntu/v14/4iCv6KVjbNBYlgoCxCvTt2aMH4V_gg.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ubuntu/v14/4iCp6KVjbNBYlgoKejZPsmyIPYBvgpUI.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ubuntu',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ubuntu font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu
  static TextTheme ubuntuTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ubuntu(textStyle: textTheme?.display4),
      display3: GoogleFonts.ubuntu(textStyle: textTheme?.display3),
      display2: GoogleFonts.ubuntu(textStyle: textTheme?.display2),
      display1: GoogleFonts.ubuntu(textStyle: textTheme?.display1),
      headline: GoogleFonts.ubuntu(textStyle: textTheme?.headline),
      title: GoogleFonts.ubuntu(textStyle: textTheme?.title),
      subhead: GoogleFonts.ubuntu(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ubuntu(textStyle: textTheme?.body2),
      body1: GoogleFonts.ubuntu(textStyle: textTheme?.body1),
      caption: GoogleFonts.ubuntu(textStyle: textTheme?.caption),
      button: GoogleFonts.ubuntu(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ubuntu(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ubuntu(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ubuntu Condensed font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu+Condensed
  static TextStyle ubuntuCondensed({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ubuntucondensed/v10/u-4k0rCzjgs5J7oXnJcM_0kACGMtf-fVqvHoJXw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UbuntuCondensed',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ubuntu Condensed font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu+Condensed
  static TextTheme ubuntuCondensedTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.display4),
      display3: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.display3),
      display2: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.display2),
      display1: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.display1),
      headline: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.headline),
      title: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.title),
      subhead: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.body2),
      body1: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.body1),
      caption: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.caption),
      button: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ubuntuCondensed(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ubuntu Mono font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu+Mono
  static TextStyle ubuntuMono({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ubuntumono/v9/KFOjCneDtsqEr0keqCMhbBc9AMX6lJBP.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/ubuntumono/v9/KFOhCneDtsqEr0keqCMhbCc_CsHYkYBPY3o.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/ubuntumono/v9/KFO-CneDtsqEr0keqCMhbC-BL-Hyv4xGemO1.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/ubuntumono/v9/KFO8CneDtsqEr0keqCMhbCc_Mn33tYhkf3O1GVg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UbuntuMono',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ubuntu Mono font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ubuntu+Mono
  static TextTheme ubuntuMonoTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ubuntuMono(textStyle: textTheme?.display4),
      display3: GoogleFonts.ubuntuMono(textStyle: textTheme?.display3),
      display2: GoogleFonts.ubuntuMono(textStyle: textTheme?.display2),
      display1: GoogleFonts.ubuntuMono(textStyle: textTheme?.display1),
      headline: GoogleFonts.ubuntuMono(textStyle: textTheme?.headline),
      title: GoogleFonts.ubuntuMono(textStyle: textTheme?.title),
      subhead: GoogleFonts.ubuntuMono(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ubuntuMono(textStyle: textTheme?.body2),
      body1: GoogleFonts.ubuntuMono(textStyle: textTheme?.body1),
      caption: GoogleFonts.ubuntuMono(textStyle: textTheme?.caption),
      button: GoogleFonts.ubuntuMono(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ubuntuMono(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ubuntuMono(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Ultra font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ultra
  static TextStyle ultra({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/ultra/v12/zOLy4prXmrtY-tT6yLOD6NxF.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Ultra',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Ultra font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Ultra
  static TextTheme ultraTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.ultra(textStyle: textTheme?.display4),
      display3: GoogleFonts.ultra(textStyle: textTheme?.display3),
      display2: GoogleFonts.ultra(textStyle: textTheme?.display2),
      display1: GoogleFonts.ultra(textStyle: textTheme?.display1),
      headline: GoogleFonts.ultra(textStyle: textTheme?.headline),
      title: GoogleFonts.ultra(textStyle: textTheme?.title),
      subhead: GoogleFonts.ultra(textStyle: textTheme?.subhead),
      body2: GoogleFonts.ultra(textStyle: textTheme?.body2),
      body1: GoogleFonts.ultra(textStyle: textTheme?.body1),
      caption: GoogleFonts.ultra(textStyle: textTheme?.caption),
      button: GoogleFonts.ultra(textStyle: textTheme?.button),
      subtitle: GoogleFonts.ultra(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.ultra(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Uncial Antiqua font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Uncial+Antiqua
  static TextStyle uncialAntiqua({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/uncialantiqua/v7/N0bM2S5WOex4OUbESzoESK-i-PfRS5VBBSSF.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UncialAntiqua',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Uncial Antiqua font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Uncial+Antiqua
  static TextTheme uncialAntiquaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.uncialAntiqua(textStyle: textTheme?.display4),
      display3: GoogleFonts.uncialAntiqua(textStyle: textTheme?.display3),
      display2: GoogleFonts.uncialAntiqua(textStyle: textTheme?.display2),
      display1: GoogleFonts.uncialAntiqua(textStyle: textTheme?.display1),
      headline: GoogleFonts.uncialAntiqua(textStyle: textTheme?.headline),
      title: GoogleFonts.uncialAntiqua(textStyle: textTheme?.title),
      subhead: GoogleFonts.uncialAntiqua(textStyle: textTheme?.subhead),
      body2: GoogleFonts.uncialAntiqua(textStyle: textTheme?.body2),
      body1: GoogleFonts.uncialAntiqua(textStyle: textTheme?.body1),
      caption: GoogleFonts.uncialAntiqua(textStyle: textTheme?.caption),
      button: GoogleFonts.uncialAntiqua(textStyle: textTheme?.button),
      subtitle: GoogleFonts.uncialAntiqua(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.uncialAntiqua(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Underdog font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Underdog
  static TextStyle underdog({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/underdog/v8/CHygV-jCElj7diMroVSiU14GN2Il.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Underdog',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Underdog font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Underdog
  static TextTheme underdogTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.underdog(textStyle: textTheme?.display4),
      display3: GoogleFonts.underdog(textStyle: textTheme?.display3),
      display2: GoogleFonts.underdog(textStyle: textTheme?.display2),
      display1: GoogleFonts.underdog(textStyle: textTheme?.display1),
      headline: GoogleFonts.underdog(textStyle: textTheme?.headline),
      title: GoogleFonts.underdog(textStyle: textTheme?.title),
      subhead: GoogleFonts.underdog(textStyle: textTheme?.subhead),
      body2: GoogleFonts.underdog(textStyle: textTheme?.body2),
      body1: GoogleFonts.underdog(textStyle: textTheme?.body1),
      caption: GoogleFonts.underdog(textStyle: textTheme?.caption),
      button: GoogleFonts.underdog(textStyle: textTheme?.button),
      subtitle: GoogleFonts.underdog(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.underdog(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Unica One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unica+One
  static TextStyle unicaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/unicaone/v7/DPEuYwWHyAYGVTSmalshdtffuEY7FA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UnicaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Unica One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unica+One
  static TextTheme unicaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unicaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.unicaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.unicaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.unicaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.unicaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.unicaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.unicaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unicaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.unicaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.unicaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.unicaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unicaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unicaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the UnifrakturCook font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/UnifrakturCook
  static TextStyle unifrakturCook({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/unifrakturcook/v11/IurA6Yli8YOdcoky-0PTTdkm56n05Uw13ILXs-h6.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UnifrakturCook',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the UnifrakturCook font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/UnifrakturCook
  static TextTheme unifrakturCookTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unifrakturCook(textStyle: textTheme?.display4),
      display3: GoogleFonts.unifrakturCook(textStyle: textTheme?.display3),
      display2: GoogleFonts.unifrakturCook(textStyle: textTheme?.display2),
      display1: GoogleFonts.unifrakturCook(textStyle: textTheme?.display1),
      headline: GoogleFonts.unifrakturCook(textStyle: textTheme?.headline),
      title: GoogleFonts.unifrakturCook(textStyle: textTheme?.title),
      subhead: GoogleFonts.unifrakturCook(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unifrakturCook(textStyle: textTheme?.body2),
      body1: GoogleFonts.unifrakturCook(textStyle: textTheme?.body1),
      caption: GoogleFonts.unifrakturCook(textStyle: textTheme?.caption),
      button: GoogleFonts.unifrakturCook(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unifrakturCook(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unifrakturCook(textStyle: textTheme?.overline),
    );
  }

  /// Applies the UnifrakturMaguntia font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/UnifrakturMaguntia
  static TextStyle unifrakturMaguntia({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/unifrakturmaguntia/v10/WWXPlieVYwiGNomYU-ciRLRvEmK7oaVun2xNNgNa1A.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'UnifrakturMaguntia',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the UnifrakturMaguntia font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/UnifrakturMaguntia
  static TextTheme unifrakturMaguntiaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.display4),
      display3: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.display3),
      display2: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.display2),
      display1: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.display1),
      headline: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.headline),
      title: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.title),
      subhead: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.body2),
      body1: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.body1),
      caption: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.caption),
      button: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unifrakturMaguntia(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Unkempt font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unkempt
  static TextStyle unkempt({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/unkempt/v11/2EbnL-Z2DFZue0DSSYYf8z2Yt_c.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/unkempt/v11/2EbiL-Z2DFZue0DScTow1zWzq_5uT84.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Unkempt',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Unkempt font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unkempt
  static TextTheme unkemptTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unkempt(textStyle: textTheme?.display4),
      display3: GoogleFonts.unkempt(textStyle: textTheme?.display3),
      display2: GoogleFonts.unkempt(textStyle: textTheme?.display2),
      display1: GoogleFonts.unkempt(textStyle: textTheme?.display1),
      headline: GoogleFonts.unkempt(textStyle: textTheme?.headline),
      title: GoogleFonts.unkempt(textStyle: textTheme?.title),
      subhead: GoogleFonts.unkempt(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unkempt(textStyle: textTheme?.body2),
      body1: GoogleFonts.unkempt(textStyle: textTheme?.body1),
      caption: GoogleFonts.unkempt(textStyle: textTheme?.caption),
      button: GoogleFonts.unkempt(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unkempt(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unkempt(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Unlock font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unlock
  static TextStyle unlock({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/unlock/v9/7Au-p_8ykD-cDl7GKAjSwkUVOQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Unlock',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Unlock font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unlock
  static TextTheme unlockTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unlock(textStyle: textTheme?.display4),
      display3: GoogleFonts.unlock(textStyle: textTheme?.display3),
      display2: GoogleFonts.unlock(textStyle: textTheme?.display2),
      display1: GoogleFonts.unlock(textStyle: textTheme?.display1),
      headline: GoogleFonts.unlock(textStyle: textTheme?.headline),
      title: GoogleFonts.unlock(textStyle: textTheme?.title),
      subhead: GoogleFonts.unlock(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unlock(textStyle: textTheme?.body2),
      body1: GoogleFonts.unlock(textStyle: textTheme?.body1),
      caption: GoogleFonts.unlock(textStyle: textTheme?.caption),
      button: GoogleFonts.unlock(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unlock(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unlock(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Unna font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unna
  static TextStyle unna({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/unna/v13/AYCEpXzofN0NCpgBlGHCWFM.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/unna/v13/AYCKpXzofN0NOpoLkEPHSFNyxw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/unna/v13/AYCLpXzofN0NMiQusGnpRFpr3vc.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/unna/v13/AYCJpXzofN0NOpozLGzjQHhuzvef5Q.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Unna',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Unna font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Unna
  static TextTheme unnaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.unna(textStyle: textTheme?.display4),
      display3: GoogleFonts.unna(textStyle: textTheme?.display3),
      display2: GoogleFonts.unna(textStyle: textTheme?.display2),
      display1: GoogleFonts.unna(textStyle: textTheme?.display1),
      headline: GoogleFonts.unna(textStyle: textTheme?.headline),
      title: GoogleFonts.unna(textStyle: textTheme?.title),
      subhead: GoogleFonts.unna(textStyle: textTheme?.subhead),
      body2: GoogleFonts.unna(textStyle: textTheme?.body2),
      body1: GoogleFonts.unna(textStyle: textTheme?.body1),
      caption: GoogleFonts.unna(textStyle: textTheme?.caption),
      button: GoogleFonts.unna(textStyle: textTheme?.button),
      subtitle: GoogleFonts.unna(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.unna(textStyle: textTheme?.overline),
    );
  }

  /// Applies the VT323 font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/VT323
  static TextStyle vT323({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vt323/v11/pxiKyp0ihIEF2hsYHpT2dkNE.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VT323',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the VT323 font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/VT323
  static TextTheme vT323TextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vT323(textStyle: textTheme?.display4),
      display3: GoogleFonts.vT323(textStyle: textTheme?.display3),
      display2: GoogleFonts.vT323(textStyle: textTheme?.display2),
      display1: GoogleFonts.vT323(textStyle: textTheme?.display1),
      headline: GoogleFonts.vT323(textStyle: textTheme?.headline),
      title: GoogleFonts.vT323(textStyle: textTheme?.title),
      subhead: GoogleFonts.vT323(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vT323(textStyle: textTheme?.body2),
      body1: GoogleFonts.vT323(textStyle: textTheme?.body1),
      caption: GoogleFonts.vT323(textStyle: textTheme?.caption),
      button: GoogleFonts.vT323(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vT323(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vT323(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vampiro One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vampiro+One
  static TextStyle vampiroOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vampiroone/v10/gokqH6DoDl5yXvJytFsdLkqnsvhIor3K.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VampiroOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vampiro One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vampiro+One
  static TextTheme vampiroOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vampiroOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.vampiroOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.vampiroOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.vampiroOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.vampiroOne(textStyle: textTheme?.headline),
      title: GoogleFonts.vampiroOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.vampiroOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vampiroOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.vampiroOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.vampiroOne(textStyle: textTheme?.caption),
      button: GoogleFonts.vampiroOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vampiroOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vampiroOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Varela font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Varela
  static TextStyle varela({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/varela/v10/DPEtYwqExx0AWHXJBBQFfvzDsQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Varela',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Varela font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Varela
  static TextTheme varelaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.varela(textStyle: textTheme?.display4),
      display3: GoogleFonts.varela(textStyle: textTheme?.display3),
      display2: GoogleFonts.varela(textStyle: textTheme?.display2),
      display1: GoogleFonts.varela(textStyle: textTheme?.display1),
      headline: GoogleFonts.varela(textStyle: textTheme?.headline),
      title: GoogleFonts.varela(textStyle: textTheme?.title),
      subhead: GoogleFonts.varela(textStyle: textTheme?.subhead),
      body2: GoogleFonts.varela(textStyle: textTheme?.body2),
      body1: GoogleFonts.varela(textStyle: textTheme?.body1),
      caption: GoogleFonts.varela(textStyle: textTheme?.caption),
      button: GoogleFonts.varela(textStyle: textTheme?.button),
      subtitle: GoogleFonts.varela(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.varela(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Varela Round font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Varela+Round
  static TextStyle varelaRound({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/varelaround/v12/w8gdH283Tvk__Lua32TysjIvoMGOD9gxZw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VarelaRound',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Varela Round font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Varela+Round
  static TextTheme varelaRoundTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.varelaRound(textStyle: textTheme?.display4),
      display3: GoogleFonts.varelaRound(textStyle: textTheme?.display3),
      display2: GoogleFonts.varelaRound(textStyle: textTheme?.display2),
      display1: GoogleFonts.varelaRound(textStyle: textTheme?.display1),
      headline: GoogleFonts.varelaRound(textStyle: textTheme?.headline),
      title: GoogleFonts.varelaRound(textStyle: textTheme?.title),
      subhead: GoogleFonts.varelaRound(textStyle: textTheme?.subhead),
      body2: GoogleFonts.varelaRound(textStyle: textTheme?.body2),
      body1: GoogleFonts.varelaRound(textStyle: textTheme?.body1),
      caption: GoogleFonts.varelaRound(textStyle: textTheme?.caption),
      button: GoogleFonts.varelaRound(textStyle: textTheme?.button),
      subtitle: GoogleFonts.varelaRound(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.varelaRound(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vast Shadow font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vast+Shadow
  static TextStyle vastShadow({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vastshadow/v9/pe0qMImKOZ1V62ZwbVY9dfe6Kdpickwp.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VastShadow',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vast Shadow font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vast+Shadow
  static TextTheme vastShadowTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vastShadow(textStyle: textTheme?.display4),
      display3: GoogleFonts.vastShadow(textStyle: textTheme?.display3),
      display2: GoogleFonts.vastShadow(textStyle: textTheme?.display2),
      display1: GoogleFonts.vastShadow(textStyle: textTheme?.display1),
      headline: GoogleFonts.vastShadow(textStyle: textTheme?.headline),
      title: GoogleFonts.vastShadow(textStyle: textTheme?.title),
      subhead: GoogleFonts.vastShadow(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vastShadow(textStyle: textTheme?.body2),
      body1: GoogleFonts.vastShadow(textStyle: textTheme?.body1),
      caption: GoogleFonts.vastShadow(textStyle: textTheme?.caption),
      button: GoogleFonts.vastShadow(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vastShadow(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vastShadow(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vesper Libre font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vesper+Libre
  static TextStyle vesperLibre({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vesperlibre/v11/bx6CNxyWnf-uxPdXDHUD_Rd4D0-N2qIWVQ.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/vesperlibre/v11/bx6dNxyWnf-uxPdXDHUD_RdA-2ap0okKXKvPlw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/vesperlibre/v11/bx6dNxyWnf-uxPdXDHUD_RdAs2Cp0okKXKvPlw.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/vesperlibre/v11/bx6dNxyWnf-uxPdXDHUD_RdAi2Kp0okKXKvPlw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VesperLibre',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vesper Libre font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vesper+Libre
  static TextTheme vesperLibreTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vesperLibre(textStyle: textTheme?.display4),
      display3: GoogleFonts.vesperLibre(textStyle: textTheme?.display3),
      display2: GoogleFonts.vesperLibre(textStyle: textTheme?.display2),
      display1: GoogleFonts.vesperLibre(textStyle: textTheme?.display1),
      headline: GoogleFonts.vesperLibre(textStyle: textTheme?.headline),
      title: GoogleFonts.vesperLibre(textStyle: textTheme?.title),
      subhead: GoogleFonts.vesperLibre(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vesperLibre(textStyle: textTheme?.body2),
      body1: GoogleFonts.vesperLibre(textStyle: textTheme?.body1),
      caption: GoogleFonts.vesperLibre(textStyle: textTheme?.caption),
      button: GoogleFonts.vesperLibre(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vesperLibre(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vesperLibre(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vibes font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vibes
  static TextStyle vibes({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vibes/v1/QdVYSTsmIB6tmbd3HpbsuBlh.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Vibes',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vibes font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vibes
  static TextTheme vibesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vibes(textStyle: textTheme?.display4),
      display3: GoogleFonts.vibes(textStyle: textTheme?.display3),
      display2: GoogleFonts.vibes(textStyle: textTheme?.display2),
      display1: GoogleFonts.vibes(textStyle: textTheme?.display1),
      headline: GoogleFonts.vibes(textStyle: textTheme?.headline),
      title: GoogleFonts.vibes(textStyle: textTheme?.title),
      subhead: GoogleFonts.vibes(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vibes(textStyle: textTheme?.body2),
      body1: GoogleFonts.vibes(textStyle: textTheme?.body1),
      caption: GoogleFonts.vibes(textStyle: textTheme?.caption),
      button: GoogleFonts.vibes(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vibes(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vibes(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vibur font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vibur
  static TextStyle vibur({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vibur/v10/DPEiYwmEzw0QRjTpLjoJd-Xa.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Vibur',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vibur font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vibur
  static TextTheme viburTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vibur(textStyle: textTheme?.display4),
      display3: GoogleFonts.vibur(textStyle: textTheme?.display3),
      display2: GoogleFonts.vibur(textStyle: textTheme?.display2),
      display1: GoogleFonts.vibur(textStyle: textTheme?.display1),
      headline: GoogleFonts.vibur(textStyle: textTheme?.headline),
      title: GoogleFonts.vibur(textStyle: textTheme?.title),
      subhead: GoogleFonts.vibur(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vibur(textStyle: textTheme?.body2),
      body1: GoogleFonts.vibur(textStyle: textTheme?.body1),
      caption: GoogleFonts.vibur(textStyle: textTheme?.caption),
      button: GoogleFonts.vibur(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vibur(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vibur(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vidaloka font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vidaloka
  static TextStyle vidaloka({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vidaloka/v12/7cHrv4c3ipenMKlEass8yn4hnCci.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Vidaloka',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vidaloka font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vidaloka
  static TextTheme vidalokaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vidaloka(textStyle: textTheme?.display4),
      display3: GoogleFonts.vidaloka(textStyle: textTheme?.display3),
      display2: GoogleFonts.vidaloka(textStyle: textTheme?.display2),
      display1: GoogleFonts.vidaloka(textStyle: textTheme?.display1),
      headline: GoogleFonts.vidaloka(textStyle: textTheme?.headline),
      title: GoogleFonts.vidaloka(textStyle: textTheme?.title),
      subhead: GoogleFonts.vidaloka(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vidaloka(textStyle: textTheme?.body2),
      body1: GoogleFonts.vidaloka(textStyle: textTheme?.body1),
      caption: GoogleFonts.vidaloka(textStyle: textTheme?.caption),
      button: GoogleFonts.vidaloka(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vidaloka(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vidaloka(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Viga font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Viga
  static TextStyle viga({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/viga/v8/xMQbuFFdSaiX_QIjD4e2OX8.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Viga',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Viga font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Viga
  static TextTheme vigaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.viga(textStyle: textTheme?.display4),
      display3: GoogleFonts.viga(textStyle: textTheme?.display3),
      display2: GoogleFonts.viga(textStyle: textTheme?.display2),
      display1: GoogleFonts.viga(textStyle: textTheme?.display1),
      headline: GoogleFonts.viga(textStyle: textTheme?.headline),
      title: GoogleFonts.viga(textStyle: textTheme?.title),
      subhead: GoogleFonts.viga(textStyle: textTheme?.subhead),
      body2: GoogleFonts.viga(textStyle: textTheme?.body2),
      body1: GoogleFonts.viga(textStyle: textTheme?.body1),
      caption: GoogleFonts.viga(textStyle: textTheme?.caption),
      button: GoogleFonts.viga(textStyle: textTheme?.button),
      subtitle: GoogleFonts.viga(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.viga(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Voces font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Voces
  static TextStyle voces({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/voces/v9/-F6_fjJyLyU8d4PBBG7YpzlJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Voces',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Voces font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Voces
  static TextTheme vocesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.voces(textStyle: textTheme?.display4),
      display3: GoogleFonts.voces(textStyle: textTheme?.display3),
      display2: GoogleFonts.voces(textStyle: textTheme?.display2),
      display1: GoogleFonts.voces(textStyle: textTheme?.display1),
      headline: GoogleFonts.voces(textStyle: textTheme?.headline),
      title: GoogleFonts.voces(textStyle: textTheme?.title),
      subhead: GoogleFonts.voces(textStyle: textTheme?.subhead),
      body2: GoogleFonts.voces(textStyle: textTheme?.body2),
      body1: GoogleFonts.voces(textStyle: textTheme?.body1),
      caption: GoogleFonts.voces(textStyle: textTheme?.caption),
      button: GoogleFonts.voces(textStyle: textTheme?.button),
      subtitle: GoogleFonts.voces(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.voces(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Volkhov font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Volkhov
  static TextStyle volkhov({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/volkhov/v11/SlGQmQieoJcKemNeQTIOhHxzcD0.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/volkhov/v11/SlGSmQieoJcKemNecTAEgF52YD0NYw.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/volkhov/v11/SlGVmQieoJcKemNeeY4hoHRYbDQUego.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/volkhov/v11/SlGXmQieoJcKemNecTA8PHFSaBYRagrQrA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Volkhov',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Volkhov font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Volkhov
  static TextTheme volkhovTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.volkhov(textStyle: textTheme?.display4),
      display3: GoogleFonts.volkhov(textStyle: textTheme?.display3),
      display2: GoogleFonts.volkhov(textStyle: textTheme?.display2),
      display1: GoogleFonts.volkhov(textStyle: textTheme?.display1),
      headline: GoogleFonts.volkhov(textStyle: textTheme?.headline),
      title: GoogleFonts.volkhov(textStyle: textTheme?.title),
      subhead: GoogleFonts.volkhov(textStyle: textTheme?.subhead),
      body2: GoogleFonts.volkhov(textStyle: textTheme?.body2),
      body1: GoogleFonts.volkhov(textStyle: textTheme?.body1),
      caption: GoogleFonts.volkhov(textStyle: textTheme?.caption),
      button: GoogleFonts.volkhov(textStyle: textTheme?.button),
      subtitle: GoogleFonts.volkhov(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.volkhov(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vollkorn font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vollkorn
  static TextStyle vollkorn({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vollkorn/v10/0yb9GDoxxrvAnPhYGykuYkw2rQg1.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/vollkorn/v10/0yb7GDoxxrvAnPhYGxksaEgUqBg15TY.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/vollkorn/v10/0yb6GDoxxrvAnPhYGxH2TGg-hhQ8_C_3.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/vollkorn/v10/0yb4GDoxxrvAnPhYGxksUJA6jBAe-T_34DM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/vollkorn/v10/0yb6GDoxxrvAnPhYGxGSTWg-hhQ8_C_3.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/vollkorn/v10/0yb4GDoxxrvAnPhYGxksUPQ7jBAe-T_34DM.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/vollkorn/v10/0yb6GDoxxrvAnPhYGxGqT2g-hhQ8_C_3.ttf',
      GoogleFontsVariant.fromString('900italic'):
          'https://fonts.gstatic.com/s/vollkorn/v10/0yb4GDoxxrvAnPhYGxksUMw5jBAe-T_34DM.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Vollkorn',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vollkorn font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vollkorn
  static TextTheme vollkornTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vollkorn(textStyle: textTheme?.display4),
      display3: GoogleFonts.vollkorn(textStyle: textTheme?.display3),
      display2: GoogleFonts.vollkorn(textStyle: textTheme?.display2),
      display1: GoogleFonts.vollkorn(textStyle: textTheme?.display1),
      headline: GoogleFonts.vollkorn(textStyle: textTheme?.headline),
      title: GoogleFonts.vollkorn(textStyle: textTheme?.title),
      subhead: GoogleFonts.vollkorn(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vollkorn(textStyle: textTheme?.body2),
      body1: GoogleFonts.vollkorn(textStyle: textTheme?.body1),
      caption: GoogleFonts.vollkorn(textStyle: textTheme?.caption),
      button: GoogleFonts.vollkorn(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vollkorn(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vollkorn(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Vollkorn SC font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vollkorn+SC
  static TextStyle vollkornSC({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/vollkornsc/v3/j8_v6-zQ3rXpceZj9cqnVhF5NH-iSq_E.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/vollkornsc/v3/j8_y6-zQ3rXpceZj9cqnVimhGluqYbPN5Yjn.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/vollkornsc/v3/j8_y6-zQ3rXpceZj9cqnVinFG1uqYbPN5Yjn.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/vollkornsc/v3/j8_y6-zQ3rXpceZj9cqnVin9GVuqYbPN5Yjn.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'VollkornSC',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Vollkorn SC font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Vollkorn+SC
  static TextTheme vollkornSCTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.vollkornSC(textStyle: textTheme?.display4),
      display3: GoogleFonts.vollkornSC(textStyle: textTheme?.display3),
      display2: GoogleFonts.vollkornSC(textStyle: textTheme?.display2),
      display1: GoogleFonts.vollkornSC(textStyle: textTheme?.display1),
      headline: GoogleFonts.vollkornSC(textStyle: textTheme?.headline),
      title: GoogleFonts.vollkornSC(textStyle: textTheme?.title),
      subhead: GoogleFonts.vollkornSC(textStyle: textTheme?.subhead),
      body2: GoogleFonts.vollkornSC(textStyle: textTheme?.body2),
      body1: GoogleFonts.vollkornSC(textStyle: textTheme?.body1),
      caption: GoogleFonts.vollkornSC(textStyle: textTheme?.caption),
      button: GoogleFonts.vollkornSC(textStyle: textTheme?.button),
      subtitle: GoogleFonts.vollkornSC(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.vollkornSC(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Voltaire font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Voltaire
  static TextStyle voltaire({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/voltaire/v9/1Pttg8PcRfSblAvGvQooYKVnBOif.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Voltaire',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Voltaire font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Voltaire
  static TextTheme voltaireTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.voltaire(textStyle: textTheme?.display4),
      display3: GoogleFonts.voltaire(textStyle: textTheme?.display3),
      display2: GoogleFonts.voltaire(textStyle: textTheme?.display2),
      display1: GoogleFonts.voltaire(textStyle: textTheme?.display1),
      headline: GoogleFonts.voltaire(textStyle: textTheme?.headline),
      title: GoogleFonts.voltaire(textStyle: textTheme?.title),
      subhead: GoogleFonts.voltaire(textStyle: textTheme?.subhead),
      body2: GoogleFonts.voltaire(textStyle: textTheme?.body2),
      body1: GoogleFonts.voltaire(textStyle: textTheme?.body1),
      caption: GoogleFonts.voltaire(textStyle: textTheme?.caption),
      button: GoogleFonts.voltaire(textStyle: textTheme?.button),
      subtitle: GoogleFonts.voltaire(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.voltaire(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Waiting for the Sunrise font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Waiting+for+the+Sunrise
  static TextStyle waitingfortheSunrise({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/waitingforthesunrise/v10/WBL1rFvOYl9CEv2i1mO6KUW8RKWJ2zoXoz5JsYZQ9h_ZYk5J.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WaitingfortheSunrise',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Waiting for the Sunrise font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Waiting+for+the+Sunrise
  static TextTheme waitingfortheSunriseTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.display4),
      display3:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.display3),
      display2:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.display2),
      display1:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.display1),
      headline:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.headline),
      title: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.title),
      subhead: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.subhead),
      body2: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.body2),
      body1: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.body1),
      caption: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.caption),
      button: GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.button),
      subtitle:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.subtitle),
      overline:
          GoogleFonts.waitingfortheSunrise(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Wallpoet font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wallpoet
  static TextStyle wallpoet({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/wallpoet/v11/f0X10em2_8RnXVVdUNbu7cXP8L8G.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Wallpoet',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Wallpoet font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wallpoet
  static TextTheme wallpoetTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.wallpoet(textStyle: textTheme?.display4),
      display3: GoogleFonts.wallpoet(textStyle: textTheme?.display3),
      display2: GoogleFonts.wallpoet(textStyle: textTheme?.display2),
      display1: GoogleFonts.wallpoet(textStyle: textTheme?.display1),
      headline: GoogleFonts.wallpoet(textStyle: textTheme?.headline),
      title: GoogleFonts.wallpoet(textStyle: textTheme?.title),
      subhead: GoogleFonts.wallpoet(textStyle: textTheme?.subhead),
      body2: GoogleFonts.wallpoet(textStyle: textTheme?.body2),
      body1: GoogleFonts.wallpoet(textStyle: textTheme?.body1),
      caption: GoogleFonts.wallpoet(textStyle: textTheme?.caption),
      button: GoogleFonts.wallpoet(textStyle: textTheme?.button),
      subtitle: GoogleFonts.wallpoet(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.wallpoet(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Walter Turncoat font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Walter+Turncoat
  static TextStyle walterTurncoat({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/walterturncoat/v10/snfys0Gs98ln43n0d-14ULoToe67YB2dQ5ZPqQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WalterTurncoat',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Walter Turncoat font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Walter+Turncoat
  static TextTheme walterTurncoatTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.walterTurncoat(textStyle: textTheme?.display4),
      display3: GoogleFonts.walterTurncoat(textStyle: textTheme?.display3),
      display2: GoogleFonts.walterTurncoat(textStyle: textTheme?.display2),
      display1: GoogleFonts.walterTurncoat(textStyle: textTheme?.display1),
      headline: GoogleFonts.walterTurncoat(textStyle: textTheme?.headline),
      title: GoogleFonts.walterTurncoat(textStyle: textTheme?.title),
      subhead: GoogleFonts.walterTurncoat(textStyle: textTheme?.subhead),
      body2: GoogleFonts.walterTurncoat(textStyle: textTheme?.body2),
      body1: GoogleFonts.walterTurncoat(textStyle: textTheme?.body1),
      caption: GoogleFonts.walterTurncoat(textStyle: textTheme?.caption),
      button: GoogleFonts.walterTurncoat(textStyle: textTheme?.button),
      subtitle: GoogleFonts.walterTurncoat(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.walterTurncoat(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Warnes font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Warnes
  static TextStyle warnes({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/warnes/v9/pONn1hc0GsW6sW5OpiC2o6Lkqg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Warnes',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Warnes font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Warnes
  static TextTheme warnesTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.warnes(textStyle: textTheme?.display4),
      display3: GoogleFonts.warnes(textStyle: textTheme?.display3),
      display2: GoogleFonts.warnes(textStyle: textTheme?.display2),
      display1: GoogleFonts.warnes(textStyle: textTheme?.display1),
      headline: GoogleFonts.warnes(textStyle: textTheme?.headline),
      title: GoogleFonts.warnes(textStyle: textTheme?.title),
      subhead: GoogleFonts.warnes(textStyle: textTheme?.subhead),
      body2: GoogleFonts.warnes(textStyle: textTheme?.body2),
      body1: GoogleFonts.warnes(textStyle: textTheme?.body1),
      caption: GoogleFonts.warnes(textStyle: textTheme?.caption),
      button: GoogleFonts.warnes(textStyle: textTheme?.button),
      subtitle: GoogleFonts.warnes(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.warnes(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Wellfleet font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wellfleet
  static TextStyle wellfleet({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/wellfleet/v7/nuF7D_LfQJb3VYgX6eyT42aLDhO2HA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Wellfleet',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Wellfleet font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wellfleet
  static TextTheme wellfleetTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.wellfleet(textStyle: textTheme?.display4),
      display3: GoogleFonts.wellfleet(textStyle: textTheme?.display3),
      display2: GoogleFonts.wellfleet(textStyle: textTheme?.display2),
      display1: GoogleFonts.wellfleet(textStyle: textTheme?.display1),
      headline: GoogleFonts.wellfleet(textStyle: textTheme?.headline),
      title: GoogleFonts.wellfleet(textStyle: textTheme?.title),
      subhead: GoogleFonts.wellfleet(textStyle: textTheme?.subhead),
      body2: GoogleFonts.wellfleet(textStyle: textTheme?.body2),
      body1: GoogleFonts.wellfleet(textStyle: textTheme?.body1),
      caption: GoogleFonts.wellfleet(textStyle: textTheme?.caption),
      button: GoogleFonts.wellfleet(textStyle: textTheme?.button),
      subtitle: GoogleFonts.wellfleet(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.wellfleet(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Wendy One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wendy+One
  static TextStyle wendyOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/wendyone/v8/2sDcZGJOipXfgfXV5wgDb2-4C7wFZQ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WendyOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Wendy One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wendy+One
  static TextTheme wendyOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.wendyOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.wendyOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.wendyOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.wendyOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.wendyOne(textStyle: textTheme?.headline),
      title: GoogleFonts.wendyOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.wendyOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.wendyOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.wendyOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.wendyOne(textStyle: textTheme?.caption),
      button: GoogleFonts.wendyOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.wendyOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.wendyOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Wire One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wire+One
  static TextStyle wireOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/wireone/v10/qFdH35Wah5htUhV75WGiWdrCwwcJ.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WireOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Wire One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Wire+One
  static TextTheme wireOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.wireOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.wireOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.wireOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.wireOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.wireOne(textStyle: textTheme?.headline),
      title: GoogleFonts.wireOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.wireOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.wireOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.wireOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.wireOne(textStyle: textTheme?.caption),
      button: GoogleFonts.wireOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.wireOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.wireOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Work Sans font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Work+Sans
  static TextStyle workSans({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYqz_wNahGAdqQ43Rh3H6DstfxA4OD3.ttf',
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYpz_wNahGAdqQ43Rh3s4HMn9JM6fnuKg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYpz_wNahGAdqQ43Rh314LMn9JM6fnuKg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYsz_wNahGAdqQ43RhPe6rol_lQ4A.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYpz_wNahGAdqQ43Rh3j4PMn9JM6fnuKg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYpz_wNahGAdqQ43Rh3o4TMn9JM6fnuKg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYpz_wNahGAdqQ43Rh3x4XMn9JM6fnuKg.ttf',
      GoogleFontsVariant.fromString('800'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYpz_wNahGAdqQ43Rh324bMn9JM6fnuKg.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/worksans/v5/QGYpz_wNahGAdqQ43Rh3_4fMn9JM6fnuKg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'WorkSans',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Work Sans font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Work+Sans
  static TextTheme workSansTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.workSans(textStyle: textTheme?.display4),
      display3: GoogleFonts.workSans(textStyle: textTheme?.display3),
      display2: GoogleFonts.workSans(textStyle: textTheme?.display2),
      display1: GoogleFonts.workSans(textStyle: textTheme?.display1),
      headline: GoogleFonts.workSans(textStyle: textTheme?.headline),
      title: GoogleFonts.workSans(textStyle: textTheme?.title),
      subhead: GoogleFonts.workSans(textStyle: textTheme?.subhead),
      body2: GoogleFonts.workSans(textStyle: textTheme?.body2),
      body1: GoogleFonts.workSans(textStyle: textTheme?.body1),
      caption: GoogleFonts.workSans(textStyle: textTheme?.caption),
      button: GoogleFonts.workSans(textStyle: textTheme?.button),
      subtitle: GoogleFonts.workSans(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.workSans(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yanone Kaffeesatz font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yanone+Kaffeesatz
  static TextStyle yanoneKaffeesatz({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('200'):
          'https://fonts.gstatic.com/s/yanonekaffeesatz/v13/3y9I6aknfjLm_3lMKjiMgmUUYBs04aUXNxt9gW2LIftodtWpcGuLCnXkVA.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/yanonekaffeesatz/v13/3y9I6aknfjLm_3lMKjiMgmUUYBs04aUXNxt9gW2LIftoqNWpcGuLCnXkVA.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/yanonekaffeesatz/v13/3y9I6aknfjLm_3lMKjiMgmUUYBs04aUXNxt9gW2LIfto9tWpcGuLCnXkVA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/yanonekaffeesatz/v13/3y9I6aknfjLm_3lMKjiMgmUUYBs04aUXNxt9gW2LIftoxNWpcGuLCnXkVA.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/yanonekaffeesatz/v13/3y9I6aknfjLm_3lMKjiMgmUUYBs04aUXNxt9gW2LIftoKNKpcGuLCnXkVA.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/yanonekaffeesatz/v13/3y9I6aknfjLm_3lMKjiMgmUUYBs04aUXNxt9gW2LIftoEdKpcGuLCnXkVA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YanoneKaffeesatz',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yanone Kaffeesatz font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yanone+Kaffeesatz
  static TextTheme yanoneKaffeesatzTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.display4),
      display3: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.display3),
      display2: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.display2),
      display1: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.display1),
      headline: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.headline),
      title: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.title),
      subhead: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.body2),
      body1: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.body1),
      caption: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.caption),
      button: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yanoneKaffeesatz(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yantramanav font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yantramanav
  static TextStyle yantramanav({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('100'):
          'https://fonts.gstatic.com/s/yantramanav/v5/flU-Rqu5zY00QEpyWJYWN5-QXeNzDB41rZg.ttf',
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/yantramanav/v5/flUhRqu5zY00QEpyWJYWN59Yf8NZIhI8tIHh.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/yantramanav/v5/flU8Rqu5zY00QEpyWJYWN6f0V-dRCQ41.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/yantramanav/v5/flUhRqu5zY00QEpyWJYWN58AfsNZIhI8tIHh.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/yantramanav/v5/flUhRqu5zY00QEpyWJYWN59IeMNZIhI8tIHh.ttf',
      GoogleFontsVariant.fromString('900'):
          'https://fonts.gstatic.com/s/yantramanav/v5/flUhRqu5zY00QEpyWJYWN59wesNZIhI8tIHh.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Yantramanav',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yantramanav font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yantramanav
  static TextTheme yantramanavTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yantramanav(textStyle: textTheme?.display4),
      display3: GoogleFonts.yantramanav(textStyle: textTheme?.display3),
      display2: GoogleFonts.yantramanav(textStyle: textTheme?.display2),
      display1: GoogleFonts.yantramanav(textStyle: textTheme?.display1),
      headline: GoogleFonts.yantramanav(textStyle: textTheme?.headline),
      title: GoogleFonts.yantramanav(textStyle: textTheme?.title),
      subhead: GoogleFonts.yantramanav(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yantramanav(textStyle: textTheme?.body2),
      body1: GoogleFonts.yantramanav(textStyle: textTheme?.body1),
      caption: GoogleFonts.yantramanav(textStyle: textTheme?.caption),
      button: GoogleFonts.yantramanav(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yantramanav(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yantramanav(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yatra One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yatra+One
  static TextStyle yatraOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/yatraone/v6/C8ch4copsHzj8p7NaF0xw1OBbRDvXw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YatraOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yatra One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yatra+One
  static TextTheme yatraOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yatraOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.yatraOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.yatraOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.yatraOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.yatraOne(textStyle: textTheme?.headline),
      title: GoogleFonts.yatraOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.yatraOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yatraOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.yatraOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.yatraOne(textStyle: textTheme?.caption),
      button: GoogleFonts.yatraOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yatraOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yatraOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yellowtail font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yellowtail
  static TextStyle yellowtail({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/yellowtail/v10/OZpGg_pnoDtINPfRIlLotlzNwED-b4g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Yellowtail',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yellowtail font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yellowtail
  static TextTheme yellowtailTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yellowtail(textStyle: textTheme?.display4),
      display3: GoogleFonts.yellowtail(textStyle: textTheme?.display3),
      display2: GoogleFonts.yellowtail(textStyle: textTheme?.display2),
      display1: GoogleFonts.yellowtail(textStyle: textTheme?.display1),
      headline: GoogleFonts.yellowtail(textStyle: textTheme?.headline),
      title: GoogleFonts.yellowtail(textStyle: textTheme?.title),
      subhead: GoogleFonts.yellowtail(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yellowtail(textStyle: textTheme?.body2),
      body1: GoogleFonts.yellowtail(textStyle: textTheme?.body1),
      caption: GoogleFonts.yellowtail(textStyle: textTheme?.caption),
      button: GoogleFonts.yellowtail(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yellowtail(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yellowtail(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yeon Sung font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yeon+Sung
  static TextStyle yeonSung({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/yeonsung/v8/QldMNTpbohAGtsJvUn6xSVNazqx2xg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YeonSung',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yeon Sung font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yeon+Sung
  static TextTheme yeonSungTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yeonSung(textStyle: textTheme?.display4),
      display3: GoogleFonts.yeonSung(textStyle: textTheme?.display3),
      display2: GoogleFonts.yeonSung(textStyle: textTheme?.display2),
      display1: GoogleFonts.yeonSung(textStyle: textTheme?.display1),
      headline: GoogleFonts.yeonSung(textStyle: textTheme?.headline),
      title: GoogleFonts.yeonSung(textStyle: textTheme?.title),
      subhead: GoogleFonts.yeonSung(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yeonSung(textStyle: textTheme?.body2),
      body1: GoogleFonts.yeonSung(textStyle: textTheme?.body1),
      caption: GoogleFonts.yeonSung(textStyle: textTheme?.caption),
      button: GoogleFonts.yeonSung(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yeonSung(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yeonSung(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yeseva One font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yeseva+One
  static TextStyle yesevaOne({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/yesevaone/v14/OpNJno4ck8vc-xYpwWWxpipfWhXD00c.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'YesevaOne',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yeseva One font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yeseva+One
  static TextTheme yesevaOneTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yesevaOne(textStyle: textTheme?.display4),
      display3: GoogleFonts.yesevaOne(textStyle: textTheme?.display3),
      display2: GoogleFonts.yesevaOne(textStyle: textTheme?.display2),
      display1: GoogleFonts.yesevaOne(textStyle: textTheme?.display1),
      headline: GoogleFonts.yesevaOne(textStyle: textTheme?.headline),
      title: GoogleFonts.yesevaOne(textStyle: textTheme?.title),
      subhead: GoogleFonts.yesevaOne(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yesevaOne(textStyle: textTheme?.body2),
      body1: GoogleFonts.yesevaOne(textStyle: textTheme?.body1),
      caption: GoogleFonts.yesevaOne(textStyle: textTheme?.caption),
      button: GoogleFonts.yesevaOne(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yesevaOne(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yesevaOne(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yesteryear font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yesteryear
  static TextStyle yesteryear({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/yesteryear/v8/dg4g_p78rroaKl8kRKo1r7wHTwonmyw.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Yesteryear',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yesteryear font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yesteryear
  static TextTheme yesteryearTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yesteryear(textStyle: textTheme?.display4),
      display3: GoogleFonts.yesteryear(textStyle: textTheme?.display3),
      display2: GoogleFonts.yesteryear(textStyle: textTheme?.display2),
      display1: GoogleFonts.yesteryear(textStyle: textTheme?.display1),
      headline: GoogleFonts.yesteryear(textStyle: textTheme?.headline),
      title: GoogleFonts.yesteryear(textStyle: textTheme?.title),
      subhead: GoogleFonts.yesteryear(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yesteryear(textStyle: textTheme?.body2),
      body1: GoogleFonts.yesteryear(textStyle: textTheme?.body1),
      caption: GoogleFonts.yesteryear(textStyle: textTheme?.caption),
      button: GoogleFonts.yesteryear(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yesteryear(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yesteryear(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Yrsa font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yrsa
  static TextStyle yrsa({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/yrsa/v5/wlpxgwnQFlxs3af93IQ73W5OcCk.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/yrsa/v5/wlp-gwnQFlxs5QvV-IwQwWc.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/yrsa/v5/wlpxgwnQFlxs3f_83IQ73W5OcCk.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/yrsa/v5/wlpxgwnQFlxs3dP73IQ73W5OcCk.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/yrsa/v5/wlpxgwnQFlxs3bf63IQ73W5OcCk.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Yrsa',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Yrsa font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Yrsa
  static TextTheme yrsaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.yrsa(textStyle: textTheme?.display4),
      display3: GoogleFonts.yrsa(textStyle: textTheme?.display3),
      display2: GoogleFonts.yrsa(textStyle: textTheme?.display2),
      display1: GoogleFonts.yrsa(textStyle: textTheme?.display1),
      headline: GoogleFonts.yrsa(textStyle: textTheme?.headline),
      title: GoogleFonts.yrsa(textStyle: textTheme?.title),
      subhead: GoogleFonts.yrsa(textStyle: textTheme?.subhead),
      body2: GoogleFonts.yrsa(textStyle: textTheme?.body2),
      body1: GoogleFonts.yrsa(textStyle: textTheme?.body1),
      caption: GoogleFonts.yrsa(textStyle: textTheme?.caption),
      button: GoogleFonts.yrsa(textStyle: textTheme?.button),
      subtitle: GoogleFonts.yrsa(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.yrsa(textStyle: textTheme?.overline),
    );
  }

  /// Applies the ZCOOL KuaiLe font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+KuaiLe
  static TextStyle zCOOLKuaiLe({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/zcoolkuaile/v5/tssqApdaRQokwFjFJjvM6h2WpozzoXhC2g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZCOOLKuaiLe',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the ZCOOL KuaiLe font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+KuaiLe
  static TextTheme zCOOLKuaiLeTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.display4),
      display3: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.display3),
      display2: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.display2),
      display1: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.display1),
      headline: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.headline),
      title: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.title),
      subhead: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.body2),
      body1: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.body1),
      caption: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.caption),
      button: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zCOOLKuaiLe(textStyle: textTheme?.overline),
    );
  }

  /// Applies the ZCOOL QingKe HuangYou font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+QingKe+HuangYou
  static TextStyle zCOOLQingKeHuangYou({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/zcoolqingkehuangyou/v5/2Eb5L_R5IXJEWhD3AOhSvFC554MOOahI4mRIi_28c8bHWA.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZCOOLQingKeHuangYou',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the ZCOOL QingKe HuangYou font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+QingKe+HuangYou
  static TextTheme zCOOLQingKeHuangYouTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.display4),
      display3: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.display3),
      display2: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.display2),
      display1: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.display1),
      headline: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.headline),
      title: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.title),
      subhead: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.body2),
      body1: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.body1),
      caption: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.caption),
      button: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zCOOLQingKeHuangYou(textStyle: textTheme?.overline),
    );
  }

  /// Applies the ZCOOL XiaoWei font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+XiaoWei
  static TextStyle zCOOLXiaoWei({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/zcoolxiaowei/v5/i7dMIFFrTRywPpUVX9_RJyM1YFKQHwyVd3U.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZCOOLXiaoWei',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the ZCOOL XiaoWei font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/ZCOOL+XiaoWei
  static TextTheme zCOOLXiaoWeiTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.display4),
      display3: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.display3),
      display2: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.display2),
      display1: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.display1),
      headline: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.headline),
      title: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.title),
      subhead: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.body2),
      body1: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.body1),
      caption: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.caption),
      button: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zCOOLXiaoWei(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Zeyada font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zeyada
  static TextStyle zeyada({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/zeyada/v9/11hAGpPTxVPUbgZDNGatWKaZ3g.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'Zeyada',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Zeyada font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zeyada
  static TextTheme zeyadaTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zeyada(textStyle: textTheme?.display4),
      display3: GoogleFonts.zeyada(textStyle: textTheme?.display3),
      display2: GoogleFonts.zeyada(textStyle: textTheme?.display2),
      display1: GoogleFonts.zeyada(textStyle: textTheme?.display1),
      headline: GoogleFonts.zeyada(textStyle: textTheme?.headline),
      title: GoogleFonts.zeyada(textStyle: textTheme?.title),
      subhead: GoogleFonts.zeyada(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zeyada(textStyle: textTheme?.body2),
      body1: GoogleFonts.zeyada(textStyle: textTheme?.body1),
      caption: GoogleFonts.zeyada(textStyle: textTheme?.caption),
      button: GoogleFonts.zeyada(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zeyada(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zeyada(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Zhi Mang Xing font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zhi+Mang+Xing
  static TextStyle zhiMangXing({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/zhimangxing/v5/f0Xw0ey79sErYFtWQ9a2rq-g0actfektIJ0.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZhiMangXing',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Zhi Mang Xing font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zhi+Mang+Xing
  static TextTheme zhiMangXingTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zhiMangXing(textStyle: textTheme?.display4),
      display3: GoogleFonts.zhiMangXing(textStyle: textTheme?.display3),
      display2: GoogleFonts.zhiMangXing(textStyle: textTheme?.display2),
      display1: GoogleFonts.zhiMangXing(textStyle: textTheme?.display1),
      headline: GoogleFonts.zhiMangXing(textStyle: textTheme?.headline),
      title: GoogleFonts.zhiMangXing(textStyle: textTheme?.title),
      subhead: GoogleFonts.zhiMangXing(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zhiMangXing(textStyle: textTheme?.body2),
      body1: GoogleFonts.zhiMangXing(textStyle: textTheme?.body1),
      caption: GoogleFonts.zhiMangXing(textStyle: textTheme?.caption),
      button: GoogleFonts.zhiMangXing(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zhiMangXing(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zhiMangXing(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Zilla Slab font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zilla+Slab
  static TextStyle zillaSlab({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('300'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFa5ZfeM_74wlPZtksIFYpEY2HSjWlhzbaw.ttf',
      GoogleFontsVariant.fromString('300italic'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFanZfeM_74wlPZtksIFaj8CVHapXnp2fazkfg.ttf',
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFa6ZfeM_74wlPZtksIFWj0w_HyIRlE.ttf',
      GoogleFontsVariant.fromString('italic'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFa4ZfeM_74wlPZtksIFaj86-F6NVlFqdA.ttf',
      GoogleFontsVariant.fromString('500'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFa5ZfeM_74wlPZtksIFYskZ2HSjWlhzbaw.ttf',
      GoogleFontsVariant.fromString('500italic'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFanZfeM_74wlPZtksIFaj8CDHepXnp2fazkfg.ttf',
      GoogleFontsVariant.fromString('600'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFa5ZfeM_74wlPZtksIFYuUe2HSjWlhzbaw.ttf',
      GoogleFontsVariant.fromString('600italic'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFanZfeM_74wlPZtksIFaj8CIHCpXnp2fazkfg.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFa5ZfeM_74wlPZtksIFYoEf2HSjWlhzbaw.ttf',
      GoogleFontsVariant.fromString('700italic'):
          'https://fonts.gstatic.com/s/zillaslab/v5/dFanZfeM_74wlPZtksIFaj8CRHGpXnp2fazkfg.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZillaSlab',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Zilla Slab font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zilla+Slab
  static TextTheme zillaSlabTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zillaSlab(textStyle: textTheme?.display4),
      display3: GoogleFonts.zillaSlab(textStyle: textTheme?.display3),
      display2: GoogleFonts.zillaSlab(textStyle: textTheme?.display2),
      display1: GoogleFonts.zillaSlab(textStyle: textTheme?.display1),
      headline: GoogleFonts.zillaSlab(textStyle: textTheme?.headline),
      title: GoogleFonts.zillaSlab(textStyle: textTheme?.title),
      subhead: GoogleFonts.zillaSlab(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zillaSlab(textStyle: textTheme?.body2),
      body1: GoogleFonts.zillaSlab(textStyle: textTheme?.body1),
      caption: GoogleFonts.zillaSlab(textStyle: textTheme?.caption),
      button: GoogleFonts.zillaSlab(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zillaSlab(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zillaSlab(textStyle: textTheme?.overline),
    );
  }

  /// Applies the Zilla Slab Highlight font family from Google Fonts to the given [textStyle].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zilla+Slab+Highlight
  static TextStyle zillaSlabHighlight({
    TextStyle textStyle,
    Color color,
    Color backgroundColor,
    double fontSize,
    FontWeight fontWeight,
    FontStyle fontStyle,
    double letterSpacing,
    double wordSpacing,
    TextBaseline textBaseline,
    double height,
    Locale locale,
    Paint foreground,
    Paint background,
    List<ui.Shadow> shadows,
    List<ui.FontFeature> fontFeatures,
    TextDecoration decoration,
    Color decorationColor,
    TextDecorationStyle decorationStyle,
    double decorationThickness,
  }) {
    final fonts = <GoogleFontsVariant, String>{
      GoogleFontsVariant.fromString('regular'):
          'https://fonts.gstatic.com/s/zillaslabhighlight/v7/gNMbW2BrTpK8-inLtBJgMMfbm6uNVDvRxhtIY2DwSXlM.ttf',
      GoogleFontsVariant.fromString('700'):
          'https://fonts.gstatic.com/s/zillaslabhighlight/v7/gNMUW2BrTpK8-inLtBJgMMfbm6uNVDvRxiP0TET4YmVF0Mb6.ttf',
    };

    return googleFontsTextStyle(
      textStyle: textStyle,
      fontFamily: 'ZillaSlabHighlight',
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      fonts: fonts,
    );
  }

  /// Applies the Zilla Slab Highlight font family from Google Fonts to every [TextStyle] in the
  /// given [textTheme].
  ///
  /// See:
  ///  * https://fonts.google.com/specimen/Zilla+Slab+Highlight
  static TextTheme zillaSlabHighlightTextTheme([TextTheme textTheme]) {
    textTheme ??= ThemeData.light().textTheme;
    return TextTheme(
      display4: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.display4),
      display3: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.display3),
      display2: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.display2),
      display1: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.display1),
      headline: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.headline),
      title: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.title),
      subhead: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.subhead),
      body2: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.body2),
      body1: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.body1),
      caption: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.caption),
      button: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.button),
      subtitle: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.subtitle),
      overline: GoogleFonts.zillaSlabHighlight(textStyle: textTheme?.overline),
    );
  }
}
